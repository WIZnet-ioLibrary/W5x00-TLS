
W5x00-TLS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e54  0800f85c  0800f85c  0001f85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080146b0  080146b0  000246b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080146b8  080146b8  000246b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080146bc  080146bc  000246bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f0  20000000  080146c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300f0  2**0
                  CONTENTS
  8 .bss          00002f14  200000f0  200000f0  000300f0  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20003004  20003004  000300f0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003d0d3  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007bbd  00000000  00000000  0006d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001f750  00000000  00000000  00074db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e0  00000000  00000000  00094500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022c0  00000000  00000000  00095ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000e947  00000000  00000000  00097fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000083de  00000000  00000000  000a68e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000aecc5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000537c  00000000  00000000  000aed44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f844 	.word	0x0800f844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0800f844 	.word	0x0800f844

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f888 	bl	80006cc <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000058 	.word	0x20000058
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f00c fea4 	bl	800d35c <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20002760 	.word	0x20002760
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20002760 	.word	0x20002760

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d2:	d20a      	bcs.n	80006ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	21f0      	movs	r1, #240	; 0xf0
 80006dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006fc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000890 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000704:	4a60      	ldr	r2, [pc, #384]	; (8000888 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000706:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000708:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800070c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070e:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000710:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000714:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000716:	42ac      	cmp	r4, r5
 8000718:	f040 80a6 	bne.w	8000868 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071c:	684c      	ldr	r4, [r1, #4]
 800071e:	f024 0c10 	bic.w	ip, r4, #16
 8000722:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000726:	2e01      	cmp	r6, #1
 8000728:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800072c:	d812      	bhi.n	8000754 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800072e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000730:	2603      	movs	r6, #3
 8000732:	fa06 f60e 	lsl.w	r6, r6, lr
 8000736:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073a:	68ce      	ldr	r6, [r1, #12]
 800073c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000740:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000742:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000744:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000746:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800074a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074e:	409e      	lsls	r6, r3
 8000750:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000752:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000754:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000756:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000758:	fa06 f60e 	lsl.w	r6, r6, lr
 800075c:	43f6      	mvns	r6, r6
 800075e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000762:	688f      	ldr	r7, [r1, #8]
 8000764:	fa07 f70e 	lsl.w	r7, r7, lr
 8000768:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000770:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000772:	d116      	bne.n	80007a2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000774:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000778:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800077c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000780:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000784:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000788:	f04f 0c0f 	mov.w	ip, #15
 800078c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000790:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000794:	690f      	ldr	r7, [r1, #16]
 8000796:	fa07 f70b 	lsl.w	r7, r7, fp
 800079a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800079e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007a2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a6:	f004 0703 	and.w	r7, r4, #3
 80007aa:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007ae:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007b2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007b4:	00e6      	lsls	r6, r4, #3
 80007b6:	d557      	bpl.n	8000868 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b8:	f04f 0b00 	mov.w	fp, #0
 80007bc:	f8cd b00c 	str.w	fp, [sp, #12]
 80007c0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c4:	4e31      	ldr	r6, [pc, #196]	; (800088c <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007ca:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007d2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007d6:	9703      	str	r7, [sp, #12]
 80007d8:	9f03      	ldr	r7, [sp, #12]
 80007da:	f023 0703 	bic.w	r7, r3, #3
 80007de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007e6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ea:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007f2:	f04f 0e0f 	mov.w	lr, #15
 80007f6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fa:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007fc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000800:	d039      	beq.n	8000876 <HAL_GPIO_Init+0x17e>
 8000802:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000806:	42b0      	cmp	r0, r6
 8000808:	d037      	beq.n	800087a <HAL_GPIO_Init+0x182>
 800080a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800080e:	42b0      	cmp	r0, r6
 8000810:	d035      	beq.n	800087e <HAL_GPIO_Init+0x186>
 8000812:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000816:	42b0      	cmp	r0, r6
 8000818:	d033      	beq.n	8000882 <HAL_GPIO_Init+0x18a>
 800081a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800081e:	42b0      	cmp	r0, r6
 8000820:	bf14      	ite	ne
 8000822:	2607      	movne	r6, #7
 8000824:	2604      	moveq	r6, #4
 8000826:	fa06 f60c 	lsl.w	r6, r6, ip
 800082a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800082e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000830:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000832:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000834:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000838:	bf0c      	ite	eq
 800083a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800083c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800083e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000840:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000842:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000846:	bf0c      	ite	eq
 8000848:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800084a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800084c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800084e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000850:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000854:	bf0c      	ite	eq
 8000856:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000858:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800085a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800085c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800085e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000860:	bf54      	ite	pl
 8000862:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000864:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000866:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000868:	3301      	adds	r3, #1
 800086a:	2b10      	cmp	r3, #16
 800086c:	f47f af4f 	bne.w	800070e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000870:	b005      	add	sp, #20
 8000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000876:	465e      	mov	r6, fp
 8000878:	e7d5      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 800087a:	2601      	movs	r6, #1
 800087c:	e7d3      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 800087e:	2602      	movs	r6, #2
 8000880:	e7d1      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 8000882:	2603      	movs	r6, #3
 8000884:	e7cf      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 8000886:	bf00      	nop
 8000888:	40013c00 	.word	0x40013c00
 800088c:	40020000 	.word	0x40020000
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000894:	b10a      	cbz	r2, 800089a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000896:	6181      	str	r1, [r0, #24]
 8000898:	4770      	bx	lr
 800089a:	0409      	lsls	r1, r1, #16
 800089c:	e7fb      	b.n	8000896 <HAL_GPIO_WritePin+0x2>
	...

080008a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008a4:	4604      	mov	r4, r0
 80008a6:	b908      	cbnz	r0, 80008ac <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008a8:	2001      	movs	r0, #1
 80008aa:	e03f      	b.n	800092c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ac:	6803      	ldr	r3, [r0, #0]
 80008ae:	07dd      	lsls	r5, r3, #31
 80008b0:	d410      	bmi.n	80008d4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	0798      	lsls	r0, r3, #30
 80008b6:	d45a      	bmi.n	800096e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	071a      	lsls	r2, r3, #28
 80008bc:	f100 809c 	bmi.w	80009f8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	075b      	lsls	r3, r3, #29
 80008c4:	f100 80ba 	bmi.w	8000a3c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008c8:	69a0      	ldr	r0, [r4, #24]
 80008ca:	2800      	cmp	r0, #0
 80008cc:	f040 811b 	bne.w	8000b06 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80008d0:	2000      	movs	r0, #0
 80008d2:	e02b      	b.n	800092c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008d4:	4ba4      	ldr	r3, [pc, #656]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	f002 020c 	and.w	r2, r2, #12
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d007      	beq.n	80008f0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008e6:	2a08      	cmp	r2, #8
 80008e8:	d10a      	bne.n	8000900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	0259      	lsls	r1, r3, #9
 80008ee:	d507      	bpl.n	8000900 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f0:	4b9d      	ldr	r3, [pc, #628]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	039a      	lsls	r2, r3, #14
 80008f6:	d5dc      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x12>
 80008f8:	6863      	ldr	r3, [r4, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1d9      	bne.n	80008b2 <HAL_RCC_OscConfig+0x12>
 80008fe:	e7d3      	b.n	80008a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000900:	6863      	ldr	r3, [r4, #4]
 8000902:	4d99      	ldr	r5, [pc, #612]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000908:	d113      	bne.n	8000932 <HAL_RCC_OscConfig+0x92>
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000910:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000912:	f7ff fe8f 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000916:	4d94      	ldr	r5, [pc, #592]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000918:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091a:	682b      	ldr	r3, [r5, #0]
 800091c:	039b      	lsls	r3, r3, #14
 800091e:	d4c8      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000920:	f7ff fe88 	bl	8000634 <HAL_GetTick>
 8000924:	1b80      	subs	r0, r0, r6
 8000926:	2864      	cmp	r0, #100	; 0x64
 8000928:	d9f7      	bls.n	800091a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800092a:	2003      	movs	r0, #3
}
 800092c:	b002      	add	sp, #8
 800092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000936:	d104      	bne.n	8000942 <HAL_RCC_OscConfig+0xa2>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093e:	602b      	str	r3, [r5, #0]
 8000940:	e7e3      	b.n	800090a <HAL_RCC_OscConfig+0x6a>
 8000942:	682a      	ldr	r2, [r5, #0]
 8000944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000948:	602a      	str	r2, [r5, #0]
 800094a:	682a      	ldr	r2, [r5, #0]
 800094c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000950:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1dd      	bne.n	8000912 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000956:	f7ff fe6d 	bl	8000634 <HAL_GetTick>
 800095a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	039f      	lsls	r7, r3, #14
 8000960:	d5a7      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000962:	f7ff fe67 	bl	8000634 <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	2864      	cmp	r0, #100	; 0x64
 800096a:	d9f7      	bls.n	800095c <HAL_RCC_OscConfig+0xbc>
 800096c:	e7dd      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800096e:	4b7e      	ldr	r3, [pc, #504]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	f012 0f0c 	tst.w	r2, #12
 8000976:	d007      	beq.n	8000988 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800097e:	2a08      	cmp	r2, #8
 8000980:	d111      	bne.n	80009a6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	025e      	lsls	r6, r3, #9
 8000986:	d40e      	bmi.n	80009a6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000988:	4b77      	ldr	r3, [pc, #476]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	0795      	lsls	r5, r2, #30
 800098e:	d502      	bpl.n	8000996 <HAL_RCC_OscConfig+0xf6>
 8000990:	68e2      	ldr	r2, [r4, #12]
 8000992:	2a01      	cmp	r2, #1
 8000994:	d188      	bne.n	80008a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	6921      	ldr	r1, [r4, #16]
 800099a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800099e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a4:	e788      	b.n	80008b8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009a6:	68e2      	ldr	r2, [r4, #12]
 80009a8:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <HAL_RCC_OscConfig+0x2cc>)
 80009aa:	b1b2      	cbz	r2, 80009da <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fe40 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	4d6c      	ldr	r5, [pc, #432]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	0798      	lsls	r0, r3, #30
 80009bc:	d507      	bpl.n	80009ce <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009be:	682b      	ldr	r3, [r5, #0]
 80009c0:	6922      	ldr	r2, [r4, #16]
 80009c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	e774      	b.n	80008b8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fe31 	bl	8000634 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9ef      	bls.n	80009b8 <HAL_RCC_OscConfig+0x118>
 80009d8:	e7a7      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80009da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fe2a 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e0:	4d61      	ldr	r5, [pc, #388]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	0799      	lsls	r1, r3, #30
 80009e8:	f57f af66 	bpl.w	80008b8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ec:	f7ff fe22 	bl	8000634 <HAL_GetTick>
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	2802      	cmp	r0, #2
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0x144>
 80009f6:	e798      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009f8:	6962      	ldr	r2, [r4, #20]
 80009fa:	4b5d      	ldr	r3, [pc, #372]	; (8000b70 <HAL_RCC_OscConfig+0x2d0>)
 80009fc:	b17a      	cbz	r2, 8000a1e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a02:	f7ff fe17 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a06:	4d58      	ldr	r5, [pc, #352]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a08:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0c:	079f      	lsls	r7, r3, #30
 8000a0e:	f53f af57 	bmi.w	80008c0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a12:	f7ff fe0f 	bl	8000634 <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	2802      	cmp	r0, #2
 8000a1a:	d9f6      	bls.n	8000a0a <HAL_RCC_OscConfig+0x16a>
 8000a1c:	e785      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a20:	f7ff fe08 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a24:	4d50      	ldr	r5, [pc, #320]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a2a:	0798      	lsls	r0, r3, #30
 8000a2c:	f57f af48 	bpl.w	80008c0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a30:	f7ff fe00 	bl	8000634 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f6      	bls.n	8000a28 <HAL_RCC_OscConfig+0x188>
 8000a3a:	e776      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a40:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a44:	d128      	bne.n	8000a98 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a5a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5c:	4d45      	ldr	r5, [pc, #276]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	05d9      	lsls	r1, r3, #23
 8000a62:	d51b      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a64:	68a3      	ldr	r3, [r4, #8]
 8000a66:	4d40      	ldr	r5, [pc, #256]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d127      	bne.n	8000abc <HAL_RCC_OscConfig+0x21c>
 8000a6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a74:	f7ff fdde 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a78:	4d3b      	ldr	r5, [pc, #236]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a7a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a82:	079b      	lsls	r3, r3, #30
 8000a84:	d539      	bpl.n	8000afa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	f43f af1e 	beq.w	80008c8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a8c:	4a36      	ldr	r2, [pc, #216]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000a8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	e717      	b.n	80008c8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e7df      	b.n	8000a5c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000aa4:	f7ff fdc6 	bl	8000634 <HAL_GetTick>
 8000aa8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	05da      	lsls	r2, r3, #23
 8000aae:	d4d9      	bmi.n	8000a64 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab0:	f7ff fdc0 	bl	8000634 <HAL_GetTick>
 8000ab4:	1bc0      	subs	r0, r0, r7
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9f7      	bls.n	8000aaa <HAL_RCC_OscConfig+0x20a>
 8000aba:	e736      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d104      	bne.n	8000aca <HAL_RCC_OscConfig+0x22a>
 8000ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	672b      	str	r3, [r5, #112]	; 0x70
 8000ac8:	e7d0      	b.n	8000a6c <HAL_RCC_OscConfig+0x1cc>
 8000aca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000acc:	f022 0201 	bic.w	r2, r2, #1
 8000ad0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ad2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ad4:	f022 0204 	bic.w	r2, r2, #4
 8000ad8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1ca      	bne.n	8000a74 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ade:	f7ff fda9 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ae6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aea:	0798      	lsls	r0, r3, #30
 8000aec:	d5cb      	bpl.n	8000a86 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aee:	f7ff fda1 	bl	8000634 <HAL_GetTick>
 8000af2:	1bc0      	subs	r0, r0, r7
 8000af4:	4540      	cmp	r0, r8
 8000af6:	d9f7      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x248>
 8000af8:	e717      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afa:	f7ff fd9b 	bl	8000634 <HAL_GetTick>
 8000afe:	1bc0      	subs	r0, r0, r7
 8000b00:	4540      	cmp	r0, r8
 8000b02:	d9bd      	bls.n	8000a80 <HAL_RCC_OscConfig+0x1e0>
 8000b04:	e711      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b06:	4d18      	ldr	r5, [pc, #96]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000b08:	68ab      	ldr	r3, [r5, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d047      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x302>
 8000b12:	4e19      	ldr	r6, [pc, #100]	; (8000b78 <HAL_RCC_OscConfig+0x2d8>)
 8000b14:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b18:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b1a:	d135      	bne.n	8000b88 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fd8a 	bl	8000634 <HAL_GetTick>
 8000b20:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b22:	682b      	ldr	r3, [r5, #0]
 8000b24:	0199      	lsls	r1, r3, #6
 8000b26:	d429      	bmi.n	8000b7c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b28:	6a22      	ldr	r2, [r4, #32]
 8000b2a:	69e3      	ldr	r3, [r4, #28]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b30:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b3e:	0852      	lsrs	r2, r2, #1
 8000b40:	3a01      	subs	r2, #1
 8000b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b46:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b4c:	f7ff fd72 	bl	8000634 <HAL_GetTick>
 8000b50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	019a      	lsls	r2, r3, #6
 8000b56:	f53f aebb 	bmi.w	80008d0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b5a:	f7ff fd6b 	bl	8000634 <HAL_GetTick>
 8000b5e:	1b40      	subs	r0, r0, r5
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d9f6      	bls.n	8000b52 <HAL_RCC_OscConfig+0x2b2>
 8000b64:	e6e1      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	42470000 	.word	0x42470000
 8000b70:	42470e80 	.word	0x42470e80
 8000b74:	40007000 	.word	0x40007000
 8000b78:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7c:	f7ff fd5a 	bl	8000634 <HAL_GetTick>
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	2802      	cmp	r0, #2
 8000b84:	d9cd      	bls.n	8000b22 <HAL_RCC_OscConfig+0x282>
 8000b86:	e6d0      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd54 	bl	8000634 <HAL_GetTick>
 8000b8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	f57f ae9d 	bpl.w	80008d0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fd4d 	bl	8000634 <HAL_GetTick>
 8000b9a:	1b00      	subs	r0, r0, r4
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x2ee>
 8000ba0:	e6c3      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ba2:	2801      	cmp	r0, #1
 8000ba4:	f43f aec2 	beq.w	800092c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000ba8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000baa:	69e3      	ldr	r3, [r4, #28]
 8000bac:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f47f ae79 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
 8000bb6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bb8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	f47f ae73 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bc8:	4003      	ands	r3, r0
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f47f ae6c 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bd2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f47f ae66 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000bde:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000be2:	1ac0      	subs	r0, r0, r3
 8000be4:	bf18      	it	ne
 8000be6:	2001      	movne	r0, #1
 8000be8:	e6a0      	b.n	800092c <HAL_RCC_OscConfig+0x8c>
 8000bea:	bf00      	nop

08000bec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf0:	688b      	ldr	r3, [r1, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d003      	beq.n	8000c02 <HAL_RCC_GetSysClockFreq+0x16>
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d003      	beq.n	8000c06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c10:	bf14      	ite	ne
 8000c12:	480c      	ldrne	r0, [pc, #48]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c14:	480a      	ldreq	r0, [pc, #40]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c1a:	bf18      	it	ne
 8000c1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c22:	fba1 0100 	umull	r0, r1, r1, r0
 8000c26:	f7ff fb33 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c32:	3301      	adds	r3, #1
 8000c34:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c3a:	bd08      	pop	{r3, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	00f42400 	.word	0x00f42400
 8000c44:	017d7840 	.word	0x017d7840

08000c48 <HAL_RCC_ClockConfig>:
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b910      	cbnz	r0, 8000c58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c58:	4b44      	ldr	r3, [pc, #272]	; (8000d6c <HAL_RCC_ClockConfig+0x124>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f002 020f 	and.w	r2, r2, #15
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d329      	bcc.n	8000cb8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c64:	6821      	ldr	r1, [r4, #0]
 8000c66:	078f      	lsls	r7, r1, #30
 8000c68:	d42e      	bmi.n	8000cc8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c6a:	07c8      	lsls	r0, r1, #31
 8000c6c:	d441      	bmi.n	8000cf2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_RCC_ClockConfig+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	f002 020f 	and.w	r2, r2, #15
 8000c76:	4295      	cmp	r5, r2
 8000c78:	d367      	bcc.n	8000d4a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	0751      	lsls	r1, r2, #29
 8000c7e:	d46d      	bmi.n	8000d5c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c80:	0713      	lsls	r3, r2, #28
 8000c82:	d507      	bpl.n	8000c94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c84:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000c86:	6921      	ldr	r1, [r4, #16]
 8000c88:	6893      	ldr	r3, [r2, #8]
 8000c8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c94:	f7ff ffaa 	bl	8000bec <HAL_RCC_GetSysClockFreq>
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000c9a:	4a36      	ldr	r2, [pc, #216]	; (8000d74 <HAL_RCC_ClockConfig+0x12c>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	40d8      	lsrs	r0, r3
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <HAL_RCC_ClockConfig+0x130>)
 8000ca8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <HAL_RCC_ClockConfig+0x134>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	f7ff fc77 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d1c5      	bne.n	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000cc6:	e7cd      	b.n	8000c64 <HAL_RCC_ClockConfig+0x1c>
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cce:	bf1e      	ittt	ne
 8000cd0:	689a      	ldrne	r2, [r3, #8]
 8000cd2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cd6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cda:	bf42      	ittt	mi
 8000cdc:	689a      	ldrmi	r2, [r3, #8]
 8000cde:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ce2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	68a0      	ldr	r0, [r4, #8]
 8000ce8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cec:	4302      	orrs	r2, r0
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e7bb      	b.n	8000c6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf2:	6862      	ldr	r2, [r4, #4]
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d11d      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	d0a7      	beq.n	8000c52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d02:	4e1b      	ldr	r6, [pc, #108]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000d04:	68b3      	ldr	r3, [r6, #8]
 8000d06:	f023 0303 	bic.w	r3, r3, #3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d0e:	f7ff fc91 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d12:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d18:	68b3      	ldr	r3, [r6, #8]
 8000d1a:	6862      	ldr	r2, [r4, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d24:	d0a3      	beq.n	8000c6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d26:	f7ff fc85 	bl	8000634 <HAL_GetTick>
 8000d2a:	1bc0      	subs	r0, r0, r7
 8000d2c:	4540      	cmp	r0, r8
 8000d2e:	d9f3      	bls.n	8000d18 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
}
 8000d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d36:	1e91      	subs	r1, r2, #2
 8000d38:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d3c:	d802      	bhi.n	8000d44 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d42:	e7dd      	b.n	8000d00 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	f013 0f02 	tst.w	r3, #2
 8000d48:	e7da      	b.n	8000d00 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4a:	b2ea      	uxtb	r2, r5
 8000d4c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	429d      	cmp	r5, r3
 8000d56:	f47f af7c 	bne.w	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000d5a:	e78e      	b.n	8000c7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d5c:	4904      	ldr	r1, [pc, #16]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000d5e:	68e0      	ldr	r0, [r4, #12]
 8000d60:	688b      	ldr	r3, [r1, #8]
 8000d62:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d66:	4303      	orrs	r3, r0
 8000d68:	608b      	str	r3, [r1, #8]
 8000d6a:	e789      	b.n	8000c80 <HAL_RCC_ClockConfig+0x38>
 8000d6c:	40023c00 	.word	0x40023c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	080145c9 	.word	0x080145c9
 8000d78:	20000058 	.word	0x20000058
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
}
 8000d90:	40d8      	lsrs	r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	40023800 	.word	0x40023800
 8000d98:	080145d9 	.word	0x080145d9
 8000d9c:	20000058 	.word	0x20000058

08000da0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dae:	6810      	ldr	r0, [r2, #0]
}
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	40023800 	.word	0x40023800
 8000db8:	080145d9 	.word	0x080145d9
 8000dbc:	20000058 	.word	0x20000058

08000dc0 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	4615      	mov	r5, r2
 8000dc8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000dca:	6821      	ldr	r1, [r4, #0]
 8000dcc:	688a      	ldr	r2, [r1, #8]
 8000dce:	ea36 0302 	bics.w	r3, r6, r2
 8000dd2:	d001      	beq.n	8000dd8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000dd4:	2000      	movs	r0, #0
}
 8000dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000dd8:	1c6b      	adds	r3, r5, #1
 8000dda:	d0f7      	beq.n	8000dcc <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000ddc:	f7ff fc2a 	bl	8000634 <HAL_GetTick>
 8000de0:	1bc0      	subs	r0, r0, r7
 8000de2:	4285      	cmp	r5, r0
 8000de4:	d8f1      	bhi.n	8000dca <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000dee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000df0:	6862      	ldr	r2, [r4, #4]
 8000df2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000df6:	d10a      	bne.n	8000e0e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000df8:	68a2      	ldr	r2, [r4, #8]
 8000dfa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dfe:	d002      	beq.n	8000e06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e00:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e04:	d103      	bne.n	8000e0e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e0c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e14:	d107      	bne.n	8000e26 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e24:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e32:	2003      	movs	r0, #3
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e3a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <SPI_EndRxTxTransaction+0x54>)
 8000e3e:	4e14      	ldr	r6, [pc, #80]	; (8000e90 <SPI_EndRxTxTransaction+0x58>)
 8000e40:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e42:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e44:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e48:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e4c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e4e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e52:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e54:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e56:	d10d      	bne.n	8000e74 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e58:	460a      	mov	r2, r1
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e60:	b910      	cbnz	r0, 8000e68 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e62:	2000      	movs	r0, #0
}
 8000e64:	b002      	add	sp, #8
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e6a:	f043 0320 	orr.w	r3, r3, #32
 8000e6e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e70:	2003      	movs	r0, #3
 8000e72:	e7f7      	b.n	8000e64 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f3      	beq.n	8000e62 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000e7a:	9b01      	ldr	r3, [sp, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	d4f5      	bmi.n	8000e74 <SPI_EndRxTxTransaction+0x3c>
 8000e88:	e7eb      	b.n	8000e62 <SPI_EndRxTxTransaction+0x2a>
 8000e8a:	bf00      	nop
 8000e8c:	20000058 	.word	0x20000058
 8000e90:	016e3600 	.word	0x016e3600

08000e94 <HAL_SPI_Init>:
{
 8000e94:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e96:	4604      	mov	r4, r0
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d036      	beq.n	8000f0a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ea0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ea8:	b91b      	cbnz	r3, 8000eb2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000eaa:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000eae:	f00c fa71 	bl	800d394 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000eb2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000eb4:	68a0      	ldr	r0, [r4, #8]
 8000eb6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ebe:	680b      	ldr	r3, [r1, #0]
 8000ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	4303      	orrs	r3, r0
 8000eca:	68e0      	ldr	r0, [r4, #12]
 8000ecc:	4303      	orrs	r3, r0
 8000ece:	6920      	ldr	r0, [r4, #16]
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	6960      	ldr	r0, [r4, #20]
 8000ed4:	4303      	orrs	r3, r0
 8000ed6:	69e0      	ldr	r0, [r4, #28]
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	6a20      	ldr	r0, [r4, #32]
 8000edc:	4303      	orrs	r3, r0
 8000ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000ee6:	4303      	orrs	r3, r0
 8000ee8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000eea:	0c12      	lsrs	r2, r2, #16
 8000eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eee:	f002 0204 	and.w	r2, r2, #4
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ef6:	69cb      	ldr	r3, [r1, #28]
 8000ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000efc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000efe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f00:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f02:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
}
 8000f0c:	bd10      	pop	{r4, pc}

08000f0e <HAL_SPI_TransmitReceive>:
{
 8000f0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f12:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f14:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000f1a:	2b01      	cmp	r3, #1
{
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	460d      	mov	r5, r1
 8000f20:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000f22:	f000 80e2 	beq.w	80010ea <HAL_SPI_TransmitReceive+0x1dc>
 8000f26:	2301      	movs	r3, #1
 8000f28:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f2c:	f7ff fb82 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f30:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f34:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f36:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f38:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f3a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f3c:	d00a      	beq.n	8000f54 <HAL_SPI_TransmitReceive+0x46>
 8000f3e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f42:	f040 80d0 	bne.w	80010e6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f46:	68a0      	ldr	r0, [r4, #8]
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	f040 80cc 	bne.w	80010e6 <HAL_SPI_TransmitReceive+0x1d8>
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	f040 80c9 	bne.w	80010e6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	f000 80c4 	beq.w	80010e2 <HAL_SPI_TransmitReceive+0x1d4>
 8000f5a:	f1b9 0f00 	cmp.w	r9, #0
 8000f5e:	f000 80c0 	beq.w	80010e2 <HAL_SPI_TransmitReceive+0x1d4>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	f000 80bd 	beq.w	80010e2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f68:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f6c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f70:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f72:	bf1c      	itt	ne
 8000f74:	2305      	movne	r3, #5
 8000f76:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f7e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f80:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f82:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f84:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f86:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f88:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f8a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f8c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f8e:	bf58      	it	pl
 8000f90:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f92:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f94:	bf58      	it	pl
 8000f96:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f9a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000f9c:	bf58      	it	pl
 8000f9e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fa0:	68e2      	ldr	r2, [r4, #12]
 8000fa2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fa6:	d158      	bne.n	800105a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000fa8:	b109      	cbz	r1, 8000fae <HAL_SPI_TransmitReceive+0xa0>
 8000faa:	2e01      	cmp	r6, #1
 8000fac:	d107      	bne.n	8000fbe <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fae:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fb2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fb4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fb6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000fbe:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b9ab      	cbnz	r3, 8000ff2 <HAL_SPI_TransmitReceive+0xe4>
 8000fc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b993      	cbnz	r3, 8000ff2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fcc:	4642      	mov	r2, r8
 8000fce:	4639      	mov	r1, r7
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff ff31 	bl	8000e38 <SPI_EndRxTxTransaction>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	f040 8081 	bne.w	80010de <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d132      	bne.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	9001      	str	r0, [sp, #4]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	e02a      	b.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	6893      	ldr	r3, [r2, #8]
 8000ff6:	0799      	lsls	r1, r3, #30
 8000ff8:	d50d      	bpl.n	8001016 <HAL_SPI_TransmitReceive+0x108>
 8000ffa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b153      	cbz	r3, 8001016 <HAL_SPI_TransmitReceive+0x108>
 8001000:	b14d      	cbz	r5, 8001016 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001004:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001008:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800100a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800100c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800100e:	3b01      	subs	r3, #1
 8001010:	b29b      	uxth	r3, r3
 8001012:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001014:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001016:	6893      	ldr	r3, [r2, #8]
 8001018:	07db      	lsls	r3, r3, #31
 800101a:	d50c      	bpl.n	8001036 <HAL_SPI_TransmitReceive+0x128>
 800101c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800101e:	b29b      	uxth	r3, r3
 8001020:	b14b      	cbz	r3, 8001036 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001024:	68d2      	ldr	r2, [r2, #12]
 8001026:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800102a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800102c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001034:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001036:	f7ff fafd 	bl	8000634 <HAL_GetTick>
 800103a:	eba0 0008 	sub.w	r0, r0, r8
 800103e:	4287      	cmp	r7, r0
 8001040:	d8be      	bhi.n	8000fc0 <HAL_SPI_TransmitReceive+0xb2>
 8001042:	1c7e      	adds	r6, r7, #1
 8001044:	d0bc      	beq.n	8000fc0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001046:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001048:	2301      	movs	r3, #1
 800104a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800104e:	2300      	movs	r3, #0
 8001050:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001054:	b003      	add	sp, #12
 8001056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800105a:	b109      	cbz	r1, 8001060 <HAL_SPI_TransmitReceive+0x152>
 800105c:	2e01      	cmp	r6, #1
 800105e:	d108      	bne.n	8001072 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001060:	782a      	ldrb	r2, [r5, #0]
 8001062:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001064:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001066:	3301      	adds	r3, #1
 8001068:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800106a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800106c:	3b01      	subs	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001072:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001074:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001076:	b29b      	uxth	r3, r3
 8001078:	b91b      	cbnz	r3, 8001082 <HAL_SPI_TransmitReceive+0x174>
 800107a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0a4      	beq.n	8000fcc <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6893      	ldr	r3, [r2, #8]
 8001086:	0798      	lsls	r0, r3, #30
 8001088:	d50e      	bpl.n	80010a8 <HAL_SPI_TransmitReceive+0x19a>
 800108a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800108c:	b29b      	uxth	r3, r3
 800108e:	b15b      	cbz	r3, 80010a8 <HAL_SPI_TransmitReceive+0x19a>
 8001090:	b155      	cbz	r5, 80010a8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001098:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800109a:	3301      	adds	r3, #1
 800109c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800109e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010a6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6893      	ldr	r3, [r2, #8]
 80010ac:	07d9      	lsls	r1, r3, #31
 80010ae:	d50d      	bpl.n	80010cc <HAL_SPI_TransmitReceive+0x1be>
 80010b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b153      	cbz	r3, 80010cc <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80010b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010b8:	68d2      	ldr	r2, [r2, #12]
 80010ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80010bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010be:	3301      	adds	r3, #1
 80010c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010ca:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80010cc:	f7ff fab2 	bl	8000634 <HAL_GetTick>
 80010d0:	eba0 0008 	sub.w	r0, r0, r8
 80010d4:	4287      	cmp	r7, r0
 80010d6:	d8cd      	bhi.n	8001074 <HAL_SPI_TransmitReceive+0x166>
 80010d8:	1c7b      	adds	r3, r7, #1
 80010da:	d0cb      	beq.n	8001074 <HAL_SPI_TransmitReceive+0x166>
 80010dc:	e7b3      	b.n	8001046 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010de:	2320      	movs	r3, #32
 80010e0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
 80010e4:	e7b0      	b.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80010e6:	2002      	movs	r0, #2
 80010e8:	e7ae      	b.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80010ea:	2002      	movs	r0, #2
 80010ec:	e7b2      	b.n	8001054 <HAL_SPI_TransmitReceive+0x146>
	...

080010f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010f2:	6803      	ldr	r3, [r0, #0]
 80010f4:	68c1      	ldr	r1, [r0, #12]
 80010f6:	691a      	ldr	r2, [r3, #16]
{
 80010f8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010fe:	430a      	orrs	r2, r1
 8001100:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001102:	6925      	ldr	r5, [r4, #16]
 8001104:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001106:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001108:	69c0      	ldr	r0, [r0, #28]
 800110a:	432a      	orrs	r2, r5
 800110c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800110e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001112:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001114:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001118:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	69a1      	ldr	r1, [r4, #24]
 8001122:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001126:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001128:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001130:	d129      	bne.n	8001186 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001132:	4293      	cmp	r3, r2
 8001134:	d003      	beq.n	800113e <UART_SetConfig+0x4e>
 8001136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800113a:	4293      	cmp	r3, r2
 800113c:	d120      	bne.n	8001180 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800113e:	f7ff fe2f 	bl	8000da0 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	6825      	ldr	r5, [r4, #0]
 8001146:	1892      	adds	r2, r2, r2
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	f04f 0119 	mov.w	r1, #25
 8001150:	415b      	adcs	r3, r3
 8001152:	fba0 0101 	umull	r0, r1, r0, r1
 8001156:	f7ff f89b 	bl	8000290 <__aeabi_uldivmod>
 800115a:	2164      	movs	r1, #100	; 0x64
 800115c:	fbb0 f4f1 	udiv	r4, r0, r1
 8001160:	fb01 0314 	mls	r3, r1, r4, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	3332      	adds	r3, #50	; 0x32
 8001168:	fbb3 f3f1 	udiv	r3, r3, r1
 800116c:	f003 0207 	and.w	r2, r3, #7
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001176:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800117a:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800117c:	60ab      	str	r3, [r5, #8]
 800117e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001180:	f7ff fdfe 	bl	8000d80 <HAL_RCC_GetPCLK1Freq>
 8001184:	e7dd      	b.n	8001142 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001186:	4293      	cmp	r3, r2
 8001188:	d002      	beq.n	8001190 <UART_SetConfig+0xa0>
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <UART_SetConfig+0xd8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d116      	bne.n	80011be <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001190:	f7ff fe06 	bl	8000da0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	6825      	ldr	r5, [r4, #0]
 8001198:	2119      	movs	r1, #25
 800119a:	009a      	lsls	r2, r3, #2
 800119c:	fba0 0101 	umull	r0, r1, r0, r1
 80011a0:	0f9b      	lsrs	r3, r3, #30
 80011a2:	f7ff f875 	bl	8000290 <__aeabi_uldivmod>
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	fbb0 f1f2 	udiv	r1, r0, r2
 80011ac:	fb02 0311 	mls	r3, r2, r1, r0
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	3332      	adds	r3, #50	; 0x32
 80011b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80011bc:	e7de      	b.n	800117c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80011be:	f7ff fddf 	bl	8000d80 <HAL_RCC_GetPCLK1Freq>
 80011c2:	e7e7      	b.n	8001194 <UART_SetConfig+0xa4>
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40011400 	.word	0x40011400

080011cc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	4604      	mov	r4, r0
 80011d0:	460e      	mov	r6, r1
 80011d2:	4617      	mov	r7, r2
 80011d4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011d6:	6821      	ldr	r1, [r4, #0]
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	ea36 0303 	bics.w	r3, r6, r3
 80011de:	d101      	bne.n	80011e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
}
 80011e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011e4:	1c6b      	adds	r3, r5, #1
 80011e6:	d0f7      	beq.n	80011d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011e8:	b995      	cbnz	r5, 8001210 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80011fc:	2320      	movs	r3, #32
 80011fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001202:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001206:	2300      	movs	r3, #0
 8001208:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800120c:	2003      	movs	r0, #3
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001210:	f7ff fa10 	bl	8000634 <HAL_GetTick>
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	4285      	cmp	r5, r0
 8001218:	d2dd      	bcs.n	80011d6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800121a:	e7e6      	b.n	80011ea <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800121c <HAL_UART_Init>:
{
 800121c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800121e:	4604      	mov	r4, r0
 8001220:	b340      	cbz	r0, 8001274 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001222:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001226:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800122a:	b91b      	cbnz	r3, 8001234 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800122c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001230:	f00c f8e6 	bl	800d400 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001234:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001236:	2324      	movs	r3, #36	; 0x24
 8001238:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800123c:	68d3      	ldr	r3, [r2, #12]
 800123e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001242:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff ff53 	bl	80010f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001252:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800125a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001262:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001264:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001266:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001268:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800126a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800126e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001272:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
}
 8001276:	bd10      	pop	{r4, pc}

08001278 <HAL_UART_Transmit>:
{
 8001278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800127c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800127e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001282:	2b20      	cmp	r3, #32
{
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800128a:	d151      	bne.n	8001330 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 800128c:	2900      	cmp	r1, #0
 800128e:	d04c      	beq.n	800132a <HAL_UART_Transmit+0xb2>
 8001290:	2a00      	cmp	r2, #0
 8001292:	d04a      	beq.n	800132a <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001294:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001298:	2b01      	cmp	r3, #1
 800129a:	d049      	beq.n	8001330 <HAL_UART_Transmit+0xb8>
 800129c:	2301      	movs	r3, #1
 800129e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a2:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a8:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80012b0:	f7ff f9c0 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80012b4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80012b8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80012ba:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80012be:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80012c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b95b      	cbnz	r3, 80012e0 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4632      	mov	r2, r6
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff ff7c 	bl	80011cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012d4:	b9a0      	cbnz	r0, 8001300 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80012d6:	2320      	movs	r3, #32
 80012d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80012dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80012e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012e8:	68a3      	ldr	r3, [r4, #8]
 80012ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012ee:	4632      	mov	r2, r6
 80012f0:	463b      	mov	r3, r7
 80012f2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80012f6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012f8:	d10e      	bne.n	8001318 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012fa:	f7ff ff67 	bl	80011cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012fe:	b110      	cbz	r0, 8001306 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001306:	882b      	ldrh	r3, [r5, #0]
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800130e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	b943      	cbnz	r3, 8001326 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001314:	3502      	adds	r5, #2
 8001316:	e7d4      	b.n	80012c2 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001318:	f7ff ff58 	bl	80011cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 800131c:	2800      	cmp	r0, #0
 800131e:	d1ef      	bne.n	8001300 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	782a      	ldrb	r2, [r5, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	3501      	adds	r5, #1
 8001328:	e7cb      	b.n	80012c2 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001330:	2002      	movs	r0, #2
}
 8001332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001338 <WIZnetDebugCB>:
/*Shell for mbedtls debug function.
 *DEBUG_LEBEL can be changed from 0 to 3*/
#ifdef MBEDTLS_DEBUG_C
void WIZnetDebugCB(void *ctx, int level, const char *file, int line, const char *str)
{
    if(level <= DEBUG_LEVEL)
 8001338:	2902      	cmp	r1, #2
{
 800133a:	9b00      	ldr	r3, [sp, #0]
    if(level <= DEBUG_LEVEL)
 800133c:	dc03      	bgt.n	8001346 <WIZnetDebugCB+0xe>
    {
       printf("%s\r\n",str);
 800133e:	4619      	mov	r1, r3
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <WIZnetDebugCB+0x10>)
 8001342:	f00d b953 	b.w	800e5ec <iprintf>
 8001346:	4770      	bx	lr
 8001348:	0800f89a 	.word	0x0800f89a

0800134c <WIZnetRecv>:
{
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	4614      	mov	r4, r2
 8001350:	4606      	mov	r6, r0
	ret = recv(*((int *)ctx),buf,len);
 8001352:	b292      	uxth	r2, r2
 8001354:	7800      	ldrb	r0, [r0, #0]
{
 8001356:	460f      	mov	r7, r1
	ret = recv(*((int *)ctx),buf,len);
 8001358:	f00c fd58 	bl	800de0c <recv>
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 800135c:	4622      	mov	r2, r4
 800135e:	4603      	mov	r3, r0
	ret = recv(*((int *)ctx),buf,len);
 8001360:	4605      	mov	r5, r0
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 8001362:	6831      	ldr	r1, [r6, #0]
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <WIZnetRecv+0x2c>)
 8001366:	f00d f941 	bl	800e5ec <iprintf>
	string_print_Hex(buf, len);
 800136a:	4621      	mov	r1, r4
 800136c:	4638      	mov	r0, r7
 800136e:	f00b fe69 	bl	800d044 <string_print_Hex>
}
 8001372:	4628      	mov	r0, r5
 8001374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001376:	bf00      	nop
 8001378:	0800f89f 	.word	0x0800f89f

0800137c <WIZnetSend>:
{
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	4616      	mov	r6, r2
 8001380:	460d      	mov	r5, r1
 8001382:	4604      	mov	r4, r0
	printf("Port:[%d]/Send(%d) : \r\n",*((int *)ctx) ,len);
 8001384:	6801      	ldr	r1, [r0, #0]
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <WIZnetSend+0x28>)
 8001388:	f00d f930 	bl	800e5ec <iprintf>
	string_print_Hex(buf, len);
 800138c:	4631      	mov	r1, r6
 800138e:	4628      	mov	r0, r5
 8001390:	f00b fe58 	bl	800d044 <string_print_Hex>
    return (send(*((int *)ctx),buf,len));
 8001394:	b2b2      	uxth	r2, r6
 8001396:	4629      	mov	r1, r5
 8001398:	7820      	ldrb	r0, [r4, #0]
}
 800139a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (send(*((int *)ctx),buf,len));
 800139e:	f00c bca3 	b.w	800dce8 <send>
 80013a2:	bf00      	nop
 80013a4:	0800f8ba 	.word	0x0800f8ba

080013a8 <wiz_tls_init>:
#endif

/* SSL context intialization
 * */
unsigned int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd)
{
 80013a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013aa:	4604      	mov	r4, r0
	char error_buf[100];
#endif


#if defined (MBEDTLS_DEBUG_C)
	debug_set_threshold(DEBUG_LEVEL);
 80013ac:	2002      	movs	r0, #2
{
 80013ae:	460e      	mov	r6, r1
	debug_set_threshold(DEBUG_LEVEL);
 80013b0:	f003 f902 	bl	80045b8 <mbedtls_debug_set_threshold>
#if defined (MBEDTLS_ENTROPY_C)
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
	mbedtls_entropy_init( tlsContext->entropy);
#endif

	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 80013b4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80013b8:	f00d f812 	bl	800e3e0 <malloc>
 80013bc:	4605      	mov	r5, r0
 80013be:	6020      	str	r0, [r4, #0]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 80013c0:	20b4      	movs	r0, #180	; 0xb4
 80013c2:	f00d f80d 	bl	800e3e0 <malloc>
 80013c6:	6060      	str	r0, [r4, #4]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 80013c8:	2054      	movs	r0, #84	; 0x54
 80013ca:	f00d f809 	bl	800e3e0 <malloc>
 80013ce:	60a0      	str	r0, [r4, #8]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));
 80013d0:	f44f 709a 	mov.w	r0, #308	; 0x134
 80013d4:	f00d f804 	bl	800e3e0 <malloc>
 80013d8:	60e0      	str	r0, [r4, #12]

	mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 80013da:	4628      	mov	r0, r5
 80013dc:	f003 f832 	bl	8004444 <mbedtls_ctr_drbg_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 80013e0:	68e0      	ldr	r0, [r4, #12]
 80013e2:	f00b fa1b 	bl	800c81c <mbedtls_x509_crt_init>
	mbedtls_ssl_init(tlsContext->ssl);
 80013e6:	6860      	ldr	r0, [r4, #4]
 80013e8:	f009 fbb0 	bl	800ab4c <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 80013ec:	68a0      	ldr	r0, [r4, #8]
 80013ee:	f009 ffcd 	bl	800b38c <mbedtls_ssl_config_init>
	*/

#if defined (MBEDTLS_X509_CRT_PARSE_C)

#if defined (MBEDTLS_DEBUG_C)
	printf(" Loading the CA root certificate \r\n");
 80013f2:	4823      	ldr	r0, [pc, #140]	; (8001480 <wiz_tls_init+0xd8>)
 80013f4:	f00d f96e 	bl	800e6d4 <puts>
#endif
	mbedtls_ssl_config_defaults((tlsContext->conf),
 80013f8:	2300      	movs	r3, #0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	68a0      	ldr	r0, [r4, #8]
 8001400:	f009 ffc8 	bl	800b394 <mbedtls_ssl_config_defaults>
								MBEDTLS_SSL_IS_CLIENT,
								MBEDTLS_SSL_TRANSPORT_STREAM,
								MBEDTLS_SSL_PRESET_DEFAULT);
	ret=mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf);
 8001404:	68a1      	ldr	r1, [r4, #8]
 8001406:	6860      	ldr	r0, [r4, #4]
 8001408:	f009 ff0c 	bl	800b224 <mbedtls_ssl_setup>
	printf("mbedtls_ssl_setup : %d\r\n", ret);
 800140c:	4601      	mov	r1, r0
 800140e:	481d      	ldr	r0, [pc, #116]	; (8001484 <wiz_tls_init+0xdc>)
 8001410:	f00d f8ec 	bl	800e5ec <iprintf>
	mbedtls_ssl_set_hostname(tlsContext->ssl, sslHostName);
 8001414:	491c      	ldr	r1, [pc, #112]	; (8001488 <wiz_tls_init+0xe0>)
 8001416:	6860      	ldr	r0, [r4, #4]
 8001418:	f009 fbb2 	bl	800ab80 <mbedtls_ssl_set_hostname>

#if defined (MBEDTLS_CERTS_C)
	printf("cert size[%d] = [%s]\r\n", strlen(CERTIFICATE), CERTIFICATE);
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <wiz_tls_init+0xe4>)
 800141e:	481c      	ldr	r0, [pc, #112]	; (8001490 <wiz_tls_init+0xe8>)
 8001420:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8001424:	f00d f8e2 	bl	800e5ec <iprintf>
	ret = mbedtls_x509_crt_parse((tlsContext->cacert),(unsigned char *)CERTIFICATE, strlen(CERTIFICATE));
 8001428:	4918      	ldr	r1, [pc, #96]	; (800148c <wiz_tls_init+0xe4>)
 800142a:	68e0      	ldr	r0, [r4, #12]
 800142c:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8001430:	f00b fd7a 	bl	800cf28 <mbedtls_x509_crt_parse>
#if defined (MBEDTLS_DEBUG_C)
	printf("SSL_CERTS_C not define .\r\n");
#endif
#endif
#endif
	if(ret < 0)
 8001434:	1e01      	subs	r1, r0, #0
 8001436:	da02      	bge.n	800143e <wiz_tls_init+0x96>
	{
#if defined (MBEDTLS_CERTS_C)
		printf("x509_crt_parse failed.%x \r\n",ret);
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <wiz_tls_init+0xec>)
 800143a:	f00d f8d7 	bl	800e5ec <iprintf>
	}
	/*
		set ssl session param
	*/

	mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 800143e:	2200      	movs	r2, #0
 8001440:	68e1      	ldr	r1, [r4, #12]
 8001442:	68a0      	ldr	r0, [r4, #8]
 8001444:	f009 fb99 	bl	800ab7a <mbedtls_ssl_conf_ca_chain>
	//mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_REQUIRED);//This option is for server certificate verification
	mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_NONE);
 8001448:	68a0      	ldr	r0, [r4, #8]
 800144a:	2100      	movs	r1, #0
 800144c:	f009 fb82 	bl	800ab54 <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_rng(tlsContext->conf,SSLRandomCB,tlsContext->ctr_drbg);
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	68a0      	ldr	r0, [r4, #8]
 8001454:	4910      	ldr	r1, [pc, #64]	; (8001498 <wiz_tls_init+0xf0>)
 8001456:	f009 fb84 	bl	800ab62 <mbedtls_ssl_conf_rng>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ssl_conf_dbg(tlsContext->conf, WIZnetDebugCB, stdout);
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <wiz_tls_init+0xf4>)
 800145c:	68a0      	ldr	r0, [r4, #8]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	490f      	ldr	r1, [pc, #60]	; (80014a0 <wiz_tls_init+0xf8>)
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	f009 fb80 	bl	800ab68 <mbedtls_ssl_conf_dbg>
#endif
	mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);		 //set client's socket send and receive functions
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	6860      	ldr	r0, [r4, #4]
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <wiz_tls_init+0xfc>)
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <wiz_tls_init+0x100>)
 8001472:	4631      	mov	r1, r6
 8001474:	f009 fb7b 	bl	800ab6e <mbedtls_ssl_set_bio>

	return 1;
}
 8001478:	2001      	movs	r0, #1
 800147a:	b002      	add	sp, #8
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	bf00      	nop
 8001480:	0800fe78 	.word	0x0800fe78
 8001484:	0800fe9b 	.word	0x0800fe9b
 8001488:	20000008 	.word	0x20000008
 800148c:	0800f8d2 	.word	0x0800f8d2
 8001490:	0800feb4 	.word	0x0800feb4
 8001494:	0800fecb 	.word	0x0800fecb
 8001498:	080015df 	.word	0x080015df
 800149c:	2000008c 	.word	0x2000008c
 80014a0:	08001339 	.word	0x08001339
 80014a4:	0800134d 	.word	0x0800134d
 80014a8:	0800137d 	.word	0x0800137d

080014ac <wiz_tls_deinit>:

/*Free the memory for ssl context*/
void wiz_tls_deinit(wiz_tls_context* tlsContext)
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	4604      	mov	r4, r0
	/*  free SSL context memory  */
	mbedtls_ssl_free( tlsContext->ssl );
 80014b0:	6840      	ldr	r0, [r0, #4]
 80014b2:	f009 ff03 	bl	800b2bc <mbedtls_ssl_free>
	mbedtls_ssl_config_free( tlsContext->conf );
 80014b6:	68a0      	ldr	r0, [r4, #8]
 80014b8:	f009 ffa8 	bl	800b40c <mbedtls_ssl_config_free>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ctr_drbg_free( tlsContext->ctr_drbg );
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	f002 ffc6 	bl	800444e <mbedtls_ctr_drbg_free>
#endif
	//mbedtls_entropy_free( tlsContext->entropy );
#if defined(MBEDTLS_X509_CRT_PARSE_C)
	mbedtls_x509_crt_free( tlsContext->cacert );
 80014c2:	68e0      	ldr	r0, [r4, #12]
 80014c4:	f00b f9af 	bl	800c826 <mbedtls_x509_crt_free>
#endif
	free(tlsContext->ctr_drbg);
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	f00c ff91 	bl	800e3f0 <free>
	free(tlsContext->ssl);
 80014ce:	6860      	ldr	r0, [r4, #4]
 80014d0:	f00c ff8e 	bl	800e3f0 <free>
	free(tlsContext->conf);
 80014d4:	68a0      	ldr	r0, [r4, #8]
 80014d6:	f00c ff8b 	bl	800e3f0 <free>
	free(tlsContext->cacert);
 80014da:	68e0      	ldr	r0, [r4, #12]
}
 80014dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(tlsContext->cacert);
 80014e0:	f00c bf86 	b.w	800e3f0 <free>

080014e4 <wiz_tls_connect>:

/* SSL handshake */
unsigned int wiz_tls_connect(wiz_tls_context* tlsContext, unsigned short port, uint8_t * addr)
{
 80014e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014e6:	4605      	mov	r5, r0
 80014e8:	460f      	mov	r7, r1
 80014ea:	4616      	mov	r6, r2
    int ret;

    memset(tempBuf,0,1024);
 80014ec:	2100      	movs	r1, #0
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	482b      	ldr	r0, [pc, #172]	; (80015a0 <wiz_tls_connect+0xbc>)
 80014f4:	f00c ffb8 	bl	800e468 <memset>

	/*socket open*/
    printf("socket open port : %d \r\n",*((uint8_t*)(tlsContext->ssl->p_bio)));
 80014f8:	686b      	ldr	r3, [r5, #4]
 80014fa:	482a      	ldr	r0, [pc, #168]	; (80015a4 <wiz_tls_connect+0xc0>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	7819      	ldrb	r1, [r3, #0]
 8001500:	f00d f874 	bl	800e5ec <iprintf>
	ret = socket(*((uint8_t*)(tlsContext->ssl->p_bio)), Sn_MR_TCP, 0, 0x00);
 8001504:	686b      	ldr	r3, [r5, #4]
 8001506:	69d8      	ldr	r0, [r3, #28]
 8001508:	2300      	movs	r3, #0
 800150a:	461a      	mov	r2, r3
 800150c:	2101      	movs	r1, #1
 800150e:	7800      	ldrb	r0, [r0, #0]
 8001510:	f00c fae6 	bl	800dae0 <socket>
 8001514:	4604      	mov	r4, r0
	printf("socket[%d] \r\n", ret);
 8001516:	4601      	mov	r1, r0
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <wiz_tls_connect+0xc4>)
 800151a:	f00d f867 	bl	800e5ec <iprintf>
	if(ret != *((uint8_t*)(tlsContext->ssl->p_bio)))
 800151e:	686b      	ldr	r3, [r5, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	429c      	cmp	r4, r3
 8001526:	d137      	bne.n	8001598 <wiz_tls_connect+0xb4>
		return ret;

	/*Connect to the target*/
	printf("server ip : %d.%d.%d.%d port : %d \r\n", addr[0], addr[1], addr[2], addr[3], port);
 8001528:	78f0      	ldrb	r0, [r6, #3]
 800152a:	78b3      	ldrb	r3, [r6, #2]
 800152c:	7872      	ldrb	r2, [r6, #1]
 800152e:	7831      	ldrb	r1, [r6, #0]
 8001530:	9000      	str	r0, [sp, #0]
 8001532:	9701      	str	r7, [sp, #4]
 8001534:	481d      	ldr	r0, [pc, #116]	; (80015ac <wiz_tls_connect+0xc8>)
 8001536:	f00d f859 	bl	800e5ec <iprintf>
	ret = connect(*((uint8_t*)tlsContext->ssl->p_bio), addr, port);
 800153a:	686b      	ldr	r3, [r5, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	463a      	mov	r2, r7
 8001540:	4631      	mov	r1, r6
 8001542:	7818      	ldrb	r0, [r3, #0]
 8001544:	f00c fb54 	bl	800dbf0 <connect>
 8001548:	4604      	mov	r4, r0
	printf("init connect[%d] \r\n", ret);
 800154a:	4601      	mov	r1, r0
 800154c:	4818      	ldr	r0, [pc, #96]	; (80015b0 <wiz_tls_connect+0xcc>)
 800154e:	f00d f84d 	bl	800e5ec <iprintf>
	if(ret != SOCK_OK)
 8001552:	2c01      	cmp	r4, #1
 8001554:	d120      	bne.n	8001598 <wiz_tls_connect+0xb4>
		return ret;

#if defined(MBEDTLS_DEBUG_C)
    printf( "  . Performing the SSL/TLS handshake..." );
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <wiz_tls_connect+0xd0>)
 8001558:	f00d f848 	bl	800e5ec <iprintf>
#endif

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 800155c:	6868      	ldr	r0, [r5, #4]
 800155e:	f009 fb67 	bl	800ac30 <mbedtls_ssl_handshake>
 8001562:	4604      	mov	r4, r0
 8001564:	b938      	cbnz	r0, 8001576 <wiz_tls_connect+0x92>
            return( -1 );
        }
    }

#if defined(MBEDTLS_DEBUG_C)
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
 8001566:	6868      	ldr	r0, [r5, #4]
 8001568:	f009 fb40 	bl	800abec <mbedtls_ssl_get_ciphersuite>
 800156c:	4601      	mov	r1, r0
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <wiz_tls_connect+0xd4>)
 8001570:	f00d f83c 	bl	800e5ec <iprintf>
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
#endif

    return( 0 );
 8001574:	e010      	b.n	8001598 <wiz_tls_connect+0xb4>
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 8001576:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 800157a:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800157e:	d0ed      	beq.n	800155c <wiz_tls_connect+0x78>
            mbedtls_strerror( ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <wiz_tls_connect+0xbc>)
 8001586:	f003 f9ed 	bl	8004964 <mbedtls_strerror>
            printf( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
 800158a:	4621      	mov	r1, r4
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <wiz_tls_connect+0xbc>)
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <wiz_tls_connect+0xd8>)
 8001590:	f00d f82c 	bl	800e5ec <iprintf>
            return( -1 );
 8001594:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001598:	4620      	mov	r0, r4
 800159a:	b003      	add	sp, #12
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000010c 	.word	0x2000010c
 80015a4:	0800fd9b 	.word	0x0800fd9b
 80015a8:	0800fdb4 	.word	0x0800fdb4
 80015ac:	0800fdc2 	.word	0x0800fdc2
 80015b0:	0800fde7 	.word	0x0800fde7
 80015b4:	0800fdfb 	.word	0x0800fdfb
 80015b8:	0800fe58 	.word	0x0800fe58
 80015bc:	0800fe23 	.word	0x0800fe23

080015c0 <wiz_tls_read>:

unsigned int wiz_tls_read(wiz_tls_context* tlsContext, unsigned char* readbuf, unsigned int len)
{
	return mbedtls_ssl_read( tlsContext->ssl, readbuf, len );
 80015c0:	6840      	ldr	r0, [r0, #4]
 80015c2:	f009 bb63 	b.w	800ac8c <mbedtls_ssl_read>

080015c6 <wiz_tls_write>:
}

unsigned int wiz_tls_write(wiz_tls_context* tlsContext, unsigned char* writebuf, unsigned int len)
{
	return mbedtls_ssl_write( tlsContext->ssl, writebuf, len );
 80015c6:	6840      	ldr	r0, [r0, #4]
 80015c8:	f009 bc5c 	b.w	800ae84 <mbedtls_ssl_write>

080015cc <wiz_tls_close_notify>:
	}
}

/* ssl Close notify */
unsigned int wiz_tls_close_notify(wiz_tls_context* tlsContext)
{
 80015cc:	b510      	push	{r4, lr}
 80015ce:	4604      	mov	r4, r0
	uint32_t rc;
	do rc = mbedtls_ssl_close_notify( tlsContext->ssl );
 80015d0:	6860      	ldr	r0, [r4, #4]
 80015d2:	f009 fcc7 	bl	800af64 <mbedtls_ssl_close_notify>
	while( rc == MBEDTLS_ERR_SSL_WANT_WRITE );
 80015d6:	f510 4fd1 	cmn.w	r0, #26752	; 0x6880
 80015da:	d0f9      	beq.n	80015d0 <wiz_tls_close_notify+0x4>
	//SSLDeinit(tlsContext);
	return rc;
}
 80015dc:	bd10      	pop	{r4, pc}

080015de <SSLRandomCB>:
{
	srand(randSeed);
}

int SSLRandomCB( void *p_rng, unsigned char *output, size_t output_len )
{
 80015de:	b570      	push	{r4, r5, r6, lr}
 80015e0:	460d      	mov	r5, r1
    int i;

	if(output_len <= 0)
 80015e2:	b18a      	cbz	r2, 8001608 <SSLRandomCB+0x2a>
 80015e4:	188c      	adds	r4, r1, r2
	{
         return (1);
	}
    for(i = 0;i < output_len;i++)
    {
       *output++ = rand() % 0xff;
 80015e6:	26ff      	movs	r6, #255	; 0xff
    for(i = 0;i < output_len;i++)
 80015e8:	42a5      	cmp	r5, r4
 80015ea:	d105      	bne.n	80015f8 <SSLRandomCB+0x1a>
	}
    srand(rand());
 80015ec:	f00d f8a2 	bl	800e734 <rand>
 80015f0:	f00d f878 	bl	800e6e4 <srand>
	return (0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	bd70      	pop	{r4, r5, r6, pc}
       *output++ = rand() % 0xff;
 80015f8:	f00d f89c 	bl	800e734 <rand>
 80015fc:	fb90 f3f6 	sdiv	r3, r0, r6
 8001600:	4418      	add	r0, r3
 8001602:	f805 0b01 	strb.w	r0, [r5], #1
 8001606:	e7ef      	b.n	80015e8 <SSLRandomCB+0xa>
         return (1);
 8001608:	2001      	movs	r0, #1
}
 800160a:	bd70      	pop	{r4, r5, r6, pc}

0800160c <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 800160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001610:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8001614:	2301      	movs	r3, #1
 8001616:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 8001618:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
        pow[i] = x;
 800161c:	a804      	add	r0, sp, #16
        log[x] = i;
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        pow[i] = x;
 8001622:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8001626:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800162a:	bf18      	it	ne
 800162c:	201b      	movne	r0, #27
 800162e:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    for( i = 0, x = 1; i < 256; i++ )
 8001632:	3201      	adds	r2, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8001634:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
 8001636:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800163a:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
 800163c:	d1ee      	bne.n	800161c <aes_gen_tables+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800163e:	4c68      	ldr	r4, [pc, #416]	; (80017e0 <aes_gen_tables+0x1d4>)
 8001640:	2301      	movs	r3, #1
 8001642:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 8001644:	f013 0080 	ands.w	r0, r3, #128	; 0x80
        RCON[i] = (uint32_t) x;
 8001648:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 800164c:	bf18      	it	ne
 800164e:	201b      	movne	r0, #27
    for( i = 0, x = 1; i < 10; i++ )
 8001650:	3201      	adds	r2, #1
        x = XTIME( x ) & 0xFF;
 8001652:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
    for( i = 0, x = 1; i < 10; i++ )
 8001656:	2a0a      	cmp	r2, #10
        x = XTIME( x ) & 0xFF;
 8001658:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
 800165a:	d1f3      	bne.n	8001644 <aes_gen_tables+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 800165c:	4e61      	ldr	r6, [pc, #388]	; (80017e4 <aes_gen_tables+0x1d8>)
    RSb[0x63] = 0x00;
 800165e:	4d62      	ldr	r5, [pc, #392]	; (80017e8 <aes_gen_tables+0x1dc>)
    FSb[0x00] = 0x63;
 8001660:	2363      	movs	r3, #99	; 0x63
 8001662:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 8001664:	2300      	movs	r3, #0
 8001666:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 800166a:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 800166c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 8001670:	aa04      	add	r2, sp, #16
 8001672:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800167a:	ea4f 1ee3 	mov.w	lr, r3, asr #7
 800167e:	ea4e 0e43 	orr.w	lr, lr, r3, lsl #1
 8001682:	fa5f fe8e 	uxtb.w	lr, lr
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8001686:	ea4f 17ee 	mov.w	r7, lr, asr #7
 800168a:	ea47 074e 	orr.w	r7, r7, lr, lsl #1
 800168e:	b2ff      	uxtb	r7, r7
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8001690:	11f8      	asrs	r0, r7, #7
 8001692:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8001696:	b2c0      	uxtb	r0, r0
 8001698:	f083 0363 	eor.w	r3, r3, #99	; 0x63
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800169c:	11c2      	asrs	r2, r0, #7
 800169e:	ea83 030e 	eor.w	r3, r3, lr
 80016a2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80016a6:	407b      	eors	r3, r7
 80016a8:	4043      	eors	r3, r0
 80016aa:	b2d2      	uxtb	r2, r2
        x ^= y ^ 0x63;
 80016ac:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 80016ae:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 80016b0:	54ec      	strb	r4, [r5, r3]
    for( i = 1; i < 256; i++ )
 80016b2:	3401      	adds	r4, #1
 80016b4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80016b8:	d1d8      	bne.n	800166c <aes_gen_tables+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80016ba:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80016bc:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80016be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80016c0:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80016c2:	6acf      	ldr	r7, [r1, #44]	; 0x2c
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80016c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
        x = FSb[i];
 80016c6:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80017e4 <aes_gen_tables+0x1d8>
        FT0[i] = ( (uint32_t) y       ) ^
 80016ca:	f8df c130 	ldr.w	ip, [pc, #304]	; 80017fc <aes_gen_tables+0x1f0>
        FT1[i] = ROTL8( FT0[i] );
 80016ce:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001800 <aes_gen_tables+0x1f4>
        FT2[i] = ROTL8( FT1[i] );
 80016d2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8001804 <aes_gen_tables+0x1f8>
        FT3[i] = ROTL8( FT2[i] );
 80016d6:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001808 <aes_gen_tables+0x1fc>
        x = RSb[i];
 80016da:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80017e8 <aes_gen_tables+0x1dc>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80016de:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80016e0:	2200      	movs	r2, #0
        x = FSb[i];
 80016e2:	f812 100e 	ldrb.w	r1, [r2, lr]
        y = XTIME( x ) & 0xFF;
 80016e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016ea:	bf14      	ite	ne
 80016ec:	201b      	movne	r0, #27
 80016ee:	2000      	moveq	r0, #0
 80016f0:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
                 ( (uint32_t) x << 16 ) ^
 80016f4:	040b      	lsls	r3, r1, #16
        y = XTIME( x ) & 0xFF;
 80016f6:	b2c0      	uxtb	r0, r0
                 ( (uint32_t) x <<  8 ) ^
 80016f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80016fc:	4043      	eors	r3, r0
        z =  ( y ^ x ) & 0xFF;
 80016fe:	4041      	eors	r1, r0
                 ( (uint32_t) x << 16 ) ^
 8001700:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        FT1[i] = ROTL8( FT0[i] );
 8001704:	ea4f 6133 	mov.w	r1, r3, ror #24
        FT0[i] = ( (uint32_t) y       ) ^
 8001708:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
        FT1[i] = ROTL8( FT0[i] );
 800170c:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8001710:	ea4f 4133 	mov.w	r1, r3, ror #16
        FT3[i] = ROTL8( FT2[i] );
 8001714:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001718:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
        x = RSb[i];
 800171c:	f81b 3002 	ldrb.w	r3, [fp, r2]
        FT2[i] = ROTL8( FT1[i] );
 8001720:	f849 1022 	str.w	r1, [r9, r2, lsl #2]
 8001724:	0094      	lsls	r4, r2, #2
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001726:	2b00      	cmp	r3, #0
 8001728:	d054      	beq.n	80017d4 <aes_gen_tables+0x1c8>
 800172a:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 800172e:	9801      	ldr	r0, [sp, #4]
 8001730:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001734:	1845      	adds	r5, r0, r1
 8001736:	20ff      	movs	r0, #255	; 0xff
 8001738:	fb95 f6f0 	sdiv	r6, r5, r0
 800173c:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8001740:	1bae      	subs	r6, r5, r6
 8001742:	ad04      	add	r5, sp, #16
 8001744:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001748:	9e02      	ldr	r6, [sp, #8]
 800174a:	4431      	add	r1, r6
 800174c:	fb91 f0f0 	sdiv	r0, r1, r0
 8001750:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8001754:	1a09      	subs	r1, r1, r0
 8001756:	a804      	add	r0, sp, #16
 8001758:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800175c:	0209      	lsls	r1, r1, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800175e:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03a      	beq.n	80017da <aes_gen_tables+0x1ce>
 8001764:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 8001768:	9803      	ldr	r0, [sp, #12]
 800176a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800176e:	4401      	add	r1, r0
 8001770:	20ff      	movs	r0, #255	; 0xff
 8001772:	fb91 f0f0 	sdiv	r0, r1, r0
 8001776:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 800177a:	1a08      	subs	r0, r1, r0
 800177c:	a904      	add	r1, sp, #16
 800177e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001782:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001784:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8001786:	b173      	cbz	r3, 80017a6 <aes_gen_tables+0x19a>
 8001788:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 800178c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001790:	21ff      	movs	r1, #255	; 0xff
 8001792:	443b      	add	r3, r7
 8001794:	fb93 f1f1 	sdiv	r1, r3, r1
 8001798:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800179c:	1a59      	subs	r1, r3, r1
 800179e:	ab04      	add	r3, sp, #16
 80017a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017a4:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80017a6:	405d      	eors	r5, r3
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <aes_gen_tables+0x1e0>)
 80017aa:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <aes_gen_tables+0x1e4>)
 80017ae:	ea4f 6135 	mov.w	r1, r5, ror #24
 80017b2:	50e1      	str	r1, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <aes_gen_tables+0x1e8>)
 80017b6:	ea4f 4135 	mov.w	r1, r5, ror #16
 80017ba:	50e1      	str	r1, [r4, r3]
    for( i = 0; i < 256; i++ )
 80017bc:	3201      	adds	r2, #1
        RT3[i] = ROTL8( RT2[i] );
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <aes_gen_tables+0x1ec>)
 80017c0:	ea4f 2535 	mov.w	r5, r5, ror #8
    for( i = 0; i < 256; i++ )
 80017c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        RT3[i] = ROTL8( RT2[i] );
 80017c8:	50e5      	str	r5, [r4, r3]
    for( i = 0; i < 256; i++ )
 80017ca:	d18a      	bne.n	80016e2 <aes_gen_tables+0xd6>
    }
}
 80017cc:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 80017d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80017d4:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80017d6:	4619      	mov	r1, r3
 80017d8:	e7c1      	b.n	800175e <aes_gen_tables+0x152>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80017da:	4619      	mov	r1, r3
 80017dc:	e7d2      	b.n	8001784 <aes_gen_tables+0x178>
 80017de:	bf00      	nop
 80017e0:	2000160c 	.word	0x2000160c
 80017e4:	2000050c 	.word	0x2000050c
 80017e8:	20001634 	.word	0x20001634
 80017ec:	20001734 	.word	0x20001734
 80017f0:	20001b34 	.word	0x20001b34
 80017f4:	20001f34 	.word	0x20001f34
 80017f8:	20002334 	.word	0x20002334
 80017fc:	2000060c 	.word	0x2000060c
 8001800:	20000a0c 	.word	0x20000a0c
 8001804:	20000e0c 	.word	0x20000e0c
 8001808:	2000120c 	.word	0x2000120c

0800180c <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800180c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001810:	2100      	movs	r1, #0
 8001812:	f00c be29 	b.w	800e468 <memset>

08001816 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 8001816:	b120      	cbz	r0, 8001822 <mbedtls_aes_free+0xc>
 8001818:	f500 738c 	add.w	r3, r0, #280	; 0x118
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800181c:	2200      	movs	r2, #0
 800181e:	4298      	cmp	r0, r3
 8001820:	d100      	bne.n	8001824 <mbedtls_aes_free+0xe>
 8001822:	4770      	bx	lr
 8001824:	7002      	strb	r2, [r0, #0]
 8001826:	3001      	adds	r0, #1
 8001828:	e7f9      	b.n	800181e <mbedtls_aes_free+0x8>
	...

0800182c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800182e:	4f8a      	ldr	r7, [pc, #552]	; (8001a58 <mbedtls_aes_setkey_enc+0x22c>)
 8001830:	683b      	ldr	r3, [r7, #0]
{
 8001832:	4605      	mov	r5, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4616      	mov	r6, r2
    if( aes_init_done == 0 )
 8001838:	b91b      	cbnz	r3, 8001842 <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 800183a:	f7ff fee7 	bl	800160c <aes_gen_tables>
        aes_init_done = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	603b      	str	r3, [r7, #0]

    }
#endif

    switch( keybits )
 8001842:	2ec0      	cmp	r6, #192	; 0xc0
 8001844:	d04f      	beq.n	80018e6 <mbedtls_aes_setkey_enc+0xba>
 8001846:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800184a:	d04e      	beq.n	80018ea <mbedtls_aes_setkey_enc+0xbe>
 800184c:	2e80      	cmp	r6, #128	; 0x80
 800184e:	f040 80ff 	bne.w	8001a50 <mbedtls_aes_setkey_enc+0x224>
    {
        case 128: ctx->nr = 10; break;
 8001852:	230a      	movs	r3, #10

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8001854:	f105 0008 	add.w	r0, r5, #8
        case 256: ctx->nr = 14; break;
 8001858:	602b      	str	r3, [r5, #0]
    ctx->rk = RK = ctx->buf;
 800185a:	6068      	str	r0, [r5, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800185c:	0976      	lsrs	r6, r6, #5
 800185e:	4621      	mov	r1, r4
 8001860:	2200      	movs	r2, #0
 8001862:	42b2      	cmp	r2, r6
 8001864:	f101 0104 	add.w	r1, r1, #4
 8001868:	d141      	bne.n	80018ee <mbedtls_aes_setkey_enc+0xc2>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d050      	beq.n	8001912 <mbedtls_aes_setkey_enc+0xe6>
 8001870:	2b0e      	cmp	r3, #14
 8001872:	f000 808f 	beq.w	8001994 <mbedtls_aes_setkey_enc+0x168>
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d133      	bne.n	80018e2 <mbedtls_aes_setkey_enc+0xb6>
 800187a:	f105 0018 	add.w	r0, r5, #24
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 800187e:	4e77      	ldr	r6, [pc, #476]	; (8001a5c <mbedtls_aes_setkey_enc+0x230>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8001880:	4d77      	ldr	r5, [pc, #476]	; (8001a60 <mbedtls_aes_setkey_enc+0x234>)
    switch( ctx->nr )
 8001882:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8001884:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8001888:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800188c:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8001890:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8001892:	f3c1 2207 	ubfx	r2, r1, #8, #8
            for( i = 0; i < 10; i++, RK += 4 )
 8001896:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8001898:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800189a:	4053      	eors	r3, r2
 800189c:	0e0a      	lsrs	r2, r1, #24
            for( i = 0; i < 10; i++, RK += 4 )
 800189e:	2c0a      	cmp	r4, #10
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80018a0:	5caa      	ldrb	r2, [r5, r2]
 80018a2:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	f100 0010 	add.w	r0, r0, #16
 80018ac:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80018ae:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80018b2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80018b6:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80018b8:	ea83 2302 	eor.w	r3, r3, r2, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 80018bc:	f850 2c1c 	ldr.w	r2, [r0, #-28]
                RK[4]  = RK[0] ^ RCON[i] ^
 80018c0:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[5]  = RK[1] ^ RK[4];
 80018c4:	ea83 0302 	eor.w	r3, r3, r2
                RK[6]  = RK[2] ^ RK[5];
 80018c8:	f850 2c18 	ldr.w	r2, [r0, #-24]
                RK[5]  = RK[1] ^ RK[4];
 80018cc:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[6]  = RK[2] ^ RK[5];
 80018d0:	ea83 0302 	eor.w	r3, r3, r2
 80018d4:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[7]  = RK[3] ^ RK[6];
 80018d8:	ea83 0301 	eor.w	r3, r3, r1
 80018dc:	f840 3c04 	str.w	r3, [r0, #-4]
            for( i = 0; i < 10; i++, RK += 4 )
 80018e0:	d1d0      	bne.n	8001884 <mbedtls_aes_setkey_enc+0x58>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 80018e2:	2000      	movs	r0, #0
}
 80018e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 192: ctx->nr = 12; break;
 80018e6:	230c      	movs	r3, #12
 80018e8:	e7b4      	b.n	8001854 <mbedtls_aes_setkey_enc+0x28>
        case 256: ctx->nr = 14; break;
 80018ea:	230e      	movs	r3, #14
 80018ec:	e7b2      	b.n	8001854 <mbedtls_aes_setkey_enc+0x28>
        GET_UINT32_LE( RK[i], key, i << 2 );
 80018ee:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80018f2:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80018fc:	f811 4c04 	ldrb.w	r4, [r1, #-4]
 8001900:	4323      	orrs	r3, r4
 8001902:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8001906:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800190a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800190e:	3201      	adds	r2, #1
 8001910:	e7a7      	b.n	8001862 <mbedtls_aes_setkey_enc+0x36>
 8001912:	f105 0020 	add.w	r0, r5, #32
                RK[6]  = RK[0] ^ RCON[i] ^
 8001916:	4e51      	ldr	r6, [pc, #324]	; (8001a5c <mbedtls_aes_setkey_enc+0x230>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8001918:	4d51      	ldr	r5, [pc, #324]	; (8001a60 <mbedtls_aes_setkey_enc+0x234>)
    switch( ctx->nr )
 800191a:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800191c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8001920:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8001924:	f850 3c18 	ldr.w	r3, [r0, #-24]
 8001928:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800192a:	f3c1 2207 	ubfx	r2, r1, #8, #8
            for( i = 0; i < 8; i++, RK += 6 )
 800192e:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8001930:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8001932:	4053      	eors	r3, r2
 8001934:	0e0a      	lsrs	r2, r1, #24
            for( i = 0; i < 8; i++, RK += 6 )
 8001936:	2c08      	cmp	r4, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8001938:	5caa      	ldrb	r2, [r5, r2]
 800193a:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800193e:	b2ca      	uxtb	r2, r1
 8001940:	f100 0018 	add.w	r0, r0, #24
 8001944:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8001946:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800194a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800194e:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8001950:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 8001954:	f850 2c2c 	ldr.w	r2, [r0, #-44]
                RK[6]  = RK[0] ^ RCON[i] ^
 8001958:	f840 3c18 	str.w	r3, [r0, #-24]
                RK[7]  = RK[1] ^ RK[6];
 800195c:	ea83 0302 	eor.w	r3, r3, r2
                RK[8]  = RK[2] ^ RK[7];
 8001960:	f850 2c28 	ldr.w	r2, [r0, #-40]
                RK[7]  = RK[1] ^ RK[6];
 8001964:	f840 3c14 	str.w	r3, [r0, #-20]
                RK[8]  = RK[2] ^ RK[7];
 8001968:	ea83 0302 	eor.w	r3, r3, r2
                RK[9]  = RK[3] ^ RK[8];
 800196c:	f850 2c24 	ldr.w	r2, [r0, #-36]
                RK[8]  = RK[2] ^ RK[7];
 8001970:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[9]  = RK[3] ^ RK[8];
 8001974:	ea83 0302 	eor.w	r3, r3, r2
                RK[10] = RK[4] ^ RK[9];
 8001978:	f850 2c20 	ldr.w	r2, [r0, #-32]
                RK[9]  = RK[3] ^ RK[8];
 800197c:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[10] = RK[4] ^ RK[9];
 8001980:	ea83 0302 	eor.w	r3, r3, r2
 8001984:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[11] = RK[5] ^ RK[10];
 8001988:	ea83 0301 	eor.w	r3, r3, r1
 800198c:	f840 3c04 	str.w	r3, [r0, #-4]
            for( i = 0; i < 8; i++, RK += 6 )
 8001990:	d1c4      	bne.n	800191c <mbedtls_aes_setkey_enc+0xf0>
 8001992:	e7a6      	b.n	80018e2 <mbedtls_aes_setkey_enc+0xb6>
 8001994:	f105 0028 	add.w	r0, r5, #40	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8001998:	4a31      	ldr	r2, [pc, #196]	; (8001a60 <mbedtls_aes_setkey_enc+0x234>)
                RK[8]  = RK[0] ^ RCON[i] ^
 800199a:	4d30      	ldr	r5, [pc, #192]	; (8001a5c <mbedtls_aes_setkey_enc+0x230>)
    switch( ctx->nr )
 800199c:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800199e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80019a2:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80019a6:	f850 6c20 	ldr.w	r6, [r0, #-32]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80019aa:	f850 7c10 	ldr.w	r7, [r0, #-16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80019ae:	4073      	eors	r3, r6
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80019b0:	f3c1 2607 	ubfx	r6, r1, #8, #8
            for( i = 0; i < 7; i++, RK += 8 )
 80019b4:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80019b6:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80019b8:	4073      	eors	r3, r6
 80019ba:	0e0e      	lsrs	r6, r1, #24
            for( i = 0; i < 7; i++, RK += 8 )
 80019bc:	2c07      	cmp	r4, #7
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80019be:	5d96      	ldrb	r6, [r2, r6]
 80019c0:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80019c4:	b2ce      	uxtb	r6, r1
 80019c6:	f100 0020 	add.w	r0, r0, #32
 80019ca:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80019cc:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80019d0:	f3c1 4607 	ubfx	r6, r1, #16, #8
 80019d4:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80019d6:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 80019da:	f850 6c3c 	ldr.w	r6, [r0, #-60]
                RK[8]  = RK[0] ^ RCON[i] ^
 80019de:	f840 3c20 	str.w	r3, [r0, #-32]
                RK[9]  = RK[1] ^ RK[8];
 80019e2:	ea83 0306 	eor.w	r3, r3, r6
                RK[10] = RK[2] ^ RK[9];
 80019e6:	f850 6c38 	ldr.w	r6, [r0, #-56]
                RK[9]  = RK[1] ^ RK[8];
 80019ea:	f840 3c1c 	str.w	r3, [r0, #-28]
                RK[10] = RK[2] ^ RK[9];
 80019ee:	ea83 0306 	eor.w	r3, r3, r6
                RK[11] = RK[3] ^ RK[10];
 80019f2:	f850 6c34 	ldr.w	r6, [r0, #-52]
                RK[10] = RK[2] ^ RK[9];
 80019f6:	f840 3c18 	str.w	r3, [r0, #-24]
                RK[11] = RK[3] ^ RK[10];
 80019fa:	ea83 0306 	eor.w	r3, r3, r6
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80019fe:	b2de      	uxtb	r6, r3
                RK[11] = RK[3] ^ RK[10];
 8001a00:	f840 3c14 	str.w	r3, [r0, #-20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8001a04:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8001a06:	ea86 0607 	eor.w	r6, r6, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8001a0a:	ea4f 6713 	mov.w	r7, r3, lsr #24
 8001a0e:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8001a10:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8001a14:	f3c3 2707 	ubfx	r7, r3, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8001a18:	f3c3 4307 	ubfx	r3, r3, #16, #8
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8001a1c:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	ea86 2607 	eor.w	r6, r6, r7, lsl #8
 8001a24:	ea86 4303 	eor.w	r3, r6, r3, lsl #16
                RK[13] = RK[5] ^ RK[12];
 8001a28:	f850 6c2c 	ldr.w	r6, [r0, #-44]
                RK[12] = RK[4] ^
 8001a2c:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[13] = RK[5] ^ RK[12];
 8001a30:	ea83 0306 	eor.w	r3, r3, r6
                RK[14] = RK[6] ^ RK[13];
 8001a34:	f850 6c28 	ldr.w	r6, [r0, #-40]
                RK[13] = RK[5] ^ RK[12];
 8001a38:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[14] = RK[6] ^ RK[13];
 8001a3c:	ea83 0306 	eor.w	r3, r3, r6
                RK[15] = RK[7] ^ RK[14];
 8001a40:	ea81 0103 	eor.w	r1, r1, r3
                RK[14] = RK[6] ^ RK[13];
 8001a44:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[15] = RK[7] ^ RK[14];
 8001a48:	f840 1c04 	str.w	r1, [r0, #-4]
            for( i = 0; i < 7; i++, RK += 8 )
 8001a4c:	d1a7      	bne.n	800199e <mbedtls_aes_setkey_enc+0x172>
 8001a4e:	e748      	b.n	80018e2 <mbedtls_aes_setkey_enc+0xb6>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8001a50:	f06f 001f 	mvn.w	r0, #31
 8001a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20002734 	.word	0x20002734
 8001a5c:	2000160c 	.word	0x2000160c
 8001a60:	2000050c 	.word	0x2000050c

08001a64 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8001a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a68:	b0c9      	sub	sp, #292	; 0x124
 8001a6a:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 8001a6c:	a802      	add	r0, sp, #8
{
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4616      	mov	r6, r2
    mbedtls_aes_init( &cty );
 8001a72:	f7ff fecb 	bl	800180c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8001a76:	f104 0308 	add.w	r3, r4, #8
 8001a7a:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8001a7c:	4632      	mov	r2, r6
 8001a7e:	4629      	mov	r1, r5
 8001a80:	a802      	add	r0, sp, #8
 8001a82:	f7ff fed3 	bl	800182c <mbedtls_aes_setkey_enc>
 8001a86:	4680      	mov	r8, r0
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d14c      	bne.n	8001b26 <mbedtls_aes_setkey_dec+0xc2>
        goto exit;

    ctx->nr = cty.nr;
 8001a8c:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8001a8e:	9803      	ldr	r0, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8001a90:	4d28      	ldr	r5, [pc, #160]	; (8001b34 <mbedtls_aes_setkey_dec+0xd0>)
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 8001a92:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001b3c <mbedtls_aes_setkey_dec+0xd8>
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8001a96:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001b40 <mbedtls_aes_setkey_dec+0xdc>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8001a9a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001b44 <mbedtls_aes_setkey_dec+0xe0>
    ctx->nr = cty.nr;
 8001a9e:	6021      	str	r1, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 8001aa0:	010a      	lsls	r2, r1, #4
 8001aa2:	1883      	adds	r3, r0, r2
    *RK++ = *SK++;
 8001aa4:	5882      	ldr	r2, [r0, r2]
 8001aa6:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 8001ab0:	68d8      	ldr	r0, [r3, #12]
 8001ab2:	6160      	str	r0, [r4, #20]
 8001ab4:	f104 0218 	add.w	r2, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001ab8:	3901      	subs	r1, #1
 8001aba:	3b10      	subs	r3, #16
 8001abc:	2900      	cmp	r1, #0
 8001abe:	dd2a      	ble.n	8001b16 <mbedtls_aes_setkey_dec+0xb2>
 8001ac0:	1f1e      	subs	r6, r3, #4
 8001ac2:	f1a2 0e04 	sub.w	lr, r2, #4
 8001ac6:	f103 0c0c 	add.w	ip, r3, #12
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8001aca:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8001ace:	b2c4      	uxtb	r4, r0
        for( j = 0; j < 4; j++, SK++ )
 8001ad0:	45b4      	cmp	ip, r6
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8001ad2:	5d2f      	ldrb	r7, [r5, r4]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 8001ad4:	ea4f 6410 	mov.w	r4, r0, lsr #24
 8001ad8:	5d2c      	ldrb	r4, [r5, r4]
 8001ada:	9401      	str	r4, [sp, #4]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8001adc:	4c16      	ldr	r4, [pc, #88]	; (8001b38 <mbedtls_aes_setkey_dec+0xd4>)
 8001ade:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8001ae2:	9c01      	ldr	r4, [sp, #4]
 8001ae4:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8001ae8:	ea87 0704 	eor.w	r7, r7, r4
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8001aec:	f3c0 2407 	ubfx	r4, r0, #8, #8
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8001af0:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8001af4:	5d2c      	ldrb	r4, [r5, r4]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8001af6:	5c28      	ldrb	r0, [r5, r0]
 8001af8:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8001afc:	ea84 0407 	eor.w	r4, r4, r7
 8001b00:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]
 8001b04:	ea84 0407 	eor.w	r4, r4, r7
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8001b08:	f84e 4f04 	str.w	r4, [lr, #4]!
        for( j = 0; j < 4; j++, SK++ )
 8001b0c:	d1dd      	bne.n	8001aca <mbedtls_aes_setkey_dec+0x66>
 8001b0e:	3210      	adds	r2, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001b10:	3901      	subs	r1, #1
 8001b12:	3b10      	subs	r3, #16
 8001b14:	e7d2      	b.n	8001abc <mbedtls_aes_setkey_dec+0x58>
        }
    }

    *RK++ = *SK++;
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 8001b26:	a802      	add	r0, sp, #8
 8001b28:	f7ff fe75 	bl	8001816 <mbedtls_aes_free>

    return( ret );
}
 8001b2c:	4640      	mov	r0, r8
 8001b2e:	b049      	add	sp, #292	; 0x124
 8001b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b34:	2000050c 	.word	0x2000050c
 8001b38:	20001734 	.word	0x20001734
 8001b3c:	20002334 	.word	0x20002334
 8001b40:	20001b34 	.word	0x20001b34
 8001b44:	20001f34 	.word	0x20001f34

08001b48 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8001b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8001b4c:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8001b4e:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8001b50:	680c      	ldr	r4, [r1, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8001b52:	f8d1 c008 	ldr.w	ip, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001b56:	68cf      	ldr	r7, [r1, #12]
 8001b58:	68e9      	ldr	r1, [r5, #12]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8001b5a:	682b      	ldr	r3, [r5, #0]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001b5c:	f8df e378 	ldr.w	lr, [pc, #888]	; 8001ed8 <mbedtls_internal_aes_encrypt+0x390>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001b60:	404f      	eors	r7, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001b62:	6801      	ldr	r1, [r0, #0]
 8001b64:	48da      	ldr	r0, [pc, #872]	; (8001ed0 <mbedtls_internal_aes_encrypt+0x388>)
 8001b66:	1049      	asrs	r1, r1, #1
 8001b68:	3901      	subs	r1, #1
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8001b6a:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8001b6c:	686b      	ldr	r3, [r5, #4]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001b6e:	9101      	str	r1, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001b70:	4629      	mov	r1, r5
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8001b72:	4073      	eors	r3, r6
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8001b74:	68ae      	ldr	r6, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001b76:	f851 9f10 	ldr.w	r9, [r1, #16]!
 8001b7a:	4dd6      	ldr	r5, [pc, #856]	; (8001ed4 <mbedtls_internal_aes_encrypt+0x38c>)
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8001b7c:	ea8c 0c06 	eor.w	ip, ip, r6
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001b80:	9e01      	ldr	r6, [sp, #4]
 8001b82:	2e00      	cmp	r6, #0
 8001b84:	4688      	mov	r8, r1
 8001b86:	fa5f fa84 	uxtb.w	sl, r4
 8001b8a:	f101 0120 	add.w	r1, r1, #32
 8001b8e:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 8001b92:	f300 80d1 	bgt.w	8001d38 <mbedtls_internal_aes_encrypt+0x1f0>
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001b96:	f850 602b 	ldr.w	r6, [r0, fp, lsl #2]
 8001b9a:	f855 102a 	ldr.w	r1, [r5, sl, lsl #2]
 8001b9e:	f8df e340 	ldr.w	lr, [pc, #832]	; 8001ee0 <mbedtls_internal_aes_encrypt+0x398>
 8001ba2:	4071      	eors	r1, r6
 8001ba4:	ea81 0909 	eor.w	r9, r1, r9
 8001ba8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8001bac:	4eca      	ldr	r6, [pc, #808]	; (8001ed8 <mbedtls_internal_aes_encrypt+0x390>)
 8001bae:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8001bb2:	ea89 0901 	eor.w	r9, r9, r1
 8001bb6:	f3cc 4107 	ubfx	r1, ip, #16, #8
 8001bba:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8001bbe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001bc2:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 8001bc6:	ea89 0901 	eor.w	r9, r9, r1
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8001bd0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001bd4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8001bd8:	ea81 0a0a 	eor.w	sl, r1, sl
 8001bdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001be0:	ea8a 0a01 	eor.w	sl, sl, r1
 8001be4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8001be8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001bec:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8001bf0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8001bf4:	ea8a 0a01 	eor.w	sl, sl, r1
 8001bf8:	f3c7 4107 	ubfx	r1, r7, #16, #8
 8001bfc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001c00:	ea8a 0a01 	eor.w	sl, sl, r1
 8001c04:	fa5f f18c 	uxtb.w	r1, ip
 8001c08:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8001c0c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001c10:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8001c14:	ea81 0b0b 	eor.w	fp, r1, fp
 8001c18:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8001c1c:	ea8b 0101 	eor.w	r1, fp, r1
 8001c20:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8001c24:	b2ff      	uxtb	r7, r7
 8001c26:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8001c2a:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8001c2e:	ea81 010b 	eor.w	r1, r1, fp
 8001c32:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 8001c36:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001c3a:	4045      	eors	r5, r0
 8001c3c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8001c40:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8001c44:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8001c48:	4068      	eors	r0, r5
 8001c4a:	4060      	eors	r0, r4
 8001c4c:	4058      	eors	r0, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8001c4e:	fa5f f489 	uxtb.w	r4, r9
 8001c52:	4ba2      	ldr	r3, [pc, #648]	; (8001edc <mbedtls_internal_aes_encrypt+0x394>)
 8001c54:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 8001c56:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8001c5a:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8001c5c:	0e04      	lsrs	r4, r0, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001c5e:	ea81 010b 	eor.w	r1, r1, fp
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8001c62:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8001c64:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8001c68:	f3ca 2407 	ubfx	r4, sl, #8, #8
 8001c6c:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8001c6e:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8001c72:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8001c76:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8001c78:	ea86 4604 	eor.w	r6, r6, r4, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8001c7c:	fa5f f48a 	uxtb.w	r4, sl
 8001c80:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 8001c82:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8001c86:	406c      	eors	r4, r5
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8001c88:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8001c8c:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8001c8e:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8001c92:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8001c96:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8001c98:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8001c9c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8001ca0:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8001ca2:	ea84 4405 	eor.w	r4, r4, r5, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8001ca6:	b2cd      	uxtb	r5, r1

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8001ca8:	0e09      	lsrs	r1, r1, #24
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8001caa:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8001cac:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8001cb0:	407d      	eors	r5, r7
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8001cb2:	ea4f 671a 	mov.w	r7, sl, lsr #24
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8001cb6:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8001cba:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8001cbc:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8001cc0:	f3c0 2707 	ubfx	r7, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8001cc4:	b2c0      	uxtb	r0, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8001cc6:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8001cc8:	5c18      	ldrb	r0, [r3, r0]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8001cca:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
 8001ccc:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8001cd0:	f3c9 4707 	ubfx	r7, r9, #16, #8
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8001cd4:	f3c9 2907 	ubfx	r9, r9, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8001cd8:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8001cda:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
    X3 = *RK++ ^ \
 8001cde:	f8d8 701c 	ldr.w	r7, [r8, #28]
 8001ce2:	4078      	eors	r0, r7
 8001ce4:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8001ce8:	f813 1009 	ldrb.w	r1, [r3, r9]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8001cec:	f813 300a 	ldrb.w	r3, [r3, sl]

    PUT_UINT32_LE( X0, output,  0 );
 8001cf0:	7016      	strb	r6, [r2, #0]
    X3 = *RK++ ^ \
 8001cf2:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
    PUT_UINT32_LE( X0, output,  0 );
 8001cf6:	0a31      	lsrs	r1, r6, #8
 8001cf8:	7051      	strb	r1, [r2, #1]
 8001cfa:	0c31      	lsrs	r1, r6, #16
 8001cfc:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 8001cfe:	0a21      	lsrs	r1, r4, #8
 8001d00:	7151      	strb	r1, [r2, #5]
 8001d02:	0c21      	lsrs	r1, r4, #16
 8001d04:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 8001d06:	0a29      	lsrs	r1, r5, #8
    X3 = *RK++ ^ \
 8001d08:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
    PUT_UINT32_LE( X2, output,  8 );
 8001d0c:	7251      	strb	r1, [r2, #9]
 8001d0e:	0c29      	lsrs	r1, r5, #16
 8001d10:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 8001d12:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
 8001d14:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 8001d16:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 8001d18:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
 8001d1a:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 8001d1c:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 8001d1e:	7313      	strb	r3, [r2, #12]
 8001d20:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 8001d22:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 8001d24:	0c19      	lsrs	r1, r3, #16
 8001d26:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
 8001d28:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8001d2a:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8001d2c:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8001d2e:	7391      	strb	r1, [r2, #14]
 8001d30:	73d3      	strb	r3, [r2, #15]
}
 8001d32:	b003      	add	sp, #12
 8001d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001d38:	f850 802b 	ldr.w	r8, [r0, fp, lsl #2]
 8001d3c:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 8001d40:	f851 6c20 	ldr.w	r6, [r1, #-32]
 8001d44:	ea8a 0a08 	eor.w	sl, sl, r8
 8001d48:	ea8a 0a06 	eor.w	sl, sl, r6
 8001d4c:	f3c3 2807 	ubfx	r8, r3, #8, #8
 8001d50:	4e63      	ldr	r6, [pc, #396]	; (8001ee0 <mbedtls_internal_aes_encrypt+0x398>)
 8001d52:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8001d56:	f851 6c1c 	ldr.w	r6, [r1, #-28]
 8001d5a:	ea8a 0a08 	eor.w	sl, sl, r8
 8001d5e:	f3cc 4807 	ubfx	r8, ip, #16, #8
 8001d62:	fa5f f983 	uxtb.w	r9, r3
 8001d66:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8001d6a:	f855 b029 	ldr.w	fp, [r5, r9, lsl #2]
 8001d6e:	ea8a 0a08 	eor.w	sl, sl, r8
 8001d72:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8001d76:	fa5f f98c 	uxtb.w	r9, ip
 8001d7a:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8001d7e:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 8001d82:	ea8b 0b08 	eor.w	fp, fp, r8
 8001d86:	ea8b 0b06 	eor.w	fp, fp, r6
 8001d8a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8001d8e:	4e54      	ldr	r6, [pc, #336]	; (8001ee0 <mbedtls_internal_aes_encrypt+0x398>)
 8001d90:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8001d94:	f851 6c18 	ldr.w	r6, [r1, #-24]
 8001d98:	ea8b 0b08 	eor.w	fp, fp, r8
 8001d9c:	f3c7 4807 	ubfx	r8, r7, #16, #8
 8001da0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8001da4:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8001da8:	ea8b 0b08 	eor.w	fp, fp, r8
 8001dac:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8001db0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001db4:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8001db8:	ea89 0808 	eor.w	r8, r9, r8
 8001dbc:	ea88 0806 	eor.w	r8, r8, r6
 8001dc0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8001dc4:	4e46      	ldr	r6, [pc, #280]	; (8001ee0 <mbedtls_internal_aes_encrypt+0x398>)
 8001dc6:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8001dca:	ea88 0809 	eor.w	r8, r8, r9
 8001dce:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8001dd2:	b2ff      	uxtb	r7, r7
 8001dd4:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 8001dd8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8001ddc:	ea88 0809 	eor.w	r8, r8, r9
 8001de0:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 8001de4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001de8:	ea87 0909 	eor.w	r9, r7, r9
 8001dec:	f851 7c14 	ldr.w	r7, [r1, #-20]
 8001df0:	ea89 0907 	eor.w	r9, r9, r7
 8001df4:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8001df8:	ea89 0907 	eor.w	r9, r9, r7
 8001dfc:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
 8001e00:	ea89 0907 	eor.w	r9, r9, r7
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8001e04:	fa5f f48a 	uxtb.w	r4, sl
 8001e08:	ea4f 6319 	mov.w	r3, r9, lsr #24
 8001e0c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8001e10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e14:	405c      	eors	r4, r3
 8001e16:	f851 3c10 	ldr.w	r3, [r1, #-16]
 8001e1a:	405c      	eors	r4, r3
 8001e1c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8001e20:	fa5f f78b 	uxtb.w	r7, fp
 8001e24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8001e28:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8001e2c:	405c      	eors	r4, r3
 8001e2e:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8001e32:	fa5f fc88 	uxtb.w	ip, r8
 8001e36:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8001e3a:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8001e3e:	405c      	eors	r4, r3
 8001e40:	ea4f 631a 	mov.w	r3, sl, lsr #24
 8001e44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e48:	405f      	eors	r7, r3
 8001e4a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001e4e:	407b      	eors	r3, r7
 8001e50:	f3c8 2707 	ubfx	r7, r8, #8, #8
 8001e54:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001e58:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8001e5c:	407b      	eors	r3, r7
 8001e5e:	f3c9 4707 	ubfx	r7, r9, #16, #8
 8001e62:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8001e66:	407b      	eors	r3, r7
 8001e68:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8001e6c:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 8001e70:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8001e74:	ea8c 0c07 	eor.w	ip, ip, r7
 8001e78:	f851 7c08 	ldr.w	r7, [r1, #-8]
 8001e7c:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8001e80:	ea8c 0c07 	eor.w	ip, ip, r7
 8001e84:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8001e88:	fa5f f989 	uxtb.w	r9, r9
 8001e8c:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8001e90:	ea8c 0c07 	eor.w	ip, ip, r7
 8001e94:	f3ca 4707 	ubfx	r7, sl, #16, #8
 8001e98:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8001e9c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8001ea0:	ea8c 0c07 	eor.w	ip, ip, r7
 8001ea4:	f855 7029 	ldr.w	r7, [r5, r9, lsl #2]
 8001ea8:	f8d1 9000 	ldr.w	r9, [r1]
 8001eac:	ea87 0808 	eor.w	r8, r7, r8
 8001eb0:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8001eb4:	ea88 0707 	eor.w	r7, r8, r7
 8001eb8:	f856 802a 	ldr.w	r8, [r6, sl, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001ebc:	9e01      	ldr	r6, [sp, #4]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8001ebe:	ea87 0708 	eor.w	r7, r7, r8
 8001ec2:	f85e 802b 	ldr.w	r8, [lr, fp, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001ec6:	3e01      	subs	r6, #1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8001ec8:	ea87 0708 	eor.w	r7, r7, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001ecc:	9601      	str	r6, [sp, #4]
 8001ece:	e657      	b.n	8001b80 <mbedtls_internal_aes_encrypt+0x38>
 8001ed0:	2000120c 	.word	0x2000120c
 8001ed4:	2000060c 	.word	0x2000060c
 8001ed8:	20000e0c 	.word	0x20000e0c
 8001edc:	2000050c 	.word	0x2000050c
 8001ee0:	20000a0c 	.word	0x20000a0c

08001ee4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8001ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8001ee8:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8001eea:	f8d1 c000 	ldr.w	ip, [r1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8001eee:	684c      	ldr	r4, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8001ef0:	688e      	ldr	r6, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001ef2:	68cf      	ldr	r7, [r1, #12]
 8001ef4:	68e9      	ldr	r1, [r5, #12]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8001ef6:	682b      	ldr	r3, [r5, #0]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001ef8:	f8df e378 	ldr.w	lr, [pc, #888]	; 8002274 <mbedtls_internal_aes_decrypt+0x390>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001efc:	404f      	eors	r7, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001efe:	6801      	ldr	r1, [r0, #0]
 8001f00:	48da      	ldr	r0, [pc, #872]	; (800226c <mbedtls_internal_aes_decrypt+0x388>)
 8001f02:	1049      	asrs	r1, r1, #1
 8001f04:	3901      	subs	r1, #1
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8001f06:	ea8c 0c03 	eor.w	ip, ip, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8001f0a:	686b      	ldr	r3, [r5, #4]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001f0c:	9101      	str	r1, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001f0e:	4629      	mov	r1, r5
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8001f10:	405c      	eors	r4, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8001f12:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8001f14:	f851 9f10 	ldr.w	r9, [r1, #16]!
 8001f18:	4dd5      	ldr	r5, [pc, #852]	; (8002270 <mbedtls_internal_aes_decrypt+0x38c>)
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8001f1a:	4073      	eors	r3, r6
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001f1c:	9e01      	ldr	r6, [sp, #4]
 8001f1e:	2e00      	cmp	r6, #0
 8001f20:	4688      	mov	r8, r1
 8001f22:	fa5f fb8c 	uxtb.w	fp, ip
 8001f26:	f101 0120 	add.w	r1, r1, #32
 8001f2a:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8001f2e:	f300 80d0 	bgt.w	80020d2 <mbedtls_internal_aes_decrypt+0x1ee>
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001f32:	f850 602a 	ldr.w	r6, [r0, sl, lsl #2]
 8001f36:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 8001f3a:	f8df e340 	ldr.w	lr, [pc, #832]	; 800227c <mbedtls_internal_aes_decrypt+0x398>
 8001f3e:	4071      	eors	r1, r6
 8001f40:	ea81 0909 	eor.w	r9, r1, r9
 8001f44:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8001f48:	4eca      	ldr	r6, [pc, #808]	; (8002274 <mbedtls_internal_aes_decrypt+0x390>)
 8001f4a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8001f4e:	ea89 0901 	eor.w	r9, r9, r1
 8001f52:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8001f56:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8001f5a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001f5e:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 8001f62:	ea89 0901 	eor.w	r9, r9, r1
 8001f66:	b2e1      	uxtb	r1, r4
 8001f68:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 8001f6c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001f70:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8001f74:	ea81 0a0a 	eor.w	sl, r1, sl
 8001f78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001f7c:	ea8a 0a01 	eor.w	sl, sl, r1
 8001f80:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8001f84:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8001f88:	ea8a 0a01 	eor.w	sl, sl, r1
 8001f8c:	f3c7 4107 	ubfx	r1, r7, #16, #8
 8001f90:	b2ff      	uxtb	r7, r7
 8001f92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001f96:	ea8a 0a01 	eor.w	sl, sl, r1
 8001f9a:	b2d9      	uxtb	r1, r3
 8001f9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001fa0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001fa4:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8001fa8:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8001fac:	ea81 0b0b 	eor.w	fp, r1, fp
 8001fb0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8001fb4:	ea8b 0101 	eor.w	r1, fp, r1
 8001fb8:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 8001fbc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8001fc0:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8001fc4:	ea81 010b 	eor.w	r1, r1, fp
 8001fc8:	f3cc 4b07 	ubfx	fp, ip, #16, #8
 8001fcc:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8001fd0:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8001fd4:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8001fd8:	4045      	eors	r5, r0
 8001fda:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8001fde:	4068      	eors	r0, r5
 8001fe0:	4058      	eors	r0, r3
 8001fe2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8001fe6:	fa5f f489 	uxtb.w	r4, r9
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001fea:	4058      	eors	r0, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8001fec:	4ba2      	ldr	r3, [pc, #648]	; (8002278 <mbedtls_internal_aes_decrypt+0x394>)
 8001fee:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 8001ff0:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8001ff4:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8001ff6:	ea4f 641a 	mov.w	r4, sl, lsr #24
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8001ffa:	ea81 010b 	eor.w	r1, r1, fp
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8001ffe:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8002000:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8002004:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8002008:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 800200a:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800200e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8002012:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8002014:	ea86 4604 	eor.w	r6, r6, r4, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8002018:	fa5f f48a 	uxtb.w	r4, sl
 800201c:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 800201e:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8002022:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8002024:	0e0d      	lsrs	r5, r1, #24
 8002026:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8002028:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800202c:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8002030:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8002032:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8002036:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800203a:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 800203c:	ea84 4405 	eor.w	r4, r4, r5, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8002040:	b2cd      	uxtb	r5, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8002042:	f3c1 2107 	ubfx	r1, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8002046:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8002048:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800204c:	407d      	eors	r5, r7
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800204e:	0e07      	lsrs	r7, r0, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8002050:	b2c0      	uxtb	r0, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8002052:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8002054:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8002058:	f3ca 2707 	ubfx	r7, sl, #8, #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800205c:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8002060:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8002062:	5c18      	ldrb	r0, [r3, r0]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8002064:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
 8002066:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800206a:	f3c9 4707 	ubfx	r7, r9, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800206e:	ea4f 6919 	mov.w	r9, r9, lsr #24
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8002072:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8002074:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
    X3 = *RK++ ^ \
 8002078:	f8d8 701c 	ldr.w	r7, [r8, #28]
 800207c:	4078      	eors	r0, r7
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800207e:	f813 7009 	ldrb.w	r7, [r3, r9]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8002082:	f813 300a 	ldrb.w	r3, [r3, sl]

    PUT_UINT32_LE( X0, output,  0 );
 8002086:	7016      	strb	r6, [r2, #0]
    X3 = *RK++ ^ \
 8002088:	ea80 6007 	eor.w	r0, r0, r7, lsl #24
 800208c:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
    PUT_UINT32_LE( X0, output,  0 );
 8002090:	0a31      	lsrs	r1, r6, #8
 8002092:	7051      	strb	r1, [r2, #1]
 8002094:	0c31      	lsrs	r1, r6, #16
 8002096:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 8002098:	0a21      	lsrs	r1, r4, #8
 800209a:	7151      	strb	r1, [r2, #5]
 800209c:	0c21      	lsrs	r1, r4, #16
 800209e:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80020a0:	0a29      	lsrs	r1, r5, #8
    X3 = *RK++ ^ \
 80020a2:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
    PUT_UINT32_LE( X2, output,  8 );
 80020a6:	7251      	strb	r1, [r2, #9]
 80020a8:	0c29      	lsrs	r1, r5, #16
 80020aa:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80020ac:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
 80020ae:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 80020b0:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 80020b2:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
 80020b4:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 80020b6:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 80020b8:	7313      	strb	r3, [r2, #12]
 80020ba:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80020bc:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 80020be:	0c19      	lsrs	r1, r3, #16
 80020c0:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
 80020c2:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80020c4:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80020c6:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80020c8:	7391      	strb	r1, [r2, #14]
 80020ca:	73d3      	strb	r3, [r2, #15]
}
 80020cc:	b003      	add	sp, #12
 80020ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80020d2:	f850 802a 	ldr.w	r8, [r0, sl, lsl #2]
 80020d6:	f855 902b 	ldr.w	r9, [r5, fp, lsl #2]
 80020da:	f851 6c20 	ldr.w	r6, [r1, #-32]
 80020de:	ea89 0908 	eor.w	r9, r9, r8
 80020e2:	ea89 0906 	eor.w	r9, r9, r6
 80020e6:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80020ea:	4e64      	ldr	r6, [pc, #400]	; (800227c <mbedtls_internal_aes_decrypt+0x398>)
 80020ec:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 80020f0:	f851 6c1c 	ldr.w	r6, [r1, #-28]
 80020f4:	ea89 0908 	eor.w	r9, r9, r8
 80020f8:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80020fc:	fa5f fa84 	uxtb.w	sl, r4
 8002100:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8002104:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 8002108:	ea89 0908 	eor.w	r9, r9, r8
 800210c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002110:	fa5f fb83 	uxtb.w	fp, r3
 8002114:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8002118:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800211c:	ea8a 0a08 	eor.w	sl, sl, r8
 8002120:	ea8a 0a06 	eor.w	sl, sl, r6
 8002124:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8002128:	4e54      	ldr	r6, [pc, #336]	; (800227c <mbedtls_internal_aes_decrypt+0x398>)
 800212a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800212e:	f851 6c18 	ldr.w	r6, [r1, #-24]
 8002132:	ea8a 0a08 	eor.w	sl, sl, r8
 8002136:	f3c7 4807 	ubfx	r8, r7, #16, #8
 800213a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800213e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8002142:	ea8a 0a08 	eor.w	sl, sl, r8
 8002146:	ea4f 6817 	mov.w	r8, r7, lsr #24
 800214a:	b2ff      	uxtb	r7, r7
 800214c:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8002150:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8002154:	ea8b 0808 	eor.w	r8, fp, r8
 8002158:	ea88 0806 	eor.w	r8, r8, r6
 800215c:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 8002160:	4e46      	ldr	r6, [pc, #280]	; (800227c <mbedtls_internal_aes_decrypt+0x398>)
 8002162:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8002166:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800216a:	ea88 080b 	eor.w	r8, r8, fp
 800216e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
 8002172:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8002176:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800217a:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 800217e:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8002182:	ea87 0c0c 	eor.w	ip, r7, ip
 8002186:	f851 7c14 	ldr.w	r7, [r1, #-20]
 800218a:	ea8c 0707 	eor.w	r7, ip, r7
 800218e:	405f      	eors	r7, r3
 8002190:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8002194:	ea4f 641a 	mov.w	r4, sl, lsr #24
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8002198:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800219a:	fa5f f389 	uxtb.w	r3, r9
 800219e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80021a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80021a6:	ea83 0c04 	eor.w	ip, r3, r4
 80021aa:	f851 3c10 	ldr.w	r3, [r1, #-16]
 80021ae:	ea8c 0c03 	eor.w	ip, ip, r3
 80021b2:	f3c7 2307 	ubfx	r3, r7, #8, #8
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80021b6:	ea88 080b 	eor.w	r8, r8, fp
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80021ba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80021be:	ea8c 0c03 	eor.w	ip, ip, r3
 80021c2:	f3c8 4307 	ubfx	r3, r8, #16, #8
 80021c6:	fa5f f48a 	uxtb.w	r4, sl
 80021ca:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80021ce:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80021d2:	ea8c 0c03 	eor.w	ip, ip, r3
 80021d6:	ea4f 6318 	mov.w	r3, r8, lsr #24
 80021da:	fa5f fb88 	uxtb.w	fp, r8
 80021de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021e2:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 80021e6:	405c      	eors	r4, r3
 80021e8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80021ec:	405c      	eors	r4, r3
 80021ee:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80021f2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80021f6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80021fa:	405c      	eors	r4, r3
 80021fc:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8002200:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8002204:	405c      	eors	r4, r3
 8002206:	0e3b      	lsrs	r3, r7, #24
 8002208:	b2ff      	uxtb	r7, r7
 800220a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800220e:	ea8b 0b03 	eor.w	fp, fp, r3
 8002212:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8002216:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800221a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800221e:	ea8b 0303 	eor.w	r3, fp, r3
 8002222:	f3ca 2b07 	ubfx	fp, sl, #8, #8
 8002226:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800222a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800222e:	9e01      	ldr	r6, [sp, #4]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8002230:	ea83 030b 	eor.w	r3, r3, fp
 8002234:	f3c9 4b07 	ubfx	fp, r9, #16, #8
 8002238:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800223c:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8002240:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8002244:	ea87 0909 	eor.w	r9, r7, r9
 8002248:	f851 7c04 	ldr.w	r7, [r1, #-4]
 800224c:	ea89 0707 	eor.w	r7, r9, r7
 8002250:	ea87 0708 	eor.w	r7, r7, r8
 8002254:	f85e 802a 	ldr.w	r8, [lr, sl, lsl #2]
 8002258:	f8d1 9000 	ldr.w	r9, [r1]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800225c:	3e01      	subs	r6, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800225e:	ea83 030b 	eor.w	r3, r3, fp
 8002262:	ea87 0708 	eor.w	r7, r7, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002266:	9601      	str	r6, [sp, #4]
 8002268:	e658      	b.n	8001f1c <mbedtls_internal_aes_decrypt+0x38>
 800226a:	bf00      	nop
 800226c:	20002334 	.word	0x20002334
 8002270:	20001734 	.word	0x20001734
 8002274:	20001f34 	.word	0x20001f34
 8002278:	20001634 	.word	0x20001634
 800227c:	20001b34 	.word	0x20001b34

08002280 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 8002280:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8002282:	2901      	cmp	r1, #1
{
 8002284:	4614      	mov	r4, r2
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8002286:	4621      	mov	r1, r4
{
 8002288:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 800228a:	d103      	bne.n	8002294 <mbedtls_aes_crypt_ecb+0x14>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 800228c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8002290:	f7ff bc5a 	b.w	8001b48 <mbedtls_internal_aes_encrypt>
}
 8002294:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8002298:	f7ff be24 	b.w	8001ee4 <mbedtls_internal_aes_decrypt>

0800229c <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a0:	b085      	sub	sp, #20
 80022a2:	4698      	mov	r8, r3
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80022a4:	0713      	lsls	r3, r2, #28
{
 80022a6:	4681      	mov	r9, r0
 80022a8:	460f      	mov	r7, r1
 80022aa:	4616      	mov	r6, r2
 80022ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80022ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    if( length % 16 )
 80022b0:	d15c      	bne.n	800236c <mbedtls_aes_crypt_cbc+0xd0>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80022b2:	b949      	cbnz	r1, 80022c8 <mbedtls_aes_crypt_cbc+0x2c>
 80022b4:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 80022b6:	f10d 0b10 	add.w	fp, sp, #16
 80022ba:	1ab3      	subs	r3, r6, r2
        while( length > 0 )
 80022bc:	42dd      	cmn	r5, r3
 80022be:	d127      	bne.n	8002310 <mbedtls_aes_crypt_cbc+0x74>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 80022c0:	2000      	movs	r0, #0
}
 80022c2:	b005      	add	sp, #20
 80022c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c8:	1e6b      	subs	r3, r5, #1
        while( length > 0 )
 80022ca:	2e00      	cmp	r6, #0
 80022cc:	d0f8      	beq.n	80022c0 <mbedtls_aes_crypt_cbc+0x24>
 80022ce:	f108 30ff 	add.w	r0, r8, #4294967295
 80022d2:	1e61      	subs	r1, r4, #1
 80022d4:	f103 0510 	add.w	r5, r3, #16
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80022d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80022dc:	f810 ef01 	ldrb.w	lr, [r0, #1]!
            for( i = 0; i < 16; i++ )
 80022e0:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80022e2:	ea82 020e 	eor.w	r2, r2, lr
 80022e6:	f801 2f01 	strb.w	r2, [r1, #1]!
            for( i = 0; i < 16; i++ )
 80022ea:	d1f5      	bne.n	80022d8 <mbedtls_aes_crypt_cbc+0x3c>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80022ec:	4623      	mov	r3, r4
 80022ee:	4622      	mov	r2, r4
 80022f0:	4639      	mov	r1, r7
 80022f2:	4648      	mov	r0, r9
 80022f4:	f7ff ffc4 	bl	8002280 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80022f8:	4643      	mov	r3, r8
 80022fa:	f104 0210 	add.w	r2, r4, #16
 80022fe:	f854 1b04 	ldr.w	r1, [r4], #4
 8002302:	f843 1b04 	str.w	r1, [r3], #4
 8002306:	4294      	cmp	r4, r2
 8002308:	d1f9      	bne.n	80022fe <mbedtls_aes_crypt_cbc+0x62>
            length -= 16;
 800230a:	3e10      	subs	r6, #16
 800230c:	462b      	mov	r3, r5
 800230e:	e7dc      	b.n	80022ca <mbedtls_aes_crypt_cbc+0x2e>
            memcpy( temp, input, 16 );
 8002310:	4613      	mov	r3, r2
 8002312:	46ee      	mov	lr, sp
 8002314:	f102 0a10 	add.w	sl, r2, #16
 8002318:	466f      	mov	r7, sp
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	46f4      	mov	ip, lr
 8002320:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8002324:	3308      	adds	r3, #8
 8002326:	4553      	cmp	r3, sl
 8002328:	46e6      	mov	lr, ip
 800232a:	d1f6      	bne.n	800231a <mbedtls_aes_crypt_cbc+0x7e>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 800232c:	4623      	mov	r3, r4
 800232e:	2100      	movs	r1, #0
 8002330:	4648      	mov	r0, r9
 8002332:	f7ff ffa5 	bl	8002280 <mbedtls_aes_crypt_ecb>
 8002336:	1e63      	subs	r3, r4, #1
 8002338:	f108 31ff 	add.w	r1, r8, #4294967295
 800233c:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8002340:	785a      	ldrb	r2, [r3, #1]
 8002342:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8002346:	ea82 020e 	eor.w	r2, r2, lr
 800234a:	f803 2f01 	strb.w	r2, [r3, #1]!
            for( i = 0; i < 16; i++ )
 800234e:	4283      	cmp	r3, r0
 8002350:	d1f6      	bne.n	8002340 <mbedtls_aes_crypt_cbc+0xa4>
            memcpy( iv, temp, 16 );
 8002352:	4642      	mov	r2, r8
 8002354:	463b      	mov	r3, r7
 8002356:	cb03      	ldmia	r3!, {r0, r1}
 8002358:	455b      	cmp	r3, fp
 800235a:	6010      	str	r0, [r2, #0]
 800235c:	6051      	str	r1, [r2, #4]
 800235e:	461f      	mov	r7, r3
 8002360:	f102 0208 	add.w	r2, r2, #8
 8002364:	d1f6      	bne.n	8002354 <mbedtls_aes_crypt_cbc+0xb8>
            input  += 16;
 8002366:	4652      	mov	r2, sl
            output += 16;
 8002368:	3410      	adds	r4, #16
 800236a:	e7a6      	b.n	80022ba <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800236c:	f06f 0021 	mvn.w	r0, #33	; 0x21
 8002370:	e7a7      	b.n	80022c2 <mbedtls_aes_crypt_cbc+0x26>

08002372 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 8002372:	6803      	ldr	r3, [r0, #0]
{
 8002374:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8002376:	1acd      	subs	r5, r1, r3
 8002378:	2d00      	cmp	r5, #0
 800237a:	dc02      	bgt.n	8002382 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800237c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8002380:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8002382:	781c      	ldrb	r4, [r3, #0]
 8002384:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002388:	d10a      	bne.n	80023a0 <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 800238a:	1c5c      	adds	r4, r3, #1
 800238c:	6004      	str	r4, [r0, #0]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8002392:	6803      	ldr	r3, [r0, #0]
 8002394:	1ac9      	subs	r1, r1, r3
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	428b      	cmp	r3, r1
 800239a:	d8ef      	bhi.n	800237c <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 800239c:	2000      	movs	r0, #0
 800239e:	bd30      	pop	{r4, r5, pc}
        switch( **p & 0x7F )
 80023a0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80023a4:	3c01      	subs	r4, #1
 80023a6:	2c03      	cmp	r4, #3
 80023a8:	d82e      	bhi.n	8002408 <mbedtls_asn1_get_len+0x96>
 80023aa:	e8df f004 	tbb	[pc, r4]
 80023ae:	0902      	.short	0x0902
 80023b0:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 80023b2:	2d01      	cmp	r5, #1
 80023b4:	d0e2      	beq.n	800237c <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 80023b6:	785c      	ldrb	r4, [r3, #1]
 80023b8:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 80023ba:	3302      	adds	r3, #2
            (*p) += 5;
 80023bc:	6003      	str	r3, [r0, #0]
            break;
 80023be:	e7e8      	b.n	8002392 <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 80023c0:	2d02      	cmp	r5, #2
 80023c2:	dddb      	ble.n	800237c <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80023c4:	785d      	ldrb	r5, [r3, #1]
 80023c6:	789c      	ldrb	r4, [r3, #2]
 80023c8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80023cc:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 80023ce:	3303      	adds	r3, #3
 80023d0:	e7f4      	b.n	80023bc <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 80023d2:	2d03      	cmp	r5, #3
 80023d4:	ddd2      	ble.n	800237c <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80023d6:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 80023d8:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80023da:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 80023dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80023e0:	78dd      	ldrb	r5, [r3, #3]
 80023e2:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 80023e4:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 80023e6:	3304      	adds	r3, #4
 80023e8:	e7e8      	b.n	80023bc <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 80023ea:	2d04      	cmp	r5, #4
 80023ec:	ddc6      	ble.n	800237c <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80023ee:	789c      	ldrb	r4, [r3, #2]
 80023f0:	785d      	ldrb	r5, [r3, #1]
 80023f2:	0424      	lsls	r4, r4, #16
 80023f4:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80023f8:	791d      	ldrb	r5, [r3, #4]
 80023fa:	432c      	orrs	r4, r5
 80023fc:	78dd      	ldrb	r5, [r3, #3]
 80023fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8002402:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 8002404:	3305      	adds	r3, #5
 8002406:	e7d9      	b.n	80023bc <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8002408:	f06f 0063 	mvn.w	r0, #99	; 0x63
}
 800240c:	bd30      	pop	{r4, r5, pc}

0800240e <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800240e:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8002410:	6804      	ldr	r4, [r0, #0]
 8002412:	1b0e      	subs	r6, r1, r4
 8002414:	2e00      	cmp	r6, #0
 8002416:	dd07      	ble.n	8002428 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 8002418:	7826      	ldrb	r6, [r4, #0]
 800241a:	429e      	cmp	r6, r3
 800241c:	d108      	bne.n	8002430 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800241e:	3401      	adds	r4, #1
 8002420:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8002422:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 8002424:	f7ff bfa5 	b.w	8002372 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8002428:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800242c:	bc70      	pop	{r4, r5, r6}
 800242e:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8002430:	f06f 0061 	mvn.w	r0, #97	; 0x61
 8002434:	e7fa      	b.n	800242c <mbedtls_asn1_get_tag+0x1e>

08002436 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8002436:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8002438:	2301      	movs	r3, #1
{
 800243a:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800243c:	aa01      	add	r2, sp, #4
{
 800243e:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8002440:	f7ff ffe5 	bl	800240e <mbedtls_asn1_get_tag>
 8002444:	b950      	cbnz	r0, 800245c <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 8002446:	9b01      	ldr	r3, [sp, #4]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d109      	bne.n	8002460 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002452:	3200      	adds	r2, #0
 8002454:	bf18      	it	ne
 8002456:	2201      	movne	r2, #1
 8002458:	602a      	str	r2, [r5, #0]
    (*p)++;
 800245a:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800245c:	b003      	add	sp, #12
 800245e:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8002460:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8002464:	e7fa      	b.n	800245c <mbedtls_asn1_get_bool+0x26>

08002466 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8002466:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8002468:	2302      	movs	r3, #2
{
 800246a:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800246c:	aa01      	add	r2, sp, #4
{
 800246e:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8002470:	f7ff ffcd 	bl	800240e <mbedtls_asn1_get_tag>
 8002474:	b968      	cbnz	r0, 8002492 <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8002476:	9b01      	ldr	r3, [sp, #4]
 8002478:	3b01      	subs	r3, #1
 800247a:	2b03      	cmp	r3, #3
 800247c:	d814      	bhi.n	80024a8 <mbedtls_asn1_get_int+0x42>
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	f993 3000 	ldrsb.w	r3, [r3]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0f      	blt.n	80024a8 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8002488:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	9201      	str	r2, [sp, #4]
 8002490:	b90b      	cbnz	r3, 8002496 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8002492:	b003      	add	sp, #12
 8002494:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	6829      	ldr	r1, [r5, #0]
 800249a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800249e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024a2:	602a      	str	r2, [r5, #0]
        (*p)++;
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	e7f0      	b.n	800248a <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80024a8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80024ac:	e7f1      	b.n	8002492 <mbedtls_asn1_get_int+0x2c>

080024ae <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80024ae:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80024b0:	2303      	movs	r3, #3
{
 80024b2:	4604      	mov	r4, r0
 80024b4:	460e      	mov	r6, r1
 80024b6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80024b8:	f7ff ffa9 	bl	800240e <mbedtls_asn1_get_tag>
 80024bc:	b9c8      	cbnz	r0, 80024f2 <mbedtls_asn1_get_bitstring+0x44>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	b193      	cbz	r3, 80024e8 <mbedtls_asn1_get_bitstring+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	712a      	strb	r2, [r5, #4]
    if( bs->unused_bits > 7 )
 80024cc:	2a07      	cmp	r2, #7
 80024ce:	d80e      	bhi.n	80024ee <mbedtls_asn1_get_bitstring+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 80024d0:	6822      	ldr	r2, [r4, #0]
 80024d2:	3201      	adds	r2, #1
 80024d4:	6022      	str	r2, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80024d6:	60aa      	str	r2, [r5, #8]
    *p += bs->len;
 80024d8:	6822      	ldr	r2, [r4, #0]
 80024da:	4413      	add	r3, r2

    if( *p != end )
 80024dc:	429e      	cmp	r6, r3
    *p += bs->len;
 80024de:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80024e0:	bf18      	it	ne
 80024e2:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80024e8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80024ee:	f06f 0063 	mvn.w	r0, #99	; 0x63

    return( 0 );
}
 80024f2:	bd70      	pop	{r4, r5, r6, pc}

080024f4 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80024f4:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80024f6:	2303      	movs	r3, #3
{
 80024f8:	4604      	mov	r4, r0
 80024fa:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80024fc:	f7ff ff87 	bl	800240e <mbedtls_asn1_get_tag>
 8002500:	b958      	cbnz	r0, 800251a <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8002502:	6813      	ldr	r3, [r2, #0]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	602a      	str	r2, [r5, #0]
 800250a:	d904      	bls.n	8002516 <mbedtls_asn1_get_bitstring_null+0x22>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	6022      	str	r2, [r4, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b10b      	cbz	r3, 800251a <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8002516:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800251a:	bd38      	pop	{r3, r4, r5, pc}

0800251c <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800251c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002520:	4614      	mov	r4, r2
 8002522:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8002524:	aa01      	add	r2, sp, #4
 8002526:	2330      	movs	r3, #48	; 0x30
{
 8002528:	4605      	mov	r5, r0
 800252a:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800252c:	f7ff ff6f 	bl	800240e <mbedtls_asn1_get_tag>
 8002530:	4606      	mov	r6, r0
 8002532:	b930      	cbnz	r0, 8002542 <mbedtls_asn1_get_sequence_of+0x26>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	9a01      	ldr	r2, [sp, #4]
 8002538:	4413      	add	r3, r2
 800253a:	429f      	cmp	r7, r3
 800253c:	d01d      	beq.n	800257a <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800253e:	f06f 0665 	mvn.w	r6, #101	; 0x65

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8002542:	4630      	mov	r0, r6
 8002544:	b003      	add	sp, #12
 8002546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800254e:	464a      	mov	r2, r9
 8002550:	4643      	mov	r3, r8
 8002552:	4639      	mov	r1, r7
 8002554:	4628      	mov	r0, r5
 8002556:	f7ff ff5a 	bl	800240e <mbedtls_asn1_get_tag>
 800255a:	b9c0      	cbnz	r0, 800258e <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	6862      	ldr	r2, [r4, #4]
 8002564:	4413      	add	r3, r2
        if( *p < end )
 8002566:	429f      	cmp	r7, r3
        *p += buf->len;
 8002568:	602b      	str	r3, [r5, #0]
        if( *p < end )
 800256a:	d908      	bls.n	800257e <mbedtls_asn1_get_sequence_of+0x62>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800256c:	2110      	movs	r1, #16
 800256e:	2001      	movs	r0, #1
 8002570:	f00b ff04 	bl	800e37c <calloc>
 8002574:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 8002576:	4604      	mov	r4, r0
 8002578:	b158      	cbz	r0, 8002592 <mbedtls_asn1_get_sequence_of+0x76>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800257a:	f104 0904 	add.w	r9, r4, #4
    while( *p < end )
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	429f      	cmp	r7, r3
 8002582:	d8e2      	bhi.n	800254a <mbedtls_asn1_get_sequence_of+0x2e>
    cur->next = NULL;
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	60e3      	str	r3, [r4, #12]
    if( *p != end )
 800258a:	d0da      	beq.n	8002542 <mbedtls_asn1_get_sequence_of+0x26>
 800258c:	e7d7      	b.n	800253e <mbedtls_asn1_get_sequence_of+0x22>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800258e:	4606      	mov	r6, r0
 8002590:	e7d7      	b.n	8002542 <mbedtls_asn1_get_sequence_of+0x26>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8002592:	f06f 0669 	mvn.w	r6, #105	; 0x69
 8002596:	e7d4      	b.n	8002542 <mbedtls_asn1_get_sequence_of+0x26>

08002598 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8002598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800259c:	4690      	mov	r8, r2
 800259e:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80025a0:	aa01      	add	r2, sp, #4
 80025a2:	2330      	movs	r3, #48	; 0x30
{
 80025a4:	4604      	mov	r4, r0
 80025a6:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80025a8:	f7ff ff31 	bl	800240e <mbedtls_asn1_get_tag>
 80025ac:	4606      	mov	r6, r0
 80025ae:	bb08      	cbnz	r0, 80025f4 <mbedtls_asn1_get_alg+0x5c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 80025b0:	6827      	ldr	r7, [r4, #0]
 80025b2:	eba9 0907 	sub.w	r9, r9, r7
 80025b6:	f1b9 0f00 	cmp.w	r9, #0
 80025ba:	dd38      	ble.n	800262e <mbedtls_asn1_get_alg+0x96>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80025bc:	4642      	mov	r2, r8
 80025be:	783b      	ldrb	r3, [r7, #0]
 80025c0:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 80025c4:	9b01      	ldr	r3, [sp, #4]
 80025c6:	441f      	add	r7, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80025c8:	4639      	mov	r1, r7
 80025ca:	2306      	movs	r3, #6
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff1e 	bl	800240e <mbedtls_asn1_get_tag>
 80025d2:	4606      	mov	r6, r0
 80025d4:	b970      	cbnz	r0, 80025f4 <mbedtls_asn1_get_alg+0x5c>
        return( ret );

    alg->p = *p;
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 80025dc:	6821      	ldr	r1, [r4, #0]
 80025de:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80025e2:	188b      	adds	r3, r1, r2

    if( *p == end )
 80025e4:	429f      	cmp	r7, r3
    *p += alg->len;
 80025e6:	6023      	str	r3, [r4, #0]
    if( *p == end )
 80025e8:	d10b      	bne.n	8002602 <mbedtls_asn1_get_alg+0x6a>
 80025ea:	f105 030c 	add.w	r3, r5, #12
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80025ee:	4602      	mov	r2, r0
 80025f0:	429d      	cmp	r5, r3
 80025f2:	d103      	bne.n	80025fc <mbedtls_asn1_get_alg+0x64>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80025f4:	4630      	mov	r0, r6
 80025f6:	b003      	add	sp, #12
 80025f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80025fc:	702a      	strb	r2, [r5, #0]
 80025fe:	3501      	adds	r5, #1
 8002600:	e7f6      	b.n	80025f0 <mbedtls_asn1_get_alg+0x58>
    params->tag = **p;
 8002602:	5c89      	ldrb	r1, [r1, r2]
 8002604:	462a      	mov	r2, r5
    (*p)++;
 8002606:	3301      	adds	r3, #1
    params->tag = **p;
 8002608:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800260c:	4620      	mov	r0, r4
    (*p)++;
 800260e:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8002610:	4639      	mov	r1, r7
 8002612:	f7ff feae 	bl	8002372 <mbedtls_asn1_get_len>
 8002616:	b968      	cbnz	r0, 8002634 <mbedtls_asn1_get_alg+0x9c>
    params->p = *p;
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	686a      	ldr	r2, [r5, #4]
 8002620:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8002622:	429f      	cmp	r7, r3
    *p += params->len;
 8002624:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8002626:	bf18      	it	ne
 8002628:	f06f 0665 	mvnne.w	r6, #101	; 0x65
 800262c:	e7e2      	b.n	80025f4 <mbedtls_asn1_get_alg+0x5c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800262e:	f06f 065f 	mvn.w	r6, #95	; 0x5f
 8002632:	e7df      	b.n	80025f4 <mbedtls_asn1_get_alg+0x5c>
 8002634:	4606      	mov	r6, r0
 8002636:	e7dd      	b.n	80025f4 <mbedtls_asn1_get_alg+0x5c>

08002638 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8002638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800263c:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8002640:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800275c <mbedtls_base64_decode+0x124>
    for( i = n = j = 0; i < slen; i++ )
 8002644:	2700      	movs	r7, #0
 8002646:	463c      	mov	r4, r7
 8002648:	463d      	mov	r5, r7
 800264a:	4575      	cmp	r5, lr
 800264c:	d22d      	bcs.n	80026aa <mbedtls_base64_decode+0x72>
 800264e:	f04f 0c00 	mov.w	ip, #0
        while( i < slen && src[i] == ' ' )
 8002652:	5d5e      	ldrb	r6, [r3, r5]
 8002654:	2e20      	cmp	r6, #32
 8002656:	d023      	beq.n	80026a0 <mbedtls_base64_decode+0x68>
        if( ( slen - i ) >= 2 &&
 8002658:	ebae 0905 	sub.w	r9, lr, r5
 800265c:	f1b9 0f01 	cmp.w	r9, #1
 8002660:	d905      	bls.n	800266e <mbedtls_base64_decode+0x36>
 8002662:	2e0d      	cmp	r6, #13
 8002664:	d103      	bne.n	800266e <mbedtls_base64_decode+0x36>
            src[i] == '\r' && src[i + 1] == '\n' )
 8002666:	195e      	adds	r6, r3, r5
 8002668:	7876      	ldrb	r6, [r6, #1]
 800266a:	2e0a      	cmp	r6, #10
 800266c:	d016      	beq.n	800269c <mbedtls_base64_decode+0x64>
        if( src[i] == '\n' )
 800266e:	5d5e      	ldrb	r6, [r3, r5]
 8002670:	2e0a      	cmp	r6, #10
 8002672:	d013      	beq.n	800269c <mbedtls_base64_decode+0x64>
        if( x != 0 )
 8002674:	f1bc 0f00 	cmp.w	ip, #0
 8002678:	d16c      	bne.n	8002754 <mbedtls_base64_decode+0x11c>
        if( src[i] == '=' && ++j > 2 )
 800267a:	2e3d      	cmp	r6, #61	; 0x3d
 800267c:	d102      	bne.n	8002684 <mbedtls_base64_decode+0x4c>
 800267e:	3701      	adds	r7, #1
 8002680:	2f02      	cmp	r7, #2
 8002682:	d867      	bhi.n	8002754 <mbedtls_base64_decode+0x11c>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8002684:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002688:	d164      	bne.n	8002754 <mbedtls_base64_decode+0x11c>
 800268a:	f818 6006 	ldrb.w	r6, [r8, r6]
 800268e:	2e7f      	cmp	r6, #127	; 0x7f
 8002690:	d060      	beq.n	8002754 <mbedtls_base64_decode+0x11c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8002692:	2e3f      	cmp	r6, #63	; 0x3f
 8002694:	d801      	bhi.n	800269a <mbedtls_base64_decode+0x62>
 8002696:	2f00      	cmp	r7, #0
 8002698:	d15c      	bne.n	8002754 <mbedtls_base64_decode+0x11c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 800269a:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 800269c:	3501      	adds	r5, #1
 800269e:	e7d4      	b.n	800264a <mbedtls_base64_decode+0x12>
            ++i;
 80026a0:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 80026a2:	45ae      	cmp	lr, r5
            ++x;
 80026a4:	f10c 0c01 	add.w	ip, ip, #1
        while( i < slen && src[i] == ' ' )
 80026a8:	d1d3      	bne.n	8002652 <mbedtls_base64_decode+0x1a>
    }

    if( n == 0 )
 80026aa:	b91c      	cbnz	r4, 80026b4 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 80026ac:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 80026ae:	2000      	movs	r0, #0
 80026b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 80026b4:	f004 0e07 	and.w	lr, r4, #7
 80026b8:	2606      	movs	r6, #6
 80026ba:	08e4      	lsrs	r4, r4, #3
 80026bc:	fb06 fe0e 	mul.w	lr, r6, lr
 80026c0:	4374      	muls	r4, r6
 80026c2:	f10e 0e07 	add.w	lr, lr, #7
 80026c6:	1be4      	subs	r4, r4, r7
    n -= j;
 80026c8:	eb04 04de 	add.w	r4, r4, lr, lsr #3
    if( dst == NULL || dlen < n )
 80026cc:	b178      	cbz	r0, 80026ee <mbedtls_base64_decode+0xb6>
 80026ce:	428c      	cmp	r4, r1
 80026d0:	d80d      	bhi.n	80026ee <mbedtls_base64_decode+0xb6>
 80026d2:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
 80026d4:	f8df c084 	ldr.w	ip, [pc, #132]	; 800275c <mbedtls_base64_decode+0x124>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80026d8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8002760 <mbedtls_base64_decode+0x128>
 80026dc:	441d      	add	r5, r3
    if( dst == NULL || dlen < n )
 80026de:	4601      	mov	r1, r0
 80026e0:	2603      	movs	r6, #3
 80026e2:	463c      	mov	r4, r7
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80026e4:	42ab      	cmp	r3, r5
 80026e6:	d107      	bne.n	80026f8 <mbedtls_base64_decode+0xc0>
    *olen = p - dst;
 80026e8:	1a09      	subs	r1, r1, r0
 80026ea:	6011      	str	r1, [r2, #0]
 80026ec:	e7df      	b.n	80026ae <mbedtls_base64_decode+0x76>
        *olen = n;
 80026ee:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80026f0:	f06f 0029 	mvn.w	r0, #41	; 0x29
 80026f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80026f8:	f813 9b01 	ldrb.w	r9, [r3], #1
 80026fc:	f1a9 0e0a 	sub.w	lr, r9, #10
 8002700:	fa5f fe8e 	uxtb.w	lr, lr
 8002704:	f1be 0f16 	cmp.w	lr, #22
 8002708:	d804      	bhi.n	8002714 <mbedtls_base64_decode+0xdc>
 800270a:	fa28 fe0e 	lsr.w	lr, r8, lr
 800270e:	f01e 0f01 	tst.w	lr, #1
 8002712:	d1e7      	bne.n	80026e4 <mbedtls_base64_decode+0xac>
        j -= ( base64_dec_map[*src] == 64 );
 8002714:	f81c e009 	ldrb.w	lr, [ip, r9]
        if( ++n == 4 )
 8002718:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800271a:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 800271e:	bf08      	it	eq
 8002720:	3e01      	subeq	r6, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8002722:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
        if( ++n == 4 )
 8002726:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8002728:	ea4e 1787 	orr.w	r7, lr, r7, lsl #6
        if( ++n == 4 )
 800272c:	d1da      	bne.n	80026e4 <mbedtls_base64_decode+0xac>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800272e:	b17e      	cbz	r6, 8002750 <mbedtls_base64_decode+0x118>
 8002730:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8002732:	2e01      	cmp	r6, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8002734:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8002736:	d102      	bne.n	800273e <mbedtls_base64_decode+0x106>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8002738:	3101      	adds	r1, #1
            n = 0;
 800273a:	2400      	movs	r4, #0
 800273c:	e7d2      	b.n	80026e4 <mbedtls_base64_decode+0xac>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800273e:	2e02      	cmp	r6, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8002740:	ea4f 2417 	mov.w	r4, r7, lsr #8
 8002744:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8002746:	bf16      	itet	ne
 8002748:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800274a:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800274c:	3103      	addne	r1, #3
 800274e:	e7f4      	b.n	800273a <mbedtls_base64_decode+0x102>
            n = 0;
 8002750:	4634      	mov	r4, r6
 8002752:	e7c7      	b.n	80026e4 <mbedtls_base64_decode+0xac>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8002754:	f06f 002b 	mvn.w	r0, #43	; 0x2b
}
 8002758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800275c:	0800fee7 	.word	0x0800fee7
 8002760:	00400009 	.word	0x00400009

08002764 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8002764:	2300      	movs	r3, #0
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = c = 0; i < n; i++, s++, d++ )
 8002768:	4616      	mov	r6, r2
 800276a:	461c      	mov	r4, r3
 800276c:	4284      	cmp	r4, r0
 800276e:	d103      	bne.n	8002778 <mpi_sub_hlp+0x14>
 8002770:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 8002774:	b9bb      	cbnz	r3, 80027a6 <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; i++; d++;
    }
}
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 8002778:	f8d6 e000 	ldr.w	lr, [r6]
 800277c:	ebae 0503 	sub.w	r5, lr, r3
 8002780:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8002782:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 8002786:	42bd      	cmp	r5, r7
 8002788:	bf2c      	ite	cs
 800278a:	f04f 0c00 	movcs.w	ip, #0
 800278e:	f04f 0c01 	movcc.w	ip, #1
 8002792:	1bed      	subs	r5, r5, r7
 8002794:	4573      	cmp	r3, lr
 8002796:	bf94      	ite	ls
 8002798:	4663      	movls	r3, ip
 800279a:	f10c 0301 	addhi.w	r3, ip, #1
 800279e:	f846 5b04 	str.w	r5, [r6], #4
    for( i = c = 0; i < n; i++, s++, d++ )
 80027a2:	3401      	adds	r4, #1
 80027a4:	e7e2      	b.n	800276c <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 80027aa:	428b      	cmp	r3, r1
        z = ( *d < c ); *d -= c;
 80027ac:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 80027b0:	bf94      	ite	ls
 80027b2:	2300      	movls	r3, #0
 80027b4:	2301      	movhi	r3, #1
 80027b6:	e7dd      	b.n	8002774 <mpi_sub_hlp+0x10>

080027b8 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80027b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_mpi_uint c = 0, t = 0;
 80027bc:	f04f 0c00 	mov.w	ip, #0
 80027c0:	460d      	mov	r5, r1
 80027c2:	4614      	mov	r4, r2
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80027c4:	4686      	mov	lr, r0
 80027c6:	f1be 0f0f 	cmp.w	lr, #15
 80027ca:	f105 0540 	add.w	r5, r5, #64	; 0x40
 80027ce:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80027d2:	f200 8087 	bhi.w	80028e4 <mpi_mul_hlp+0x12c>
 80027d6:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 80027da:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 80027de:	2807      	cmp	r0, #7
 80027e0:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 80027e4:	eb01 050e 	add.w	r5, r1, lr
 80027e8:	eb02 040e 	add.w	r4, r2, lr
 80027ec:	d966      	bls.n	80028bc <mpi_mul_hlp+0x104>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80027ee:	f851 600e 	ldr.w	r6, [r1, lr]
 80027f2:	fba3 7806 	umull	r7, r8, r3, r6
 80027f6:	f852 600e 	ldr.w	r6, [r2, lr]
 80027fa:	eb1c 0c07 	adds.w	ip, ip, r7
 80027fe:	bf2c      	ite	cs
 8002800:	2101      	movcs	r1, #1
 8002802:	2100      	movcc	r1, #0
 8002804:	eb1c 0606 	adds.w	r6, ip, r6
 8002808:	f842 600e 	str.w	r6, [r2, lr]
 800280c:	686e      	ldr	r6, [r5, #4]
 800280e:	eb41 0108 	adc.w	r1, r1, r8
 8002812:	fba3 7806 	umull	r7, r8, r3, r6
 8002816:	6866      	ldr	r6, [r4, #4]
 8002818:	19ca      	adds	r2, r1, r7
 800281a:	bf2c      	ite	cs
 800281c:	2101      	movcs	r1, #1
 800281e:	2100      	movcc	r1, #0
 8002820:	1992      	adds	r2, r2, r6
 8002822:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 8002824:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
 8002826:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 800282a:	fba3 7806 	umull	r7, r8, r3, r6
 800282e:	68a6      	ldr	r6, [r4, #8]
 8002830:	19c9      	adds	r1, r1, r7
 8002832:	bf2c      	ite	cs
 8002834:	2201      	movcs	r2, #1
 8002836:	2200      	movcc	r2, #0
 8002838:	1989      	adds	r1, r1, r6
 800283a:	60a1      	str	r1, [r4, #8]
 800283c:	68ee      	ldr	r6, [r5, #12]
 800283e:	eb42 0208 	adc.w	r2, r2, r8
 8002842:	fba3 7806 	umull	r7, r8, r3, r6
 8002846:	68e6      	ldr	r6, [r4, #12]
 8002848:	19d2      	adds	r2, r2, r7
 800284a:	bf2c      	ite	cs
 800284c:	2101      	movcs	r1, #1
 800284e:	2100      	movcc	r1, #0
 8002850:	1992      	adds	r2, r2, r6
 8002852:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 8002854:	692e      	ldr	r6, [r5, #16]
        MULADDC_CORE   MULADDC_CORE
 8002856:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 800285a:	fba3 7806 	umull	r7, r8, r3, r6
 800285e:	6926      	ldr	r6, [r4, #16]
 8002860:	19c9      	adds	r1, r1, r7
 8002862:	bf2c      	ite	cs
 8002864:	2201      	movcs	r2, #1
 8002866:	2200      	movcc	r2, #0
 8002868:	1989      	adds	r1, r1, r6
 800286a:	6121      	str	r1, [r4, #16]
 800286c:	696e      	ldr	r6, [r5, #20]
 800286e:	eb42 0208 	adc.w	r2, r2, r8
 8002872:	fba3 7806 	umull	r7, r8, r3, r6
 8002876:	6966      	ldr	r6, [r4, #20]
 8002878:	19d2      	adds	r2, r2, r7
 800287a:	bf2c      	ite	cs
 800287c:	2101      	movcs	r1, #1
 800287e:	2100      	movcc	r1, #0
 8002880:	1992      	adds	r2, r2, r6
 8002882:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 8002884:	69ae      	ldr	r6, [r5, #24]
        MULADDC_CORE   MULADDC_CORE
 8002886:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 800288a:	fba3 7806 	umull	r7, r8, r3, r6
 800288e:	69a6      	ldr	r6, [r4, #24]
 8002890:	19c9      	adds	r1, r1, r7
 8002892:	bf2c      	ite	cs
 8002894:	2201      	movcs	r2, #1
 8002896:	2200      	movcc	r2, #0
 8002898:	1989      	adds	r1, r1, r6
 800289a:	61a1      	str	r1, [r4, #24]
 800289c:	69ee      	ldr	r6, [r5, #28]
 800289e:	69e1      	ldr	r1, [r4, #28]
 80028a0:	fba3 6706 	umull	r6, r7, r3, r6
 80028a4:	eb42 0208 	adc.w	r2, r2, r8
 80028a8:	1992      	adds	r2, r2, r6
 80028aa:	bf2c      	ite	cs
 80028ac:	f04f 0c01 	movcs.w	ip, #1
 80028b0:	f04f 0c00 	movcc.w	ip, #0
 80028b4:	1852      	adds	r2, r2, r1
 80028b6:	eb4c 0c07 	adc.w	ip, ip, r7
 80028ba:	61e2      	str	r2, [r4, #28]
 80028bc:	08c2      	lsrs	r2, r0, #3
 80028be:	0151      	lsls	r1, r2, #5
 80028c0:	440c      	add	r4, r1
 80028c2:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 80028c6:	440d      	add	r5, r1
 80028c8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80028cc:	4284      	cmp	r4, r0
 80028ce:	f040 812c 	bne.w	8002b2a <mpi_mul_hlp+0x372>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	4463      	add	r3, ip
    }
    while( c != 0 );
 80028d6:	459c      	cmp	ip, r3
        *d += c; c = ( *d < c ); d++;
 80028d8:	f840 3b04 	str.w	r3, [r0], #4
    while( c != 0 );
 80028dc:	f200 813a 	bhi.w	8002b54 <mpi_mul_hlp+0x39c>
}
 80028e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_CORE   MULADDC_CORE
 80028e4:	f855 6c40 	ldr.w	r6, [r5, #-64]
 80028e8:	fba3 9a06 	umull	r9, sl, r3, r6
 80028ec:	f854 6c40 	ldr.w	r6, [r4, #-64]
 80028f0:	eb1c 0c09 	adds.w	ip, ip, r9
 80028f4:	bf2c      	ite	cs
 80028f6:	f04f 0801 	movcs.w	r8, #1
 80028fa:	f04f 0800 	movcc.w	r8, #0
 80028fe:	eb1c 0606 	adds.w	r6, ip, r6
 8002902:	f844 6c40 	str.w	r6, [r4, #-64]
 8002906:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 800290a:	eb48 080a 	adc.w	r8, r8, sl
 800290e:	fba3 9a06 	umull	r9, sl, r3, r6
 8002912:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 8002916:	eb18 0809 	adds.w	r8, r8, r9
 800291a:	bf2c      	ite	cs
 800291c:	f04f 0c01 	movcs.w	ip, #1
 8002920:	f04f 0c00 	movcc.w	ip, #0
 8002924:	eb18 0606 	adds.w	r6, r8, r6
 8002928:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 800292c:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
 8002930:	eb4c 070a 	adc.w	r7, ip, sl
        MULADDC_CORE   MULADDC_CORE
 8002934:	fba3 8906 	umull	r8, r9, r3, r6
 8002938:	f854 6c38 	ldr.w	r6, [r4, #-56]
 800293c:	eb17 0708 	adds.w	r7, r7, r8
 8002940:	bf2c      	ite	cs
 8002942:	f04f 0c01 	movcs.w	ip, #1
 8002946:	f04f 0c00 	movcc.w	ip, #0
 800294a:	19be      	adds	r6, r7, r6
 800294c:	f844 6c38 	str.w	r6, [r4, #-56]
 8002950:	f855 7c34 	ldr.w	r7, [r5, #-52]
 8002954:	f854 6c34 	ldr.w	r6, [r4, #-52]
 8002958:	eb4c 0c09 	adc.w	ip, ip, r9
 800295c:	fba3 8907 	umull	r8, r9, r3, r7
 8002960:	eb1c 0c08 	adds.w	ip, ip, r8
 8002964:	bf2c      	ite	cs
 8002966:	2701      	movcs	r7, #1
 8002968:	2700      	movcc	r7, #0
 800296a:	eb1c 0606 	adds.w	r6, ip, r6
 800296e:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 8002972:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
 8002976:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 800297a:	fba3 8906 	umull	r8, r9, r3, r6
 800297e:	f854 6c30 	ldr.w	r6, [r4, #-48]
 8002982:	eb17 0708 	adds.w	r7, r7, r8
 8002986:	bf2c      	ite	cs
 8002988:	f04f 0c01 	movcs.w	ip, #1
 800298c:	f04f 0c00 	movcc.w	ip, #0
 8002990:	19be      	adds	r6, r7, r6
 8002992:	f844 6c30 	str.w	r6, [r4, #-48]
 8002996:	f855 7c2c 	ldr.w	r7, [r5, #-44]
 800299a:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 800299e:	eb4c 0c09 	adc.w	ip, ip, r9
 80029a2:	fba3 8907 	umull	r8, r9, r3, r7
 80029a6:	eb1c 0c08 	adds.w	ip, ip, r8
 80029aa:	bf2c      	ite	cs
 80029ac:	2701      	movcs	r7, #1
 80029ae:	2700      	movcc	r7, #0
 80029b0:	eb1c 0606 	adds.w	r6, ip, r6
 80029b4:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 80029b8:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
 80029bc:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 80029c0:	fba3 8906 	umull	r8, r9, r3, r6
 80029c4:	f854 6c28 	ldr.w	r6, [r4, #-40]
 80029c8:	eb17 0708 	adds.w	r7, r7, r8
 80029cc:	bf2c      	ite	cs
 80029ce:	f04f 0c01 	movcs.w	ip, #1
 80029d2:	f04f 0c00 	movcc.w	ip, #0
 80029d6:	19be      	adds	r6, r7, r6
 80029d8:	f844 6c28 	str.w	r6, [r4, #-40]
 80029dc:	f855 7c24 	ldr.w	r7, [r5, #-36]
 80029e0:	f854 6c24 	ldr.w	r6, [r4, #-36]
 80029e4:	eb4c 0c09 	adc.w	ip, ip, r9
 80029e8:	fba3 8907 	umull	r8, r9, r3, r7
 80029ec:	eb1c 0c08 	adds.w	ip, ip, r8
 80029f0:	bf2c      	ite	cs
 80029f2:	2701      	movcs	r7, #1
 80029f4:	2700      	movcc	r7, #0
 80029f6:	eb1c 0606 	adds.w	r6, ip, r6
 80029fa:	f844 6c24 	str.w	r6, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
 80029fe:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
 8002a02:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8002a06:	fba3 8906 	umull	r8, r9, r3, r6
 8002a0a:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8002a0e:	eb17 0708 	adds.w	r7, r7, r8
 8002a12:	bf2c      	ite	cs
 8002a14:	f04f 0c01 	movcs.w	ip, #1
 8002a18:	f04f 0c00 	movcc.w	ip, #0
 8002a1c:	19be      	adds	r6, r7, r6
 8002a1e:	f844 6c20 	str.w	r6, [r4, #-32]
 8002a22:	f855 7c1c 	ldr.w	r7, [r5, #-28]
 8002a26:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 8002a2a:	eb4c 0c09 	adc.w	ip, ip, r9
 8002a2e:	fba3 8907 	umull	r8, r9, r3, r7
 8002a32:	eb1c 0c08 	adds.w	ip, ip, r8
 8002a36:	bf2c      	ite	cs
 8002a38:	2701      	movcs	r7, #1
 8002a3a:	2700      	movcc	r7, #0
 8002a3c:	eb1c 0606 	adds.w	r6, ip, r6
 8002a40:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 8002a44:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
 8002a48:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8002a4c:	fba3 8906 	umull	r8, r9, r3, r6
 8002a50:	f854 6c18 	ldr.w	r6, [r4, #-24]
 8002a54:	eb17 0708 	adds.w	r7, r7, r8
 8002a58:	bf2c      	ite	cs
 8002a5a:	f04f 0c01 	movcs.w	ip, #1
 8002a5e:	f04f 0c00 	movcc.w	ip, #0
 8002a62:	19be      	adds	r6, r7, r6
 8002a64:	f844 6c18 	str.w	r6, [r4, #-24]
 8002a68:	f855 7c14 	ldr.w	r7, [r5, #-20]
 8002a6c:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8002a70:	eb4c 0c09 	adc.w	ip, ip, r9
 8002a74:	fba3 8907 	umull	r8, r9, r3, r7
 8002a78:	eb1c 0c08 	adds.w	ip, ip, r8
 8002a7c:	bf2c      	ite	cs
 8002a7e:	2701      	movcs	r7, #1
 8002a80:	2700      	movcc	r7, #0
 8002a82:	eb1c 0606 	adds.w	r6, ip, r6
 8002a86:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 8002a8a:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
 8002a8e:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8002a92:	fba3 8906 	umull	r8, r9, r3, r6
 8002a96:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8002a9a:	eb17 0708 	adds.w	r7, r7, r8
 8002a9e:	bf2c      	ite	cs
 8002aa0:	f04f 0c01 	movcs.w	ip, #1
 8002aa4:	f04f 0c00 	movcc.w	ip, #0
 8002aa8:	19be      	adds	r6, r7, r6
 8002aaa:	f844 6c10 	str.w	r6, [r4, #-16]
 8002aae:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 8002ab2:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8002ab6:	eb4c 0c09 	adc.w	ip, ip, r9
 8002aba:	fba3 8907 	umull	r8, r9, r3, r7
 8002abe:	eb1c 0c08 	adds.w	ip, ip, r8
 8002ac2:	bf2c      	ite	cs
 8002ac4:	2701      	movcs	r7, #1
 8002ac6:	2700      	movcc	r7, #0
 8002ac8:	eb1c 0606 	adds.w	r6, ip, r6
 8002acc:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 8002ad0:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
 8002ad4:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8002ad8:	fba3 8906 	umull	r8, r9, r3, r6
 8002adc:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8002ae0:	eb17 0708 	adds.w	r7, r7, r8
 8002ae4:	bf2c      	ite	cs
 8002ae6:	f04f 0c01 	movcs.w	ip, #1
 8002aea:	f04f 0c00 	movcc.w	ip, #0
 8002aee:	19be      	adds	r6, r7, r6
 8002af0:	f844 6c08 	str.w	r6, [r4, #-8]
 8002af4:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8002af8:	eb4c 0c09 	adc.w	ip, ip, r9
 8002afc:	fba3 7806 	umull	r7, r8, r3, r6
 8002b00:	eb1c 0c07 	adds.w	ip, ip, r7
 8002b04:	bf2c      	ite	cs
 8002b06:	2601      	movcs	r6, #1
 8002b08:	2600      	movcc	r6, #0
 8002b0a:	eb08 0706 	add.w	r7, r8, r6
 8002b0e:	f854 8c04 	ldr.w	r8, [r4, #-4]
 8002b12:	eb0c 0608 	add.w	r6, ip, r8
 8002b16:	f844 6c04 	str.w	r6, [r4, #-4]
    for( ; i >= 16; i -= 16 )
 8002b1a:	f1ae 0e10 	sub.w	lr, lr, #16
        MULADDC_CORE   MULADDC_CORE
 8002b1e:	45b0      	cmp	r8, r6
 8002b20:	bf94      	ite	ls
 8002b22:	46bc      	movls	ip, r7
 8002b24:	f107 0c01 	addhi.w	ip, r7, #1
 8002b28:	e64d      	b.n	80027c6 <mpi_mul_hlp+0xe>
        MULADDC_CORE
 8002b2a:	f855 6b04 	ldr.w	r6, [r5], #4
 8002b2e:	fba3 6706 	umull	r6, r7, r3, r6
 8002b32:	eb1c 0c06 	adds.w	ip, ip, r6
 8002b36:	6826      	ldr	r6, [r4, #0]
 8002b38:	bf2c      	ite	cs
 8002b3a:	2101      	movcs	r1, #1
 8002b3c:	2100      	movcc	r1, #0
 8002b3e:	eb0c 0206 	add.w	r2, ip, r6
 8002b42:	4439      	add	r1, r7
 8002b44:	f844 2b04 	str.w	r2, [r4], #4
 8002b48:	4296      	cmp	r6, r2
 8002b4a:	bf94      	ite	ls
 8002b4c:	468c      	movls	ip, r1
 8002b4e:	f101 0c01 	addhi.w	ip, r1, #1
 8002b52:	e6bb      	b.n	80028cc <mpi_mul_hlp+0x114>
        *d += c; c = ( *d < c ); d++;
 8002b54:	f04f 0c01 	mov.w	ip, #1
 8002b58:	e6bb      	b.n	80028d2 <mpi_mul_hlp+0x11a>

08002b5a <mbedtls_mpi_init>:
    if( X == NULL )
 8002b5a:	b120      	cbz	r0, 8002b66 <mbedtls_mpi_init+0xc>
    X->s = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	6003      	str	r3, [r0, #0]
    X->n = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 8002b64:	6083      	str	r3, [r0, #8]
 8002b66:	4770      	bx	lr

08002b68 <mbedtls_mpi_free>:
{
 8002b68:	b510      	push	{r4, lr}
    if( X == NULL )
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	b170      	cbz	r0, 8002b8c <mbedtls_mpi_free+0x24>
    if( X->p != NULL )
 8002b6e:	6880      	ldr	r0, [r0, #8]
 8002b70:	b138      	cbz	r0, 8002b82 <mbedtls_mpi_free+0x1a>
        mbedtls_mpi_zeroize( X->p, X->n );
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	4602      	mov	r2, r0
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8002b76:	2100      	movs	r1, #0
 8002b78:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b7c:	d207      	bcs.n	8002b8e <mbedtls_mpi_free+0x26>
        mbedtls_free( X->p );
 8002b7e:	f00b fc37 	bl	800e3f0 <free>
    X->s = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	6023      	str	r3, [r4, #0]
    X->n = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 8002b8a:	60a3      	str	r3, [r4, #8]
 8002b8c:	bd10      	pop	{r4, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8002b8e:	6011      	str	r1, [r2, #0]
 8002b90:	3204      	adds	r2, #4
 8002b92:	e7f1      	b.n	8002b78 <mbedtls_mpi_free+0x10>

08002b94 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8002b94:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b98:	4299      	cmp	r1, r3
{
 8002b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	460e      	mov	r6, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8002ba2:	d903      	bls.n	8002bac <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8002ba4:	f06f 000f 	mvn.w	r0, #15
 8002ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n < nblimbs )
 8002bac:	6844      	ldr	r4, [r0, #4]
 8002bae:	42a1      	cmp	r1, r4
 8002bb0:	d917      	bls.n	8002be2 <mbedtls_mpi_grow+0x4e>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f00b fbe1 	bl	800e37c <calloc>
 8002bba:	4680      	mov	r8, r0
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d0f1      	beq.n	8002ba4 <mbedtls_mpi_grow+0x10>
        if( X->p != NULL )
 8002bc0:	68af      	ldr	r7, [r5, #8]
 8002bc2:	b15f      	cbz	r7, 8002bdc <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 8002bc4:	00a2      	lsls	r2, r4, #2
 8002bc6:	4639      	mov	r1, r7
 8002bc8:	f00b fc29 	bl	800e41e <memcpy>
 8002bcc:	463b      	mov	r3, r7
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f114 34ff 	adds.w	r4, r4, #4294967295
 8002bd4:	d208      	bcs.n	8002be8 <mbedtls_mpi_grow+0x54>
            mbedtls_free( X->p );
 8002bd6:	4638      	mov	r0, r7
 8002bd8:	f00b fc0a 	bl	800e3f0 <free>
        X->n = nblimbs;
 8002bdc:	606e      	str	r6, [r5, #4]
        X->p = p;
 8002bde:	f8c5 8008 	str.w	r8, [r5, #8]
    return( 0 );
 8002be2:	2000      	movs	r0, #0
}
 8002be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	3304      	adds	r3, #4
 8002bec:	e7f0      	b.n	8002bd0 <mbedtls_mpi_grow+0x3c>

08002bee <mbedtls_mpi_copy>:
    if( X == Y )
 8002bee:	4288      	cmp	r0, r1
{
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	460f      	mov	r7, r1
    if( X == Y )
 8002bf6:	d022      	beq.n	8002c3e <mbedtls_mpi_copy+0x50>
    if( Y->p == NULL )
 8002bf8:	688d      	ldr	r5, [r1, #8]
 8002bfa:	b91d      	cbnz	r5, 8002c04 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 8002bfc:	f7ff ffb4 	bl	8002b68 <mbedtls_mpi_free>
}
 8002c00:	4628      	mov	r0, r5
 8002c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 8002c04:	684a      	ldr	r2, [r1, #4]
 8002c06:	3a01      	subs	r2, #1
 8002c08:	b11a      	cbz	r2, 8002c12 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 8002c0a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f9      	beq.n	8002c06 <mbedtls_mpi_copy+0x18>
    i++;
 8002c12:	1c54      	adds	r4, r2, #1
    X->s = Y->s;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6033      	str	r3, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f7ff ffba 	bl	8002b94 <mbedtls_mpi_grow>
 8002c20:	4605      	mov	r5, r0
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d1ec      	bne.n	8002c00 <mbedtls_mpi_copy+0x12>
    memset( X->p, 0, X->n * ciL );
 8002c26:	6872      	ldr	r2, [r6, #4]
 8002c28:	4601      	mov	r1, r0
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	68b0      	ldr	r0, [r6, #8]
 8002c2e:	f00b fc1b 	bl	800e468 <memset>
    memcpy( X->p, Y->p, i * ciL );
 8002c32:	00a2      	lsls	r2, r4, #2
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68b0      	ldr	r0, [r6, #8]
 8002c38:	f00b fbf1 	bl	800e41e <memcpy>
 8002c3c:	e7e0      	b.n	8002c00 <mbedtls_mpi_copy+0x12>
        return( 0 );
 8002c3e:	2500      	movs	r5, #0
 8002c40:	e7de      	b.n	8002c00 <mbedtls_mpi_copy+0x12>

08002c42 <mbedtls_mpi_lset>:
{
 8002c42:	b570      	push	{r4, r5, r6, lr}
 8002c44:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8002c46:	2101      	movs	r1, #1
{
 8002c48:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8002c4a:	f7ff ffa3 	bl	8002b94 <mbedtls_mpi_grow>
 8002c4e:	4605      	mov	r5, r0
 8002c50:	b988      	cbnz	r0, 8002c76 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 8002c52:	6862      	ldr	r2, [r4, #4]
 8002c54:	4601      	mov	r1, r0
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	68a0      	ldr	r0, [r4, #8]
 8002c5a:	f00b fc05 	bl	800e468 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8002c5e:	68a3      	ldr	r3, [r4, #8]
 8002c60:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 8002c64:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 8002c66:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 8002c6a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8002c6c:	bfb4      	ite	lt
 8002c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c72:	2301      	movge	r3, #1
 8002c74:	6023      	str	r3, [r4, #0]
}
 8002c76:	4628      	mov	r0, r5
 8002c78:	bd70      	pop	{r4, r5, r6, pc}

08002c7a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 8002c7a:	6843      	ldr	r3, [r0, #4]
 8002c7c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8002c80:	bf3f      	itttt	cc
 8002c82:	6883      	ldrcc	r3, [r0, #8]
 8002c84:	094a      	lsrcc	r2, r1, #5
 8002c86:	f001 011f 	andcc.w	r1, r1, #31
 8002c8a:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 8002c8e:	bf3a      	itte	cc
 8002c90:	40c8      	lsrcc	r0, r1
 8002c92:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 8002c96:	2000      	movcs	r0, #0
}
 8002c98:	4770      	bx	lr

08002c9a <mbedtls_mpi_lsb>:
{
 8002c9a:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
 8002c9c:	2300      	movs	r3, #0
    for( i = 0; i < X->n; i++ )
 8002c9e:	6845      	ldr	r5, [r0, #4]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	42a9      	cmp	r1, r5
 8002ca4:	d00e      	beq.n	8002cc4 <mbedtls_mpi_lsb+0x2a>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8002ca6:	6882      	ldr	r2, [r0, #8]
 8002ca8:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8002cac:	2200      	movs	r2, #0
 8002cae:	fa24 f602 	lsr.w	r6, r4, r2
 8002cb2:	07f6      	lsls	r6, r6, #31
 8002cb4:	d407      	bmi.n	8002cc6 <mbedtls_mpi_lsb+0x2c>
        for( j = 0; j < biL; j++, count++ )
 8002cb6:	3201      	adds	r2, #1
 8002cb8:	2a20      	cmp	r2, #32
 8002cba:	f103 0301 	add.w	r3, r3, #1
 8002cbe:	d1f6      	bne.n	8002cae <mbedtls_mpi_lsb+0x14>
    for( i = 0; i < X->n; i++ )
 8002cc0:	3101      	adds	r1, #1
 8002cc2:	e7ee      	b.n	8002ca2 <mbedtls_mpi_lsb+0x8>
    return( 0 );
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}

08002cca <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 8002cca:	6843      	ldr	r3, [r0, #4]
{
 8002ccc:	b510      	push	{r4, lr}
    if( X->n == 0 )
 8002cce:	b1e3      	cbz	r3, 8002d0a <mbedtls_mpi_bitlen+0x40>
    for( i = X->n - 1; i > 0; i-- )
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	6881      	ldr	r1, [r0, #8]
 8002cdc:	b97a      	cbnz	r2, 8002cfe <mbedtls_mpi_bitlen+0x34>
    j = biL - mbedtls_clz( X->p[i] );
 8002cde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    for( j = 0; j < biL; j++ )
 8002ce2:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8002ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        if( x & mask ) break;
 8002ce8:	4219      	tst	r1, r3
 8002cea:	d104      	bne.n	8002cf6 <mbedtls_mpi_bitlen+0x2c>
    for( j = 0; j < biL; j++ )
 8002cec:	3001      	adds	r0, #1
 8002cee:	2820      	cmp	r0, #32
        mask >>= 1;
 8002cf0:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 8002cf4:	d1f8      	bne.n	8002ce8 <mbedtls_mpi_bitlen+0x1e>
    return( ( i * biL ) + j );
 8002cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8002cfa:	3020      	adds	r0, #32
 8002cfc:	bd10      	pop	{r4, pc}
        if( X->p[i] != 0 )
 8002cfe:	58cc      	ldr	r4, [r1, r3]
 8002d00:	3b04      	subs	r3, #4
 8002d02:	2c00      	cmp	r4, #0
 8002d04:	d1eb      	bne.n	8002cde <mbedtls_mpi_bitlen+0x14>
    for( i = X->n - 1; i > 0; i-- )
 8002d06:	3a01      	subs	r2, #1
 8002d08:	e7e7      	b.n	8002cda <mbedtls_mpi_bitlen+0x10>
        return( 0 );
 8002d0a:	4618      	mov	r0, r3
}
 8002d0c:	bd10      	pop	{r4, pc}

08002d0e <mbedtls_mpi_size>:
{
 8002d0e:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 8002d10:	f7ff ffdb 	bl	8002cca <mbedtls_mpi_bitlen>
 8002d14:	3007      	adds	r0, #7
}
 8002d16:	08c0      	lsrs	r0, r0, #3
 8002d18:	bd08      	pop	{r3, pc}

08002d1a <mbedtls_mpi_read_binary>:
{
 8002d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1c:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8002d1e:	f012 0103 	ands.w	r1, r2, #3
 8002d22:	bf18      	it	ne
 8002d24:	2101      	movne	r1, #1
    if( X->n != limbs )
 8002d26:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8002d28:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    if( X->n != limbs )
 8002d2c:	429c      	cmp	r4, r3
{
 8002d2e:	4606      	mov	r6, r0
 8002d30:	4615      	mov	r5, r2
    if( X->n != limbs )
 8002d32:	d105      	bne.n	8002d40 <mbedtls_mpi_read_binary+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8002d34:	2100      	movs	r1, #0
 8002d36:	4630      	mov	r0, r6
 8002d38:	f7ff ff83 	bl	8002c42 <mbedtls_mpi_lset>
 8002d3c:	b160      	cbz	r0, 8002d58 <mbedtls_mpi_read_binary+0x3e>
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mbedtls_mpi_free( X );
 8002d40:	f7ff ff12 	bl	8002b68 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8002d44:	4630      	mov	r0, r6
 8002d46:	f7ff ff08 	bl	8002b5a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f7ff ff21 	bl	8002b94 <mbedtls_mpi_grow>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d0ee      	beq.n	8002d34 <mbedtls_mpi_read_binary+0x1a>
 8002d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d58:	1979      	adds	r1, r7, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8002d5a:	4603      	mov	r3, r0
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8002d5c:	42ab      	cmp	r3, r5
 8002d5e:	d100      	bne.n	8002d62 <mbedtls_mpi_read_binary+0x48>
}
 8002d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 8002d62:	f023 0703 	bic.w	r7, r3, #3
 8002d66:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 8002d6a:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8002d6e:	00dc      	lsls	r4, r3, #3
 8002d70:	f004 0418 	and.w	r4, r4, #24
 8002d74:	fa02 f404 	lsl.w	r4, r2, r4
 8002d78:	f85e 2007 	ldr.w	r2, [lr, r7]
 8002d7c:	4322      	orrs	r2, r4
 8002d7e:	f84e 2007 	str.w	r2, [lr, r7]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8002d82:	3301      	adds	r3, #1
 8002d84:	e7ea      	b.n	8002d5c <mbedtls_mpi_read_binary+0x42>

08002d86 <mbedtls_mpi_write_binary>:
{
 8002d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d88:	4617      	mov	r7, r2
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	460c      	mov	r4, r1
    n = mbedtls_mpi_size( X );
 8002d8e:	f7ff ffbe 	bl	8002d0e <mbedtls_mpi_size>
    if( buflen < n )
 8002d92:	42b8      	cmp	r0, r7
    n = mbedtls_mpi_size( X );
 8002d94:	4606      	mov	r6, r0
    if( buflen < n )
 8002d96:	d816      	bhi.n	8002dc6 <mbedtls_mpi_write_binary+0x40>
    memset( buf, 0, buflen );
 8002d98:	4620      	mov	r0, r4
 8002d9a:	463a      	mov	r2, r7
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f00b fb63 	bl	800e468 <memset>
 8002da2:	443c      	add	r4, r7
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8002da4:	2300      	movs	r3, #0
 8002da6:	42b3      	cmp	r3, r6
 8002da8:	d101      	bne.n	8002dae <mbedtls_mpi_write_binary+0x28>
    return( 0 );
 8002daa:	2000      	movs	r0, #0
 8002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 8002dae:	f023 0003 	bic.w	r0, r3, #3
 8002db2:	68af      	ldr	r7, [r5, #8]
 8002db4:	00da      	lsls	r2, r3, #3
 8002db6:	f002 0118 	and.w	r1, r2, #24
 8002dba:	583a      	ldr	r2, [r7, r0]
 8002dbc:	40ca      	lsrs	r2, r1
 8002dbe:	f804 2d01 	strb.w	r2, [r4, #-1]!
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	e7ef      	b.n	8002da6 <mbedtls_mpi_write_binary+0x20>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8002dc6:	f06f 0007 	mvn.w	r0, #7
}
 8002dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dcc <mbedtls_mpi_shift_l>:
{
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	4606      	mov	r6, r0
 8002dd0:	460c      	mov	r4, r1
    v0 = count / (biL    );
 8002dd2:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
 8002dd4:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 8002dd8:	f7ff ff77 	bl	8002cca <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 8002ddc:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 8002dde:	4420      	add	r0, r4
    if( X->n * biL < i )
 8002de0:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 8002de4:	d803      	bhi.n	8002dee <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 8002de6:	b975      	cbnz	r5, 8002e06 <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 8002de8:	bb4f      	cbnz	r7, 8002e3e <mbedtls_mpi_shift_l+0x72>
    ret = 0;
 8002dea:	2000      	movs	r0, #0
 8002dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8002dee:	f010 011f 	ands.w	r1, r0, #31
 8002df2:	bf18      	it	ne
 8002df4:	2101      	movne	r1, #1
 8002df6:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f7ff feca 	bl	8002b94 <mbedtls_mpi_grow>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d0f0      	beq.n	8002de6 <mbedtls_mpi_shift_l+0x1a>
 8002e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 8002e06:	6873      	ldr	r3, [r6, #4]
 8002e08:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	f06f 0103 	mvn.w	r1, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4369      	muls	r1, r5
 8002e16:	42ab      	cmp	r3, r5
 8002e18:	d80a      	bhi.n	8002e30 <mbedtls_mpi_shift_l+0x64>
 8002e1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 8002e22:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
 8002e24:	1d19      	adds	r1, r3, #4
 8002e26:	d0df      	beq.n	8002de8 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 8002e28:	68b1      	ldr	r1, [r6, #8]
 8002e2a:	50ca      	str	r2, [r1, r3]
 8002e2c:	3b04      	subs	r3, #4
 8002e2e:	e7f9      	b.n	8002e24 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 8002e30:	68b0      	ldr	r0, [r6, #8]
 8002e32:	1884      	adds	r4, r0, r2
        for( i = X->n; i > v0; i-- )
 8002e34:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 8002e36:	5864      	ldr	r4, [r4, r1]
 8002e38:	5084      	str	r4, [r0, r2]
 8002e3a:	3a04      	subs	r2, #4
 8002e3c:	e7eb      	b.n	8002e16 <mbedtls_mpi_shift_l+0x4a>
        for( i = v0; i < X->n; i++ )
 8002e3e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8002e42:	00ab      	lsls	r3, r5, #2
 8002e44:	2100      	movs	r1, #0
            r1 = X->p[i] >> (biL - t1);
 8002e46:	f1c7 0c20 	rsb	ip, r7, #32
        for( i = v0; i < X->n; i++ )
 8002e4a:	4575      	cmp	r5, lr
 8002e4c:	d2cd      	bcs.n	8002dea <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 8002e4e:	68b4      	ldr	r4, [r6, #8]
 8002e50:	58e0      	ldr	r0, [r4, r3]
            X->p[i] <<= t1;
 8002e52:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 8002e56:	430a      	orrs	r2, r1
 8002e58:	50e2      	str	r2, [r4, r3]
        for( i = v0; i < X->n; i++ )
 8002e5a:	3501      	adds	r5, #1
 8002e5c:	3304      	adds	r3, #4
            r1 = X->p[i] >> (biL - t1);
 8002e5e:	fa20 f10c 	lsr.w	r1, r0, ip
 8002e62:	e7f2      	b.n	8002e4a <mbedtls_mpi_shift_l+0x7e>

08002e64 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8002e64:	6842      	ldr	r2, [r0, #4]
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
    v0 = count /  biL;
 8002e68:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8002e6a:	4294      	cmp	r4, r2
    v1 = count & (biL - 1);
 8002e6c:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8002e70:	d801      	bhi.n	8002e76 <mbedtls_mpi_shift_r+0x12>
 8002e72:	d105      	bne.n	8002e80 <mbedtls_mpi_shift_r+0x1c>
 8002e74:	b371      	cbz	r1, 8002ed4 <mbedtls_mpi_shift_r+0x70>
        return mbedtls_mpi_lset( X, 0 );
 8002e76:	2100      	movs	r1, #0
}
 8002e78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return mbedtls_mpi_lset( X, 0 );
 8002e7c:	f7ff bee1 	b.w	8002c42 <mbedtls_mpi_lset>
    if( v0 > 0 )
 8002e80:	bb54      	cbnz	r4, 8002ed8 <mbedtls_mpi_shift_r+0x74>
    if( v1 > 0 )
 8002e82:	b139      	cbz	r1, 8002e94 <mbedtls_mpi_shift_r+0x30>
 8002e84:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	2500      	movs	r5, #0
            r1 = X->p[i - 1] << (biL - v1);
 8002e8e:	f1c1 0e20 	rsb	lr, r1, #32
        for( i = X->n; i > 0; i-- )
 8002e92:	b9a2      	cbnz	r2, 8002ebe <mbedtls_mpi_shift_r+0x5a>
}
 8002e94:	2000      	movs	r0, #0
 8002e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
            X->p[i] = X->p[i + v0];
 8002e98:	6885      	ldr	r5, [r0, #8]
 8002e9a:	191e      	adds	r6, r3, r4
 8002e9c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8002ea0:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	1b15      	subs	r5, r2, r4
 8002ea8:	42ab      	cmp	r3, r5
 8002eaa:	d3f5      	bcc.n	8002e98 <mbedtls_mpi_shift_r+0x34>
 8002eac:	00ab      	lsls	r3, r5, #2
            X->p[i] = 0;
 8002eae:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
 8002eb0:	4295      	cmp	r5, r2
 8002eb2:	d2e6      	bcs.n	8002e82 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
 8002eb4:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 8002eb6:	3501      	adds	r5, #1
            X->p[i] = 0;
 8002eb8:	50f4      	str	r4, [r6, r3]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	e7f8      	b.n	8002eb0 <mbedtls_mpi_shift_r+0x4c>
            r1 = X->p[i - 1] << (biL - v1);
 8002ebe:	6887      	ldr	r7, [r0, #8]
 8002ec0:	58fe      	ldr	r6, [r7, r3]
            X->p[i - 1] >>= v1;
 8002ec2:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 8002ec6:	432c      	orrs	r4, r5
 8002ec8:	50fc      	str	r4, [r7, r3]
        for( i = X->n; i > 0; i-- )
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	3b04      	subs	r3, #4
            r1 = X->p[i - 1] << (biL - v1);
 8002ece:	fa06 f50e 	lsl.w	r5, r6, lr
 8002ed2:	e7de      	b.n	8002e92 <mbedtls_mpi_shift_r+0x2e>
    if( v0 > 0 )
 8002ed4:	2c00      	cmp	r4, #0
 8002ed6:	d0dd      	beq.n	8002e94 <mbedtls_mpi_shift_r+0x30>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e7e4      	b.n	8002ea6 <mbedtls_mpi_shift_r+0x42>

08002edc <mbedtls_mpi_cmp_abs>:
    for( i = X->n; i > 0; i-- )
 8002edc:	6843      	ldr	r3, [r0, #4]
{
 8002ede:	b570      	push	{r4, r5, r6, lr}
 8002ee0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	0092      	lsls	r2, r2, #2
    for( i = X->n; i > 0; i-- )
 8002ee8:	b94b      	cbnz	r3, 8002efe <mbedtls_mpi_cmp_abs+0x22>
    for( j = Y->n; j > 0; j-- )
 8002eea:	684c      	ldr	r4, [r1, #4]
 8002eec:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0092      	lsls	r2, r2, #2
 8002ef4:	b954      	cbnz	r4, 8002f0c <mbedtls_mpi_cmp_abs+0x30>
    if( i == 0 && j == 0 )
 8002ef6:	1c18      	adds	r0, r3, #0
 8002ef8:	bf18      	it	ne
 8002efa:	2001      	movne	r0, #1
}
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] != 0 )
 8002efe:	6884      	ldr	r4, [r0, #8]
 8002f00:	58a4      	ldr	r4, [r4, r2]
 8002f02:	3a04      	subs	r2, #4
 8002f04:	2c00      	cmp	r4, #0
 8002f06:	d1f0      	bne.n	8002eea <mbedtls_mpi_cmp_abs+0xe>
    for( i = X->n; i > 0; i-- )
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	e7ed      	b.n	8002ee8 <mbedtls_mpi_cmp_abs+0xc>
        if( Y->p[j - 1] != 0 )
 8002f0c:	688d      	ldr	r5, [r1, #8]
 8002f0e:	58ae      	ldr	r6, [r5, r2]
 8002f10:	3a04      	subs	r2, #4
 8002f12:	b90e      	cbnz	r6, 8002f18 <mbedtls_mpi_cmp_abs+0x3c>
    for( j = Y->n; j > 0; j-- )
 8002f14:	3c01      	subs	r4, #1
 8002f16:	e7ed      	b.n	8002ef4 <mbedtls_mpi_cmp_abs+0x18>
    if( i > j ) return(  1 );
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d311      	bcc.n	8002f40 <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
 8002f1c:	d812      	bhi.n	8002f44 <mbedtls_mpi_cmp_abs+0x68>
 8002f1e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0092      	lsls	r2, r2, #2
    for( ; i > 0; i-- )
 8002f26:	b90b      	cbnz	r3, 8002f2c <mbedtls_mpi_cmp_abs+0x50>
    return( 0 );
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8002f2c:	6881      	ldr	r1, [r0, #8]
 8002f2e:	588c      	ldr	r4, [r1, r2]
 8002f30:	58a9      	ldr	r1, [r5, r2]
 8002f32:	428c      	cmp	r4, r1
 8002f34:	d804      	bhi.n	8002f40 <mbedtls_mpi_cmp_abs+0x64>
 8002f36:	f1a2 0204 	sub.w	r2, r2, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8002f3a:	d303      	bcc.n	8002f44 <mbedtls_mpi_cmp_abs+0x68>
    for( ; i > 0; i-- )
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	e7f2      	b.n	8002f26 <mbedtls_mpi_cmp_abs+0x4a>
    if( i > j ) return(  1 );
 8002f40:	2001      	movs	r0, #1
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	bd70      	pop	{r4, r5, r6, pc}

08002f4a <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 8002f4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	4616      	mov	r6, r2
 8002f52:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 8002f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	6873      	ldr	r3, [r6, #4]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	429a      	cmp	r2, r3
{
 8002f5e:	4681      	mov	r9, r0
 8002f60:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 8002f62:	d353      	bcc.n	800300c <mpi_montmul+0xc2>
 8002f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f66:	6898      	ldr	r0, [r3, #8]
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d04f      	beq.n	800300c <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 8002f6c:	0092      	lsls	r2, r2, #2
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f00b fa7a 	bl	800e468 <memset>

    d = T->p;
 8002f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 8002f76:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 8002f7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    d = T->p;
 8002f82:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 8002f84:	4553      	cmp	r3, sl
 8002f86:	bf28      	it	cs
 8002f88:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 8002f8a:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 8002f8e:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 8002f90:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 8002f92:	2400      	movs	r4, #0
 8002f94:	4554      	cmp	r4, sl
 8002f96:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8002f9a:	d11b      	bne.n	8002fd4 <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 8002f9c:	9b00      	ldr	r3, [sp, #0]
 8002f9e:	1f39      	subs	r1, r7, #4
 8002fa0:	440b      	add	r3, r1
 8002fa2:	463a      	mov	r2, r7
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f00b fa3a 	bl	800e41e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 8002faa:	4631      	mov	r1, r6
 8002fac:	4648      	mov	r0, r9
 8002fae:	f7ff ff95 	bl	8002edc <mbedtls_mpi_cmp_abs>
 8002fb2:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 8002fb4:	bfb3      	iteet	lt
 8002fb6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
        mpi_sub_hlp( n, N->p, A->p );
 8002fb8:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 8002fbc:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 8002fbe:	689a      	ldrlt	r2, [r3, #8]
 8002fc0:	bfb8      	it	lt
 8002fc2:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7ff fbcc 	bl	8002764 <mpi_sub_hlp>

    return( 0 );
 8002fcc:	2000      	movs	r0, #0
}
 8002fce:	b005      	add	sp, #20
 8002fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8002fd4:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 8002fd8:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8002fdc:	682a      	ldr	r2, [r5, #0]
 8002fde:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 8002fe0:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8002fe2:	fb03 2308 	mla	r3, r3, r8, r2
 8002fe6:	9a03      	ldr	r2, [sp, #12]
 8002fe8:	4353      	muls	r3, r2
 8002fea:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 8002fec:	462a      	mov	r2, r5
 8002fee:	4643      	mov	r3, r8
 8002ff0:	f7ff fbe2 	bl	80027b8 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8002ff4:	9b02      	ldr	r3, [sp, #8]
 8002ff6:	68b1      	ldr	r1, [r6, #8]
 8002ff8:	462a      	mov	r2, r5
 8002ffa:	4650      	mov	r0, sl
 8002ffc:	f7ff fbdc 	bl	80027b8 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 8003000:	f845 8b04 	str.w	r8, [r5], #4
 8003004:	2300      	movs	r3, #0
 8003006:	51eb      	str	r3, [r5, r7]
    for( i = 0; i < n; i++ )
 8003008:	3401      	adds	r4, #1
 800300a:	e7c3      	b.n	8002f94 <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800300c:	f06f 0003 	mvn.w	r0, #3
 8003010:	e7dd      	b.n	8002fce <mpi_montmul+0x84>

08003012 <mbedtls_mpi_cmp_mpi>:
    for( i = X->n; i > 0; i-- )
 8003012:	6843      	ldr	r3, [r0, #4]
{
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800301a:	3a01      	subs	r2, #1
 800301c:	0092      	lsls	r2, r2, #2
    for( i = X->n; i > 0; i-- )
 800301e:	b93b      	cbnz	r3, 8003030 <mbedtls_mpi_cmp_mpi+0x1e>
    for( j = Y->n; j > 0; j-- )
 8003020:	684c      	ldr	r4, [r1, #4]
 8003022:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8003026:	3a01      	subs	r2, #1
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	b944      	cbnz	r4, 800303e <mbedtls_mpi_cmp_mpi+0x2c>
    if( i == 0 && j == 0 )
 800302c:	b97b      	cbnz	r3, 800304e <mbedtls_mpi_cmp_mpi+0x3c>
 800302e:	e023      	b.n	8003078 <mbedtls_mpi_cmp_mpi+0x66>
        if( X->p[i - 1] != 0 )
 8003030:	6884      	ldr	r4, [r0, #8]
 8003032:	58a4      	ldr	r4, [r4, r2]
 8003034:	3a04      	subs	r2, #4
 8003036:	2c00      	cmp	r4, #0
 8003038:	d1f2      	bne.n	8003020 <mbedtls_mpi_cmp_mpi+0xe>
    for( i = X->n; i > 0; i-- )
 800303a:	3b01      	subs	r3, #1
 800303c:	e7ef      	b.n	800301e <mbedtls_mpi_cmp_mpi+0xc>
        if( Y->p[j - 1] != 0 )
 800303e:	688d      	ldr	r5, [r1, #8]
 8003040:	58ae      	ldr	r6, [r5, r2]
 8003042:	3a04      	subs	r2, #4
 8003044:	b90e      	cbnz	r6, 800304a <mbedtls_mpi_cmp_mpi+0x38>
    for( j = Y->n; j > 0; j-- )
 8003046:	3c01      	subs	r4, #1
 8003048:	e7ef      	b.n	800302a <mbedtls_mpi_cmp_mpi+0x18>
    if( i > j ) return(  X->s );
 800304a:	429c      	cmp	r4, r3
 800304c:	d202      	bcs.n	8003054 <mbedtls_mpi_cmp_mpi+0x42>
 800304e:	6802      	ldr	r2, [r0, #0]
}
 8003050:	4610      	mov	r0, r2
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 8003056:	d901      	bls.n	800305c <mbedtls_mpi_cmp_mpi+0x4a>
 8003058:	424a      	negs	r2, r1
 800305a:	e7f9      	b.n	8003050 <mbedtls_mpi_cmp_mpi+0x3e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800305c:	6802      	ldr	r2, [r0, #0]
 800305e:	2a00      	cmp	r2, #0
 8003060:	dd01      	ble.n	8003066 <mbedtls_mpi_cmp_mpi+0x54>
 8003062:	2900      	cmp	r1, #0
 8003064:	db16      	blt.n	8003094 <mbedtls_mpi_cmp_mpi+0x82>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8003066:	2900      	cmp	r1, #0
 8003068:	dd01      	ble.n	800306e <mbedtls_mpi_cmp_mpi+0x5c>
 800306a:	2a00      	cmp	r2, #0
 800306c:	db14      	blt.n	8003098 <mbedtls_mpi_cmp_mpi+0x86>
 800306e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8003072:	3901      	subs	r1, #1
 8003074:	0089      	lsls	r1, r1, #2
    for( ; i > 0; i-- )
 8003076:	b90b      	cbnz	r3, 800307c <mbedtls_mpi_cmp_mpi+0x6a>
    return( 0 );
 8003078:	461a      	mov	r2, r3
 800307a:	e7e9      	b.n	8003050 <mbedtls_mpi_cmp_mpi+0x3e>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800307c:	6884      	ldr	r4, [r0, #8]
 800307e:	5866      	ldr	r6, [r4, r1]
 8003080:	586c      	ldr	r4, [r5, r1]
 8003082:	42a6      	cmp	r6, r4
 8003084:	d8e4      	bhi.n	8003050 <mbedtls_mpi_cmp_mpi+0x3e>
 8003086:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800308a:	d201      	bcs.n	8003090 <mbedtls_mpi_cmp_mpi+0x7e>
 800308c:	4252      	negs	r2, r2
 800308e:	e7df      	b.n	8003050 <mbedtls_mpi_cmp_mpi+0x3e>
    for( ; i > 0; i-- )
 8003090:	3b01      	subs	r3, #1
 8003092:	e7f0      	b.n	8003076 <mbedtls_mpi_cmp_mpi+0x64>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8003094:	2201      	movs	r2, #1
 8003096:	e7db      	b.n	8003050 <mbedtls_mpi_cmp_mpi+0x3e>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	e7d8      	b.n	8003050 <mbedtls_mpi_cmp_mpi+0x3e>

0800309e <mbedtls_mpi_cmp_int>:
{
 800309e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 80030a0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80030a4:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 80030a8:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 80030aa:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 80030ac:	bfb4      	ite	lt
 80030ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b2:	2301      	movge	r3, #1
 80030b4:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80030b6:	a901      	add	r1, sp, #4
    Y.n = 1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	9302      	str	r3, [sp, #8]
    Y.p = p;
 80030bc:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80030c0:	f7ff ffa7 	bl	8003012 <mbedtls_mpi_cmp_mpi>
}
 80030c4:	b005      	add	sp, #20
 80030c6:	f85d fb04 	ldr.w	pc, [sp], #4

080030ca <mbedtls_mpi_add_abs>:
    if( X == B )
 80030ca:	4290      	cmp	r0, r2
{
 80030cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d0:	4605      	mov	r5, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	4617      	mov	r7, r2
    if( X == B )
 80030d6:	d002      	beq.n	80030de <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 80030d8:	4288      	cmp	r0, r1
 80030da:	d130      	bne.n	800313e <mbedtls_mpi_add_abs+0x74>
{
 80030dc:	463c      	mov	r4, r7
    for( j = B->n; j > 0; j-- )
 80030de:	6867      	ldr	r7, [r4, #4]
    X->s = 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80030e8:	3b01      	subs	r3, #1
 80030ea:	009b      	lsls	r3, r3, #2
    for( j = B->n; j > 0; j-- )
 80030ec:	bb7f      	cbnz	r7, 800314e <mbedtls_mpi_add_abs+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80030ee:	4639      	mov	r1, r7
 80030f0:	4628      	mov	r0, r5
 80030f2:	f7ff fd4f 	bl	8002b94 <mbedtls_mpi_grow>
 80030f6:	4606      	mov	r6, r0
 80030f8:	bb30      	cbnz	r0, 8003148 <mbedtls_mpi_add_abs+0x7e>
    o = B->p; p = X->p; c = 0;
 80030fa:	68ab      	ldr	r3, [r5, #8]
 80030fc:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8003100:	461a      	mov	r2, r3
 8003102:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 8003104:	4601      	mov	r1, r0
 8003106:	42b9      	cmp	r1, r7
 8003108:	d128      	bne.n	800315c <mbedtls_mpi_add_abs+0x92>
 800310a:	008f      	lsls	r7, r1, #2
 800310c:	443b      	add	r3, r7
    while( c != 0 )
 800310e:	b1dc      	cbz	r4, 8003148 <mbedtls_mpi_add_abs+0x7e>
        if( i >= X->n )
 8003110:	686a      	ldr	r2, [r5, #4]
 8003112:	4291      	cmp	r1, r2
 8003114:	f101 0801 	add.w	r8, r1, #1
 8003118:	d306      	bcc.n	8003128 <mbedtls_mpi_add_abs+0x5e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800311a:	4641      	mov	r1, r8
 800311c:	4628      	mov	r0, r5
 800311e:	f7ff fd39 	bl	8002b94 <mbedtls_mpi_grow>
 8003122:	bb58      	cbnz	r0, 800317c <mbedtls_mpi_add_abs+0xb2>
            p = X->p + i;
 8003124:	68ab      	ldr	r3, [r5, #8]
 8003126:	443b      	add	r3, r7
        *p += c; c = ( *p < c ); i++; p++;
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4422      	add	r2, r4
 800312c:	4294      	cmp	r4, r2
 800312e:	f843 2b04 	str.w	r2, [r3], #4
 8003132:	bf94      	ite	ls
 8003134:	2400      	movls	r4, #0
 8003136:	2401      	movhi	r4, #1
 8003138:	4641      	mov	r1, r8
 800313a:	3704      	adds	r7, #4
 800313c:	e7e7      	b.n	800310e <mbedtls_mpi_add_abs+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800313e:	f7ff fd56 	bl	8002bee <mbedtls_mpi_copy>
 8003142:	4606      	mov	r6, r0
 8003144:	2800      	cmp	r0, #0
 8003146:	d0c9      	beq.n	80030dc <mbedtls_mpi_add_abs+0x12>
}
 8003148:	4630      	mov	r0, r6
 800314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800314e:	68a2      	ldr	r2, [r4, #8]
 8003150:	58d2      	ldr	r2, [r2, r3]
 8003152:	3b04      	subs	r3, #4
 8003154:	2a00      	cmp	r2, #0
 8003156:	d1ca      	bne.n	80030ee <mbedtls_mpi_add_abs+0x24>
    for( j = B->n; j > 0; j-- )
 8003158:	3f01      	subs	r7, #1
 800315a:	e7c7      	b.n	80030ec <mbedtls_mpi_add_abs+0x22>
        *p +=  c; c  = ( *p <  c );
 800315c:	6810      	ldr	r0, [r2, #0]
        tmp= *o;
 800315e:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 8003162:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 8003164:	4474      	add	r4, lr
        *p +=  c; c  = ( *p <  c );
 8003166:	bf2c      	ite	cs
 8003168:	2001      	movcs	r0, #1
 800316a:	2000      	movcc	r0, #0
        *p += tmp; c += ( *p < tmp );
 800316c:	f842 4b04 	str.w	r4, [r2], #4
    for( i = 0; i < j; i++, o++, p++ )
 8003170:	3101      	adds	r1, #1
        *p += tmp; c += ( *p < tmp );
 8003172:	45a6      	cmp	lr, r4
 8003174:	bf94      	ite	ls
 8003176:	4604      	movls	r4, r0
 8003178:	1c44      	addhi	r4, r0, #1
 800317a:	e7c4      	b.n	8003106 <mbedtls_mpi_add_abs+0x3c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800317c:	4606      	mov	r6, r0
    return( ret );
 800317e:	e7e3      	b.n	8003148 <mbedtls_mpi_add_abs+0x7e>

08003180 <mbedtls_mpi_sub_abs>:
{
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	460f      	mov	r7, r1
 8003184:	b085      	sub	sp, #20
 8003186:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8003188:	4611      	mov	r1, r2
 800318a:	4638      	mov	r0, r7
{
 800318c:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800318e:	f7ff fea5 	bl	8002edc <mbedtls_mpi_cmp_abs>
 8003192:	2800      	cmp	r0, #0
 8003194:	db32      	blt.n	80031fc <mbedtls_mpi_sub_abs+0x7c>
    X->s = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	9301      	str	r3, [sp, #4]
    if( X == B )
 800319a:	42b4      	cmp	r4, r6
    X->n = 0;
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80031a2:	9303      	str	r3, [sp, #12]
    if( X == B )
 80031a4:	d106      	bne.n	80031b4 <mbedtls_mpi_sub_abs+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80031a6:	4621      	mov	r1, r4
 80031a8:	a801      	add	r0, sp, #4
 80031aa:	f7ff fd20 	bl	8002bee <mbedtls_mpi_copy>
 80031ae:	4605      	mov	r5, r0
 80031b0:	b9b8      	cbnz	r0, 80031e2 <mbedtls_mpi_sub_abs+0x62>
        B = &TB;
 80031b2:	ac01      	add	r4, sp, #4
    if( X != A )
 80031b4:	42b7      	cmp	r7, r6
 80031b6:	d10d      	bne.n	80031d4 <mbedtls_mpi_sub_abs+0x54>
    for( n = B->n; n > 0; n-- )
 80031b8:	6860      	ldr	r0, [r4, #4]
    X->s = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	6033      	str	r3, [r6, #0]
 80031be:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80031c2:	3b01      	subs	r3, #1
 80031c4:	009b      	lsls	r3, r3, #2
    for( n = B->n; n > 0; n-- )
 80031c6:	b990      	cbnz	r0, 80031ee <mbedtls_mpi_sub_abs+0x6e>
    mpi_sub_hlp( n, B->p, X->p );
 80031c8:	68b2      	ldr	r2, [r6, #8]
 80031ca:	68a1      	ldr	r1, [r4, #8]
 80031cc:	f7ff faca 	bl	8002764 <mpi_sub_hlp>
    ret = 0;
 80031d0:	2500      	movs	r5, #0
 80031d2:	e006      	b.n	80031e2 <mbedtls_mpi_sub_abs+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80031d4:	4639      	mov	r1, r7
 80031d6:	4630      	mov	r0, r6
 80031d8:	f7ff fd09 	bl	8002bee <mbedtls_mpi_copy>
 80031dc:	4605      	mov	r5, r0
 80031de:	2800      	cmp	r0, #0
 80031e0:	d0ea      	beq.n	80031b8 <mbedtls_mpi_sub_abs+0x38>
    mbedtls_mpi_free( &TB );
 80031e2:	a801      	add	r0, sp, #4
 80031e4:	f7ff fcc0 	bl	8002b68 <mbedtls_mpi_free>
}
 80031e8:	4628      	mov	r0, r5
 80031ea:	b005      	add	sp, #20
 80031ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 80031ee:	68a2      	ldr	r2, [r4, #8]
 80031f0:	58d2      	ldr	r2, [r2, r3]
 80031f2:	3b04      	subs	r3, #4
 80031f4:	2a00      	cmp	r2, #0
 80031f6:	d1e7      	bne.n	80031c8 <mbedtls_mpi_sub_abs+0x48>
    for( n = B->n; n > 0; n-- )
 80031f8:	3801      	subs	r0, #1
 80031fa:	e7e4      	b.n	80031c6 <mbedtls_mpi_sub_abs+0x46>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80031fc:	f06f 0509 	mvn.w	r5, #9
 8003200:	e7f2      	b.n	80031e8 <mbedtls_mpi_sub_abs+0x68>

08003202 <mbedtls_mpi_add_mpi>:
{
 8003202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 8003204:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 8003206:	6813      	ldr	r3, [r2, #0]
 8003208:	4363      	muls	r3, r4
{
 800320a:	4605      	mov	r5, r0
 800320c:	460f      	mov	r7, r1
 800320e:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 8003210:	d516      	bpl.n	8003240 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8003212:	4611      	mov	r1, r2
 8003214:	4638      	mov	r0, r7
 8003216:	f7ff fe61 	bl	8002edc <mbedtls_mpi_cmp_abs>
 800321a:	2800      	cmp	r0, #0
 800321c:	db06      	blt.n	800322c <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800321e:	4632      	mov	r2, r6
 8003220:	4639      	mov	r1, r7
 8003222:	4628      	mov	r0, r5
 8003224:	f7ff ffac 	bl	8003180 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8003228:	b140      	cbz	r0, 800323c <mbedtls_mpi_add_mpi+0x3a>
}
 800322a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800322c:	463a      	mov	r2, r7
 800322e:	4631      	mov	r1, r6
 8003230:	4628      	mov	r0, r5
 8003232:	f7ff ffa5 	bl	8003180 <mbedtls_mpi_sub_abs>
 8003236:	2800      	cmp	r0, #0
 8003238:	d1f7      	bne.n	800322a <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800323a:	4264      	negs	r4, r4
        X->s = s;
 800323c:	602c      	str	r4, [r5, #0]
    return( ret );
 800323e:	e7f4      	b.n	800322a <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8003240:	f7ff ff43 	bl	80030ca <mbedtls_mpi_add_abs>
 8003244:	e7f0      	b.n	8003228 <mbedtls_mpi_add_mpi+0x26>

08003246 <mbedtls_mpi_sub_mpi>:
{
 8003246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 8003248:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	4363      	muls	r3, r4
 800324e:	2b00      	cmp	r3, #0
{
 8003250:	4605      	mov	r5, r0
 8003252:	460f      	mov	r7, r1
 8003254:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 8003256:	dd16      	ble.n	8003286 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8003258:	4611      	mov	r1, r2
 800325a:	4638      	mov	r0, r7
 800325c:	f7ff fe3e 	bl	8002edc <mbedtls_mpi_cmp_abs>
 8003260:	2800      	cmp	r0, #0
 8003262:	db06      	blt.n	8003272 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8003264:	4632      	mov	r2, r6
 8003266:	4639      	mov	r1, r7
 8003268:	4628      	mov	r0, r5
 800326a:	f7ff ff89 	bl	8003180 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800326e:	b140      	cbz	r0, 8003282 <mbedtls_mpi_sub_mpi+0x3c>
}
 8003270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8003272:	463a      	mov	r2, r7
 8003274:	4631      	mov	r1, r6
 8003276:	4628      	mov	r0, r5
 8003278:	f7ff ff82 	bl	8003180 <mbedtls_mpi_sub_abs>
 800327c:	2800      	cmp	r0, #0
 800327e:	d1f7      	bne.n	8003270 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 8003280:	4264      	negs	r4, r4
        X->s = s;
 8003282:	602c      	str	r4, [r5, #0]
    return( ret );
 8003284:	e7f4      	b.n	8003270 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8003286:	f7ff ff20 	bl	80030ca <mbedtls_mpi_add_abs>
 800328a:	e7f0      	b.n	800326e <mbedtls_mpi_sub_mpi+0x28>

0800328c <mbedtls_mpi_add_int>:
{
 800328c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800328e:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8003292:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 8003296:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 8003298:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800329a:	bfb4      	ite	lt
 800329c:	f04f 33ff 	movlt.w	r3, #4294967295
 80032a0:	2301      	movge	r3, #1
 80032a2:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80032a4:	aa01      	add	r2, sp, #4
    _B.n = 1;
 80032a6:	2301      	movs	r3, #1
 80032a8:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80032aa:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80032ae:	f7ff ffa8 	bl	8003202 <mbedtls_mpi_add_mpi>
}
 80032b2:	b005      	add	sp, #20
 80032b4:	f85d fb04 	ldr.w	pc, [sp], #4

080032b8 <mbedtls_mpi_sub_int>:
{
 80032b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 80032ba:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80032be:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80032c2:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 80032c4:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80032c6:	bfb4      	ite	lt
 80032c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80032cc:	2301      	movge	r3, #1
 80032ce:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80032d0:	aa01      	add	r2, sp, #4
    _B.n = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80032d6:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80032da:	f7ff ffb4 	bl	8003246 <mbedtls_mpi_sub_mpi>
}
 80032de:	b005      	add	sp, #20
 80032e0:	f85d fb04 	ldr.w	pc, [sp], #4

080032e4 <mbedtls_mpi_mul_mpi>:
{
 80032e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e8:	b086      	sub	sp, #24
    X->n = 0;
 80032ea:	2300      	movs	r3, #0
{
 80032ec:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80032ee:	4288      	cmp	r0, r1
    X->n = 0;
 80032f0:	f04f 0201 	mov.w	r2, #1
{
 80032f4:	4681      	mov	r9, r0
 80032f6:	460e      	mov	r6, r1
    X->n = 0;
 80032f8:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 80032fc:	9302      	str	r3, [sp, #8]
    X->s = 1;
 80032fe:	9203      	str	r2, [sp, #12]
    X->n = 0;
 8003300:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 8003302:	9305      	str	r3, [sp, #20]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8003304:	d105      	bne.n	8003312 <mbedtls_mpi_mul_mpi+0x2e>
 8003306:	4668      	mov	r0, sp
 8003308:	f7ff fc71 	bl	8002bee <mbedtls_mpi_copy>
 800330c:	4604      	mov	r4, r0
 800330e:	bb88      	cbnz	r0, 8003374 <mbedtls_mpi_mul_mpi+0x90>
 8003310:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8003312:	45a9      	cmp	r9, r5
 8003314:	d106      	bne.n	8003324 <mbedtls_mpi_mul_mpi+0x40>
 8003316:	4649      	mov	r1, r9
 8003318:	a803      	add	r0, sp, #12
 800331a:	f7ff fc68 	bl	8002bee <mbedtls_mpi_copy>
 800331e:	4604      	mov	r4, r0
 8003320:	bb40      	cbnz	r0, 8003374 <mbedtls_mpi_mul_mpi+0x90>
 8003322:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 8003324:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8003328:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800332c:	3b01      	subs	r3, #1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	f1ba 0f00 	cmp.w	sl, #0
 8003334:	d128      	bne.n	8003388 <mbedtls_mpi_mul_mpi+0xa4>
    for( j = B->n; j > 0; j-- )
 8003336:	686f      	ldr	r7, [r5, #4]
 8003338:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 800333c:	3b01      	subs	r3, #1
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	bb57      	cbnz	r7, 8003398 <mbedtls_mpi_mul_mpi+0xb4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8003342:	eb0a 0107 	add.w	r1, sl, r7
 8003346:	4648      	mov	r0, r9
 8003348:	f7ff fc24 	bl	8002b94 <mbedtls_mpi_grow>
 800334c:	4604      	mov	r4, r0
 800334e:	b988      	cbnz	r0, 8003374 <mbedtls_mpi_mul_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8003350:	4601      	mov	r1, r0
 8003352:	4648      	mov	r0, r9
 8003354:	f7ff fc75 	bl	8002c42 <mbedtls_mpi_lset>
 8003358:	4604      	mov	r4, r0
 800335a:	b958      	cbnz	r0, 8003374 <mbedtls_mpi_mul_mpi+0x90>
 800335c:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8003360:	f108 38ff 	add.w	r8, r8, #4294967295
 8003364:	ea4f 0888 	mov.w	r8, r8, lsl #2
    for( i++; j > 0; j-- )
 8003368:	b9ef      	cbnz	r7, 80033a6 <mbedtls_mpi_mul_mpi+0xc2>
    X->s = A->s * B->s;
 800336a:	6832      	ldr	r2, [r6, #0]
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	4353      	muls	r3, r2
 8003370:	f8c9 3000 	str.w	r3, [r9]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8003374:	a803      	add	r0, sp, #12
 8003376:	f7ff fbf7 	bl	8002b68 <mbedtls_mpi_free>
 800337a:	4668      	mov	r0, sp
 800337c:	f7ff fbf4 	bl	8002b68 <mbedtls_mpi_free>
}
 8003380:	4620      	mov	r0, r4
 8003382:	b006      	add	sp, #24
 8003384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 8003388:	68b2      	ldr	r2, [r6, #8]
 800338a:	58d2      	ldr	r2, [r2, r3]
 800338c:	3b04      	subs	r3, #4
 800338e:	2a00      	cmp	r2, #0
 8003390:	d1d1      	bne.n	8003336 <mbedtls_mpi_mul_mpi+0x52>
    for( i = A->n; i > 0; i-- )
 8003392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003396:	e7cb      	b.n	8003330 <mbedtls_mpi_mul_mpi+0x4c>
        if( B->p[j - 1] != 0 )
 8003398:	68aa      	ldr	r2, [r5, #8]
 800339a:	58d2      	ldr	r2, [r2, r3]
 800339c:	3b04      	subs	r3, #4
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d1cf      	bne.n	8003342 <mbedtls_mpi_mul_mpi+0x5e>
    for( j = B->n; j > 0; j-- )
 80033a2:	3f01      	subs	r7, #1
 80033a4:	e7cc      	b.n	8003340 <mbedtls_mpi_mul_mpi+0x5c>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 80033a6:	68ab      	ldr	r3, [r5, #8]
 80033a8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80033ac:	f853 3008 	ldr.w	r3, [r3, r8]
 80033b0:	68b1      	ldr	r1, [r6, #8]
 80033b2:	4442      	add	r2, r8
 80033b4:	4650      	mov	r0, sl
 80033b6:	f7ff f9ff 	bl	80027b8 <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 80033ba:	3f01      	subs	r7, #1
 80033bc:	f1a8 0804 	sub.w	r8, r8, #4
 80033c0:	e7d2      	b.n	8003368 <mbedtls_mpi_mul_mpi+0x84>

080033c2 <mbedtls_mpi_mul_int>:
{
 80033c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 80033c4:	2301      	movs	r3, #1
    p[0] = b;
 80033c6:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80033c8:	aa01      	add	r2, sp, #4
    _B.s = 1;
 80033ca:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 80033cc:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80033ce:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80033d2:	f7ff ff87 	bl	80032e4 <mbedtls_mpi_mul_mpi>
}
 80033d6:	b005      	add	sp, #20
 80033d8:	f85d fb04 	ldr.w	pc, [sp], #4

080033dc <mbedtls_mpi_div_mpi>:
{
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b09b      	sub	sp, #108	; 0x6c
 80033e2:	460f      	mov	r7, r1
 80033e4:	9001      	str	r0, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
{
 80033ea:	4690      	mov	r8, r2
 80033ec:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80033ee:	f7ff fe56 	bl	800309e <mbedtls_mpi_cmp_int>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	f000 81a3 	beq.w	800373e <mbedtls_mpi_div_mpi+0x362>
    X->n = 0;
 80033f8:	2400      	movs	r4, #0
    X->s = 1;
 80033fa:	2601      	movs	r6, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80033fc:	9903      	ldr	r1, [sp, #12]
    X->s = 1;
 80033fe:	960b      	str	r6, [sp, #44]	; 0x2c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8003400:	4640      	mov	r0, r8
    X->n = 0;
 8003402:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 8003404:	940d      	str	r4, [sp, #52]	; 0x34
    X->s = 1;
 8003406:	960e      	str	r6, [sp, #56]	; 0x38
    X->n = 0;
 8003408:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 800340a:	9410      	str	r4, [sp, #64]	; 0x40
    X->s = 1;
 800340c:	9611      	str	r6, [sp, #68]	; 0x44
    X->n = 0;
 800340e:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 8003410:	9413      	str	r4, [sp, #76]	; 0x4c
    X->s = 1;
 8003412:	9614      	str	r6, [sp, #80]	; 0x50
    X->n = 0;
 8003414:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 8003416:	9416      	str	r4, [sp, #88]	; 0x58
    X->s = 1;
 8003418:	9617      	str	r6, [sp, #92]	; 0x5c
    X->n = 0;
 800341a:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 800341c:	9419      	str	r4, [sp, #100]	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800341e:	f7ff fd5d 	bl	8002edc <mbedtls_mpi_cmp_abs>
 8003422:	42a0      	cmp	r0, r4
 8003424:	da26      	bge.n	8003474 <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8003426:	9b01      	ldr	r3, [sp, #4]
 8003428:	b92b      	cbnz	r3, 8003436 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800342a:	b9df      	cbnz	r7, 8003464 <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 800342c:	2400      	movs	r4, #0
}
 800342e:	4620      	mov	r0, r4
 8003430:	b01b      	add	sp, #108	; 0x6c
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8003436:	4621      	mov	r1, r4
 8003438:	9801      	ldr	r0, [sp, #4]
 800343a:	f7ff fc02 	bl	8002c42 <mbedtls_mpi_lset>
 800343e:	4604      	mov	r4, r0
 8003440:	2800      	cmp	r0, #0
 8003442:	d0f2      	beq.n	800342a <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8003444:	a80b      	add	r0, sp, #44	; 0x2c
 8003446:	f7ff fb8f 	bl	8002b68 <mbedtls_mpi_free>
 800344a:	a80e      	add	r0, sp, #56	; 0x38
 800344c:	f7ff fb8c 	bl	8002b68 <mbedtls_mpi_free>
 8003450:	a811      	add	r0, sp, #68	; 0x44
 8003452:	f7ff fb89 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8003456:	a814      	add	r0, sp, #80	; 0x50
 8003458:	f7ff fb86 	bl	8002b68 <mbedtls_mpi_free>
 800345c:	a817      	add	r0, sp, #92	; 0x5c
 800345e:	f7ff fb83 	bl	8002b68 <mbedtls_mpi_free>
    return( ret );
 8003462:	e7e4      	b.n	800342e <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8003464:	4641      	mov	r1, r8
 8003466:	4638      	mov	r0, r7
 8003468:	f7ff fbc1 	bl	8002bee <mbedtls_mpi_copy>
 800346c:	4604      	mov	r4, r0
 800346e:	2800      	cmp	r0, #0
 8003470:	d1e8      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
 8003472:	e7db      	b.n	800342c <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8003474:	4641      	mov	r1, r8
 8003476:	a80b      	add	r0, sp, #44	; 0x2c
 8003478:	f7ff fbb9 	bl	8002bee <mbedtls_mpi_copy>
 800347c:	4604      	mov	r4, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d1e0      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8003482:	ad0e      	add	r5, sp, #56	; 0x38
 8003484:	9903      	ldr	r1, [sp, #12]
 8003486:	4628      	mov	r0, r5
 8003488:	f7ff fbb1 	bl	8002bee <mbedtls_mpi_copy>
 800348c:	4604      	mov	r4, r0
 800348e:	2800      	cmp	r0, #0
 8003490:	d1d8      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8003492:	f8d8 1004 	ldr.w	r1, [r8, #4]
    X.s = Y.s = 1;
 8003496:	960e      	str	r6, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8003498:	3102      	adds	r1, #2
 800349a:	a811      	add	r0, sp, #68	; 0x44
    X.s = Y.s = 1;
 800349c:	960b      	str	r6, [sp, #44]	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800349e:	f7ff fb79 	bl	8002b94 <mbedtls_mpi_grow>
 80034a2:	4604      	mov	r4, r0
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d1cd      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80034a8:	4601      	mov	r1, r0
 80034aa:	a811      	add	r0, sp, #68	; 0x44
 80034ac:	f7ff fbc9 	bl	8002c42 <mbedtls_mpi_lset>
 80034b0:	4604      	mov	r4, r0
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d1c6      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80034b6:	2102      	movs	r1, #2
 80034b8:	a814      	add	r0, sp, #80	; 0x50
 80034ba:	f7ff fb6b 	bl	8002b94 <mbedtls_mpi_grow>
 80034be:	4604      	mov	r4, r0
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d1bf      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80034c4:	2103      	movs	r1, #3
 80034c6:	a817      	add	r0, sp, #92	; 0x5c
 80034c8:	f7ff fb64 	bl	8002b94 <mbedtls_mpi_grow>
 80034cc:	4604      	mov	r4, r0
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d1b8      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 80034d2:	4628      	mov	r0, r5
 80034d4:	f7ff fbf9 	bl	8002cca <mbedtls_mpi_bitlen>
 80034d8:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 80034dc:	281f      	cmp	r0, #31
 80034de:	d078      	beq.n	80035d2 <mbedtls_mpi_div_mpi+0x1f6>
        k = biL - 1 - k;
 80034e0:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80034e4:	4619      	mov	r1, r3
 80034e6:	a80b      	add	r0, sp, #44	; 0x2c
        k = biL - 1 - k;
 80034e8:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80034ea:	f7ff fc6f 	bl	8002dcc <mbedtls_mpi_shift_l>
 80034ee:	4604      	mov	r4, r0
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d1a7      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80034f4:	9902      	ldr	r1, [sp, #8]
 80034f6:	4628      	mov	r0, r5
 80034f8:	f7ff fc68 	bl	8002dcc <mbedtls_mpi_shift_l>
 80034fc:	4604      	mov	r4, r0
 80034fe:	2800      	cmp	r0, #0
 8003500:	d1a0      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 8003502:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    t = Y.n - 1;
 8003504:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    n = X.n - 1;
 8003508:	f106 39ff 	add.w	r9, r6, #4294967295
    t = Y.n - 1;
 800350c:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8003510:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 8003514:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8003516:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800351a:	4619      	mov	r1, r3
 800351c:	4628      	mov	r0, r5
 800351e:	9306      	str	r3, [sp, #24]
 8003520:	f7ff fc54 	bl	8002dcc <mbedtls_mpi_shift_l>
 8003524:	4604      	mov	r4, r0
 8003526:	2800      	cmp	r0, #0
 8003528:	d18c      	bne.n	8003444 <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 800352a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800352e:	4629      	mov	r1, r5
 8003530:	a80b      	add	r0, sp, #44	; 0x2c
 8003532:	f7ff fd6e 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8003536:	2800      	cmp	r0, #0
 8003538:	da4d      	bge.n	80035d6 <mbedtls_mpi_div_mpi+0x1fa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800353a:	9906      	ldr	r1, [sp, #24]
 800353c:	4628      	mov	r0, r5
 800353e:	f7ff fc91 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003542:	4604      	mov	r4, r0
 8003544:	2800      	cmp	r0, #0
 8003546:	f47f af7d 	bne.w	8003444 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800354a:	9b00      	ldr	r3, [sp, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	9306      	str	r3, [sp, #24]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8003550:	3b04      	subs	r3, #4
 8003552:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
 8003556:	9308      	str	r3, [sp, #32]
 8003558:	f106 6300 	add.w	r3, r6, #134217728	; 0x8000000
 800355c:	3d01      	subs	r5, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003564:	eba5 050a 	sub.w	r5, r5, sl
 8003568:	3e02      	subs	r6, #2
 800356a:	eba3 0a0a 	sub.w	sl, r3, sl
 800356e:	00ad      	lsls	r5, r5, #2
 8003570:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8003574:	00b6      	lsls	r6, r6, #2
    for( i = n; i > t ; i-- )
 8003576:	9b00      	ldr	r3, [sp, #0]
 8003578:	4599      	cmp	r9, r3
 800357a:	d83b      	bhi.n	80035f4 <mbedtls_mpi_div_mpi+0x218>
    if( Q != NULL )
 800357c:	9b01      	ldr	r3, [sp, #4]
 800357e:	b15b      	cbz	r3, 8003598 <mbedtls_mpi_div_mpi+0x1bc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8003580:	a911      	add	r1, sp, #68	; 0x44
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb33 	bl	8002bee <mbedtls_mpi_copy>
 8003588:	bb08      	cbnz	r0, 80035ce <mbedtls_mpi_div_mpi+0x1f2>
        Q->s = A->s * B->s;
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	f8d8 2000 	ldr.w	r2, [r8]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4353      	muls	r3, r2
 8003594:	9a01      	ldr	r2, [sp, #4]
 8003596:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 8003598:	2f00      	cmp	r7, #0
 800359a:	f43f af53 	beq.w	8003444 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800359e:	9902      	ldr	r1, [sp, #8]
 80035a0:	a80b      	add	r0, sp, #44	; 0x2c
 80035a2:	f7ff fc5f 	bl	8002e64 <mbedtls_mpi_shift_r>
 80035a6:	b990      	cbnz	r0, 80035ce <mbedtls_mpi_div_mpi+0x1f2>
        X.s = A->s;
 80035a8:	f8d8 3000 	ldr.w	r3, [r8]
 80035ac:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80035ae:	a90b      	add	r1, sp, #44	; 0x2c
 80035b0:	4638      	mov	r0, r7
 80035b2:	f7ff fb1c 	bl	8002bee <mbedtls_mpi_copy>
 80035b6:	4601      	mov	r1, r0
 80035b8:	2800      	cmp	r0, #0
 80035ba:	f040 80be 	bne.w	800373a <mbedtls_mpi_div_mpi+0x35e>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80035be:	4638      	mov	r0, r7
 80035c0:	f7ff fd6d 	bl	800309e <mbedtls_mpi_cmp_int>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f47f af3d 	bne.w	8003444 <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4604      	mov	r4, r0
 80035d0:	e738      	b.n	8003444 <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 80035d2:	9402      	str	r4, [sp, #8]
 80035d4:	e795      	b.n	8003502 <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 80035d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80035d8:	f851 200b 	ldr.w	r2, [r1, fp]
 80035dc:	3201      	adds	r2, #1
 80035de:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80035e2:	a90b      	add	r1, sp, #44	; 0x2c
 80035e4:	462a      	mov	r2, r5
 80035e6:	4608      	mov	r0, r1
 80035e8:	f7ff fe2d 	bl	8003246 <mbedtls_mpi_sub_mpi>
 80035ec:	4604      	mov	r4, r0
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d09d      	beq.n	800352e <mbedtls_mpi_div_mpi+0x152>
 80035f2:	e727      	b.n	8003444 <mbedtls_mpi_div_mpi+0x68>
 80035f4:	1d33      	adds	r3, r6, #4
        if( X.p[i] >= Y.p[t] )
 80035f6:	9806      	ldr	r0, [sp, #24]
 80035f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80035fc:	9309      	str	r3, [sp, #36]	; 0x24
 80035fe:	5812      	ldr	r2, [r2, r0]
 8003600:	58cb      	ldr	r3, [r1, r3]
 8003602:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003604:	4293      	cmp	r3, r2
 8003606:	d379      	bcc.n	80036fc <mbedtls_mpi_div_mpi+0x320>
            Z.p[i - t - 1] = ~0;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	5143      	str	r3, [r0, r5]
        Z.p[i - t - 1]++;
 800360e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003610:	5953      	ldr	r3, [r2, r5]
 8003612:	3301      	adds	r3, #1
 8003614:	5153      	str	r3, [r2, r5]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8003616:	1f33      	subs	r3, r6, #4
 8003618:	469b      	mov	fp, r3
            Z.p[i - t - 1]--;
 800361a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800361c:	5953      	ldr	r3, [r2, r5]
 800361e:	3b01      	subs	r3, #1
 8003620:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8003622:	2100      	movs	r1, #0
 8003624:	a814      	add	r0, sp, #80	; 0x50
 8003626:	f7ff fb0c 	bl	8002c42 <mbedtls_mpi_lset>
 800362a:	2800      	cmp	r0, #0
 800362c:	d1cf      	bne.n	80035ce <mbedtls_mpi_div_mpi+0x1f2>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800362e:	9900      	ldr	r1, [sp, #0]
 8003630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003632:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003634:	2900      	cmp	r1, #0
 8003636:	d07e      	beq.n	8003736 <mbedtls_mpi_div_mpi+0x35a>
 8003638:	9908      	ldr	r1, [sp, #32]
 800363a:	5851      	ldr	r1, [r2, r1]
 800363c:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800363e:	9906      	ldr	r1, [sp, #24]
 8003640:	5852      	ldr	r2, [r2, r1]
 8003642:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8003644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003646:	a914      	add	r1, sp, #80	; 0x50
 8003648:	4608      	mov	r0, r1
 800364a:	595a      	ldr	r2, [r3, r5]
 800364c:	f7ff feb9 	bl	80033c2 <mbedtls_mpi_mul_int>
 8003650:	4601      	mov	r1, r0
 8003652:	2800      	cmp	r0, #0
 8003654:	d171      	bne.n	800373a <mbedtls_mpi_div_mpi+0x35e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8003656:	a817      	add	r0, sp, #92	; 0x5c
 8003658:	f7ff faf3 	bl	8002c42 <mbedtls_mpi_lset>
 800365c:	2800      	cmp	r0, #0
 800365e:	d1b6      	bne.n	80035ce <mbedtls_mpi_div_mpi+0x1f2>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8003660:	f1b9 0f01 	cmp.w	r9, #1
 8003664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003668:	bf1c      	itt	ne
 800366a:	4659      	movne	r1, fp
 800366c:	5850      	ldrne	r0, [r2, r1]
 800366e:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8003670:	5991      	ldr	r1, [r2, r6]
 8003672:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 8003674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003676:	5852      	ldr	r2, [r2, r1]
 8003678:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800367a:	a917      	add	r1, sp, #92	; 0x5c
 800367c:	a814      	add	r0, sp, #80	; 0x50
 800367e:	f7ff fcc8 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8003682:	2800      	cmp	r0, #0
 8003684:	dcc9      	bgt.n	800361a <mbedtls_mpi_div_mpi+0x23e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8003686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003688:	a90e      	add	r1, sp, #56	; 0x38
 800368a:	595a      	ldr	r2, [r3, r5]
 800368c:	a814      	add	r0, sp, #80	; 0x50
 800368e:	f7ff fe98 	bl	80033c2 <mbedtls_mpi_mul_int>
 8003692:	2800      	cmp	r0, #0
 8003694:	d19b      	bne.n	80035ce <mbedtls_mpi_div_mpi+0x1f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8003696:	4651      	mov	r1, sl
 8003698:	a814      	add	r0, sp, #80	; 0x50
 800369a:	f7ff fb97 	bl	8002dcc <mbedtls_mpi_shift_l>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d195      	bne.n	80035ce <mbedtls_mpi_div_mpi+0x1f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80036a2:	a90b      	add	r1, sp, #44	; 0x2c
 80036a4:	4608      	mov	r0, r1
 80036a6:	aa14      	add	r2, sp, #80	; 0x50
 80036a8:	f7ff fdcd 	bl	8003246 <mbedtls_mpi_sub_mpi>
 80036ac:	4601      	mov	r1, r0
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d143      	bne.n	800373a <mbedtls_mpi_div_mpi+0x35e>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 80036b2:	a80b      	add	r0, sp, #44	; 0x2c
 80036b4:	f7ff fcf3 	bl	800309e <mbedtls_mpi_cmp_int>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	da18      	bge.n	80036ee <mbedtls_mpi_div_mpi+0x312>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80036bc:	a90e      	add	r1, sp, #56	; 0x38
 80036be:	a814      	add	r0, sp, #80	; 0x50
 80036c0:	f7ff fa95 	bl	8002bee <mbedtls_mpi_copy>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d182      	bne.n	80035ce <mbedtls_mpi_div_mpi+0x1f2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80036c8:	4651      	mov	r1, sl
 80036ca:	a814      	add	r0, sp, #80	; 0x50
 80036cc:	f7ff fb7e 	bl	8002dcc <mbedtls_mpi_shift_l>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	f47f af7c 	bne.w	80035ce <mbedtls_mpi_div_mpi+0x1f2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80036d6:	a90b      	add	r1, sp, #44	; 0x2c
 80036d8:	aa14      	add	r2, sp, #80	; 0x50
 80036da:	4608      	mov	r0, r1
 80036dc:	f7ff fd91 	bl	8003202 <mbedtls_mpi_add_mpi>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f47f af74 	bne.w	80035ce <mbedtls_mpi_div_mpi+0x1f2>
            Z.p[i - t - 1]--;
 80036e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036e8:	5953      	ldr	r3, [r2, r5]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
 80036ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80036f2:	3d04      	subs	r5, #4
 80036f4:	f1aa 0a20 	sub.w	sl, sl, #32
 80036f8:	3e04      	subs	r6, #4
 80036fa:	e73c      	b.n	8003576 <mbedtls_mpi_div_mpi+0x19a>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80036fc:	4428      	add	r0, r5
 80036fe:	9007      	str	r0, [sp, #28]
 8003700:	5988      	ldr	r0, [r1, r6]
    if( 0 == d || u1 >= d )
 8003702:	b1aa      	cbz	r2, 8003730 <mbedtls_mpi_div_mpi+0x354>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	2300      	movs	r3, #0
 8003708:	9304      	str	r3, [sp, #16]
    quotient = dividend / d;
 800370a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800370e:	ea4b 0b00 	orr.w	fp, fp, r0
 8003712:	4658      	mov	r0, fp
 8003714:	4661      	mov	r1, ip
 8003716:	f7fc fdbb 	bl	8000290 <__aeabi_uldivmod>
 800371a:	2300      	movs	r3, #0
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	428b      	cmp	r3, r1
 8003722:	bf08      	it	eq
 8003724:	4282      	cmpeq	r2, r0
 8003726:	d200      	bcs.n	800372a <mbedtls_mpi_div_mpi+0x34e>
 8003728:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800372a:	9b07      	ldr	r3, [sp, #28]
 800372c:	6018      	str	r0, [r3, #0]
 800372e:	e76e      	b.n	800360e <mbedtls_mpi_div_mpi+0x232>
    if( 0 == d || u1 >= d )
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e7f9      	b.n	800372a <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8003736:	9900      	ldr	r1, [sp, #0]
 8003738:	e780      	b.n	800363c <mbedtls_mpi_div_mpi+0x260>
 800373a:	460c      	mov	r4, r1
 800373c:	e682      	b.n	8003444 <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800373e:	f06f 040b 	mvn.w	r4, #11
 8003742:	e674      	b.n	800342e <mbedtls_mpi_div_mpi+0x52>

08003744 <mbedtls_mpi_mod_mpi>:
{
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4604      	mov	r4, r0
 8003748:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800374a:	4610      	mov	r0, r2
 800374c:	2100      	movs	r1, #0
{
 800374e:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8003750:	f7ff fca5 	bl	800309e <mbedtls_mpi_cmp_int>
 8003754:	2800      	cmp	r0, #0
 8003756:	db24      	blt.n	80037a2 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8003758:	462a      	mov	r2, r5
 800375a:	4633      	mov	r3, r6
 800375c:	4621      	mov	r1, r4
 800375e:	2000      	movs	r0, #0
 8003760:	f7ff fe3c 	bl	80033dc <mbedtls_mpi_div_mpi>
 8003764:	4605      	mov	r5, r0
 8003766:	b138      	cbz	r0, 8003778 <mbedtls_mpi_mod_mpi+0x34>
}
 8003768:	4628      	mov	r0, r5
 800376a:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800376c:	4632      	mov	r2, r6
 800376e:	4621      	mov	r1, r4
 8003770:	4620      	mov	r0, r4
 8003772:	f7ff fd46 	bl	8003202 <mbedtls_mpi_add_mpi>
 8003776:	b990      	cbnz	r0, 800379e <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8003778:	2100      	movs	r1, #0
 800377a:	4620      	mov	r0, r4
 800377c:	f7ff fc8f 	bl	800309e <mbedtls_mpi_cmp_int>
 8003780:	2800      	cmp	r0, #0
 8003782:	dbf3      	blt.n	800376c <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8003784:	4631      	mov	r1, r6
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff fc43 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 800378c:	2800      	cmp	r0, #0
 800378e:	dbeb      	blt.n	8003768 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8003790:	4632      	mov	r2, r6
 8003792:	4621      	mov	r1, r4
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff fd56 	bl	8003246 <mbedtls_mpi_sub_mpi>
 800379a:	2800      	cmp	r0, #0
 800379c:	d0f2      	beq.n	8003784 <mbedtls_mpi_mod_mpi+0x40>
 800379e:	4605      	mov	r5, r0
 80037a0:	e7e2      	b.n	8003768 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80037a2:	f06f 0509 	mvn.w	r5, #9
 80037a6:	e7df      	b.n	8003768 <mbedtls_mpi_mod_mpi+0x24>

080037a8 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 80037a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ac:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 80037b0:	4606      	mov	r6, r0
 80037b2:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80037b4:	4618      	mov	r0, r3
 80037b6:	2100      	movs	r1, #0
{
 80037b8:	9203      	str	r2, [sp, #12]
 80037ba:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80037bc:	f7ff fc6f 	bl	800309e <mbedtls_mpi_cmp_int>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f340 8225 	ble.w	8003c10 <mbedtls_mpi_exp_mod+0x468>
 80037c6:	68ab      	ldr	r3, [r5, #8]
 80037c8:	f8d3 8000 	ldr.w	r8, [r3]
 80037cc:	f018 0f01 	tst.w	r8, #1
 80037d0:	f000 821e 	beq.w	8003c10 <mbedtls_mpi_exp_mod+0x468>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 80037d4:	2100      	movs	r1, #0
 80037d6:	9803      	ldr	r0, [sp, #12]
 80037d8:	f7ff fc61 	bl	800309e <mbedtls_mpi_cmp_int>
 80037dc:	2800      	cmp	r0, #0
 80037de:	f2c0 8217 	blt.w	8003c10 <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 80037e2:	f108 0402 	add.w	r4, r8, #2
 80037e6:	0064      	lsls	r4, r4, #1
 80037e8:	f004 0408 	and.w	r4, r4, #8
 80037ec:	4444      	add	r4, r8
 80037ee:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 80037f0:	fb04 f308 	mul.w	r3, r4, r8
 80037f4:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 80037f8:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 80037fa:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 80037fe:	d1f7      	bne.n	80037f0 <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 8003800:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 8003802:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003806:	a814      	add	r0, sp, #80	; 0x50
    X->s = 1;
 8003808:	9308      	str	r3, [sp, #32]
    X->n = 0;
 800380a:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 800380c:	910a      	str	r1, [sp, #40]	; 0x28
    X->s = 1;
 800380e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 8003810:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 8003812:	910d      	str	r1, [sp, #52]	; 0x34
    X->s = 1;
 8003814:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 8003816:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 8003818:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 800381a:	f00a fe25 	bl	800e468 <memset>

    i = mbedtls_mpi_bitlen( E );
 800381e:	9803      	ldr	r0, [sp, #12]
 8003820:	f7ff fa53 	bl	8002cca <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8003824:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 8003828:	f080 80e2 	bcs.w	80039f0 <mbedtls_mpi_exp_mod+0x248>
 800382c:	28ef      	cmp	r0, #239	; 0xef
 800382e:	f200 80e2 	bhi.w	80039f6 <mbedtls_mpi_exp_mod+0x24e>
 8003832:	284f      	cmp	r0, #79	; 0x4f
 8003834:	f200 80e2 	bhi.w	80039fc <mbedtls_mpi_exp_mod+0x254>
 8003838:	2817      	cmp	r0, #23
 800383a:	bf8c      	ite	hi
 800383c:	f04f 0b03 	movhi.w	fp, #3
 8003840:	f04f 0b01 	movls.w	fp, #1
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 8003844:	686b      	ldr	r3, [r5, #4]
 8003846:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800384a:	4641      	mov	r1, r8
 800384c:	4630      	mov	r0, r6
 800384e:	f7ff f9a1 	bl	8002b94 <mbedtls_mpi_grow>
 8003852:	4603      	mov	r3, r0
 8003854:	2800      	cmp	r0, #0
 8003856:	f040 8163 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800385a:	4641      	mov	r1, r8
 800385c:	a817      	add	r0, sp, #92	; 0x5c
 800385e:	f7ff f999 	bl	8002b94 <mbedtls_mpi_grow>
 8003862:	4603      	mov	r3, r0
 8003864:	2800      	cmp	r0, #0
 8003866:	f040 815b 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800386a:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800386e:	a80b      	add	r0, sp, #44	; 0x2c
 8003870:	f7ff f990 	bl	8002b94 <mbedtls_mpi_grow>
 8003874:	4603      	mov	r3, r0
 8003876:	2800      	cmp	r0, #0
 8003878:	f040 8152 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	9304      	str	r3, [sp, #16]
    if( neg )
 8003880:	3301      	adds	r3, #1
 8003882:	d10a      	bne.n	800389a <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 8003884:	4639      	mov	r1, r7
 8003886:	a80e      	add	r0, sp, #56	; 0x38
 8003888:	f7ff f9b1 	bl	8002bee <mbedtls_mpi_copy>
 800388c:	4603      	mov	r3, r0
 800388e:	2800      	cmp	r0, #0
 8003890:	f040 8146 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 8003894:	2301      	movs	r3, #1
 8003896:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 8003898:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 800389a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800389e:	b11b      	cbz	r3, 80038a8 <mbedtls_mpi_exp_mod+0x100>
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 80ad 	bne.w	8003a02 <mbedtls_mpi_exp_mod+0x25a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 80038a8:	2101      	movs	r1, #1
 80038aa:	a808      	add	r0, sp, #32
 80038ac:	f7ff f9c9 	bl	8002c42 <mbedtls_mpi_lset>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2800      	cmp	r0, #0
 80038b4:	f040 8134 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 80038b8:	6869      	ldr	r1, [r5, #4]
 80038ba:	a808      	add	r0, sp, #32
 80038bc:	0189      	lsls	r1, r1, #6
 80038be:	f7ff fa85 	bl	8002dcc <mbedtls_mpi_shift_l>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2800      	cmp	r0, #0
 80038c6:	f040 812b 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 80038ca:	a908      	add	r1, sp, #32
 80038cc:	462a      	mov	r2, r5
 80038ce:	4608      	mov	r0, r1
 80038d0:	f7ff ff38 	bl	8003744 <mbedtls_mpi_mod_mpi>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2800      	cmp	r0, #0
 80038d8:	f040 8122 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>

        if( _RR != NULL )
 80038dc:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80038e0:	b13b      	cbz	r3, 80038f2 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 80038e2:	ab08      	add	r3, sp, #32
 80038e4:	cb03      	ldmia	r3!, {r0, r1}
 80038e6:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80038ea:	6010      	str	r0, [r2, #0]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	6051      	str	r1, [r2, #4]
 80038f0:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80038f2:	4629      	mov	r1, r5
 80038f4:	4638      	mov	r0, r7
 80038f6:	f7ff fb8c 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f2c0 808a 	blt.w	8003a14 <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 8003900:	462a      	mov	r2, r5
 8003902:	4639      	mov	r1, r7
 8003904:	a817      	add	r0, sp, #92	; 0x5c
 8003906:	f7ff ff1d 	bl	8003744 <mbedtls_mpi_mod_mpi>
 800390a:	4603      	mov	r3, r0
 800390c:	2800      	cmp	r0, #0
 800390e:	f040 8107 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 8003912:	4264      	negs	r4, r4
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 8003914:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8003918:	4623      	mov	r3, r4
 800391a:	f8cd 9000 	str.w	r9, [sp]
 800391e:	462a      	mov	r2, r5
 8003920:	a908      	add	r1, sp, #32
 8003922:	a817      	add	r0, sp, #92	; 0x5c
 8003924:	f7ff fb11 	bl	8002f4a <mpi_montmul>
 8003928:	4603      	mov	r3, r0
 800392a:	2800      	cmp	r0, #0
 800392c:	f040 80f8 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 8003930:	a908      	add	r1, sp, #32
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff f95b 	bl	8002bee <mbedtls_mpi_copy>
 8003938:	4603      	mov	r3, r0
 800393a:	2800      	cmp	r0, #0
 800393c:	f040 80f0 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 8003940:	ab07      	add	r3, sp, #28
 8003942:	2701      	movs	r7, #1
    U.p = &z;
 8003944:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 8003946:	f8cd 9000 	str.w	r9, [sp]
 800394a:	4623      	mov	r3, r4
 800394c:	462a      	mov	r2, r5
 800394e:	a911      	add	r1, sp, #68	; 0x44
 8003950:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 8003952:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 8003954:	9711      	str	r7, [sp, #68]	; 0x44
 8003956:	9712      	str	r7, [sp, #72]	; 0x48
    return( mpi_montmul( A, &U, N, mm, T ) );
 8003958:	f7ff faf7 	bl	8002f4a <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800395c:	4603      	mov	r3, r0
 800395e:	2800      	cmp	r0, #0
 8003960:	f040 80de 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>

    if( wsize > 1 )
 8003964:	45bb      	cmp	fp, r7
 8003966:	d15a      	bne.n	8003a1e <mbedtls_mpi_exp_mod+0x276>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 8003968:	9b03      	ldr	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 800396a:	f04f 0900 	mov.w	r9, #0
    nblimbs = E->n;
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	9302      	str	r3, [sp, #8]
    nbits   = 0;
 8003972:	46c8      	mov	r8, r9
    bufsize = 0;
 8003974:	46ca      	mov	sl, r9
    wbits   = 0;
 8003976:	464f      	mov	r7, r9

    while( 1 )
    {
        if( bufsize == 0 )
 8003978:	f1ba 0f00 	cmp.w	sl, #0
 800397c:	f040 80b1 	bne.w	8003ae2 <mbedtls_mpi_exp_mod+0x33a>
        {
            if( nblimbs == 0 )
 8003980:	9b02      	ldr	r3, [sp, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 80a8 	bne.w	8003ad8 <mbedtls_mpi_exp_mod+0x330>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 8003988:	f04f 0a01 	mov.w	sl, #1
 800398c:	fa0a fa0b 	lsl.w	sl, sl, fp
 8003990:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 8003994:	9b02      	ldr	r3, [sp, #8]
 8003996:	4543      	cmp	r3, r8
 8003998:	f040 8113 	bne.w	8003bc2 <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 800399c:	2301      	movs	r3, #1
 800399e:	aa07      	add	r2, sp, #28
 80039a0:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 80039a2:	9311      	str	r3, [sp, #68]	; 0x44
 80039a4:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 80039a6:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 80039a8:	4623      	mov	r3, r4
 80039aa:	f8cd 9000 	str.w	r9, [sp]
 80039ae:	462a      	mov	r2, r5
 80039b0:	a911      	add	r1, sp, #68	; 0x44
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff fac9 	bl	8002f4a <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80039b8:	4603      	mov	r3, r0
 80039ba:	2800      	cmp	r0, #0
 80039bc:	f040 80b0 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 80039c0:	9a04      	ldr	r2, [sp, #16]
 80039c2:	3201      	adds	r2, #1
 80039c4:	f040 80ac 	bne.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
 80039c8:	9a03      	ldr	r2, [sp, #12]
 80039ca:	6852      	ldr	r2, [r2, #4]
 80039cc:	2a00      	cmp	r2, #0
 80039ce:	f000 80a7 	beq.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
 80039d2:	9a03      	ldr	r2, [sp, #12]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	07d2      	lsls	r2, r2, #31
 80039da:	f140 80a1 	bpl.w	8003b20 <mbedtls_mpi_exp_mod+0x378>
    {
        X->s = -1;
 80039de:	9b04      	ldr	r3, [sp, #16]
 80039e0:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80039e2:	4632      	mov	r2, r6
 80039e4:	4629      	mov	r1, r5
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7ff fc0b 	bl	8003202 <mbedtls_mpi_add_mpi>
 80039ec:	4603      	mov	r3, r0
 80039ee:	e097      	b.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 80039f0:	f04f 0b06 	mov.w	fp, #6
 80039f4:	e726      	b.n	8003844 <mbedtls_mpi_exp_mod+0x9c>
 80039f6:	f04f 0b05 	mov.w	fp, #5
 80039fa:	e723      	b.n	8003844 <mbedtls_mpi_exp_mod+0x9c>
 80039fc:	f04f 0b04 	mov.w	fp, #4
 8003a00:	e720      	b.n	8003844 <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 8003a02:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8003a06:	6810      	ldr	r0, [r2, #0]
 8003a08:	6851      	ldr	r1, [r2, #4]
 8003a0a:	ab08      	add	r3, sp, #32
 8003a0c:	c303      	stmia	r3!, {r0, r1}
 8003a0e:	6890      	ldr	r0, [r2, #8]
 8003a10:	6018      	str	r0, [r3, #0]
 8003a12:	e76e      	b.n	80038f2 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8003a14:	4639      	mov	r1, r7
 8003a16:	a817      	add	r0, sp, #92	; 0x5c
 8003a18:	f7ff f8e9 	bl	8002bee <mbedtls_mpi_copy>
 8003a1c:	e775      	b.n	800390a <mbedtls_mpi_exp_mod+0x162>
        j =  one << ( wsize - 1 );
 8003a1e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003a22:	9302      	str	r3, [sp, #8]
 8003a24:	fa07 f303 	lsl.w	r3, r7, r3
 8003a28:	9305      	str	r3, [sp, #20]
 8003a2a:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 8003a2c:	6869      	ldr	r1, [r5, #4]
 8003a2e:	270c      	movs	r7, #12
 8003a30:	409f      	lsls	r7, r3
 8003a32:	ab14      	add	r3, sp, #80	; 0x50
 8003a34:	eb03 0807 	add.w	r8, r3, r7
 8003a38:	3101      	adds	r1, #1
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	f7ff f8aa 	bl	8002b94 <mbedtls_mpi_grow>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d16c      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 8003a46:	a917      	add	r1, sp, #92	; 0x5c
 8003a48:	4640      	mov	r0, r8
 8003a4a:	f7ff f8d0 	bl	8002bee <mbedtls_mpi_copy>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d165      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
 8003a54:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 8003a56:	4623      	mov	r3, r4
 8003a58:	f8cd 9000 	str.w	r9, [sp]
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	4641      	mov	r1, r8
 8003a60:	4640      	mov	r0, r8
 8003a62:	f7ff fa72 	bl	8002f4a <mpi_montmul>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d159      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 8003a6c:	9b02      	ldr	r3, [sp, #8]
 8003a6e:	f10a 0a01 	add.w	sl, sl, #1
 8003a72:	4553      	cmp	r3, sl
 8003a74:	d8ef      	bhi.n	8003a56 <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8003a76:	9b05      	ldr	r3, [sp, #20]
 8003a78:	f103 0901 	add.w	r9, r3, #1
 8003a7c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 8003a80:	f04f 0801 	mov.w	r8, #1
 8003a84:	441f      	add	r7, r3
 8003a86:	fa08 f80b 	lsl.w	r8, r8, fp
 8003a8a:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8003a8e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 8003a92:	45c1      	cmp	r9, r8
 8003a94:	f4bf af68 	bcs.w	8003968 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 8003a98:	6869      	ldr	r1, [r5, #4]
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	3101      	adds	r1, #1
 8003a9e:	f7ff f879 	bl	8002b94 <mbedtls_mpi_grow>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d13b      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 8003aa8:	f1a7 010c 	sub.w	r1, r7, #12
 8003aac:	4638      	mov	r0, r7
 8003aae:	f7ff f89e 	bl	8002bee <mbedtls_mpi_copy>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	bba0      	cbnz	r0, 8003b20 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	4638      	mov	r0, r7
 8003aba:	f8cd a000 	str.w	sl, [sp]
 8003abe:	462a      	mov	r2, r5
 8003ac0:	a917      	add	r1, sp, #92	; 0x5c
 8003ac2:	f7ff fa42 	bl	8002f4a <mpi_montmul>
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	4603      	mov	r3, r0
 8003aca:	bb48      	cbnz	r0, 8003b20 <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8003acc:	f109 0901 	add.w	r9, r9, #1
 8003ad0:	e7df      	b.n	8003a92 <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 8003ad2:	f04f 0902 	mov.w	r9, #2
 8003ad6:	e74f      	b.n	8003978 <mbedtls_mpi_exp_mod+0x1d0>
            nblimbs--;
 8003ad8:	9b02      	ldr	r3, [sp, #8]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	9302      	str	r3, [sp, #8]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 8003ade:	f04f 0a20 	mov.w	sl, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8003ae2:	9b03      	ldr	r3, [sp, #12]
 8003ae4:	9a02      	ldr	r2, [sp, #8]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
 8003aec:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8003af0:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 8003af4:	f013 0301 	ands.w	r3, r3, #1
 8003af8:	d136      	bne.n	8003b68 <mbedtls_mpi_exp_mod+0x3c0>
 8003afa:	f1b9 0f00 	cmp.w	r9, #0
 8003afe:	f43f af3b 	beq.w	8003978 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 8003b02:	f1b9 0f01 	cmp.w	r9, #1
 8003b06:	d12f      	bne.n	8003b68 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8003b08:	ab0b      	add	r3, sp, #44	; 0x2c
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	4623      	mov	r3, r4
 8003b10:	4631      	mov	r1, r6
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7ff fa19 	bl	8002f4a <mpi_montmul>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f43f af2c 	beq.w	8003978 <mbedtls_mpi_exp_mod+0x1d0>
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8003b20:	2201      	movs	r2, #1
 8003b22:	f10b 34ff 	add.w	r4, fp, #4294967295
 8003b26:	fa02 f404 	lsl.w	r4, r2, r4
 8003b2a:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 8003b2e:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8003b30:	42ac      	cmp	r4, r5
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	d364      	bcc.n	8003c00 <mbedtls_mpi_exp_mod+0x458>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 8003b36:	a817      	add	r0, sp, #92	; 0x5c
 8003b38:	f7ff f816 	bl	8002b68 <mbedtls_mpi_free>
 8003b3c:	a80b      	add	r0, sp, #44	; 0x2c
 8003b3e:	f7ff f813 	bl	8002b68 <mbedtls_mpi_free>
 8003b42:	a80e      	add	r0, sp, #56	; 0x38
 8003b44:	f7ff f810 	bl	8002b68 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 8003b48:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8003b4c:	9b02      	ldr	r3, [sp, #8]
 8003b4e:	b10a      	cbz	r2, 8003b54 <mbedtls_mpi_exp_mod+0x3ac>
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	b922      	cbnz	r2, 8003b5e <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 8003b54:	a808      	add	r0, sp, #32
 8003b56:	9302      	str	r3, [sp, #8]
 8003b58:	f7ff f806 	bl	8002b68 <mbedtls_mpi_free>
 8003b5c:	9b02      	ldr	r3, [sp, #8]

    return( ret );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 8003b68:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 8003b6c:	ebab 0208 	sub.w	r2, fp, r8
 8003b70:	4093      	lsls	r3, r2
        if( nbits == wsize )
 8003b72:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 8003b74:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 8003b78:	d1ab      	bne.n	8003ad2 <mbedtls_mpi_exp_mod+0x32a>
 8003b7a:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8003b7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	462a      	mov	r2, r5
 8003b84:	4623      	mov	r3, r4
 8003b86:	4631      	mov	r1, r6
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f7ff f9de 	bl	8002f4a <mpi_montmul>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d1c5      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 8003b94:	f108 0801 	add.w	r8, r8, #1
 8003b98:	45c3      	cmp	fp, r8
 8003b9a:	d8f0      	bhi.n	8003b7e <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 8003b9c:	ab0b      	add	r3, sp, #44	; 0x2c
 8003b9e:	a814      	add	r0, sp, #80	; 0x50
 8003ba0:	210c      	movs	r1, #12
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	fb01 0107 	mla	r1, r1, r7, r0
 8003ba8:	4623      	mov	r3, r4
 8003baa:	462a      	mov	r2, r5
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7ff f9cc 	bl	8002f4a <mpi_montmul>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d1b3      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
            state--;
 8003bb8:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 8003bbc:	4607      	mov	r7, r0
            wbits = 0;
 8003bbe:	4680      	mov	r8, r0
 8003bc0:	e6da      	b.n	8003978 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f8cd 9000 	str.w	r9, [sp]
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4631      	mov	r1, r6
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f7ff f9bc 	bl	8002f4a <mpi_montmul>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d1a3      	bne.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 8003bd8:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 8003bda:	ea17 0f0a 	tst.w	r7, sl
 8003bde:	d103      	bne.n	8003be8 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 8003be0:	9b02      	ldr	r3, [sp, #8]
 8003be2:	3301      	adds	r3, #1
 8003be4:	9302      	str	r3, [sp, #8]
 8003be6:	e6d5      	b.n	8003994 <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 8003be8:	4623      	mov	r3, r4
 8003bea:	f8cd 9000 	str.w	r9, [sp]
 8003bee:	462a      	mov	r2, r5
 8003bf0:	a917      	add	r1, sp, #92	; 0x5c
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f7ff f9a9 	bl	8002f4a <mpi_montmul>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0f0      	beq.n	8003be0 <mbedtls_mpi_exp_mod+0x438>
 8003bfe:	e78f      	b.n	8003b20 <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 8003c00:	ab14      	add	r3, sp, #80	; 0x50
 8003c02:	fb06 3004 	mla	r0, r6, r4, r3
 8003c06:	f7fe ffaf 	bl	8002b68 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8003c0a:	3401      	adds	r4, #1
 8003c0c:	9b02      	ldr	r3, [sp, #8]
 8003c0e:	e78f      	b.n	8003b30 <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8003c10:	f06f 0303 	mvn.w	r3, #3
 8003c14:	e7a3      	b.n	8003b5e <mbedtls_mpi_exp_mod+0x3b6>

08003c16 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8003c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c18:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 8003c1a:	2300      	movs	r3, #0
    X->s = 1;
 8003c1c:	2601      	movs	r6, #1
{
 8003c1e:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8003c20:	a804      	add	r0, sp, #16
{
 8003c22:	4615      	mov	r5, r2
    X->s = 1;
 8003c24:	9601      	str	r6, [sp, #4]
    X->n = 0;
 8003c26:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8003c28:	9303      	str	r3, [sp, #12]
    X->s = 1;
 8003c2a:	9604      	str	r6, [sp, #16]
    X->n = 0;
 8003c2c:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8003c2e:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8003c30:	9607      	str	r6, [sp, #28]
    X->n = 0;
 8003c32:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8003c34:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8003c36:	f7fe ffda 	bl	8002bee <mbedtls_mpi_copy>
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d157      	bne.n	8003cf0 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8003c40:	4629      	mov	r1, r5
 8003c42:	a807      	add	r0, sp, #28
 8003c44:	f7fe ffd3 	bl	8002bee <mbedtls_mpi_copy>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d150      	bne.n	8003cf0 <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 8003c4e:	a804      	add	r0, sp, #16
 8003c50:	f7ff f823 	bl	8002c9a <mbedtls_mpi_lsb>
 8003c54:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 8003c56:	a807      	add	r0, sp, #28
 8003c58:	f7ff f81f 	bl	8002c9a <mbedtls_mpi_lsb>
 8003c5c:	4285      	cmp	r5, r0
 8003c5e:	bf28      	it	cs
 8003c60:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8003c62:	4629      	mov	r1, r5
 8003c64:	a804      	add	r0, sp, #16
 8003c66:	f7ff f8fd 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d13f      	bne.n	8003cf0 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8003c70:	4629      	mov	r1, r5
 8003c72:	a807      	add	r0, sp, #28
 8003c74:	f7ff f8f6 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d138      	bne.n	8003cf0 <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 8003c7e:	9607      	str	r6, [sp, #28]
 8003c80:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8003c82:	2100      	movs	r1, #0
 8003c84:	a804      	add	r0, sp, #16
 8003c86:	f7ff fa0a 	bl	800309e <mbedtls_mpi_cmp_int>
 8003c8a:	b958      	cbnz	r0, 8003ca4 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	a807      	add	r0, sp, #28
 8003c90:	f7ff f89c 	bl	8002dcc <mbedtls_mpi_shift_l>
 8003c94:	4604      	mov	r4, r0
 8003c96:	bb58      	cbnz	r0, 8003cf0 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8003c98:	a907      	add	r1, sp, #28
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	f7fe ffa7 	bl	8002bee <mbedtls_mpi_copy>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	e025      	b.n	8003cf0 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8003ca4:	a804      	add	r0, sp, #16
 8003ca6:	f7fe fff8 	bl	8002c9a <mbedtls_mpi_lsb>
 8003caa:	4601      	mov	r1, r0
 8003cac:	a804      	add	r0, sp, #16
 8003cae:	f7ff f8d9 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	b9e0      	cbnz	r0, 8003cf0 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8003cb6:	a807      	add	r0, sp, #28
 8003cb8:	f7fe ffef 	bl	8002c9a <mbedtls_mpi_lsb>
 8003cbc:	4601      	mov	r1, r0
 8003cbe:	a807      	add	r0, sp, #28
 8003cc0:	f7ff f8d0 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	b998      	cbnz	r0, 8003cf0 <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8003cc8:	a907      	add	r1, sp, #28
 8003cca:	a804      	add	r0, sp, #16
 8003ccc:	f7ff f9a1 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	db19      	blt.n	8003d08 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8003cd4:	a904      	add	r1, sp, #16
 8003cd6:	aa07      	add	r2, sp, #28
 8003cd8:	4608      	mov	r0, r1
 8003cda:	f7ff fa51 	bl	8003180 <mbedtls_mpi_sub_abs>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b930      	cbnz	r0, 8003cf0 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8003ce6:	f7ff f8bd 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003cea:	4604      	mov	r4, r0
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0c8      	beq.n	8003c82 <mbedtls_mpi_gcd+0x6c>

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 8003cf0:	a801      	add	r0, sp, #4
 8003cf2:	f7fe ff39 	bl	8002b68 <mbedtls_mpi_free>
 8003cf6:	a804      	add	r0, sp, #16
 8003cf8:	f7fe ff36 	bl	8002b68 <mbedtls_mpi_free>
 8003cfc:	a807      	add	r0, sp, #28
 8003cfe:	f7fe ff33 	bl	8002b68 <mbedtls_mpi_free>

    return( ret );
}
 8003d02:	4620      	mov	r0, r4
 8003d04:	b00b      	add	sp, #44	; 0x2c
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8003d08:	a907      	add	r1, sp, #28
 8003d0a:	aa04      	add	r2, sp, #16
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	f7ff fa37 	bl	8003180 <mbedtls_mpi_sub_abs>
 8003d12:	4604      	mov	r4, r0
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d1eb      	bne.n	8003cf0 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8003d18:	2101      	movs	r1, #1
 8003d1a:	a807      	add	r0, sp, #28
 8003d1c:	e7e3      	b.n	8003ce6 <mbedtls_mpi_gcd+0xd0>

08003d1e <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8003d1e:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 8003d20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8003d24:	b0c0      	sub	sp, #256	; 0x100
 8003d26:	4605      	mov	r5, r0
 8003d28:	460c      	mov	r4, r1
 8003d2a:	4616      	mov	r6, r2
    if( size > MBEDTLS_MPI_MAX_SIZE )
 8003d2c:	d816      	bhi.n	8003d5c <mbedtls_mpi_fill_random+0x3e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 8003d2e:	460a      	mov	r2, r1
 8003d30:	4618      	mov	r0, r3
 8003d32:	4669      	mov	r1, sp
 8003d34:	47b0      	blx	r6
 8003d36:	b920      	cbnz	r0, 8003d42 <mbedtls_mpi_fill_random+0x24>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 8003d38:	4622      	mov	r2, r4
 8003d3a:	4669      	mov	r1, sp
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f7fe ffec 	bl	8002d1a <mbedtls_mpi_read_binary>
 8003d42:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8003d44:	f240 1201 	movw	r2, #257	; 0x101
 8003d48:	461c      	mov	r4, r3
 8003d4a:	eb0d 0103 	add.w	r1, sp, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <mbedtls_mpi_fill_random+0x3a>

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 8003d54:	b040      	add	sp, #256	; 0x100
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8003d58:	700c      	strb	r4, [r1, #0]
 8003d5a:	e7f6      	b.n	8003d4a <mbedtls_mpi_fill_random+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8003d5c:	f06f 0003 	mvn.w	r0, #3
 8003d60:	e7f8      	b.n	8003d54 <mbedtls_mpi_fill_random+0x36>

08003d62 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8003d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d66:	4680      	mov	r8, r0
 8003d68:	b09c      	sub	sp, #112	; 0x70
 8003d6a:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	2101      	movs	r1, #1
{
 8003d70:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8003d72:	f7ff f994 	bl	800309e <mbedtls_mpi_cmp_int>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f340 8143 	ble.w	8004002 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 8003d7c:	2300      	movs	r3, #0
    X->s = 1;
 8003d7e:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8003d80:	4632      	mov	r2, r6
 8003d82:	4639      	mov	r1, r7
 8003d84:	a801      	add	r0, sp, #4
    X->s = 1;
 8003d86:	9504      	str	r5, [sp, #16]
    X->n = 0;
 8003d88:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8003d8a:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8003d8c:	9507      	str	r5, [sp, #28]
    X->n = 0;
 8003d8e:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8003d90:	9309      	str	r3, [sp, #36]	; 0x24
    X->s = 1;
 8003d92:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 8003d94:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 8003d96:	930c      	str	r3, [sp, #48]	; 0x30
    X->s = 1;
 8003d98:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 8003d9a:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 8003d9c:	930f      	str	r3, [sp, #60]	; 0x3c
    X->s = 1;
 8003d9e:	9501      	str	r5, [sp, #4]
    X->n = 0;
 8003da0:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8003da2:	9303      	str	r3, [sp, #12]
    X->s = 1;
 8003da4:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 8003da6:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 8003da8:	9312      	str	r3, [sp, #72]	; 0x48
    X->s = 1;
 8003daa:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 8003dac:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 8003dae:	9315      	str	r3, [sp, #84]	; 0x54
    X->s = 1;
 8003db0:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 8003db2:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 8003db4:	9318      	str	r3, [sp, #96]	; 0x60
    X->s = 1;
 8003db6:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 8003db8:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 8003dba:	931b      	str	r3, [sp, #108]	; 0x6c
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8003dbc:	f7ff ff2b 	bl	8003c16 <mbedtls_mpi_gcd>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d154      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	a801      	add	r0, sp, #4
 8003dca:	f7ff f968 	bl	800309e <mbedtls_mpi_cmp_int>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	f040 8114 	bne.w	8003ffc <mbedtls_mpi_inv_mod+0x29a>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	a804      	add	r0, sp, #16
 8003dda:	f7ff fcb3 	bl	8003744 <mbedtls_mpi_mod_mpi>
 8003dde:	4604      	mov	r4, r0
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d145      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8003de4:	a904      	add	r1, sp, #16
 8003de6:	a807      	add	r0, sp, #28
 8003de8:	f7fe ff01 	bl	8002bee <mbedtls_mpi_copy>
 8003dec:	4604      	mov	r4, r0
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d13e      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8003df2:	4631      	mov	r1, r6
 8003df4:	a810      	add	r0, sp, #64	; 0x40
 8003df6:	f7fe fefa 	bl	8002bee <mbedtls_mpi_copy>
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d137      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8003e00:	4631      	mov	r1, r6
 8003e02:	a813      	add	r0, sp, #76	; 0x4c
 8003e04:	f7fe fef3 	bl	8002bee <mbedtls_mpi_copy>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d130      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8003e0e:	4629      	mov	r1, r5
 8003e10:	a80a      	add	r0, sp, #40	; 0x28
 8003e12:	f7fe ff16 	bl	8002c42 <mbedtls_mpi_lset>
 8003e16:	4604      	mov	r4, r0
 8003e18:	bb50      	cbnz	r0, 8003e70 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	a80d      	add	r0, sp, #52	; 0x34
 8003e1e:	f7fe ff10 	bl	8002c42 <mbedtls_mpi_lset>
 8003e22:	4604      	mov	r4, r0
 8003e24:	bb20      	cbnz	r0, 8003e70 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8003e26:	4601      	mov	r1, r0
 8003e28:	a816      	add	r0, sp, #88	; 0x58
 8003e2a:	f7fe ff0a 	bl	8002c42 <mbedtls_mpi_lset>
 8003e2e:	4604      	mov	r4, r0
 8003e30:	b9f0      	cbnz	r0, 8003e70 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 8003e32:	4629      	mov	r1, r5
 8003e34:	a819      	add	r0, sp, #100	; 0x64
 8003e36:	f7fe ff04 	bl	8002c42 <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	b9c0      	cbnz	r0, 8003e70 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	07d8      	lsls	r0, r3, #31
 8003e44:	d466      	bmi.n	8003f14 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8003e46:	2101      	movs	r1, #1
 8003e48:	a807      	add	r0, sp, #28
 8003e4a:	f7ff f80b 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	b970      	cbnz	r0, 8003e70 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 8003e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	07dd      	lsls	r5, r3, #31
 8003e58:	d429      	bmi.n	8003eae <mbedtls_mpi_inv_mod+0x14c>
 8003e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	07dc      	lsls	r4, r3, #31
 8003e60:	d425      	bmi.n	8003eae <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 8003e62:	2101      	movs	r1, #1
 8003e64:	a80a      	add	r0, sp, #40	; 0x28
 8003e66:	f7fe fffd 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d02f      	beq.n	8003ed0 <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 8003e70:	a804      	add	r0, sp, #16
 8003e72:	f7fe fe79 	bl	8002b68 <mbedtls_mpi_free>
 8003e76:	a807      	add	r0, sp, #28
 8003e78:	f7fe fe76 	bl	8002b68 <mbedtls_mpi_free>
 8003e7c:	a80a      	add	r0, sp, #40	; 0x28
 8003e7e:	f7fe fe73 	bl	8002b68 <mbedtls_mpi_free>
 8003e82:	a80d      	add	r0, sp, #52	; 0x34
 8003e84:	f7fe fe70 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 8003e88:	a801      	add	r0, sp, #4
 8003e8a:	f7fe fe6d 	bl	8002b68 <mbedtls_mpi_free>
 8003e8e:	a810      	add	r0, sp, #64	; 0x40
 8003e90:	f7fe fe6a 	bl	8002b68 <mbedtls_mpi_free>
 8003e94:	a813      	add	r0, sp, #76	; 0x4c
 8003e96:	f7fe fe67 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 8003e9a:	a816      	add	r0, sp, #88	; 0x58
 8003e9c:	f7fe fe64 	bl	8002b68 <mbedtls_mpi_free>
 8003ea0:	a819      	add	r0, sp, #100	; 0x64
 8003ea2:	f7fe fe61 	bl	8002b68 <mbedtls_mpi_free>

    return( ret );
}
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	b01c      	add	sp, #112	; 0x70
 8003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8003eae:	a90a      	add	r1, sp, #40	; 0x28
 8003eb0:	aa10      	add	r2, sp, #64	; 0x40
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	f7ff f9a5 	bl	8003202 <mbedtls_mpi_add_mpi>
 8003eb8:	4604      	mov	r4, r0
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d1d8      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8003ebe:	a90d      	add	r1, sp, #52	; 0x34
 8003ec0:	aa04      	add	r2, sp, #16
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	f7ff f9bf 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003ec8:	4604      	mov	r4, r0
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d0c9      	beq.n	8003e62 <mbedtls_mpi_inv_mod+0x100>
 8003ece:	e7cf      	b.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	a80d      	add	r0, sp, #52	; 0x34
 8003ed4:	f7fe ffc6 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003ed8:	e7af      	b.n	8003e3a <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8003eda:	2101      	movs	r1, #1
 8003edc:	a813      	add	r0, sp, #76	; 0x4c
 8003ede:	f7fe ffc1 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1c3      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8003ee8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	07d9      	lsls	r1, r3, #31
 8003eee:	d44c      	bmi.n	8003f8a <mbedtls_mpi_inv_mod+0x228>
 8003ef0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	07da      	lsls	r2, r3, #31
 8003ef6:	d448      	bmi.n	8003f8a <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8003ef8:	2101      	movs	r1, #1
 8003efa:	a816      	add	r0, sp, #88	; 0x58
 8003efc:	f7fe ffb2 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003f00:	4604      	mov	r4, r0
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1b4      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8003f06:	2101      	movs	r1, #1
 8003f08:	a819      	add	r0, sp, #100	; 0x64
 8003f0a:	f7fe ffab 	bl	8002e64 <mbedtls_mpi_shift_r>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d1ad      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 8003f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	07db      	lsls	r3, r3, #31
 8003f1a:	d5de      	bpl.n	8003eda <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8003f1c:	a913      	add	r1, sp, #76	; 0x4c
 8003f1e:	a807      	add	r0, sp, #28
 8003f20:	f7ff f877 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	db42      	blt.n	8003fae <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8003f28:	a907      	add	r1, sp, #28
 8003f2a:	aa13      	add	r2, sp, #76	; 0x4c
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	f7ff f98a 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003f32:	4604      	mov	r4, r0
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d19b      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8003f38:	a90a      	add	r1, sp, #40	; 0x28
 8003f3a:	aa16      	add	r2, sp, #88	; 0x58
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	f7ff f982 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003f42:	4604      	mov	r4, r0
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d193      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8003f48:	aa19      	add	r2, sp, #100	; 0x64
 8003f4a:	a90d      	add	r1, sp, #52	; 0x34
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	f7ff f97a 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003f52:	4604      	mov	r4, r0
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d18b      	bne.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8003f58:	2100      	movs	r1, #0
 8003f5a:	a807      	add	r0, sp, #28
 8003f5c:	f7ff f89f 	bl	800309e <mbedtls_mpi_cmp_int>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	f47f af6c 	bne.w	8003e3e <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8003f66:	2100      	movs	r1, #0
 8003f68:	a816      	add	r0, sp, #88	; 0x58
 8003f6a:	f7ff f898 	bl	800309e <mbedtls_mpi_cmp_int>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	db32      	blt.n	8003fd8 <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8003f72:	4631      	mov	r1, r6
 8003f74:	a816      	add	r0, sp, #88	; 0x58
 8003f76:	f7ff f84c 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	da35      	bge.n	8003fea <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8003f7e:	a916      	add	r1, sp, #88	; 0x58
 8003f80:	4640      	mov	r0, r8
 8003f82:	f7fe fe34 	bl	8002bee <mbedtls_mpi_copy>
 8003f86:	4604      	mov	r4, r0
 8003f88:	e772      	b.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8003f8a:	a916      	add	r1, sp, #88	; 0x58
 8003f8c:	aa10      	add	r2, sp, #64	; 0x40
 8003f8e:	4608      	mov	r0, r1
 8003f90:	f7ff f937 	bl	8003202 <mbedtls_mpi_add_mpi>
 8003f94:	4604      	mov	r4, r0
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f47f af6a 	bne.w	8003e70 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 8003f9c:	a919      	add	r1, sp, #100	; 0x64
 8003f9e:	aa04      	add	r2, sp, #16
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	f7ff f950 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d0a5      	beq.n	8003ef8 <mbedtls_mpi_inv_mod+0x196>
 8003fac:	e760      	b.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8003fae:	a913      	add	r1, sp, #76	; 0x4c
 8003fb0:	aa07      	add	r2, sp, #28
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	f7ff f947 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003fb8:	4604      	mov	r4, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f47f af58 	bne.w	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8003fc0:	a916      	add	r1, sp, #88	; 0x58
 8003fc2:	aa0a      	add	r2, sp, #40	; 0x28
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	f7ff f93e 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003fca:	4604      	mov	r4, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f47f af4f 	bne.w	8003e70 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8003fd2:	aa0d      	add	r2, sp, #52	; 0x34
 8003fd4:	a919      	add	r1, sp, #100	; 0x64
 8003fd6:	e7b9      	b.n	8003f4c <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8003fd8:	a916      	add	r1, sp, #88	; 0x58
 8003fda:	4632      	mov	r2, r6
 8003fdc:	4608      	mov	r0, r1
 8003fde:	f7ff f910 	bl	8003202 <mbedtls_mpi_add_mpi>
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0be      	beq.n	8003f66 <mbedtls_mpi_inv_mod+0x204>
 8003fe8:	e742      	b.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8003fea:	a916      	add	r1, sp, #88	; 0x58
 8003fec:	4632      	mov	r2, r6
 8003fee:	4608      	mov	r0, r1
 8003ff0:	f7ff f929 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d0bb      	beq.n	8003f72 <mbedtls_mpi_inv_mod+0x210>
 8003ffa:	e739      	b.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8003ffc:	f06f 040d 	mvn.w	r4, #13
 8004000:	e736      	b.n	8003e70 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004002:	f06f 0403 	mvn.w	r4, #3
 8004006:	e74e      	b.n	8003ea6 <mbedtls_mpi_inv_mod+0x144>

08004008 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8004008:	b110      	cbz	r0, 8004010 <mbedtls_cipher_get_block_size+0x8>
 800400a:	6800      	ldr	r0, [r0, #0]
 800400c:	b100      	cbz	r0, 8004010 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 800400e:	6940      	ldr	r0, [r0, #20]
}
 8004010:	4770      	bx	lr
	...

08004014 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8004014:	b118      	cbz	r0, 800401e <get_no_padding+0xa>
 8004016:	b112      	cbz	r2, 800401e <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8004018:	6011      	str	r1, [r2, #0]

    return( 0 );
 800401a:	2000      	movs	r0, #0
 800401c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800401e:	4801      	ldr	r0, [pc, #4]	; (8004024 <get_no_padding+0x10>)
}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	ffff9f00 	.word	0xffff9f00

08004028 <mbedtls_cipher_info_from_type>:
{
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <mbedtls_cipher_info_from_type+0x18>)
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800402a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800402e:	b122      	cbz	r2, 800403a <mbedtls_cipher_info_from_type+0x12>
 8004030:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8004032:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8004036:	4281      	cmp	r1, r0
 8004038:	d1f7      	bne.n	800402a <mbedtls_cipher_info_from_type+0x2>
}
 800403a:	4610      	mov	r0, r2
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	08010034 	.word	0x08010034

08004044 <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8004044:	2240      	movs	r2, #64	; 0x40
 8004046:	2100      	movs	r1, #0
 8004048:	f00a ba0e 	b.w	800e468 <memset>

0800404c <mbedtls_cipher_free>:
{
 800404c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800404e:	4604      	mov	r4, r0
 8004050:	b150      	cbz	r0, 8004068 <mbedtls_cipher_free+0x1c>
    if( ctx->cipher_ctx )
 8004052:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8004054:	b118      	cbz	r0, 800405e <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4798      	blx	r3
 800405e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8004062:	2200      	movs	r2, #0
 8004064:	429c      	cmp	r4, r3
 8004066:	d100      	bne.n	800406a <mbedtls_cipher_free+0x1e>
 8004068:	bd10      	pop	{r4, pc}
 800406a:	7022      	strb	r2, [r4, #0]
 800406c:	3401      	adds	r4, #1
 800406e:	e7f9      	b.n	8004064 <mbedtls_cipher_free+0x18>

08004070 <mbedtls_cipher_setkey>:
{
 8004070:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 8004072:	b1c8      	cbz	r0, 80040a8 <mbedtls_cipher_setkey+0x38>
 8004074:	6804      	ldr	r4, [r0, #0]
 8004076:	b1bc      	cbz	r4, 80040a8 <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8004078:	6925      	ldr	r5, [r4, #16]
 800407a:	07ad      	lsls	r5, r5, #30
 800407c:	d402      	bmi.n	8004084 <mbedtls_cipher_setkey+0x14>
 800407e:	6865      	ldr	r5, [r4, #4]
 8004080:	4295      	cmp	r5, r2
 8004082:	d111      	bne.n	80040a8 <mbedtls_cipher_setkey+0x38>
    if( MBEDTLS_ENCRYPT == operation ||
 8004084:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 8004086:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8004088:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 800408a:	d004      	beq.n	8004096 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800408c:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800408e:	2d03      	cmp	r5, #3
 8004090:	d001      	beq.n	8004096 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8004092:	2d05      	cmp	r5, #5
 8004094:	d104      	bne.n	80040a0 <mbedtls_cipher_setkey+0x30>
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8004096:	69a3      	ldr	r3, [r4, #24]
 8004098:	68db      	ldr	r3, [r3, #12]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800409a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800409c:	bc30      	pop	{r4, r5}
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800409e:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 80040a0:	b913      	cbnz	r3, 80040a8 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80040a2:	69a3      	ldr	r3, [r4, #24]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	e7f8      	b.n	800409a <mbedtls_cipher_setkey+0x2a>
}
 80040a8:	4801      	ldr	r0, [pc, #4]	; (80040b0 <mbedtls_cipher_setkey+0x40>)
 80040aa:	bc30      	pop	{r4, r5}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	ffff9f00 	.word	0xffff9f00

080040b4 <mbedtls_cipher_set_iv>:
{
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4614      	mov	r4, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 80040b8:	4605      	mov	r5, r0
 80040ba:	b1a8      	cbz	r0, 80040e8 <mbedtls_cipher_set_iv+0x34>
 80040bc:	6803      	ldr	r3, [r0, #0]
 80040be:	b19b      	cbz	r3, 80040e8 <mbedtls_cipher_set_iv+0x34>
 80040c0:	b191      	cbz	r1, 80040e8 <mbedtls_cipher_set_iv+0x34>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80040c2:	2a10      	cmp	r2, #16
 80040c4:	d80e      	bhi.n	80040e4 <mbedtls_cipher_set_iv+0x30>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	07d2      	lsls	r2, r2, #31
 80040ca:	d403      	bmi.n	80040d4 <mbedtls_cipher_set_iv+0x20>
        actual_iv_size = ctx->cipher_info->iv_size;
 80040cc:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d30a      	bcc.n	80040e8 <mbedtls_cipher_set_iv+0x34>
 80040d2:	461c      	mov	r4, r3
    memcpy( ctx->iv, iv, actual_iv_size );
 80040d4:	4622      	mov	r2, r4
 80040d6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80040da:	f00a f9a0 	bl	800e41e <memcpy>
    ctx->iv_size = actual_iv_size;
 80040de:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 80040e0:	2000      	movs	r0, #0
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <mbedtls_cipher_set_iv+0x38>)
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <mbedtls_cipher_set_iv+0x3c>)
}
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	ffff9f80 	.word	0xffff9f80
 80040f0:	ffff9f00 	.word	0xffff9f00

080040f4 <mbedtls_cipher_reset>:
    if( NULL == ctx || NULL == ctx->cipher_info )
 80040f4:	b128      	cbz	r0, 8004102 <mbedtls_cipher_reset+0xe>
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	b11b      	cbz	r3, 8004102 <mbedtls_cipher_reset+0xe>
    ctx->unprocessed_len = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 80040fe:	4618      	mov	r0, r3
 8004100:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8004102:	4801      	ldr	r0, [pc, #4]	; (8004108 <mbedtls_cipher_reset+0x14>)
}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	ffff9f00 	.word	0xffff9f00

0800410c <mbedtls_cipher_update>:
{
 800410c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004114:	460f      	mov	r7, r1
 8004116:	4615      	mov	r5, r2
 8004118:	4699      	mov	r9, r3
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800411a:	4604      	mov	r4, r0
 800411c:	b918      	cbnz	r0, 8004126 <mbedtls_cipher_update+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800411e:	4852      	ldr	r0, [pc, #328]	; (8004268 <mbedtls_cipher_update+0x15c>)
}
 8004120:	b003      	add	sp, #12
 8004122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8004126:	6803      	ldr	r3, [r0, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f8      	beq.n	800411e <mbedtls_cipher_update+0x12>
 800412c:	f1b8 0f00 	cmp.w	r8, #0
 8004130:	d0f5      	beq.n	800411e <mbedtls_cipher_update+0x12>
    *olen = 0;
 8004132:	2200      	movs	r2, #0
 8004134:	f8c8 2000 	str.w	r2, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8004138:	f7ff ff66 	bl	8004008 <mbedtls_cipher_get_block_size>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800413c:	785a      	ldrb	r2, [r3, #1]
 800413e:	2a01      	cmp	r2, #1
    block_size = mbedtls_cipher_get_block_size( ctx );
 8004140:	4606      	mov	r6, r0
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8004142:	d110      	bne.n	8004166 <mbedtls_cipher_update+0x5a>
        if( ilen != block_size )
 8004144:	42a8      	cmp	r0, r5
 8004146:	f040 8088 	bne.w	800425a <mbedtls_cipher_update+0x14e>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800414a:	699b      	ldr	r3, [r3, #24]
        *olen = ilen;
 800414c:	f8c8 0000 	str.w	r0, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8004150:	685d      	ldr	r5, [r3, #4]
 8004152:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004154:	460a      	mov	r2, r1
 8004156:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800415a:	464b      	mov	r3, r9
 800415c:	46ac      	mov	ip, r5
}
 800415e:	b003      	add	sp, #12
 8004160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8004164:	4760      	bx	ip
    if ( 0 == block_size )
 8004166:	2800      	cmp	r0, #0
 8004168:	d079      	beq.n	800425e <mbedtls_cipher_update+0x152>
    if( input == output &&
 800416a:	4549      	cmp	r1, r9
 800416c:	d108      	bne.n	8004180 <mbedtls_cipher_update+0x74>
 800416e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1d4      	bne.n	800411e <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8004174:	fbb5 f3f0 	udiv	r3, r5, r0
 8004178:	fb00 5313 	mls	r3, r0, r3, r5
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ce      	bne.n	800411e <mbedtls_cipher_update+0x12>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8004180:	2a02      	cmp	r2, #2
 8004182:	d16e      	bne.n	8004262 <mbedtls_cipher_update+0x156>
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 8004184:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004188:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800418a:	b96b      	cbnz	r3, 80041a8 <mbedtls_cipher_update+0x9c>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800418c:	1a33      	subs	r3, r6, r0
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800418e:	429d      	cmp	r5, r3
 8004190:	d80f      	bhi.n	80041b2 <mbedtls_cipher_update+0xa6>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8004192:	3014      	adds	r0, #20
 8004194:	462a      	mov	r2, r5
 8004196:	4639      	mov	r1, r7
 8004198:	4420      	add	r0, r4
 800419a:	f00a f940 	bl	800e41e <memcpy>
            ctx->unprocessed_len += ilen;
 800419e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a0:	441d      	add	r5, r3
 80041a2:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 80041a4:	2000      	movs	r0, #0
 80041a6:	e7bb      	b.n	8004120 <mbedtls_cipher_update+0x14>
                ilen <= block_size - ctx->unprocessed_len ) ||
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <mbedtls_cipher_update+0xa6>
                ilen < block_size - ctx->unprocessed_len ) )
 80041ac:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 80041ae:	429d      	cmp	r5, r3
 80041b0:	d3ef      	bcc.n	8004192 <mbedtls_cipher_update+0x86>
        if( 0 != ctx->unprocessed_len )
 80041b2:	b310      	cbz	r0, 80041fa <mbedtls_cipher_update+0xee>
            copy_len = block_size - ctx->unprocessed_len;
 80041b4:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 80041b8:	3014      	adds	r0, #20
 80041ba:	4652      	mov	r2, sl
 80041bc:	4639      	mov	r1, r7
 80041be:	4420      	add	r0, r4
 80041c0:	f00a f92d 	bl	800e41e <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80041c4:	4623      	mov	r3, r4
 80041c6:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80041ca:	f853 2b14 	ldr.w	r2, [r3], #20
 80041ce:	6992      	ldr	r2, [r2, #24]
 80041d0:	e88d 0208 	stmia.w	sp, {r3, r9}
 80041d4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80041d8:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80041dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041de:	4632      	mov	r2, r6
 80041e0:	47d8      	blx	fp
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d19c      	bne.n	8004120 <mbedtls_cipher_update+0x14>
            *olen += block_size;
 80041e6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ea:	4433      	add	r3, r6
 80041ec:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
 80041f0:	44b1      	add	r9, r6
            ctx->unprocessed_len = 0;
 80041f2:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 80041f4:	4457      	add	r7, sl
            ilen -= copy_len;
 80041f6:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	d0d2      	beq.n	80041a4 <mbedtls_cipher_update+0x98>
            copy_len = ilen % block_size;
 80041fe:	fbb5 faf6 	udiv	sl, r5, r6
 8004202:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 8004206:	f1ba 0f00 	cmp.w	sl, #0
 800420a:	d104      	bne.n	8004216 <mbedtls_cipher_update+0x10a>
 800420c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf08      	it	eq
 8004214:	46b2      	moveq	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8004216:	eba5 050a 	sub.w	r5, r5, sl
 800421a:	4652      	mov	r2, sl
 800421c:	1979      	adds	r1, r7, r5
 800421e:	f104 0014 	add.w	r0, r4, #20
 8004222:	f00a f8fc 	bl	800e41e <memcpy>
            ctx->unprocessed_len += copy_len;
 8004226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004228:	4453      	add	r3, sl
 800422a:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 800422c:	2d00      	cmp	r5, #0
 800422e:	d0b9      	beq.n	80041a4 <mbedtls_cipher_update+0x98>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	e88d 0280 	stmia.w	sp, {r7, r9}
 800423c:	462a      	mov	r2, r5
 800423e:	689e      	ldr	r6, [r3, #8]
 8004240:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004242:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8004246:	47b0      	blx	r6
 8004248:	2800      	cmp	r0, #0
 800424a:	f47f af69 	bne.w	8004120 <mbedtls_cipher_update+0x14>
            *olen += ilen;
 800424e:	f8d8 3000 	ldr.w	r3, [r8]
 8004252:	441d      	add	r5, r3
 8004254:	f8c8 5000 	str.w	r5, [r8]
 8004258:	e762      	b.n	8004120 <mbedtls_cipher_update+0x14>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800425a:	4804      	ldr	r0, [pc, #16]	; (800426c <mbedtls_cipher_update+0x160>)
 800425c:	e760      	b.n	8004120 <mbedtls_cipher_update+0x14>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 800425e:	4804      	ldr	r0, [pc, #16]	; (8004270 <mbedtls_cipher_update+0x164>)
 8004260:	e75e      	b.n	8004120 <mbedtls_cipher_update+0x14>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8004262:	4804      	ldr	r0, [pc, #16]	; (8004274 <mbedtls_cipher_update+0x168>)
 8004264:	e75c      	b.n	8004120 <mbedtls_cipher_update+0x14>
 8004266:	bf00      	nop
 8004268:	ffff9f00 	.word	0xffff9f00
 800426c:	ffff9d80 	.word	0xffff9d80
 8004270:	ffff9c80 	.word	0xffff9c80
 8004274:	ffff9f80 	.word	0xffff9f80

08004278 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8004278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800427a:	460e      	mov	r6, r1
 800427c:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800427e:	4604      	mov	r4, r0
 8004280:	2800      	cmp	r0, #0
 8004282:	d055      	beq.n	8004330 <mbedtls_cipher_finish+0xb8>
 8004284:	6807      	ldr	r7, [r0, #0]
 8004286:	2f00      	cmp	r7, #0
 8004288:	d052      	beq.n	8004330 <mbedtls_cipher_finish+0xb8>
 800428a:	2a00      	cmp	r2, #0
 800428c:	d050      	beq.n	8004330 <mbedtls_cipher_finish+0xb8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8004292:	787a      	ldrb	r2, [r7, #1]
 8004294:	2a03      	cmp	r2, #3
 8004296:	d009      	beq.n	80042ac <mbedtls_cipher_finish+0x34>
 8004298:	1f51      	subs	r1, r2, #5
 800429a:	2902      	cmp	r1, #2
 800429c:	d906      	bls.n	80042ac <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800429e:	2a01      	cmp	r2, #1
 80042a0:	d107      	bne.n	80042b2 <mbedtls_cipher_finish+0x3a>
    {
        if( ctx->unprocessed_len != 0 )
 80042a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <mbedtls_cipher_finish+0xc0>)
 80042a8:	bf08      	it	eq
 80042aa:	2300      	moveq	r3, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	b003      	add	sp, #12
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 80042b2:	2a02      	cmp	r2, #2
 80042b4:	d13e      	bne.n	8004334 <mbedtls_cipher_finish+0xbc>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 80042b6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12a      	bne.n	8004314 <mbedtls_cipher_finish+0x9c>
            if( NULL == ctx->add_padding )
 80042be:	68c3      	ldr	r3, [r0, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ee      	beq.n	80042a2 <mbedtls_cipher_finish+0x2a>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 80042c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 80042c6:	3014      	adds	r0, #20
 80042c8:	b901      	cbnz	r1, 80042cc <mbedtls_cipher_finish+0x54>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042ce:	4798      	blx	r3
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fe99 	bl	8004008 <mbedtls_cipher_get_block_size>
 80042d6:	4623      	mov	r3, r4
 80042d8:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80042dc:	f853 2b14 	ldr.w	r2, [r3], #20
 80042e0:	6992      	ldr	r2, [r2, #24]
 80042e2:	e88d 0048 	stmia.w	sp, {r3, r6}
 80042e6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80042ea:	6897      	ldr	r7, [r2, #8]
 80042ec:	4602      	mov	r2, r0
 80042ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80042f0:	47b8      	blx	r7
 80042f2:	4603      	mov	r3, r0
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d1d9      	bne.n	80042ac <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 80042f8:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 80042fc:	4620      	mov	r0, r4
        if( MBEDTLS_DECRYPT == ctx->operation )
 80042fe:	b99a      	cbnz	r2, 8004328 <mbedtls_cipher_finish+0xb0>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8004300:	f7ff fe82 	bl	8004008 <mbedtls_cipher_get_block_size>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	4601      	mov	r1, r0
 8004308:	462a      	mov	r2, r5
 800430a:	4630      	mov	r0, r6
}
 800430c:	b003      	add	sp, #12
 800430e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8004312:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8004314:	f7ff fe78 	bl	8004008 <mbedtls_cipher_get_block_size>
 8004318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800431a:	4298      	cmp	r0, r3
 800431c:	d0d8      	beq.n	80042d0 <mbedtls_cipher_finish+0x58>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800431e:	68e2      	ldr	r2, [r4, #12]
 8004320:	2a00      	cmp	r2, #0
 8004322:	d0bf      	beq.n	80042a4 <mbedtls_cipher_finish+0x2c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <mbedtls_cipher_finish+0xc0>)
 8004326:	e7c1      	b.n	80042ac <mbedtls_cipher_finish+0x34>
        *olen = mbedtls_cipher_get_block_size( ctx );
 8004328:	f7ff fe6e 	bl	8004008 <mbedtls_cipher_get_block_size>
 800432c:	6028      	str	r0, [r5, #0]
 800432e:	e7bd      	b.n	80042ac <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <mbedtls_cipher_finish+0xc4>)
 8004332:	e7bb      	b.n	80042ac <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8004334:	4b02      	ldr	r3, [pc, #8]	; (8004340 <mbedtls_cipher_finish+0xc8>)
 8004336:	e7b9      	b.n	80042ac <mbedtls_cipher_finish+0x34>
 8004338:	ffff9d80 	.word	0xffff9d80
 800433c:	ffff9f00 	.word	0xffff9f00
 8004340:	ffff9f80 	.word	0xffff9f80

08004344 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8004344:	b158      	cbz	r0, 800435e <mbedtls_cipher_set_padding_mode+0x1a>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8004346:	6803      	ldr	r3, [r0, #0]
    if( NULL == ctx ||
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <mbedtls_cipher_set_padding_mode+0x1a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 800434e:	2904      	cmp	r1, #4
 8004350:	d107      	bne.n	8004362 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8004352:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <mbedtls_cipher_set_padding_mode+0x24>)
        ctx->add_padding = NULL;
 8004356:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 8004358:	6102      	str	r2, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800435a:	4618      	mov	r0, r3
 800435c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800435e:	4803      	ldr	r0, [pc, #12]	; (800436c <mbedtls_cipher_set_padding_mode+0x28>)
 8004360:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8004362:	4803      	ldr	r0, [pc, #12]	; (8004370 <mbedtls_cipher_set_padding_mode+0x2c>)
}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	08004015 	.word	0x08004015
 800436c:	ffff9f00 	.word	0xffff9f00
 8004370:	ffff9f80 	.word	0xffff9f80

08004374 <mbedtls_cipher_setup>:
{
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 8004378:	460d      	mov	r5, r1
 800437a:	b181      	cbz	r1, 800439e <mbedtls_cipher_setup+0x2a>
 800437c:	b178      	cbz	r0, 800439e <mbedtls_cipher_setup+0x2a>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800437e:	2240      	movs	r2, #64	; 0x40
 8004380:	2100      	movs	r1, #0
 8004382:	f00a f871 	bl	800e468 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8004386:	69ab      	ldr	r3, [r5, #24]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	4798      	blx	r3
 800438c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800438e:	b140      	cbz	r0, 80043a2 <mbedtls_cipher_setup+0x2e>
    ctx->cipher_info = cipher_info;
 8004390:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 8004392:	2104      	movs	r1, #4
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff ffd5 	bl	8004344 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 800439a:	2000      	movs	r0, #0
 800439c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800439e:	4802      	ldr	r0, [pc, #8]	; (80043a8 <mbedtls_cipher_setup+0x34>)
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80043a2:	4802      	ldr	r0, [pc, #8]	; (80043ac <mbedtls_cipher_setup+0x38>)
}
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
 80043a6:	bf00      	nop
 80043a8:	ffff9f00 	.word	0xffff9f00
 80043ac:	ffff9e80 	.word	0xffff9e80

080043b0 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	b085      	sub	sp, #20
 80043b4:	4605      	mov	r5, r0
 80043b6:	461f      	mov	r7, r3
 80043b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80043ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 80043bc:	f7ff fe7a 	bl	80040b4 <mbedtls_cipher_set_iv>
 80043c0:	b9b0      	cbnz	r0, 80043f0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 80043c2:	4628      	mov	r0, r5
 80043c4:	f7ff fe96 	bl	80040f4 <mbedtls_cipher_reset>
 80043c8:	b990      	cbnz	r0, 80043f0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 80043ca:	9400      	str	r4, [sp, #0]
 80043cc:	4633      	mov	r3, r6
 80043ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043d0:	4639      	mov	r1, r7
 80043d2:	4628      	mov	r0, r5
 80043d4:	f7ff fe9a 	bl	800410c <mbedtls_cipher_update>
 80043d8:	b950      	cbnz	r0, 80043f0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	aa03      	add	r2, sp, #12
 80043de:	4431      	add	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	f7ff ff49 	bl	8004278 <mbedtls_cipher_finish>
 80043e6:	b918      	cbnz	r0, 80043f0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	9a03      	ldr	r2, [sp, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80043f0:	b005      	add	sp, #20
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f4 <aes_ctx_free>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 80043f8:	f7fd fa0d 	bl	8001816 <mbedtls_aes_free>
    mbedtls_free( ctx );
 80043fc:	4620      	mov	r0, r4
}
 80043fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8004402:	f009 bff5 	b.w	800e3f0 <free>

08004406 <aes_ctx_alloc>:
{
 8004406:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8004408:	f44f 718c 	mov.w	r1, #280	; 0x118
 800440c:	2001      	movs	r0, #1
 800440e:	f009 ffb5 	bl	800e37c <calloc>
    if( aes == NULL )
 8004412:	4604      	mov	r4, r0
 8004414:	b108      	cbz	r0, 800441a <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 8004416:	f7fd f9f9 	bl	800180c <mbedtls_aes_init>
}
 800441a:	4620      	mov	r0, r4
 800441c:	bd10      	pop	{r4, pc}

0800441e <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800441e:	f7fd bb21 	b.w	8001a64 <mbedtls_aes_setkey_dec>

08004422 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8004422:	f7fd ba03 	b.w	800182c <mbedtls_aes_setkey_enc>

08004426 <aes_crypt_cbc_wrap>:
{
 8004426:	b410      	push	{r4}
}
 8004428:	f85d 4b04 	ldr.w	r4, [sp], #4
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800442c:	f7fd bf36 	b.w	800229c <mbedtls_aes_crypt_cbc>

08004430 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8004430:	f7fd bf26 	b.w	8002280 <mbedtls_aes_crypt_ecb>

08004434 <mbedtls_zeroize>:
#define mbedtls_printf printf
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8004434:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	4288      	cmp	r0, r1
 800443a:	d100      	bne.n	800443e <mbedtls_zeroize+0xa>
}
 800443c:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800443e:	7003      	strb	r3, [r0, #0]
 8004440:	3001      	adds	r0, #1
 8004442:	e7f9      	b.n	8004438 <mbedtls_zeroize+0x4>

08004444 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8004444:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004448:	2100      	movs	r1, #0
 800444a:	f00a b80d 	b.w	800e468 <memset>

0800444e <mbedtls_ctr_drbg_free>:
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 800444e:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8004450:	4604      	mov	r4, r0
 8004452:	b148      	cbz	r0, 8004468 <mbedtls_ctr_drbg_free+0x1a>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 8004454:	3020      	adds	r0, #32
 8004456:	f7fd f9de 	bl	8001816 <mbedtls_aes_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 800445a:	4620      	mov	r0, r4
 800445c:	f44f 71a0 	mov.w	r1, #320	; 0x140
}
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 8004464:	f7ff bfe6 	b.w	8004434 <mbedtls_zeroize>
 8004468:	bd10      	pop	{r4, pc}

0800446a <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 800446a:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 800446c:	6904      	ldr	r4, [r0, #16]
 800446e:	6940      	ldr	r0, [r0, #20]
 8004470:	46a4      	mov	ip, r4
#endif
}
 8004472:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8004476:	4760      	bx	ip

08004478 <mbedtls_debug_print_mpi.part.1>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8004480:	469a      	mov	sl, r3
 8004482:	9e91      	ldr	r6, [sp, #580]	; 0x244
 8004484:	9103      	str	r1, [sp, #12]
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 8004486:	6873      	ldr	r3, [r6, #4]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8004488:	9204      	str	r2, [sp, #16]
    for( n = X->n - 1; n > 0; n-- )
 800448a:	1e5c      	subs	r4, r3, #1
 800448c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004490:	3b01      	subs	r3, #1
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8004492:	4683      	mov	fp, r0
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	68b2      	ldr	r2, [r6, #8]
    for( n = X->n - 1; n > 0; n-- )
 8004498:	b11c      	cbz	r4, 80044a2 <mbedtls_debug_print_mpi.part.1+0x2a>
        if( X->p[n] != 0 )
 800449a:	58d1      	ldr	r1, [r2, r3]
 800449c:	3b04      	subs	r3, #4
 800449e:	2900      	cmp	r1, #0
 80044a0:	d040      	beq.n	8004524 <mbedtls_debug_print_mpi.part.1+0xac>
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 80044a2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80044a6:	00a5      	lsls	r5, r4, #2
 80044a8:	231f      	movs	r3, #31
 80044aa:	fa22 f103 	lsr.w	r1, r2, r3
 80044ae:	07c9      	lsls	r1, r1, #31
 80044b0:	d402      	bmi.n	80044b8 <mbedtls_debug_print_mpi.part.1+0x40>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 80044b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80044b6:	d2f8      	bcs.n	80044aa <mbedtls_debug_print_mpi.part.1+0x32>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 80044b8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 80044bc:	af06      	add	r7, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 80044be:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4a39      	ldr	r2, [pc, #228]	; (80045a8 <mbedtls_debug_print_mpi.part.1+0x130>)
 80044c4:	9b90      	ldr	r3, [sp, #576]	; 0x240
 80044c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044ca:	4638      	mov	r0, r7
 80044cc:	f00a f97c 	bl	800e7c8 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 80044d0:	4653      	mov	r3, sl
 80044d2:	9700      	str	r7, [sp, #0]
 80044d4:	9a04      	ldr	r2, [sp, #16]
 80044d6:	9903      	ldr	r1, [sp, #12]
 80044d8:	f8db 0000 	ldr.w	r0, [fp]
 80044dc:	f7ff ffc5 	bl	800446a <debug_send_line.isra.0>

    idx = 0;
    for( i = n + 1, j = 0; i > 0; i-- )
 80044e0:	1c63      	adds	r3, r4, #1
    idx = 0;
 80044e2:	2400      	movs	r4, #0
    for( i = n + 1, j = 0; i > 0; i-- )
 80044e4:	9302      	str	r3, [sp, #8]
 80044e6:	46a1      	mov	r9, r4
    int j, k, zeros = 1;
 80044e8:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 80044ea:	9a02      	ldr	r2, [sp, #8]
 80044ec:	b9e2      	cbnz	r2, 8004528 <mbedtls_debug_print_mpi.part.1+0xb0>
 80044ee:	ad06      	add	r5, sp, #24
            j++;
        }

    }

    if( zeros == 1 )
 80044f0:	b133      	cbz	r3, 8004500 <mbedtls_debug_print_mpi.part.1+0x88>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 80044f2:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80044f6:	1928      	adds	r0, r5, r4
 80044f8:	4a2c      	ldr	r2, [pc, #176]	; (80045ac <mbedtls_debug_print_mpi.part.1+0x134>)
 80044fa:	f00a f965 	bl	800e7c8 <sniprintf>
 80044fe:	4404      	add	r4, r0

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8004500:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <mbedtls_debug_print_mpi.part.1+0x138>)
 8004506:	1928      	adds	r0, r5, r4
 8004508:	f00a f95e 	bl	800e7c8 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 800450c:	9500      	str	r5, [sp, #0]
 800450e:	4653      	mov	r3, sl
 8004510:	9a04      	ldr	r2, [sp, #16]
 8004512:	9903      	ldr	r1, [sp, #12]
 8004514:	f8db 0000 	ldr.w	r0, [fp]
 8004518:	f7ff ffa7 	bl	800446a <debug_send_line.isra.0>
}
 800451c:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8004520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( n = X->n - 1; n > 0; n-- )
 8004524:	3c01      	subs	r4, #1
 8004526:	e7b6      	b.n	8004496 <mbedtls_debug_print_mpi.part.1+0x1e>
        if( zeros && X->p[i - 1] == 0 )
 8004528:	b11b      	cbz	r3, 8004532 <mbedtls_debug_print_mpi.part.1+0xba>
 800452a:	68b2      	ldr	r2, [r6, #8]
 800452c:	5952      	ldr	r2, [r2, r5]
 800452e:	2a00      	cmp	r2, #0
 8004530:	d034      	beq.n	800459c <mbedtls_debug_print_mpi.part.1+0x124>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 8004532:	f04f 0818 	mov.w	r8, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 8004536:	b133      	cbz	r3, 8004546 <mbedtls_debug_print_mpi.part.1+0xce>
 8004538:	68b2      	ldr	r2, [r6, #8]
 800453a:	5952      	ldr	r2, [r2, r5]
 800453c:	fa22 f208 	lsr.w	r2, r2, r8
 8004540:	f012 0fff 	tst.w	r2, #255	; 0xff
 8004544:	d025      	beq.n	8004592 <mbedtls_debug_print_mpi.part.1+0x11a>
            if( j % 16 == 0 )
 8004546:	f019 030f 	ands.w	r3, r9, #15
 800454a:	9305      	str	r3, [sp, #20]
 800454c:	d111      	bne.n	8004572 <mbedtls_debug_print_mpi.part.1+0xfa>
                if( j > 0 )
 800454e:	f1b9 0f00 	cmp.w	r9, #0
 8004552:	d00e      	beq.n	8004572 <mbedtls_debug_print_mpi.part.1+0xfa>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8004554:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <mbedtls_debug_print_mpi.part.1+0x138>)
 800455a:	1938      	adds	r0, r7, r4
 800455c:	f00a f934 	bl	800e7c8 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 8004560:	9700      	str	r7, [sp, #0]
 8004562:	4653      	mov	r3, sl
 8004564:	9a04      	ldr	r2, [sp, #16]
 8004566:	9903      	ldr	r1, [sp, #12]
 8004568:	f8db 0000 	ldr.w	r0, [fp]
 800456c:	f7ff ff7d 	bl	800446a <debug_send_line.isra.0>
                    idx = 0;
 8004570:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8004572:	68b3      	ldr	r3, [r6, #8]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <mbedtls_debug_print_mpi.part.1+0x13c>)
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8004576:	595b      	ldr	r3, [r3, r5]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8004578:	a806      	add	r0, sp, #24
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 800457a:	fa23 f308 	lsr.w	r3, r3, r8
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8004584:	4420      	add	r0, r4
 8004586:	f00a f91f 	bl	800e7c8 <sniprintf>
            j++;
 800458a:	f109 0901 	add.w	r9, r9, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 800458e:	4404      	add	r4, r0
                zeros = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	f1a8 0808 	sub.w	r8, r8, #8
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8004596:	f118 0f08 	cmn.w	r8, #8
 800459a:	d1cc      	bne.n	8004536 <mbedtls_debug_print_mpi.part.1+0xbe>
    for( i = n + 1, j = 0; i > 0; i-- )
 800459c:	9a02      	ldr	r2, [sp, #8]
 800459e:	3a01      	subs	r2, #1
 80045a0:	9202      	str	r2, [sp, #8]
 80045a2:	3d04      	subs	r5, #4
 80045a4:	e7a1      	b.n	80044ea <mbedtls_debug_print_mpi.part.1+0x72>
 80045a6:	bf00      	nop
 80045a8:	08010111 	.word	0x08010111
 80045ac:	08010134 	.word	0x08010134
 80045b0:	08012430 	.word	0x08012430
 80045b4:	0801012e 	.word	0x0801012e

080045b8 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 80045b8:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <mbedtls_debug_set_threshold+0x8>)
 80045ba:	6018      	str	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20002738 	.word	0x20002738

080045c4 <mbedtls_debug_print_msg>:
{
 80045c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c8:	460e      	mov	r6, r1
 80045ca:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80045ce:	4617      	mov	r7, r2
 80045d0:	4698      	mov	r8, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 80045d2:	4605      	mov	r5, r0
 80045d4:	b1f8      	cbz	r0, 8004616 <mbedtls_debug_print_msg+0x52>
 80045d6:	6803      	ldr	r3, [r0, #0]
 80045d8:	b1eb      	cbz	r3, 8004616 <mbedtls_debug_print_msg+0x52>
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	b1db      	cbz	r3, 8004616 <mbedtls_debug_print_msg+0x52>
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <mbedtls_debug_print_msg+0x5c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	428b      	cmp	r3, r1
 80045e4:	db17      	blt.n	8004616 <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 80045e6:	ac04      	add	r4, sp, #16
    va_start( argp, format );
 80045e8:	ab8b      	add	r3, sp, #556	; 0x22c
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 80045ea:	9a8a      	ldr	r2, [sp, #552]	; 0x228
    va_start( argp, format );
 80045ec:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 80045ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045f2:	4620      	mov	r0, r4
 80045f4:	f00a f9b8 	bl	800e968 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 80045f8:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 80045fc:	d804      	bhi.n	8004608 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 80045fe:	230a      	movs	r3, #10
 8004600:	5423      	strb	r3, [r4, r0]
        str[ret + 1] = '\0';
 8004602:	4420      	add	r0, r4
 8004604:	2300      	movs	r3, #0
 8004606:	7043      	strb	r3, [r0, #1]
    debug_send_line( ssl, level, file, line, str );
 8004608:	9400      	str	r4, [sp, #0]
 800460a:	4643      	mov	r3, r8
 800460c:	463a      	mov	r2, r7
 800460e:	4631      	mov	r1, r6
 8004610:	6828      	ldr	r0, [r5, #0]
 8004612:	f7ff ff2a 	bl	800446a <debug_send_line.isra.0>
}
 8004616:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 800461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800461e:	bf00      	nop
 8004620:	20002738 	.word	0x20002738

08004624 <mbedtls_debug_print_ret>:
{
 8004624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004628:	4617      	mov	r7, r2
 800462a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 800462e:	6802      	ldr	r2, [r0, #0]
{
 8004630:	4698      	mov	r8, r3
 8004632:	4604      	mov	r4, r0
 8004634:	460d      	mov	r5, r1
 8004636:	9b89      	ldr	r3, [sp, #548]	; 0x224
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8004638:	b1d2      	cbz	r2, 8004670 <mbedtls_debug_print_ret+0x4c>
 800463a:	6912      	ldr	r2, [r2, #16]
 800463c:	b1c2      	cbz	r2, 8004670 <mbedtls_debug_print_ret+0x4c>
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <mbedtls_debug_print_ret+0x54>)
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	428a      	cmp	r2, r1
 8004644:	db14      	blt.n	8004670 <mbedtls_debug_print_ret+0x4c>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 8004646:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800464a:	d011      	beq.n	8004670 <mbedtls_debug_print_ret+0x4c>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 800464c:	425a      	negs	r2, r3
 800464e:	ae02      	add	r6, sp, #8
 8004650:	9201      	str	r2, [sp, #4]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4a09      	ldr	r2, [pc, #36]	; (800467c <mbedtls_debug_print_ret+0x58>)
 8004656:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8004658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800465c:	4630      	mov	r0, r6
 800465e:	f00a f8b3 	bl	800e7c8 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8004662:	9600      	str	r6, [sp, #0]
 8004664:	4643      	mov	r3, r8
 8004666:	463a      	mov	r2, r7
 8004668:	4629      	mov	r1, r5
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	f7ff fefd 	bl	800446a <debug_send_line.isra.0>
}
 8004670:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8004674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004678:	20002738 	.word	0x20002738
 800467c:	08010138 	.word	0x08010138

08004680 <mbedtls_debug_print_buf>:
{
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	4699      	mov	r9, r3
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8004686:	6803      	ldr	r3, [r0, #0]
{
 8004688:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800468c:	4606      	mov	r6, r0
 800468e:	460f      	mov	r7, r1
 8004690:	4690      	mov	r8, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8004692:	2b00      	cmp	r3, #0
 8004694:	d040      	beq.n	8004718 <mbedtls_debug_print_buf+0x98>
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d03d      	beq.n	8004718 <mbedtls_debug_print_buf+0x98>
 800469c:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <mbedtls_debug_print_buf+0x124>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	428b      	cmp	r3, r1
 80046a2:	db39      	blt.n	8004718 <mbedtls_debug_print_buf+0x98>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 80046a4:	ac08      	add	r4, sp, #32
 80046a6:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <mbedtls_debug_print_buf+0x128>)
 80046ac:	9b92      	ldr	r3, [sp, #584]	; 0x248
 80046ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046b2:	4620      	mov	r0, r4
 80046b4:	f00a f888 	bl	800e7c8 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 80046b8:	464b      	mov	r3, r9
 80046ba:	9400      	str	r4, [sp, #0]
 80046bc:	4642      	mov	r2, r8
 80046be:	4639      	mov	r1, r7
 80046c0:	6830      	ldr	r0, [r6, #0]
 80046c2:	f7ff fed2 	bl	800446a <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 80046c6:	2211      	movs	r2, #17
 80046c8:	2100      	movs	r1, #0
 80046ca:	a803      	add	r0, sp, #12
 80046cc:	f009 fecc 	bl	800e468 <memset>
 80046d0:	9b93      	ldr	r3, [sp, #588]	; 0x24c
    idx = 0;
 80046d2:	2400      	movs	r4, #0
 80046d4:	f103 3bff 	add.w	fp, r3, #4294967295
    for( i = 0; i < len; i++ )
 80046d8:	4625      	mov	r5, r4
 80046da:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80046dc:	429d      	cmp	r5, r3
 80046de:	d002      	beq.n	80046e6 <mbedtls_debug_print_buf+0x66>
        if( i >= 4096 )
 80046e0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80046e4:	d11c      	bne.n	8004720 <mbedtls_debug_print_buf+0xa0>
    if( len > 0 )
 80046e6:	9b94      	ldr	r3, [sp, #592]	; 0x250
 80046e8:	b1b3      	cbz	r3, 8004718 <mbedtls_debug_print_buf+0x98>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 80046ea:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80047b8 <mbedtls_debug_print_buf+0x138>
 80046ee:	f10d 0a20 	add.w	sl, sp, #32
        for( /* i = i */; i % 16 != 0; i++ )
 80046f2:	f015 0f0f 	tst.w	r5, #15
 80046f6:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80046fa:	d14a      	bne.n	8004792 <mbedtls_debug_print_buf+0x112>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 80046fc:	ab03      	add	r3, sp, #12
 80046fe:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <mbedtls_debug_print_buf+0x12c>)
 8004700:	eb0a 0004 	add.w	r0, sl, r4
 8004704:	f00a f860 	bl	800e7c8 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8004708:	f8cd a000 	str.w	sl, [sp]
 800470c:	464b      	mov	r3, r9
 800470e:	4642      	mov	r2, r8
 8004710:	4639      	mov	r1, r7
 8004712:	6830      	ldr	r0, [r6, #0]
 8004714:	f7ff fea9 	bl	800446a <debug_send_line.isra.0>
}
 8004718:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i % 16 == 0 )
 8004720:	f015 0a0f 	ands.w	sl, r5, #15
 8004724:	d11f      	bne.n	8004766 <mbedtls_debug_print_buf+0xe6>
            if( i > 0 )
 8004726:	b1ad      	cbz	r5, 8004754 <mbedtls_debug_print_buf+0xd4>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8004728:	a808      	add	r0, sp, #32
 800472a:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 800472e:	ab03      	add	r3, sp, #12
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <mbedtls_debug_print_buf+0x12c>)
 8004732:	4420      	add	r0, r4
 8004734:	f00a f848 	bl	800e7c8 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 8004738:	ab08      	add	r3, sp, #32
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	4639      	mov	r1, r7
 8004742:	6830      	ldr	r0, [r6, #0]
 8004744:	f7ff fe91 	bl	800446a <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 8004748:	2211      	movs	r2, #17
 800474a:	4651      	mov	r1, sl
 800474c:	a803      	add	r0, sp, #12
 800474e:	f009 fe8b 	bl	800e468 <memset>
                idx = 0;
 8004752:	4654      	mov	r4, sl
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 8004754:	a808      	add	r0, sp, #32
 8004756:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 800475a:	4420      	add	r0, r4
 800475c:	462b      	mov	r3, r5
 800475e:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <mbedtls_debug_print_buf+0x130>)
 8004760:	f00a f832 	bl	800e7c8 <sniprintf>
 8004764:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8004766:	a808      	add	r0, sp, #32
 8004768:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800476c:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <mbedtls_debug_print_buf+0x134>)
 800476e:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8004772:	4420      	add	r0, r4
 8004774:	f00a f828 	bl	800e7c8 <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 8004778:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800477c:	f1a3 0220 	sub.w	r2, r3, #32
 8004780:	2a5e      	cmp	r2, #94	; 0x5e
 8004782:	aa03      	add	r2, sp, #12
 8004784:	bf88      	it	hi
 8004786:	232e      	movhi	r3, #46	; 0x2e
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8004788:	4404      	add	r4, r0
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 800478a:	f802 300a 	strb.w	r3, [r2, sl]
    for( i = 0; i < len; i++ )
 800478e:	3501      	adds	r5, #1
 8004790:	e7a3      	b.n	80046da <mbedtls_debug_print_buf+0x5a>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8004792:	eb0a 0004 	add.w	r0, sl, r4
 8004796:	465a      	mov	r2, fp
 8004798:	f00a f816 	bl	800e7c8 <sniprintf>
        for( /* i = i */; i % 16 != 0; i++ )
 800479c:	3501      	adds	r5, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 800479e:	4404      	add	r4, r0
 80047a0:	e7a7      	b.n	80046f2 <mbedtls_debug_print_buf+0x72>
 80047a2:	bf00      	nop
 80047a4:	20002738 	.word	0x20002738
 80047a8:	080100ac 	.word	0x080100ac
 80047ac:	080100c5 	.word	0x080100c5
 80047b0:	080100cb 	.word	0x080100cb
 80047b4:	0801012e 	.word	0x0801012e
 80047b8:	080100d2 	.word	0x080100d2

080047bc <mbedtls_debug_print_mpi>:
{
 80047bc:	b4f0      	push	{r4, r5, r6, r7}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 80047be:	6805      	ldr	r5, [r0, #0]
{
 80047c0:	9c05      	ldr	r4, [sp, #20]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 80047c2:	b14d      	cbz	r5, 80047d8 <mbedtls_debug_print_mpi+0x1c>
 80047c4:	692d      	ldr	r5, [r5, #16]
 80047c6:	b13d      	cbz	r5, 80047d8 <mbedtls_debug_print_mpi+0x1c>
 80047c8:	b134      	cbz	r4, 80047d8 <mbedtls_debug_print_mpi+0x1c>
 80047ca:	4d04      	ldr	r5, [pc, #16]	; (80047dc <mbedtls_debug_print_mpi+0x20>)
 80047cc:	682d      	ldr	r5, [r5, #0]
 80047ce:	428d      	cmp	r5, r1
 80047d0:	db02      	blt.n	80047d8 <mbedtls_debug_print_mpi+0x1c>
}
 80047d2:	bcf0      	pop	{r4, r5, r6, r7}
 80047d4:	f7ff be50 	b.w	8004478 <mbedtls_debug_print_mpi.part.1>
 80047d8:	bcf0      	pop	{r4, r5, r6, r7}
 80047da:	4770      	bx	lr
 80047dc:	20002738 	.word	0x20002738

080047e0 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	4698      	mov	r8, r3
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 80047e6:	6803      	ldr	r3, [r0, #0]
{
 80047e8:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
 80047ec:	4605      	mov	r5, r0
 80047ee:	460e      	mov	r6, r1
 80047f0:	4617      	mov	r7, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d054      	beq.n	80048a0 <mbedtls_debug_print_crt+0xc0>
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d051      	beq.n	80048a0 <mbedtls_debug_print_crt+0xc0>
 80047fc:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d04d      	beq.n	80048a0 <mbedtls_debug_print_crt+0xc0>
 8004804:	4b50      	ldr	r3, [pc, #320]	; (8004948 <mbedtls_debug_print_crt+0x168>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	428b      	cmp	r3, r1
 800480a:	db49      	blt.n	80048a0 <mbedtls_debug_print_crt+0xc0>
 800480c:	2300      	movs	r3, #0
 800480e:	9302      	str	r3, [sp, #8]
            memcpy( str, start, len );
 8004810:	ac88      	add	r4, sp, #544	; 0x220

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8004812:	9b02      	ldr	r3, [sp, #8]
 8004814:	4a4d      	ldr	r2, [pc, #308]	; (800494c <mbedtls_debug_print_crt+0x16c>)
 8004816:	3301      	adds	r3, #1
 8004818:	f10d 0920 	add.w	r9, sp, #32
 800481c:	9302      	str	r3, [sp, #8]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004824:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8004828:	4648      	mov	r0, r9
 800482a:	f009 ffcd 	bl	800e7c8 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 800482e:	f8cd 9000 	str.w	r9, [sp]
 8004832:	4643      	mov	r3, r8
 8004834:	463a      	mov	r2, r7
 8004836:	4631      	mov	r1, r6
 8004838:	6828      	ldr	r0, [r5, #0]
 800483a:	f7ff fe16 	bl	800446a <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 800483e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004842:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8004846:	4a42      	ldr	r2, [pc, #264]	; (8004950 <mbedtls_debug_print_crt+0x170>)
 8004848:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 800484c:	f007 fbc6 	bl	800bfdc <mbedtls_x509_crt_info>
 8004850:	f20d 491f 	addw	r9, sp, #1055	; 0x41f
    start = text;
 8004854:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
            str[len] = '\0';
 8004858:	f04f 0b00 	mov.w	fp, #0
    for( cur = text; *cur != '\0'; cur++ )
 800485c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004860:	f109 0a01 	add.w	sl, r9, #1
 8004864:	bb03      	cbnz	r3, 80048a8 <mbedtls_debug_print_crt+0xc8>
    memset( items, 0, sizeof( items ) );
 8004866:	4619      	mov	r1, r3
 8004868:	2224      	movs	r2, #36	; 0x24
 800486a:	4620      	mov	r0, r4
 800486c:	f009 fdfc 	bl	800e468 <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8004870:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8004874:	4621      	mov	r1, r4
 8004876:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
 800487a:	f001 fa5f 	bl	8005d3c <mbedtls_pk_debug>
 800487e:	b380      	cbz	r0, 80048e2 <mbedtls_debug_print_crt+0x102>
        debug_send_line( ssl, level, file, line,
 8004880:	4b34      	ldr	r3, [pc, #208]	; (8004954 <mbedtls_debug_print_crt+0x174>)
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	463a      	mov	r2, r7
 8004886:	4643      	mov	r3, r8
 8004888:	4631      	mov	r1, r6
 800488a:	6828      	ldr	r0, [r5, #0]
 800488c:	f7ff fded 	bl	800446a <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8004890:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8004894:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004898:	f8cd 384c 	str.w	r3, [sp, #2124]	; 0x84c
    while( crt != NULL )
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1b8      	bne.n	8004812 <mbedtls_debug_print_crt+0x32>
    }
}
 80048a0:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 80048a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 80048a8:	2b0a      	cmp	r3, #10
 80048aa:	d118      	bne.n	80048de <mbedtls_debug_print_crt+0xfe>
            size_t len = cur - start + 1;
 80048ac:	ebaa 0301 	sub.w	r3, sl, r1
 80048b0:	3301      	adds	r3, #1
 80048b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bf28      	it	cs
 80048ba:	4613      	movcs	r3, r2
            memcpy( str, start, len );
 80048bc:	461a      	mov	r2, r3
 80048be:	4620      	mov	r0, r4
 80048c0:	9303      	str	r3, [sp, #12]
 80048c2:	f009 fdac 	bl	800e41e <memcpy>
            str[len] = '\0';
 80048c6:	9b03      	ldr	r3, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 80048c8:	6828      	ldr	r0, [r5, #0]
            str[len] = '\0';
 80048ca:	f804 b003 	strb.w	fp, [r4, r3]
            debug_send_line( ssl, level, file, line, str );
 80048ce:	4631      	mov	r1, r6
 80048d0:	9400      	str	r4, [sp, #0]
 80048d2:	4643      	mov	r3, r8
 80048d4:	463a      	mov	r2, r7
 80048d6:	f7ff fdc8 	bl	800446a <debug_send_line.isra.0>
 80048da:	f109 0102 	add.w	r1, r9, #2
    start = text;
 80048de:	46d1      	mov	r9, sl
 80048e0:	e7bc      	b.n	800485c <mbedtls_debug_print_crt+0x7c>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 80048e2:	4681      	mov	r9, r0
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 80048e4:	f819 3004 	ldrb.w	r3, [r9, r4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0d1      	beq.n	8004890 <mbedtls_debug_print_crt+0xb0>
 80048ec:	eb04 0b09 	add.w	fp, r4, r9
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 80048f0:	f10d 0a10 	add.w	sl, sp, #16
 80048f4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <mbedtls_debug_print_crt+0x178>)
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <mbedtls_debug_print_crt+0x17c>)
 80048fe:	2110      	movs	r1, #16
 8004900:	4650      	mov	r0, sl
 8004902:	f009 ff61 	bl	800e7c8 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8004906:	2300      	movs	r3, #0
 8004908:	f88a 300f 	strb.w	r3, [sl, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 800490c:	f819 3004 	ldrb.w	r3, [r9, r4]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d110      	bne.n	8004936 <mbedtls_debug_print_crt+0x156>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8004914:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	f8cd a000 	str.w	sl, [sp]
 800491e:	4643      	mov	r3, r8
 8004920:	463a      	mov	r2, r7
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	f7ff ff49 	bl	80047bc <mbedtls_debug_print_mpi>
 800492a:	f109 090c 	add.w	r9, r9, #12
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 800492e:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8004932:	d1d7      	bne.n	80048e4 <mbedtls_debug_print_crt+0x104>
 8004934:	e7ac      	b.n	8004890 <mbedtls_debug_print_crt+0xb0>
            debug_send_line( ssl, level, file, line,
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <mbedtls_debug_print_crt+0x180>)
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	463a      	mov	r2, r7
 800493c:	4643      	mov	r3, r8
 800493e:	4631      	mov	r1, r6
 8004940:	6828      	ldr	r0, [r5, #0]
 8004942:	f7ff fd92 	bl	800446a <debug_send_line.isra.0>
 8004946:	e7f0      	b.n	800492a <mbedtls_debug_print_crt+0x14a>
 8004948:	20002738 	.word	0x20002738
 800494c:	080100d6 	.word	0x080100d6
 8004950:	0801236b 	.word	0x0801236b
 8004954:	080100df 	.word	0x080100df
 8004958:	080100f9 	.word	0x080100f9
 800495c:	080100f3 	.word	0x080100f3
 8004960:	080100fe 	.word	0x080100fe

08004964 <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 8004964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004968:	4607      	mov	r7, r0
 800496a:	460c      	mov	r4, r1
    size_t len;
    int use_ret;

    if( buflen == 0 )
 800496c:	4615      	mov	r5, r2
 800496e:	2a00      	cmp	r2, #0
 8004970:	f000 8612 	beq.w	8005598 <mbedtls_strerror+0xc34>
        return;

    memset( buf, 0x00, buflen );
 8004974:	2100      	movs	r1, #0
 8004976:	4620      	mov	r0, r4
 8004978:	f009 fd76 	bl	800e468 <memset>
 800497c:	2f00      	cmp	r7, #0
 800497e:	bfb8      	it	lt
 8004980:	427f      	neglt	r7, r7

    if( ret < 0 )
        ret = -ret;

    if( ret & 0xFF80 )
 8004982:	f64f 7680 	movw	r6, #65408	; 0xff80
 8004986:	403e      	ands	r6, r7
 8004988:	d00f      	beq.n	80049aa <mbedtls_strerror+0x46>

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 800498a:	f5b6 4fc1 	cmp.w	r6, #24704	; 0x6080
 800498e:	d138      	bne.n	8004a02 <mbedtls_strerror+0x9e>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 8004990:	4abe      	ldr	r2, [pc, #760]	; (8004c8c <mbedtls_strerror+0x328>)
 8004992:	4629      	mov	r1, r5
 8004994:	4620      	mov	r0, r4
 8004996:	f009 ff17 	bl	800e7c8 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 800499a:	7823      	ldrb	r3, [r4, #0]
 800499c:	b92b      	cbnz	r3, 80049aa <mbedtls_strerror+0x46>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 800499e:	4633      	mov	r3, r6
 80049a0:	4abb      	ldr	r2, [pc, #748]	; (8004c90 <mbedtls_strerror+0x32c>)
 80049a2:	4629      	mov	r1, r5
 80049a4:	4620      	mov	r0, r4
 80049a6:	f009 ff0f 	bl	800e7c8 <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 80049aa:	f427 467f 	bic.w	r6, r7, #65280	; 0xff00
 80049ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80

    if( use_ret == 0 )
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	f000 85f0 	beq.w	8005598 <mbedtls_strerror+0xc34>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7fb fc11 	bl	80001e0 <strlen>

    if( len > 0 )
 80049be:	4607      	mov	r7, r0
 80049c0:	b158      	cbz	r0, 80049da <mbedtls_strerror+0x76>
    {
        if( buflen - len < 5 )
 80049c2:	1a2d      	subs	r5, r5, r0
 80049c4:	2d04      	cmp	r5, #4
 80049c6:	f240 85e7 	bls.w	8005598 <mbedtls_strerror+0xc34>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 80049ca:	4629      	mov	r1, r5
 80049cc:	1820      	adds	r0, r4, r0
 80049ce:	4ab1      	ldr	r2, [pc, #708]	; (8004c94 <mbedtls_strerror+0x330>)
 80049d0:	f009 fefa 	bl	800e7c8 <sniprintf>

        buf += len + 3;
 80049d4:	3703      	adds	r7, #3
 80049d6:	443c      	add	r4, r7
        buflen -= len + 3;
 80049d8:	3d03      	subs	r5, #3

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 80049da:	2e20      	cmp	r6, #32
 80049dc:	f040 84fc 	bne.w	80053d8 <mbedtls_strerror+0xa74>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 80049e0:	4aad      	ldr	r2, [pc, #692]	; (8004c98 <mbedtls_strerror+0x334>)
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 hardware accelerator failed" );
#endif /* MBEDTLS_SHA1_C */

#if defined(MBEDTLS_SHA256_C)
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 80049e2:	4629      	mov	r1, r5
 80049e4:	4620      	mov	r0, r4
 80049e6:	f009 feef 	bl	800e7c8 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 80049ea:	7823      	ldrb	r3, [r4, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 85d3 	bne.w	8005598 <mbedtls_strerror+0xc34>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 80049f2:	4633      	mov	r3, r6
 80049f4:	4629      	mov	r1, r5
 80049f6:	4620      	mov	r0, r4
 80049f8:	4aa5      	ldr	r2, [pc, #660]	; (8004c90 <mbedtls_strerror+0x32c>)
}
 80049fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 80049fe:	f009 bee3 	b.w	800e7c8 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 8004a02:	f5b6 4fc2 	cmp.w	r6, #24832	; 0x6100
 8004a06:	d105      	bne.n	8004a14 <mbedtls_strerror+0xb0>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 8004a08:	4aa4      	ldr	r2, [pc, #656]	; (8004c9c <mbedtls_strerror+0x338>)
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f009 fedb 	bl	800e7c8 <sniprintf>
 8004a12:	e7c2      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 8004a14:	f5b6 4fc3 	cmp.w	r6, #24960	; 0x6180
 8004a18:	d105      	bne.n	8004a26 <mbedtls_strerror+0xc2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 8004a1a:	4aa1      	ldr	r2, [pc, #644]	; (8004ca0 <mbedtls_strerror+0x33c>)
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f009 fed2 	bl	800e7c8 <sniprintf>
 8004a24:	e7b9      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 8004a26:	f5b6 4fc4 	cmp.w	r6, #25088	; 0x6200
 8004a2a:	d105      	bne.n	8004a38 <mbedtls_strerror+0xd4>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 8004a2c:	4a9d      	ldr	r2, [pc, #628]	; (8004ca4 <mbedtls_strerror+0x340>)
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4620      	mov	r0, r4
 8004a32:	f009 fec9 	bl	800e7c8 <sniprintf>
 8004a36:	e7b0      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 8004a38:	f5b6 4fc5 	cmp.w	r6, #25216	; 0x6280
 8004a3c:	d105      	bne.n	8004a4a <mbedtls_strerror+0xe6>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 8004a3e:	4a9a      	ldr	r2, [pc, #616]	; (8004ca8 <mbedtls_strerror+0x344>)
 8004a40:	4629      	mov	r1, r5
 8004a42:	4620      	mov	r0, r4
 8004a44:	f009 fec0 	bl	800e7c8 <sniprintf>
 8004a48:	e7a7      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 8004a4a:	f5b6 4fc6 	cmp.w	r6, #25344	; 0x6300
 8004a4e:	d105      	bne.n	8004a5c <mbedtls_strerror+0xf8>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 8004a50:	4a96      	ldr	r2, [pc, #600]	; (8004cac <mbedtls_strerror+0x348>)
 8004a52:	4629      	mov	r1, r5
 8004a54:	4620      	mov	r0, r4
 8004a56:	f009 feb7 	bl	800e7c8 <sniprintf>
 8004a5a:	e79e      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 8004a5c:	f5b6 4fc7 	cmp.w	r6, #25472	; 0x6380
 8004a60:	d105      	bne.n	8004a6e <mbedtls_strerror+0x10a>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 8004a62:	4a93      	ldr	r2, [pc, #588]	; (8004cb0 <mbedtls_strerror+0x34c>)
 8004a64:	4629      	mov	r1, r5
 8004a66:	4620      	mov	r0, r4
 8004a68:	f009 feae 	bl	800e7c8 <sniprintf>
 8004a6c:	e795      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 8004a6e:	f5b6 4fc8 	cmp.w	r6, #25600	; 0x6400
 8004a72:	d105      	bne.n	8004a80 <mbedtls_strerror+0x11c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 8004a74:	4a8f      	ldr	r2, [pc, #572]	; (8004cb4 <mbedtls_strerror+0x350>)
 8004a76:	4629      	mov	r1, r5
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f009 fea5 	bl	800e7c8 <sniprintf>
 8004a7e:	e78c      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 8004a80:	f5b6 4fa1 	cmp.w	r6, #20608	; 0x5080
 8004a84:	d105      	bne.n	8004a92 <mbedtls_strerror+0x12e>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 8004a86:	4a8c      	ldr	r2, [pc, #560]	; (8004cb8 <mbedtls_strerror+0x354>)
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f009 fe9c 	bl	800e7c8 <sniprintf>
 8004a90:	e783      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 8004a92:	f5b6 4fa2 	cmp.w	r6, #20736	; 0x5100
 8004a96:	d105      	bne.n	8004aa4 <mbedtls_strerror+0x140>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 8004a98:	4a88      	ldr	r2, [pc, #544]	; (8004cbc <mbedtls_strerror+0x358>)
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f009 fe93 	bl	800e7c8 <sniprintf>
 8004aa2:	e77a      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 8004aa4:	f5b6 4fa3 	cmp.w	r6, #20864	; 0x5180
 8004aa8:	d105      	bne.n	8004ab6 <mbedtls_strerror+0x152>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 8004aaa:	4a85      	ldr	r2, [pc, #532]	; (8004cc0 <mbedtls_strerror+0x35c>)
 8004aac:	4629      	mov	r1, r5
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f009 fe8a 	bl	800e7c8 <sniprintf>
 8004ab4:	e771      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 8004ab6:	f5b6 4fa4 	cmp.w	r6, #20992	; 0x5200
 8004aba:	d105      	bne.n	8004ac8 <mbedtls_strerror+0x164>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 8004abc:	4a81      	ldr	r2, [pc, #516]	; (8004cc4 <mbedtls_strerror+0x360>)
 8004abe:	4629      	mov	r1, r5
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f009 fe81 	bl	800e7c8 <sniprintf>
 8004ac6:	e768      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 8004ac8:	f5b6 4fa5 	cmp.w	r6, #21120	; 0x5280
 8004acc:	d105      	bne.n	8004ada <mbedtls_strerror+0x176>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 8004ace:	4a7e      	ldr	r2, [pc, #504]	; (8004cc8 <mbedtls_strerror+0x364>)
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f009 fe78 	bl	800e7c8 <sniprintf>
 8004ad8:	e75f      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 8004ada:	f5b6 5f84 	cmp.w	r6, #4224	; 0x1080
 8004ade:	d105      	bne.n	8004aec <mbedtls_strerror+0x188>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 8004ae0:	4a7a      	ldr	r2, [pc, #488]	; (8004ccc <mbedtls_strerror+0x368>)
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f009 fe6f 	bl	800e7c8 <sniprintf>
 8004aea:	e756      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 8004aec:	f5b6 5f88 	cmp.w	r6, #4352	; 0x1100
 8004af0:	d105      	bne.n	8004afe <mbedtls_strerror+0x19a>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 8004af2:	4a77      	ldr	r2, [pc, #476]	; (8004cd0 <mbedtls_strerror+0x36c>)
 8004af4:	4629      	mov	r1, r5
 8004af6:	4620      	mov	r0, r4
 8004af8:	f009 fe66 	bl	800e7c8 <sniprintf>
 8004afc:	e74d      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 8004afe:	f5b6 5f8c 	cmp.w	r6, #4480	; 0x1180
 8004b02:	d105      	bne.n	8004b10 <mbedtls_strerror+0x1ac>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 8004b04:	4a73      	ldr	r2, [pc, #460]	; (8004cd4 <mbedtls_strerror+0x370>)
 8004b06:	4629      	mov	r1, r5
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f009 fe5d 	bl	800e7c8 <sniprintf>
 8004b0e:	e744      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 8004b10:	f5b6 5f90 	cmp.w	r6, #4608	; 0x1200
 8004b14:	d105      	bne.n	8004b22 <mbedtls_strerror+0x1be>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 8004b16:	4a70      	ldr	r2, [pc, #448]	; (8004cd8 <mbedtls_strerror+0x374>)
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f009 fe54 	bl	800e7c8 <sniprintf>
 8004b20:	e73b      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 8004b22:	f5b6 5f94 	cmp.w	r6, #4736	; 0x1280
 8004b26:	d105      	bne.n	8004b34 <mbedtls_strerror+0x1d0>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 8004b28:	4a6c      	ldr	r2, [pc, #432]	; (8004cdc <mbedtls_strerror+0x378>)
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f009 fe4b 	bl	800e7c8 <sniprintf>
 8004b32:	e732      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 8004b34:	f5b6 5f98 	cmp.w	r6, #4864	; 0x1300
 8004b38:	d105      	bne.n	8004b46 <mbedtls_strerror+0x1e2>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 8004b3a:	4a69      	ldr	r2, [pc, #420]	; (8004ce0 <mbedtls_strerror+0x37c>)
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f009 fe42 	bl	800e7c8 <sniprintf>
 8004b44:	e729      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 8004b46:	f5b6 5f9c 	cmp.w	r6, #4992	; 0x1380
 8004b4a:	d105      	bne.n	8004b58 <mbedtls_strerror+0x1f4>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 8004b4c:	4a65      	ldr	r2, [pc, #404]	; (8004ce4 <mbedtls_strerror+0x380>)
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4620      	mov	r0, r4
 8004b52:	f009 fe39 	bl	800e7c8 <sniprintf>
 8004b56:	e720      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 8004b58:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
 8004b5c:	d105      	bne.n	8004b6a <mbedtls_strerror+0x206>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 8004b5e:	4a62      	ldr	r2, [pc, #392]	; (8004ce8 <mbedtls_strerror+0x384>)
 8004b60:	4629      	mov	r1, r5
 8004b62:	4620      	mov	r0, r4
 8004b64:	f009 fe30 	bl	800e7c8 <sniprintf>
 8004b68:	e717      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 8004b6a:	f5b6 5fa4 	cmp.w	r6, #5248	; 0x1480
 8004b6e:	d105      	bne.n	8004b7c <mbedtls_strerror+0x218>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 8004b70:	4a5e      	ldr	r2, [pc, #376]	; (8004cec <mbedtls_strerror+0x388>)
 8004b72:	4629      	mov	r1, r5
 8004b74:	4620      	mov	r0, r4
 8004b76:	f009 fe27 	bl	800e7c8 <sniprintf>
 8004b7a:	e70e      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 8004b7c:	f5b6 5f7e 	cmp.w	r6, #16256	; 0x3f80
 8004b80:	d105      	bne.n	8004b8e <mbedtls_strerror+0x22a>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <mbedtls_strerror+0x38c>)
 8004b84:	4629      	mov	r1, r5
 8004b86:	4620      	mov	r0, r4
 8004b88:	f009 fe1e 	bl	800e7c8 <sniprintf>
 8004b8c:	e705      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 8004b8e:	f5b6 5f7c 	cmp.w	r6, #16128	; 0x3f00
 8004b92:	d105      	bne.n	8004ba0 <mbedtls_strerror+0x23c>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 8004b94:	4a57      	ldr	r2, [pc, #348]	; (8004cf4 <mbedtls_strerror+0x390>)
 8004b96:	4629      	mov	r1, r5
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f009 fe15 	bl	800e7c8 <sniprintf>
 8004b9e:	e6fc      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 8004ba0:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
 8004ba4:	d105      	bne.n	8004bb2 <mbedtls_strerror+0x24e>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 8004ba6:	4a54      	ldr	r2, [pc, #336]	; (8004cf8 <mbedtls_strerror+0x394>)
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4620      	mov	r0, r4
 8004bac:	f009 fe0c 	bl	800e7c8 <sniprintf>
 8004bb0:	e6f3      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 8004bb2:	f5b6 5f78 	cmp.w	r6, #15872	; 0x3e00
 8004bb6:	d105      	bne.n	8004bc4 <mbedtls_strerror+0x260>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 8004bb8:	4a50      	ldr	r2, [pc, #320]	; (8004cfc <mbedtls_strerror+0x398>)
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f009 fe03 	bl	800e7c8 <sniprintf>
 8004bc2:	e6ea      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 8004bc4:	f5b6 5f76 	cmp.w	r6, #15744	; 0x3d80
 8004bc8:	d105      	bne.n	8004bd6 <mbedtls_strerror+0x272>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 8004bca:	4a4d      	ldr	r2, [pc, #308]	; (8004d00 <mbedtls_strerror+0x39c>)
 8004bcc:	4629      	mov	r1, r5
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f009 fdfa 	bl	800e7c8 <sniprintf>
 8004bd4:	e6e1      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 8004bd6:	f5b6 5f74 	cmp.w	r6, #15616	; 0x3d00
 8004bda:	d105      	bne.n	8004be8 <mbedtls_strerror+0x284>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 8004bdc:	4a49      	ldr	r2, [pc, #292]	; (8004d04 <mbedtls_strerror+0x3a0>)
 8004bde:	4629      	mov	r1, r5
 8004be0:	4620      	mov	r0, r4
 8004be2:	f009 fdf1 	bl	800e7c8 <sniprintf>
 8004be6:	e6d8      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 8004be8:	f5b6 5f72 	cmp.w	r6, #15488	; 0x3c80
 8004bec:	d105      	bne.n	8004bfa <mbedtls_strerror+0x296>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 8004bee:	4a46      	ldr	r2, [pc, #280]	; (8004d08 <mbedtls_strerror+0x3a4>)
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f009 fde8 	bl	800e7c8 <sniprintf>
 8004bf8:	e6cf      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 8004bfa:	f5b6 5f70 	cmp.w	r6, #15360	; 0x3c00
 8004bfe:	d105      	bne.n	8004c0c <mbedtls_strerror+0x2a8>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 8004c00:	4a42      	ldr	r2, [pc, #264]	; (8004d0c <mbedtls_strerror+0x3a8>)
 8004c02:	4629      	mov	r1, r5
 8004c04:	4620      	mov	r0, r4
 8004c06:	f009 fddf 	bl	800e7c8 <sniprintf>
 8004c0a:	e6c6      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 8004c0c:	f5b6 5f6e 	cmp.w	r6, #15232	; 0x3b80
 8004c10:	d105      	bne.n	8004c1e <mbedtls_strerror+0x2ba>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 8004c12:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <mbedtls_strerror+0x3ac>)
 8004c14:	4629      	mov	r1, r5
 8004c16:	4620      	mov	r0, r4
 8004c18:	f009 fdd6 	bl	800e7c8 <sniprintf>
 8004c1c:	e6bd      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 8004c1e:	f5b6 5f6c 	cmp.w	r6, #15104	; 0x3b00
 8004c22:	d105      	bne.n	8004c30 <mbedtls_strerror+0x2cc>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 8004c24:	4a3b      	ldr	r2, [pc, #236]	; (8004d14 <mbedtls_strerror+0x3b0>)
 8004c26:	4629      	mov	r1, r5
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f009 fdcd 	bl	800e7c8 <sniprintf>
 8004c2e:	e6b4      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 8004c30:	f5b6 5f6a 	cmp.w	r6, #14976	; 0x3a80
 8004c34:	d105      	bne.n	8004c42 <mbedtls_strerror+0x2de>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 8004c36:	4a38      	ldr	r2, [pc, #224]	; (8004d18 <mbedtls_strerror+0x3b4>)
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f009 fdc4 	bl	800e7c8 <sniprintf>
 8004c40:	e6ab      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 8004c42:	f5b6 5f68 	cmp.w	r6, #14848	; 0x3a00
 8004c46:	d105      	bne.n	8004c54 <mbedtls_strerror+0x2f0>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 8004c48:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <mbedtls_strerror+0x3b8>)
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f009 fdbb 	bl	800e7c8 <sniprintf>
 8004c52:	e6a2      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 8004c54:	f5b6 5f66 	cmp.w	r6, #14720	; 0x3980
 8004c58:	d105      	bne.n	8004c66 <mbedtls_strerror+0x302>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 8004c5a:	4a31      	ldr	r2, [pc, #196]	; (8004d20 <mbedtls_strerror+0x3bc>)
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f009 fdb2 	bl	800e7c8 <sniprintf>
 8004c64:	e699      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 8004c66:	f5b6 5f64 	cmp.w	r6, #14592	; 0x3900
 8004c6a:	d105      	bne.n	8004c78 <mbedtls_strerror+0x314>
            mbedtls_snprintf( buf, buflen, "PK - The signature is valid but its length is less than expected" );
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <mbedtls_strerror+0x3c0>)
 8004c6e:	4629      	mov	r1, r5
 8004c70:	4620      	mov	r0, r4
 8004c72:	f009 fda9 	bl	800e7c8 <sniprintf>
 8004c76:	e690      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 8004c78:	f5b6 5f62 	cmp.w	r6, #14464	; 0x3880
 8004c7c:	d156      	bne.n	8004d2c <mbedtls_strerror+0x3c8>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	; (8004d28 <mbedtls_strerror+0x3c4>)
 8004c80:	4629      	mov	r1, r5
 8004c82:	4620      	mov	r0, r4
 8004c84:	f009 fda0 	bl	800e7c8 <sniprintf>
 8004c88:	e687      	b.n	800499a <mbedtls_strerror+0x36>
 8004c8a:	bf00      	nop
 8004c8c:	08010154 	.word	0x08010154
 8004c90:	080119d8 	.word	0x080119d8
 8004c94:	080143a7 	.word	0x080143a7
 8004c98:	080119f2 	.word	0x080119f2
 8004c9c:	08010183 	.word	0x08010183
 8004ca0:	080101a1 	.word	0x080101a1
 8004ca4:	080101c4 	.word	0x080101c4
 8004ca8:	08010201 	.word	0x08010201
 8004cac:	08010234 	.word	0x08010234
 8004cb0:	08010264 	.word	0x08010264
 8004cb4:	080102a7 	.word	0x080102a7
 8004cb8:	080102d3 	.word	0x080102d3
 8004cbc:	080102fe 	.word	0x080102fe
 8004cc0:	08010324 	.word	0x08010324
 8004cc4:	08010343 	.word	0x08010343
 8004cc8:	0801036a 	.word	0x0801036a
 8004ccc:	0801038e 	.word	0x0801038e
 8004cd0:	080103b2 	.word	0x080103b2
 8004cd4:	080103d6 	.word	0x080103d6
 8004cd8:	080103f6 	.word	0x080103f6
 8004cdc:	08010418 	.word	0x08010418
 8004ce0:	08010443 	.word	0x08010443
 8004ce4:	0801046d 	.word	0x0801046d
 8004ce8:	080104b4 	.word	0x080104b4
 8004cec:	080104f3 	.word	0x080104f3
 8004cf0:	0801051a 	.word	0x0801051a
 8004cf4:	08010538 	.word	0x08010538
 8004cf8:	08010574 	.word	0x08010574
 8004cfc:	0801059a 	.word	0x0801059a
 8004d00:	080105b9 	.word	0x080105b9
 8004d04:	080105d6 	.word	0x080105d6
 8004d08:	080105f4 	.word	0x080105f4
 8004d0c:	08010636 	.word	0x08010636
 8004d10:	0801065f 	.word	0x0801065f
 8004d14:	080106a5 	.word	0x080106a5
 8004d18:	080106ed 	.word	0x080106ed
 8004d1c:	08010718 	.word	0x08010718
 8004d20:	0801075c 	.word	0x0801075c
 8004d24:	08010794 	.word	0x08010794
 8004d28:	080107d5 	.word	0x080107d5
        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )
 8004d2c:	f5b6 4f81 	cmp.w	r6, #16512	; 0x4080
 8004d30:	d105      	bne.n	8004d3e <mbedtls_strerror+0x3da>
            mbedtls_snprintf( buf, buflen, "RSA - Bad input parameters to function" );
 8004d32:	4abc      	ldr	r2, [pc, #752]	; (8005024 <mbedtls_strerror+0x6c0>)
 8004d34:	4629      	mov	r1, r5
 8004d36:	4620      	mov	r0, r4
 8004d38:	f009 fd46 	bl	800e7c8 <sniprintf>
 8004d3c:	e62d      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )
 8004d3e:	f5b6 4f82 	cmp.w	r6, #16640	; 0x4100
 8004d42:	d105      	bne.n	8004d50 <mbedtls_strerror+0x3ec>
            mbedtls_snprintf( buf, buflen, "RSA - Input data contains invalid padding and is rejected" );
 8004d44:	4ab8      	ldr	r2, [pc, #736]	; (8005028 <mbedtls_strerror+0x6c4>)
 8004d46:	4629      	mov	r1, r5
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f009 fd3d 	bl	800e7c8 <sniprintf>
 8004d4e:	e624      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )
 8004d50:	f5b6 4f83 	cmp.w	r6, #16768	; 0x4180
 8004d54:	d105      	bne.n	8004d62 <mbedtls_strerror+0x3fe>
            mbedtls_snprintf( buf, buflen, "RSA - Something failed during generation of a key" );
 8004d56:	4ab5      	ldr	r2, [pc, #724]	; (800502c <mbedtls_strerror+0x6c8>)
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f009 fd34 	bl	800e7c8 <sniprintf>
 8004d60:	e61b      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )
 8004d62:	f5b6 4f84 	cmp.w	r6, #16896	; 0x4200
 8004d66:	d105      	bne.n	8004d74 <mbedtls_strerror+0x410>
            mbedtls_snprintf( buf, buflen, "RSA - Key failed to pass the validity check of the library" );
 8004d68:	4ab1      	ldr	r2, [pc, #708]	; (8005030 <mbedtls_strerror+0x6cc>)
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f009 fd2b 	bl	800e7c8 <sniprintf>
 8004d72:	e612      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )
 8004d74:	f5b6 4f85 	cmp.w	r6, #17024	; 0x4280
 8004d78:	d105      	bne.n	8004d86 <mbedtls_strerror+0x422>
            mbedtls_snprintf( buf, buflen, "RSA - The public key operation failed" );
 8004d7a:	4aae      	ldr	r2, [pc, #696]	; (8005034 <mbedtls_strerror+0x6d0>)
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f009 fd22 	bl	800e7c8 <sniprintf>
 8004d84:	e609      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )
 8004d86:	f5b6 4f86 	cmp.w	r6, #17152	; 0x4300
 8004d8a:	d105      	bne.n	8004d98 <mbedtls_strerror+0x434>
            mbedtls_snprintf( buf, buflen, "RSA - The private key operation failed" );
 8004d8c:	4aaa      	ldr	r2, [pc, #680]	; (8005038 <mbedtls_strerror+0x6d4>)
 8004d8e:	4629      	mov	r1, r5
 8004d90:	4620      	mov	r0, r4
 8004d92:	f009 fd19 	bl	800e7c8 <sniprintf>
 8004d96:	e600      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )
 8004d98:	f5b6 4f87 	cmp.w	r6, #17280	; 0x4380
 8004d9c:	d105      	bne.n	8004daa <mbedtls_strerror+0x446>
            mbedtls_snprintf( buf, buflen, "RSA - The PKCS#1 verification failed" );
 8004d9e:	4aa7      	ldr	r2, [pc, #668]	; (800503c <mbedtls_strerror+0x6d8>)
 8004da0:	4629      	mov	r1, r5
 8004da2:	4620      	mov	r0, r4
 8004da4:	f009 fd10 	bl	800e7c8 <sniprintf>
 8004da8:	e5f7      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )
 8004daa:	f5b6 4f88 	cmp.w	r6, #17408	; 0x4400
 8004dae:	d105      	bne.n	8004dbc <mbedtls_strerror+0x458>
            mbedtls_snprintf( buf, buflen, "RSA - The output buffer for decryption is not large enough" );
 8004db0:	4aa3      	ldr	r2, [pc, #652]	; (8005040 <mbedtls_strerror+0x6dc>)
 8004db2:	4629      	mov	r1, r5
 8004db4:	4620      	mov	r0, r4
 8004db6:	f009 fd07 	bl	800e7c8 <sniprintf>
 8004dba:	e5ee      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )
 8004dbc:	f5b6 4f89 	cmp.w	r6, #17536	; 0x4480
 8004dc0:	d105      	bne.n	8004dce <mbedtls_strerror+0x46a>
            mbedtls_snprintf( buf, buflen, "RSA - The random generator failed to generate non-zeros" );
 8004dc2:	4aa0      	ldr	r2, [pc, #640]	; (8005044 <mbedtls_strerror+0x6e0>)
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f009 fcfe 	bl	800e7c8 <sniprintf>
 8004dcc:	e5e5      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )
 8004dce:	f5b6 4f8a 	cmp.w	r6, #17664	; 0x4500
 8004dd2:	d105      	bne.n	8004de0 <mbedtls_strerror+0x47c>
            mbedtls_snprintf( buf, buflen, "RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality" );
 8004dd4:	4a9c      	ldr	r2, [pc, #624]	; (8005048 <mbedtls_strerror+0x6e4>)
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f009 fcf5 	bl	800e7c8 <sniprintf>
 8004dde:	e5dc      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )
 8004de0:	f5b6 4f8b 	cmp.w	r6, #17792	; 0x4580
 8004de4:	d105      	bne.n	8004df2 <mbedtls_strerror+0x48e>
            mbedtls_snprintf( buf, buflen, "RSA - RSA hardware accelerator failed" );
 8004de6:	4a99      	ldr	r2, [pc, #612]	; (800504c <mbedtls_strerror+0x6e8>)
 8004de8:	4629      	mov	r1, r5
 8004dea:	4620      	mov	r0, r4
 8004dec:	f009 fcec 	bl	800e7c8 <sniprintf>
 8004df0:	e5d3      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )
 8004df2:	f5b6 4fe1 	cmp.w	r6, #28800	; 0x7080
 8004df6:	d105      	bne.n	8004e04 <mbedtls_strerror+0x4a0>
            mbedtls_snprintf( buf, buflen, "SSL - The requested feature is not available" );
 8004df8:	4a95      	ldr	r2, [pc, #596]	; (8005050 <mbedtls_strerror+0x6ec>)
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f009 fce3 	bl	800e7c8 <sniprintf>
 8004e02:	e5ca      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )
 8004e04:	f5b6 4fe2 	cmp.w	r6, #28928	; 0x7100
 8004e08:	d105      	bne.n	8004e16 <mbedtls_strerror+0x4b2>
            mbedtls_snprintf( buf, buflen, "SSL - Bad input parameters to function" );
 8004e0a:	4a92      	ldr	r2, [pc, #584]	; (8005054 <mbedtls_strerror+0x6f0>)
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f009 fcda 	bl	800e7c8 <sniprintf>
 8004e14:	e5c1      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )
 8004e16:	f5b6 4fe3 	cmp.w	r6, #29056	; 0x7180
 8004e1a:	d105      	bne.n	8004e28 <mbedtls_strerror+0x4c4>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of the message MAC failed" );
 8004e1c:	4a8e      	ldr	r2, [pc, #568]	; (8005058 <mbedtls_strerror+0x6f4>)
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f009 fcd1 	bl	800e7c8 <sniprintf>
 8004e26:	e5b8      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )
 8004e28:	f5b6 4fe4 	cmp.w	r6, #29184	; 0x7200
 8004e2c:	d105      	bne.n	8004e3a <mbedtls_strerror+0x4d6>
            mbedtls_snprintf( buf, buflen, "SSL - An invalid SSL record was received" );
 8004e2e:	4a8b      	ldr	r2, [pc, #556]	; (800505c <mbedtls_strerror+0x6f8>)
 8004e30:	4629      	mov	r1, r5
 8004e32:	4620      	mov	r0, r4
 8004e34:	f009 fcc8 	bl	800e7c8 <sniprintf>
 8004e38:	e5af      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )
 8004e3a:	f5b6 4fe5 	cmp.w	r6, #29312	; 0x7280
 8004e3e:	d105      	bne.n	8004e4c <mbedtls_strerror+0x4e8>
            mbedtls_snprintf( buf, buflen, "SSL - The connection indicated an EOF" );
 8004e40:	4a87      	ldr	r2, [pc, #540]	; (8005060 <mbedtls_strerror+0x6fc>)
 8004e42:	4629      	mov	r1, r5
 8004e44:	4620      	mov	r0, r4
 8004e46:	f009 fcbf 	bl	800e7c8 <sniprintf>
 8004e4a:	e5a6      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )
 8004e4c:	f5b6 4fe6 	cmp.w	r6, #29440	; 0x7300
 8004e50:	d105      	bne.n	8004e5e <mbedtls_strerror+0x4fa>
            mbedtls_snprintf( buf, buflen, "SSL - An unknown cipher was received" );
 8004e52:	4a84      	ldr	r2, [pc, #528]	; (8005064 <mbedtls_strerror+0x700>)
 8004e54:	4629      	mov	r1, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	f009 fcb6 	bl	800e7c8 <sniprintf>
 8004e5c:	e59d      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )
 8004e5e:	f5b6 4fe7 	cmp.w	r6, #29568	; 0x7380
 8004e62:	d105      	bne.n	8004e70 <mbedtls_strerror+0x50c>
            mbedtls_snprintf( buf, buflen, "SSL - The server has no ciphersuites in common with the client" );
 8004e64:	4a80      	ldr	r2, [pc, #512]	; (8005068 <mbedtls_strerror+0x704>)
 8004e66:	4629      	mov	r1, r5
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f009 fcad 	bl	800e7c8 <sniprintf>
 8004e6e:	e594      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )
 8004e70:	f5b6 4fe8 	cmp.w	r6, #29696	; 0x7400
 8004e74:	d105      	bne.n	8004e82 <mbedtls_strerror+0x51e>
            mbedtls_snprintf( buf, buflen, "SSL - No RNG was provided to the SSL module" );
 8004e76:	4a7d      	ldr	r2, [pc, #500]	; (800506c <mbedtls_strerror+0x708>)
 8004e78:	4629      	mov	r1, r5
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f009 fca4 	bl	800e7c8 <sniprintf>
 8004e80:	e58b      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )
 8004e82:	f5b6 4fe9 	cmp.w	r6, #29824	; 0x7480
 8004e86:	d105      	bne.n	8004e94 <mbedtls_strerror+0x530>
            mbedtls_snprintf( buf, buflen, "SSL - No client certification received from the client, but required by the authentication mode" );
 8004e88:	4a79      	ldr	r2, [pc, #484]	; (8005070 <mbedtls_strerror+0x70c>)
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f009 fc9b 	bl	800e7c8 <sniprintf>
 8004e92:	e582      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )
 8004e94:	f5b6 4fea 	cmp.w	r6, #29952	; 0x7500
 8004e98:	d105      	bne.n	8004ea6 <mbedtls_strerror+0x542>
            mbedtls_snprintf( buf, buflen, "SSL - Our own certificate(s) is/are too large to send in an SSL message" );
 8004e9a:	4a76      	ldr	r2, [pc, #472]	; (8005074 <mbedtls_strerror+0x710>)
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f009 fc92 	bl	800e7c8 <sniprintf>
 8004ea4:	e579      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )
 8004ea6:	f5b6 4feb 	cmp.w	r6, #30080	; 0x7580
 8004eaa:	d105      	bne.n	8004eb8 <mbedtls_strerror+0x554>
            mbedtls_snprintf( buf, buflen, "SSL - The own certificate is not set, but needed by the server" );
 8004eac:	4a72      	ldr	r2, [pc, #456]	; (8005078 <mbedtls_strerror+0x714>)
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f009 fc89 	bl	800e7c8 <sniprintf>
 8004eb6:	e570      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )
 8004eb8:	f5b6 4fec 	cmp.w	r6, #30208	; 0x7600
 8004ebc:	d105      	bne.n	8004eca <mbedtls_strerror+0x566>
            mbedtls_snprintf( buf, buflen, "SSL - The own private key or pre-shared key is not set, but needed" );
 8004ebe:	4a6f      	ldr	r2, [pc, #444]	; (800507c <mbedtls_strerror+0x718>)
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f009 fc80 	bl	800e7c8 <sniprintf>
 8004ec8:	e567      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )
 8004eca:	f5b6 4fed 	cmp.w	r6, #30336	; 0x7680
 8004ece:	d105      	bne.n	8004edc <mbedtls_strerror+0x578>
            mbedtls_snprintf( buf, buflen, "SSL - No CA Chain is set, but required to operate" );
 8004ed0:	4a6b      	ldr	r2, [pc, #428]	; (8005080 <mbedtls_strerror+0x71c>)
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f009 fc77 	bl	800e7c8 <sniprintf>
 8004eda:	e55e      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )
 8004edc:	f5b6 4fee 	cmp.w	r6, #30464	; 0x7700
 8004ee0:	d105      	bne.n	8004eee <mbedtls_strerror+0x58a>
            mbedtls_snprintf( buf, buflen, "SSL - An unexpected message was received from our peer" );
 8004ee2:	4a68      	ldr	r2, [pc, #416]	; (8005084 <mbedtls_strerror+0x720>)
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f009 fc6e 	bl	800e7c8 <sniprintf>
 8004eec:	e555      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )
 8004eee:	f5b6 4fef 	cmp.w	r6, #30592	; 0x7780
 8004ef2:	d106      	bne.n	8004f02 <mbedtls_strerror+0x59e>
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4a63      	ldr	r2, [pc, #396]	; (8005088 <mbedtls_strerror+0x724>)
}
 8004efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 8004efe:	f009 bc63 	b.w	800e7c8 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )
 8004f02:	f5b6 4ff0 	cmp.w	r6, #30720	; 0x7800
 8004f06:	d105      	bne.n	8004f14 <mbedtls_strerror+0x5b0>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of our peer failed" );
 8004f08:	4a60      	ldr	r2, [pc, #384]	; (800508c <mbedtls_strerror+0x728>)
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f009 fc5b 	bl	800e7c8 <sniprintf>
 8004f12:	e542      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )
 8004f14:	f5b6 4ff1 	cmp.w	r6, #30848	; 0x7880
 8004f18:	d105      	bne.n	8004f26 <mbedtls_strerror+0x5c2>
            mbedtls_snprintf( buf, buflen, "SSL - The peer notified us that the connection is going to be closed" );
 8004f1a:	4a5d      	ldr	r2, [pc, #372]	; (8005090 <mbedtls_strerror+0x72c>)
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f009 fc52 	bl	800e7c8 <sniprintf>
 8004f24:	e539      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )
 8004f26:	f5b6 4ff2 	cmp.w	r6, #30976	; 0x7900
 8004f2a:	d105      	bne.n	8004f38 <mbedtls_strerror+0x5d4>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientHello handshake message failed" );
 8004f2c:	4a59      	ldr	r2, [pc, #356]	; (8005094 <mbedtls_strerror+0x730>)
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4620      	mov	r0, r4
 8004f32:	f009 fc49 	bl	800e7c8 <sniprintf>
 8004f36:	e530      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )
 8004f38:	f5b6 4ff3 	cmp.w	r6, #31104	; 0x7980
 8004f3c:	d105      	bne.n	8004f4a <mbedtls_strerror+0x5e6>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHello handshake message failed" );
 8004f3e:	4a56      	ldr	r2, [pc, #344]	; (8005098 <mbedtls_strerror+0x734>)
 8004f40:	4629      	mov	r1, r5
 8004f42:	4620      	mov	r0, r4
 8004f44:	f009 fc40 	bl	800e7c8 <sniprintf>
 8004f48:	e527      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )
 8004f4a:	f5b6 4ff4 	cmp.w	r6, #31232	; 0x7a00
 8004f4e:	d105      	bne.n	8004f5c <mbedtls_strerror+0x5f8>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Certificate handshake message failed" );
 8004f50:	4a52      	ldr	r2, [pc, #328]	; (800509c <mbedtls_strerror+0x738>)
 8004f52:	4629      	mov	r1, r5
 8004f54:	4620      	mov	r0, r4
 8004f56:	f009 fc37 	bl	800e7c8 <sniprintf>
 8004f5a:	e51e      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )
 8004f5c:	f5b6 4ff5 	cmp.w	r6, #31360	; 0x7a80
 8004f60:	d105      	bne.n	8004f6e <mbedtls_strerror+0x60a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateRequest handshake message failed" );
 8004f62:	4a4f      	ldr	r2, [pc, #316]	; (80050a0 <mbedtls_strerror+0x73c>)
 8004f64:	4629      	mov	r1, r5
 8004f66:	4620      	mov	r0, r4
 8004f68:	f009 fc2e 	bl	800e7c8 <sniprintf>
 8004f6c:	e515      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )
 8004f6e:	f5b6 4ff6 	cmp.w	r6, #31488	; 0x7b00
 8004f72:	d105      	bne.n	8004f80 <mbedtls_strerror+0x61c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerKeyExchange handshake message failed" );
 8004f74:	4a4b      	ldr	r2, [pc, #300]	; (80050a4 <mbedtls_strerror+0x740>)
 8004f76:	4629      	mov	r1, r5
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f009 fc25 	bl	800e7c8 <sniprintf>
 8004f7e:	e50c      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )
 8004f80:	f5b6 4ff7 	cmp.w	r6, #31616	; 0x7b80
 8004f84:	d105      	bne.n	8004f92 <mbedtls_strerror+0x62e>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHelloDone handshake message failed" );
 8004f86:	4a48      	ldr	r2, [pc, #288]	; (80050a8 <mbedtls_strerror+0x744>)
 8004f88:	4629      	mov	r1, r5
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f009 fc1c 	bl	800e7c8 <sniprintf>
 8004f90:	e503      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )
 8004f92:	f5b6 4ff8 	cmp.w	r6, #31744	; 0x7c00
 8004f96:	d105      	bne.n	8004fa4 <mbedtls_strerror+0x640>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed" );
 8004f98:	4a44      	ldr	r2, [pc, #272]	; (80050ac <mbedtls_strerror+0x748>)
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f009 fc13 	bl	800e7c8 <sniprintf>
 8004fa2:	e4fa      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )
 8004fa4:	f5b6 4ff9 	cmp.w	r6, #31872	; 0x7c80
 8004fa8:	d105      	bne.n	8004fb6 <mbedtls_strerror+0x652>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public" );
 8004faa:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <mbedtls_strerror+0x74c>)
 8004fac:	4629      	mov	r1, r5
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f009 fc0a 	bl	800e7c8 <sniprintf>
 8004fb4:	e4f1      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )
 8004fb6:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
 8004fba:	d105      	bne.n	8004fc8 <mbedtls_strerror+0x664>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret" );
 8004fbc:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <mbedtls_strerror+0x750>)
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f009 fc01 	bl	800e7c8 <sniprintf>
 8004fc6:	e4e8      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )
 8004fc8:	f5b6 4ffb 	cmp.w	r6, #32128	; 0x7d80
 8004fcc:	d105      	bne.n	8004fda <mbedtls_strerror+0x676>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateVerify handshake message failed" );
 8004fce:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <mbedtls_strerror+0x754>)
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f009 fbf8 	bl	800e7c8 <sniprintf>
 8004fd8:	e4df      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )
 8004fda:	f5b6 4ffc 	cmp.w	r6, #32256	; 0x7e00
 8004fde:	d105      	bne.n	8004fec <mbedtls_strerror+0x688>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ChangeCipherSpec handshake message failed" );
 8004fe0:	4a36      	ldr	r2, [pc, #216]	; (80050bc <mbedtls_strerror+0x758>)
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f009 fbef 	bl	800e7c8 <sniprintf>
 8004fea:	e4d6      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )
 8004fec:	f5b6 4ffd 	cmp.w	r6, #32384	; 0x7e80
 8004ff0:	d105      	bne.n	8004ffe <mbedtls_strerror+0x69a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Finished handshake message failed" );
 8004ff2:	4a33      	ldr	r2, [pc, #204]	; (80050c0 <mbedtls_strerror+0x75c>)
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f009 fbe6 	bl	800e7c8 <sniprintf>
 8004ffc:	e4cd      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )
 8004ffe:	f5b6 4ffe 	cmp.w	r6, #32512	; 0x7f00
 8005002:	d105      	bne.n	8005010 <mbedtls_strerror+0x6ac>
            mbedtls_snprintf( buf, buflen, "SSL - Memory allocation failed" );
 8005004:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <mbedtls_strerror+0x760>)
 8005006:	4629      	mov	r1, r5
 8005008:	4620      	mov	r0, r4
 800500a:	f009 fbdd 	bl	800e7c8 <sniprintf>
 800500e:	e4c4      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )
 8005010:	f5b6 4fff 	cmp.w	r6, #32640	; 0x7f80
 8005014:	d15a      	bne.n	80050cc <mbedtls_strerror+0x768>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function returned with error" );
 8005016:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <mbedtls_strerror+0x764>)
 8005018:	4629      	mov	r1, r5
 800501a:	4620      	mov	r0, r4
 800501c:	f009 fbd4 	bl	800e7c8 <sniprintf>
 8005020:	e4bb      	b.n	800499a <mbedtls_strerror+0x36>
 8005022:	bf00      	nop
 8005024:	080107f9 	.word	0x080107f9
 8005028:	08010820 	.word	0x08010820
 800502c:	0801085a 	.word	0x0801085a
 8005030:	0801088c 	.word	0x0801088c
 8005034:	080108c7 	.word	0x080108c7
 8005038:	080108ed 	.word	0x080108ed
 800503c:	08010914 	.word	0x08010914
 8005040:	08010939 	.word	0x08010939
 8005044:	08010974 	.word	0x08010974
 8005048:	080109ac 	.word	0x080109ac
 800504c:	08010a32 	.word	0x08010a32
 8005050:	08010a58 	.word	0x08010a58
 8005054:	08010a85 	.word	0x08010a85
 8005058:	08010aac 	.word	0x08010aac
 800505c:	08010ad9 	.word	0x08010ad9
 8005060:	08010b02 	.word	0x08010b02
 8005064:	08010b28 	.word	0x08010b28
 8005068:	08010b4d 	.word	0x08010b4d
 800506c:	08010b8c 	.word	0x08010b8c
 8005070:	08010bb8 	.word	0x08010bb8
 8005074:	08010c18 	.word	0x08010c18
 8005078:	08010c60 	.word	0x08010c60
 800507c:	08010c9f 	.word	0x08010c9f
 8005080:	08010ce2 	.word	0x08010ce2
 8005084:	08010d14 	.word	0x08010d14
 8005088:	08010d4b 	.word	0x08010d4b
 800508c:	08010d82 	.word	0x08010d82
 8005090:	08010da8 	.word	0x08010da8
 8005094:	08010ded 	.word	0x08010ded
 8005098:	08010e2a 	.word	0x08010e2a
 800509c:	08010e67 	.word	0x08010e67
 80050a0:	08010ea4 	.word	0x08010ea4
 80050a4:	08010ee8 	.word	0x08010ee8
 80050a8:	08010f2b 	.word	0x08010f2b
 80050ac:	08010f6c 	.word	0x08010f6c
 80050b0:	08010faf 	.word	0x08010faf
 80050b4:	0801100c 	.word	0x0801100c
 80050b8:	0801106e 	.word	0x0801106e
 80050bc:	080110b1 	.word	0x080110b1
 80050c0:	080110f3 	.word	0x080110f3
 80050c4:	0801112d 	.word	0x0801112d
 80050c8:	0801114c 	.word	0x0801114c
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )
 80050cc:	f5b6 4fdf 	cmp.w	r6, #28544	; 0x6f80
 80050d0:	d105      	bne.n	80050de <mbedtls_strerror+0x77a>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function skipped / left alone data" );
 80050d2:	4acb      	ldr	r2, [pc, #812]	; (8005400 <mbedtls_strerror+0xa9c>)
 80050d4:	4629      	mov	r1, r5
 80050d6:	4620      	mov	r0, r4
 80050d8:	f009 fb76 	bl	800e7c8 <sniprintf>
 80050dc:	e45d      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )
 80050de:	f5b6 4fde 	cmp.w	r6, #28416	; 0x6f00
 80050e2:	d105      	bne.n	80050f0 <mbedtls_strerror+0x78c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the compression / decompression failed" );
 80050e4:	4ac7      	ldr	r2, [pc, #796]	; (8005404 <mbedtls_strerror+0xaa0>)
 80050e6:	4629      	mov	r1, r5
 80050e8:	4620      	mov	r0, r4
 80050ea:	f009 fb6d 	bl	800e7c8 <sniprintf>
 80050ee:	e454      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )
 80050f0:	f5b6 4fdd 	cmp.w	r6, #28288	; 0x6e80
 80050f4:	d105      	bne.n	8005102 <mbedtls_strerror+0x79e>
            mbedtls_snprintf( buf, buflen, "SSL - Handshake protocol not within min/max boundaries" );
 80050f6:	4ac4      	ldr	r2, [pc, #784]	; (8005408 <mbedtls_strerror+0xaa4>)
 80050f8:	4629      	mov	r1, r5
 80050fa:	4620      	mov	r0, r4
 80050fc:	f009 fb64 	bl	800e7c8 <sniprintf>
 8005100:	e44b      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )
 8005102:	f5b6 4fdc 	cmp.w	r6, #28160	; 0x6e00
 8005106:	d105      	bne.n	8005114 <mbedtls_strerror+0x7b0>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the NewSessionTicket handshake message failed" );
 8005108:	4ac0      	ldr	r2, [pc, #768]	; (800540c <mbedtls_strerror+0xaa8>)
 800510a:	4629      	mov	r1, r5
 800510c:	4620      	mov	r0, r4
 800510e:	f009 fb5b 	bl	800e7c8 <sniprintf>
 8005112:	e442      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )
 8005114:	f5b6 4fdb 	cmp.w	r6, #28032	; 0x6d80
 8005118:	d105      	bne.n	8005126 <mbedtls_strerror+0x7c2>
            mbedtls_snprintf( buf, buflen, "SSL - Session ticket has expired" );
 800511a:	4abd      	ldr	r2, [pc, #756]	; (8005410 <mbedtls_strerror+0xaac>)
 800511c:	4629      	mov	r1, r5
 800511e:	4620      	mov	r0, r4
 8005120:	f009 fb52 	bl	800e7c8 <sniprintf>
 8005124:	e439      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )
 8005126:	f5b6 4fda 	cmp.w	r6, #27904	; 0x6d00
 800512a:	d105      	bne.n	8005138 <mbedtls_strerror+0x7d4>
            mbedtls_snprintf( buf, buflen, "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)" );
 800512c:	4ab9      	ldr	r2, [pc, #740]	; (8005414 <mbedtls_strerror+0xab0>)
 800512e:	4629      	mov	r1, r5
 8005130:	4620      	mov	r0, r4
 8005132:	f009 fb49 	bl	800e7c8 <sniprintf>
 8005136:	e430      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )
 8005138:	f5b6 4fd9 	cmp.w	r6, #27776	; 0x6c80
 800513c:	d105      	bne.n	800514a <mbedtls_strerror+0x7e6>
            mbedtls_snprintf( buf, buflen, "SSL - Unknown identity received (eg, PSK identity)" );
 800513e:	4ab6      	ldr	r2, [pc, #728]	; (8005418 <mbedtls_strerror+0xab4>)
 8005140:	4629      	mov	r1, r5
 8005142:	4620      	mov	r0, r4
 8005144:	f009 fb40 	bl	800e7c8 <sniprintf>
 8005148:	e427      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )
 800514a:	f5b6 4fd8 	cmp.w	r6, #27648	; 0x6c00
 800514e:	d105      	bne.n	800515c <mbedtls_strerror+0x7f8>
            mbedtls_snprintf( buf, buflen, "SSL - Internal error (eg, unexpected failure in lower-level module)" );
 8005150:	4ab2      	ldr	r2, [pc, #712]	; (800541c <mbedtls_strerror+0xab8>)
 8005152:	4629      	mov	r1, r5
 8005154:	4620      	mov	r0, r4
 8005156:	f009 fb37 	bl	800e7c8 <sniprintf>
 800515a:	e41e      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )
 800515c:	f5b6 4fd7 	cmp.w	r6, #27520	; 0x6b80
 8005160:	d105      	bne.n	800516e <mbedtls_strerror+0x80a>
            mbedtls_snprintf( buf, buflen, "SSL - A counter would wrap (eg, too many messages exchanged)" );
 8005162:	4aaf      	ldr	r2, [pc, #700]	; (8005420 <mbedtls_strerror+0xabc>)
 8005164:	4629      	mov	r1, r5
 8005166:	4620      	mov	r0, r4
 8005168:	f009 fb2e 	bl	800e7c8 <sniprintf>
 800516c:	e415      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )
 800516e:	f5b6 4fd6 	cmp.w	r6, #27392	; 0x6b00
 8005172:	d105      	bne.n	8005180 <mbedtls_strerror+0x81c>
            mbedtls_snprintf( buf, buflen, "SSL - Unexpected message at ServerHello in renegotiation" );
 8005174:	4aab      	ldr	r2, [pc, #684]	; (8005424 <mbedtls_strerror+0xac0>)
 8005176:	4629      	mov	r1, r5
 8005178:	4620      	mov	r0, r4
 800517a:	f009 fb25 	bl	800e7c8 <sniprintf>
 800517e:	e40c      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )
 8005180:	f5b6 4fd5 	cmp.w	r6, #27264	; 0x6a80
 8005184:	d105      	bne.n	8005192 <mbedtls_strerror+0x82e>
            mbedtls_snprintf( buf, buflen, "SSL - DTLS client must retry for hello verification" );
 8005186:	4aa8      	ldr	r2, [pc, #672]	; (8005428 <mbedtls_strerror+0xac4>)
 8005188:	4629      	mov	r1, r5
 800518a:	4620      	mov	r0, r4
 800518c:	f009 fb1c 	bl	800e7c8 <sniprintf>
 8005190:	e403      	b.n	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )
 8005192:	f5b6 4fd4 	cmp.w	r6, #27136	; 0x6a00
 8005196:	d106      	bne.n	80051a6 <mbedtls_strerror+0x842>
            mbedtls_snprintf( buf, buflen, "SSL - A buffer is too small to receive or write a message" );
 8005198:	4aa4      	ldr	r2, [pc, #656]	; (800542c <mbedtls_strerror+0xac8>)
 800519a:	4629      	mov	r1, r5
 800519c:	4620      	mov	r0, r4
 800519e:	f009 fb13 	bl	800e7c8 <sniprintf>
 80051a2:	f7ff bbfa 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )
 80051a6:	f5b6 4fd3 	cmp.w	r6, #27008	; 0x6980
 80051aa:	d106      	bne.n	80051ba <mbedtls_strerror+0x856>
            mbedtls_snprintf( buf, buflen, "SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)" );
 80051ac:	4aa0      	ldr	r2, [pc, #640]	; (8005430 <mbedtls_strerror+0xacc>)
 80051ae:	4629      	mov	r1, r5
 80051b0:	4620      	mov	r0, r4
 80051b2:	f009 fb09 	bl	800e7c8 <sniprintf>
 80051b6:	f7ff bbf0 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )
 80051ba:	f5b6 4fd2 	cmp.w	r6, #26880	; 0x6900
 80051be:	d106      	bne.n	80051ce <mbedtls_strerror+0x86a>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a read call" );
 80051c0:	4a9c      	ldr	r2, [pc, #624]	; (8005434 <mbedtls_strerror+0xad0>)
 80051c2:	4629      	mov	r1, r5
 80051c4:	4620      	mov	r0, r4
 80051c6:	f009 faff 	bl	800e7c8 <sniprintf>
 80051ca:	f7ff bbe6 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )
 80051ce:	f5b6 4fd1 	cmp.w	r6, #26752	; 0x6880
 80051d2:	d106      	bne.n	80051e2 <mbedtls_strerror+0x87e>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a write call" );
 80051d4:	4a98      	ldr	r2, [pc, #608]	; (8005438 <mbedtls_strerror+0xad4>)
 80051d6:	4629      	mov	r1, r5
 80051d8:	4620      	mov	r0, r4
 80051da:	f009 faf5 	bl	800e7c8 <sniprintf>
 80051de:	f7ff bbdc 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )
 80051e2:	f5b6 4fd0 	cmp.w	r6, #26624	; 0x6800
 80051e6:	d106      	bne.n	80051f6 <mbedtls_strerror+0x892>
            mbedtls_snprintf( buf, buflen, "SSL - The operation timed out" );
 80051e8:	4a94      	ldr	r2, [pc, #592]	; (800543c <mbedtls_strerror+0xad8>)
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	f009 faeb 	bl	800e7c8 <sniprintf>
 80051f2:	f7ff bbd2 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )
 80051f6:	f5b6 4fcf 	cmp.w	r6, #26496	; 0x6780
 80051fa:	d106      	bne.n	800520a <mbedtls_strerror+0x8a6>
            mbedtls_snprintf( buf, buflen, "SSL - The client initiated a reconnect from the same port" );
 80051fc:	4a90      	ldr	r2, [pc, #576]	; (8005440 <mbedtls_strerror+0xadc>)
 80051fe:	4629      	mov	r1, r5
 8005200:	4620      	mov	r0, r4
 8005202:	f009 fae1 	bl	800e7c8 <sniprintf>
 8005206:	f7ff bbc8 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )
 800520a:	f5b6 4fce 	cmp.w	r6, #26368	; 0x6700
 800520e:	d106      	bne.n	800521e <mbedtls_strerror+0x8ba>
            mbedtls_snprintf( buf, buflen, "SSL - Record header looks valid but is not expected" );
 8005210:	4a8c      	ldr	r2, [pc, #560]	; (8005444 <mbedtls_strerror+0xae0>)
 8005212:	4629      	mov	r1, r5
 8005214:	4620      	mov	r0, r4
 8005216:	f009 fad7 	bl	800e7c8 <sniprintf>
 800521a:	f7ff bbbe 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )
 800521e:	f5b6 4fcd 	cmp.w	r6, #26240	; 0x6680
 8005222:	d106      	bne.n	8005232 <mbedtls_strerror+0x8ce>
            mbedtls_snprintf( buf, buflen, "SSL - The alert message received indicates a non-fatal error" );
 8005224:	4a88      	ldr	r2, [pc, #544]	; (8005448 <mbedtls_strerror+0xae4>)
 8005226:	4629      	mov	r1, r5
 8005228:	4620      	mov	r0, r4
 800522a:	f009 facd 	bl	800e7c8 <sniprintf>
 800522e:	f7ff bbb4 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )
 8005232:	f5b6 4fcc 	cmp.w	r6, #26112	; 0x6600
 8005236:	d106      	bne.n	8005246 <mbedtls_strerror+0x8e2>
            mbedtls_snprintf( buf, buflen, "SSL - Couldn't set the hash for verifying CertificateVerify" );
 8005238:	4a84      	ldr	r2, [pc, #528]	; (800544c <mbedtls_strerror+0xae8>)
 800523a:	4629      	mov	r1, r5
 800523c:	4620      	mov	r0, r4
 800523e:	f009 fac3 	bl	800e7c8 <sniprintf>
 8005242:	f7ff bbaa 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 8005246:	f5b6 5f02 	cmp.w	r6, #8320	; 0x2080
 800524a:	d106      	bne.n	800525a <mbedtls_strerror+0x8f6>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 800524c:	4a80      	ldr	r2, [pc, #512]	; (8005450 <mbedtls_strerror+0xaec>)
 800524e:	4629      	mov	r1, r5
 8005250:	4620      	mov	r0, r4
 8005252:	f009 fab9 	bl	800e7c8 <sniprintf>
 8005256:	f7ff bba0 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 800525a:	f5b6 5f04 	cmp.w	r6, #8448	; 0x2100
 800525e:	d106      	bne.n	800526e <mbedtls_strerror+0x90a>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 8005260:	4a7c      	ldr	r2, [pc, #496]	; (8005454 <mbedtls_strerror+0xaf0>)
 8005262:	4629      	mov	r1, r5
 8005264:	4620      	mov	r0, r4
 8005266:	f009 faaf 	bl	800e7c8 <sniprintf>
 800526a:	f7ff bb96 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 800526e:	f5b6 5f06 	cmp.w	r6, #8576	; 0x2180
 8005272:	d106      	bne.n	8005282 <mbedtls_strerror+0x91e>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 8005274:	4a78      	ldr	r2, [pc, #480]	; (8005458 <mbedtls_strerror+0xaf4>)
 8005276:	4629      	mov	r1, r5
 8005278:	4620      	mov	r0, r4
 800527a:	f009 faa5 	bl	800e7c8 <sniprintf>
 800527e:	f7ff bb8c 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 8005282:	f5b6 5f08 	cmp.w	r6, #8704	; 0x2200
 8005286:	d106      	bne.n	8005296 <mbedtls_strerror+0x932>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 8005288:	4a74      	ldr	r2, [pc, #464]	; (800545c <mbedtls_strerror+0xaf8>)
 800528a:	4629      	mov	r1, r5
 800528c:	4620      	mov	r0, r4
 800528e:	f009 fa9b 	bl	800e7c8 <sniprintf>
 8005292:	f7ff bb82 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 8005296:	f5b6 5f0a 	cmp.w	r6, #8832	; 0x2280
 800529a:	d106      	bne.n	80052aa <mbedtls_strerror+0x946>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 800529c:	4a70      	ldr	r2, [pc, #448]	; (8005460 <mbedtls_strerror+0xafc>)
 800529e:	4629      	mov	r1, r5
 80052a0:	4620      	mov	r0, r4
 80052a2:	f009 fa91 	bl	800e7c8 <sniprintf>
 80052a6:	f7ff bb78 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 80052aa:	f5b6 5f0c 	cmp.w	r6, #8960	; 0x2300
 80052ae:	d106      	bne.n	80052be <mbedtls_strerror+0x95a>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 80052b0:	4a6c      	ldr	r2, [pc, #432]	; (8005464 <mbedtls_strerror+0xb00>)
 80052b2:	4629      	mov	r1, r5
 80052b4:	4620      	mov	r0, r4
 80052b6:	f009 fa87 	bl	800e7c8 <sniprintf>
 80052ba:	f7ff bb6e 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 80052be:	f5b6 5f0e 	cmp.w	r6, #9088	; 0x2380
 80052c2:	d106      	bne.n	80052d2 <mbedtls_strerror+0x96e>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 80052c4:	4a68      	ldr	r2, [pc, #416]	; (8005468 <mbedtls_strerror+0xb04>)
 80052c6:	4629      	mov	r1, r5
 80052c8:	4620      	mov	r0, r4
 80052ca:	f009 fa7d 	bl	800e7c8 <sniprintf>
 80052ce:	f7ff bb64 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 80052d2:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
 80052d6:	d106      	bne.n	80052e6 <mbedtls_strerror+0x982>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 80052d8:	4a64      	ldr	r2, [pc, #400]	; (800546c <mbedtls_strerror+0xb08>)
 80052da:	4629      	mov	r1, r5
 80052dc:	4620      	mov	r0, r4
 80052de:	f009 fa73 	bl	800e7c8 <sniprintf>
 80052e2:	f7ff bb5a 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 80052e6:	f5b6 5f12 	cmp.w	r6, #9344	; 0x2480
 80052ea:	d106      	bne.n	80052fa <mbedtls_strerror+0x996>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 80052ec:	4a60      	ldr	r2, [pc, #384]	; (8005470 <mbedtls_strerror+0xb0c>)
 80052ee:	4629      	mov	r1, r5
 80052f0:	4620      	mov	r0, r4
 80052f2:	f009 fa69 	bl	800e7c8 <sniprintf>
 80052f6:	f7ff bb50 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 80052fa:	f5b6 5f14 	cmp.w	r6, #9472	; 0x2500
 80052fe:	d106      	bne.n	800530e <mbedtls_strerror+0x9aa>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 8005300:	4a5c      	ldr	r2, [pc, #368]	; (8005474 <mbedtls_strerror+0xb10>)
 8005302:	4629      	mov	r1, r5
 8005304:	4620      	mov	r0, r4
 8005306:	f009 fa5f 	bl	800e7c8 <sniprintf>
 800530a:	f7ff bb46 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 800530e:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 8005312:	d106      	bne.n	8005322 <mbedtls_strerror+0x9be>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 8005314:	4a58      	ldr	r2, [pc, #352]	; (8005478 <mbedtls_strerror+0xb14>)
 8005316:	4629      	mov	r1, r5
 8005318:	4620      	mov	r0, r4
 800531a:	f009 fa55 	bl	800e7c8 <sniprintf>
 800531e:	f7ff bb3c 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 8005322:	f5b6 5f18 	cmp.w	r6, #9728	; 0x2600
 8005326:	d106      	bne.n	8005336 <mbedtls_strerror+0x9d2>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 8005328:	4a54      	ldr	r2, [pc, #336]	; (800547c <mbedtls_strerror+0xb18>)
 800532a:	4629      	mov	r1, r5
 800532c:	4620      	mov	r0, r4
 800532e:	f009 fa4b 	bl	800e7c8 <sniprintf>
 8005332:	f7ff bb32 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 8005336:	f5b6 5f1a 	cmp.w	r6, #9856	; 0x2680
 800533a:	d106      	bne.n	800534a <mbedtls_strerror+0x9e6>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 800533c:	4a50      	ldr	r2, [pc, #320]	; (8005480 <mbedtls_strerror+0xb1c>)
 800533e:	4629      	mov	r1, r5
 8005340:	4620      	mov	r0, r4
 8005342:	f009 fa41 	bl	800e7c8 <sniprintf>
 8005346:	f7ff bb28 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 800534a:	f5b6 5f1c 	cmp.w	r6, #9984	; 0x2700
 800534e:	d106      	bne.n	800535e <mbedtls_strerror+0x9fa>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 8005350:	4a4c      	ldr	r2, [pc, #304]	; (8005484 <mbedtls_strerror+0xb20>)
 8005352:	4629      	mov	r1, r5
 8005354:	4620      	mov	r0, r4
 8005356:	f009 fa37 	bl	800e7c8 <sniprintf>
 800535a:	f7ff bb1e 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 800535e:	f5b6 5f1e 	cmp.w	r6, #10112	; 0x2780
 8005362:	d106      	bne.n	8005372 <mbedtls_strerror+0xa0e>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 8005364:	4a48      	ldr	r2, [pc, #288]	; (8005488 <mbedtls_strerror+0xb24>)
 8005366:	4629      	mov	r1, r5
 8005368:	4620      	mov	r0, r4
 800536a:	f009 fa2d 	bl	800e7c8 <sniprintf>
 800536e:	f7ff bb14 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 8005372:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8005376:	d106      	bne.n	8005386 <mbedtls_strerror+0xa22>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 8005378:	4a44      	ldr	r2, [pc, #272]	; (800548c <mbedtls_strerror+0xb28>)
 800537a:	4629      	mov	r1, r5
 800537c:	4620      	mov	r0, r4
 800537e:	f009 fa23 	bl	800e7c8 <sniprintf>
 8005382:	f7ff bb0a 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 8005386:	f5b6 5f22 	cmp.w	r6, #10368	; 0x2880
 800538a:	d106      	bne.n	800539a <mbedtls_strerror+0xa36>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 800538c:	4a40      	ldr	r2, [pc, #256]	; (8005490 <mbedtls_strerror+0xb2c>)
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	f009 fa19 	bl	800e7c8 <sniprintf>
 8005396:	f7ff bb00 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 800539a:	f5b6 5f24 	cmp.w	r6, #10496	; 0x2900
 800539e:	d106      	bne.n	80053ae <mbedtls_strerror+0xa4a>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 80053a0:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <mbedtls_strerror+0xb30>)
 80053a2:	4629      	mov	r1, r5
 80053a4:	4620      	mov	r0, r4
 80053a6:	f009 fa0f 	bl	800e7c8 <sniprintf>
 80053aa:	f7ff baf6 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 80053ae:	f5b6 5f26 	cmp.w	r6, #10624	; 0x2980
 80053b2:	d106      	bne.n	80053c2 <mbedtls_strerror+0xa5e>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 80053b4:	4a38      	ldr	r2, [pc, #224]	; (8005498 <mbedtls_strerror+0xb34>)
 80053b6:	4629      	mov	r1, r5
 80053b8:	4620      	mov	r0, r4
 80053ba:	f009 fa05 	bl	800e7c8 <sniprintf>
 80053be:	f7ff baec 	b.w	800499a <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 80053c2:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 80053c6:	f47f aae8 	bne.w	800499a <mbedtls_strerror+0x36>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 80053ca:	4a34      	ldr	r2, [pc, #208]	; (800549c <mbedtls_strerror+0xb38>)
 80053cc:	4629      	mov	r1, r5
 80053ce:	4620      	mov	r0, r4
 80053d0:	f009 f9fa 	bl	800e7c8 <sniprintf>
 80053d4:	f7ff bae1 	b.w	800499a <mbedtls_strerror+0x36>
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 80053d8:	2e22      	cmp	r6, #34	; 0x22
 80053da:	d102      	bne.n	80053e2 <mbedtls_strerror+0xa7e>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 80053dc:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <mbedtls_strerror+0xb3c>)
 80053de:	f7ff bb00 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 80053e2:	2e23      	cmp	r6, #35	; 0x23
 80053e4:	d102      	bne.n	80053ec <mbedtls_strerror+0xa88>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <mbedtls_strerror+0xb40>)
 80053e8:	f7ff bafb 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 80053ec:	2e25      	cmp	r6, #37	; 0x25
 80053ee:	d102      	bne.n	80053f6 <mbedtls_strerror+0xa92>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 80053f0:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <mbedtls_strerror+0xb44>)
 80053f2:	f7ff baf6 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 80053f6:	2e60      	cmp	r6, #96	; 0x60
 80053f8:	d15a      	bne.n	80054b0 <mbedtls_strerror+0xb4c>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <mbedtls_strerror+0xb48>)
 80053fc:	f7ff baf1 	b.w	80049e2 <mbedtls_strerror+0x7e>
 8005400:	08011185 	.word	0x08011185
 8005404:	080111c4 	.word	0x080111c4
 8005408:	080111ff 	.word	0x080111ff
 800540c:	08011236 	.word	0x08011236
 8005410:	08011278 	.word	0x08011278
 8005414:	08011299 	.word	0x08011299
 8005418:	080112ee 	.word	0x080112ee
 800541c:	08011321 	.word	0x08011321
 8005420:	08011365 	.word	0x08011365
 8005424:	080113a2 	.word	0x080113a2
 8005428:	080113db 	.word	0x080113db
 800542c:	0801140f 	.word	0x0801140f
 8005430:	08011449 	.word	0x08011449
 8005434:	080114ab 	.word	0x080114ab
 8005438:	080114d1 	.word	0x080114d1
 800543c:	080114f8 	.word	0x080114f8
 8005440:	08011516 	.word	0x08011516
 8005444:	08011550 	.word	0x08011550
 8005448:	08011584 	.word	0x08011584
 800544c:	080115c1 	.word	0x080115c1
 8005450:	080115fd 	.word	0x080115fd
 8005454:	08011641 	.word	0x08011641
 8005458:	08011661 	.word	0x08011661
 800545c:	080116a8 	.word	0x080116a8
 8005460:	080116da 	.word	0x080116da
 8005464:	08011704 	.word	0x08011704
 8005468:	08011731 	.word	0x08011731
 800546c:	08011759 	.word	0x08011759
 8005470:	08011781 	.word	0x08011781
 8005474:	080117ab 	.word	0x080117ab
 8005478:	080117d8 	.word	0x080117d8
 800547c:	0801180d 	.word	0x0801180d
 8005480:	0801183d 	.word	0x0801183d
 8005484:	0801188b 	.word	0x0801188b
 8005488:	080118da 	.word	0x080118da
 800548c:	08011905 	.word	0x08011905
 8005490:	0801191a 	.word	0x0801191a
 8005494:	0801193d 	.word	0x0801193d
 8005498:	0801195e 	.word	0x0801195e
 800549c:	08011985 	.word	0x08011985
 80054a0:	08011a0b 	.word	0x08011a0b
 80054a4:	08011a2b 	.word	0x08011a2b
 80054a8:	08011a71 	.word	0x08011a71
 80054ac:	08011a97 	.word	0x08011a97
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 80054b0:	2e62      	cmp	r6, #98	; 0x62
 80054b2:	d102      	bne.n	80054ba <mbedtls_strerror+0xb56>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 80054b4:	4a39      	ldr	r2, [pc, #228]	; (800559c <mbedtls_strerror+0xc38>)
 80054b6:	f7ff ba94 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 80054ba:	2e64      	cmp	r6, #100	; 0x64
 80054bc:	d102      	bne.n	80054c4 <mbedtls_strerror+0xb60>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 80054be:	4a38      	ldr	r2, [pc, #224]	; (80055a0 <mbedtls_strerror+0xc3c>)
 80054c0:	f7ff ba8f 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 80054c4:	2e66      	cmp	r6, #102	; 0x66
 80054c6:	d102      	bne.n	80054ce <mbedtls_strerror+0xb6a>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 80054c8:	4a36      	ldr	r2, [pc, #216]	; (80055a4 <mbedtls_strerror+0xc40>)
 80054ca:	f7ff ba8a 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 80054ce:	2e68      	cmp	r6, #104	; 0x68
 80054d0:	d102      	bne.n	80054d8 <mbedtls_strerror+0xb74>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 80054d2:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <mbedtls_strerror+0xc44>)
 80054d4:	f7ff ba85 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 80054d8:	2e6a      	cmp	r6, #106	; 0x6a
 80054da:	d102      	bne.n	80054e2 <mbedtls_strerror+0xb7e>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 80054dc:	4a33      	ldr	r2, [pc, #204]	; (80055ac <mbedtls_strerror+0xc48>)
 80054de:	f7ff ba80 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 80054e2:	2e6c      	cmp	r6, #108	; 0x6c
 80054e4:	d102      	bne.n	80054ec <mbedtls_strerror+0xb88>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 80054e6:	4a32      	ldr	r2, [pc, #200]	; (80055b0 <mbedtls_strerror+0xc4c>)
 80054e8:	f7ff ba7b 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 80054ec:	2e2a      	cmp	r6, #42	; 0x2a
 80054ee:	d102      	bne.n	80054f6 <mbedtls_strerror+0xb92>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 80054f0:	4a30      	ldr	r2, [pc, #192]	; (80055b4 <mbedtls_strerror+0xc50>)
 80054f2:	f7ff ba76 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 80054f6:	2e2c      	cmp	r6, #44	; 0x2c
 80054f8:	d102      	bne.n	8005500 <mbedtls_strerror+0xb9c>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 80054fa:	4a2f      	ldr	r2, [pc, #188]	; (80055b8 <mbedtls_strerror+0xc54>)
 80054fc:	f7ff ba71 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 8005500:	2e02      	cmp	r6, #2
 8005502:	d102      	bne.n	800550a <mbedtls_strerror+0xba6>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 8005504:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <mbedtls_strerror+0xc58>)
 8005506:	f7ff ba6c 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 800550a:	2e04      	cmp	r6, #4
 800550c:	d102      	bne.n	8005514 <mbedtls_strerror+0xbb0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 800550e:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <mbedtls_strerror+0xc5c>)
 8005510:	f7ff ba67 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 8005514:	2e06      	cmp	r6, #6
 8005516:	d102      	bne.n	800551e <mbedtls_strerror+0xbba>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <mbedtls_strerror+0xc60>)
 800551a:	f7ff ba62 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 800551e:	2e08      	cmp	r6, #8
 8005520:	d102      	bne.n	8005528 <mbedtls_strerror+0xbc4>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 8005522:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <mbedtls_strerror+0xc64>)
 8005524:	f7ff ba5d 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 8005528:	2e0a      	cmp	r6, #10
 800552a:	d102      	bne.n	8005532 <mbedtls_strerror+0xbce>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <mbedtls_strerror+0xc68>)
 800552e:	f7ff ba58 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 8005532:	2e0c      	cmp	r6, #12
 8005534:	d102      	bne.n	800553c <mbedtls_strerror+0xbd8>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 8005536:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <mbedtls_strerror+0xc6c>)
 8005538:	f7ff ba53 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 800553c:	2e0e      	cmp	r6, #14
 800553e:	d102      	bne.n	8005546 <mbedtls_strerror+0xbe2>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <mbedtls_strerror+0xc70>)
 8005542:	f7ff ba4e 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 8005546:	2e10      	cmp	r6, #16
 8005548:	d102      	bne.n	8005550 <mbedtls_strerror+0xbec>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 800554a:	4a23      	ldr	r2, [pc, #140]	; (80055d8 <mbedtls_strerror+0xc74>)
 800554c:	f7ff ba49 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 8005550:	2e34      	cmp	r6, #52	; 0x34
 8005552:	d102      	bne.n	800555a <mbedtls_strerror+0xbf6>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 8005554:	4a21      	ldr	r2, [pc, #132]	; (80055dc <mbedtls_strerror+0xc78>)
 8005556:	f7ff ba44 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 800555a:	2e36      	cmp	r6, #54	; 0x36
 800555c:	d102      	bne.n	8005564 <mbedtls_strerror+0xc00>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 800555e:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <mbedtls_strerror+0xc7c>)
 8005560:	f7ff ba3f 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 8005564:	2e38      	cmp	r6, #56	; 0x38
 8005566:	d102      	bne.n	800556e <mbedtls_strerror+0xc0a>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 8005568:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <mbedtls_strerror+0xc80>)
 800556a:	f7ff ba3a 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 800556e:	2e3a      	cmp	r6, #58	; 0x3a
 8005570:	d102      	bne.n	8005578 <mbedtls_strerror+0xc14>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <mbedtls_strerror+0xc84>)
 8005574:	f7ff ba35 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 8005578:	2e2e      	cmp	r6, #46	; 0x2e
 800557a:	d102      	bne.n	8005582 <mbedtls_strerror+0xc1e>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <mbedtls_strerror+0xc88>)
 800557e:	f7ff ba30 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 8005582:	2e0b      	cmp	r6, #11
 8005584:	d102      	bne.n	800558c <mbedtls_strerror+0xc28>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <mbedtls_strerror+0xc8c>)
 8005588:	f7ff ba2b 	b.w	80049e2 <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 800558c:	2e37      	cmp	r6, #55	; 0x37
 800558e:	f47f aa2c 	bne.w	80049ea <mbedtls_strerror+0x86>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <mbedtls_strerror+0xc90>)
 8005594:	f7ff ba25 	b.w	80049e2 <mbedtls_strerror+0x7e>
 8005598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800559c:	08011ace 	.word	0x08011ace
 80055a0:	08011af9 	.word	0x08011af9
 80055a4:	08011b3c 	.word	0x08011b3c
 80055a8:	08011b6e 	.word	0x08011b6e
 80055ac:	08011b91 	.word	0x08011b91
 80055b0:	08011bb1 	.word	0x08011bb1
 80055b4:	08011beb 	.word	0x08011beb
 80055b8:	08011c0c 	.word	0x08011c0c
 80055bc:	08011c30 	.word	0x08011c30
 80055c0:	08011c73 	.word	0x08011c73
 80055c4:	08011c9d 	.word	0x08011c9d
 80055c8:	08011cd8 	.word	0x08011cd8
 80055cc:	08011d05 	.word	0x08011d05
 80055d0:	08011d4b 	.word	0x08011d4b
 80055d4:	08011d92 	.word	0x08011d92
 80055d8:	08011dc2 	.word	0x08011dc2
 80055dc:	08011de4 	.word	0x08011de4
 80055e0:	08011e09 	.word	0x08011e09
 80055e4:	08011e42 	.word	0x08011e42
 80055e8:	08011e80 	.word	0x08011e80
 80055ec:	08011ea7 	.word	0x08011ea7
 80055f0:	08011ebe 	.word	0x08011ebe
 80055f4:	08011edf 	.word	0x08011edf

080055f8 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 80055f8:	2805      	cmp	r0, #5
 80055fa:	d004      	beq.n	8005606 <mbedtls_md_info_from_type+0xe>
 80055fc:	2806      	cmp	r0, #6
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 80055fe:	4803      	ldr	r0, [pc, #12]	; (800560c <mbedtls_md_info_from_type+0x14>)
 8005600:	bf18      	it	ne
 8005602:	2000      	movne	r0, #0
 8005604:	4770      	bx	lr
            return( &mbedtls_sha224_info );
 8005606:	4802      	ldr	r0, [pc, #8]	; (8005610 <mbedtls_md_info_from_type+0x18>)
    }
}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	08011f3c 	.word	0x08011f3c
 8005610:	08011f0c 	.word	0x08011f0c

08005614 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8005614:	2300      	movs	r3, #0
 8005616:	6003      	str	r3, [r0, #0]
 8005618:	6043      	str	r3, [r0, #4]
 800561a:	6083      	str	r3, [r0, #8]
 800561c:	4770      	bx	lr

0800561e <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800561e:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8005620:	4604      	mov	r4, r0
 8005622:	b1b0      	cbz	r0, 8005652 <mbedtls_md_free+0x34>
 8005624:	6803      	ldr	r3, [r0, #0]
 8005626:	b1a3      	cbz	r3, 8005652 <mbedtls_md_free+0x34>
        return;

    if( ctx->md_ctx != NULL )
 8005628:	6840      	ldr	r0, [r0, #4]
 800562a:	b108      	cbz	r0, 8005630 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8005630:	68a3      	ldr	r3, [r4, #8]
 8005632:	b14b      	cbz	r3, 8005648 <mbedtls_md_free+0x2a>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	68d2      	ldr	r2, [r2, #12]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005638:	2100      	movs	r1, #0
 800563a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <mbedtls_md_free+0x36>
        mbedtls_free( ctx->hmac_ctx );
 8005642:	68a0      	ldr	r0, [r4, #8]
 8005644:	f008 fed4 	bl	800e3f0 <free>
 8005648:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800564c:	2200      	movs	r2, #0
 800564e:	429c      	cmp	r4, r3
 8005650:	d103      	bne.n	800565a <mbedtls_md_free+0x3c>
 8005652:	bd10      	pop	{r4, pc}
 8005654:	7019      	strb	r1, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	e7f1      	b.n	800563e <mbedtls_md_free+0x20>
 800565a:	7022      	strb	r2, [r4, #0]
 800565c:	3401      	adds	r4, #1
 800565e:	e7f6      	b.n	800564e <mbedtls_md_free+0x30>

08005660 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	4605      	mov	r5, r0
 8005664:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8005666:	460c      	mov	r4, r1
 8005668:	b1a1      	cbz	r1, 8005694 <mbedtls_md_setup+0x34>
 800566a:	b198      	cbz	r0, 8005694 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 800566c:	6a0b      	ldr	r3, [r1, #32]
 800566e:	4798      	blx	r3
 8005670:	4606      	mov	r6, r0
 8005672:	6068      	str	r0, [r5, #4]
 8005674:	b148      	cbz	r0, 800568a <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8005676:	b157      	cbz	r7, 800568e <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8005678:	68e1      	ldr	r1, [r4, #12]
 800567a:	2002      	movs	r0, #2
 800567c:	f008 fe7e 	bl	800e37c <calloc>
 8005680:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 8005682:	b920      	cbnz	r0, 800568e <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8005684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005686:	4630      	mov	r0, r6
 8005688:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800568a:	4803      	ldr	r0, [pc, #12]	; (8005698 <mbedtls_md_setup+0x38>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 800568c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ctx->md_info = md_info;
 800568e:	602c      	str	r4, [r5, #0]
    return( 0 );
 8005690:	2000      	movs	r0, #0
 8005692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <mbedtls_md_setup+0x3c>)
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005698:	ffffae80 	.word	0xffffae80
 800569c:	ffffaf00 	.word	0xffffaf00

080056a0 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80056a0:	b430      	push	{r4, r5}
 80056a2:	460d      	mov	r5, r1
 80056a4:	4611      	mov	r1, r2
    if( md_info == NULL )
 80056a6:	b128      	cbz	r0, 80056b4 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80056a8:	69c4      	ldr	r4, [r0, #28]
 80056aa:	461a      	mov	r2, r3
 80056ac:	4628      	mov	r0, r5
 80056ae:	4623      	mov	r3, r4
}
 80056b0:	bc30      	pop	{r4, r5}
    return( md_info->digest_func( input, ilen, output ) );
 80056b2:	4718      	bx	r3
}
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <mbedtls_md+0x1c>)
 80056b6:	bc30      	pop	{r4, r5}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	ffffaf00 	.word	0xffffaf00

080056c0 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	460d      	mov	r5, r1
 80056c6:	b088      	sub	sp, #32
 80056c8:	4616      	mov	r6, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80056ca:	4604      	mov	r4, r0
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d056      	beq.n	800577e <mbedtls_md_hmac_starts+0xbe>
 80056d0:	6803      	ldr	r3, [r0, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d053      	beq.n	800577e <mbedtls_md_hmac_starts+0xbe>
 80056d6:	6882      	ldr	r2, [r0, #8]
 80056d8:	2a00      	cmp	r2, #0
 80056da:	d050      	beq.n	800577e <mbedtls_md_hmac_starts+0xbe>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	42b2      	cmp	r2, r6
 80056e0:	d214      	bcs.n	800570c <mbedtls_md_hmac_starts+0x4c>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	6840      	ldr	r0, [r0, #4]
 80056e6:	4798      	blx	r3
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d130      	bne.n	800574e <mbedtls_md_hmac_starts+0x8e>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	6860      	ldr	r0, [r4, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4632      	mov	r2, r6
 80056f4:	4629      	mov	r1, r5
 80056f6:	4798      	blx	r3
 80056f8:	bb48      	cbnz	r0, 800574e <mbedtls_md_hmac_starts+0x8e>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	6860      	ldr	r0, [r4, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	4669      	mov	r1, sp
 8005702:	4798      	blx	r3
 8005704:	bb18      	cbnz	r0, 800574e <mbedtls_md_hmac_starts+0x8e>
            goto cleanup;

        keylen = ctx->md_info->size;
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	689e      	ldr	r6, [r3, #8]
        key = sum;
 800570a:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800570c:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 800570e:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8005712:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8005714:	2136      	movs	r1, #54	; 0x36
 8005716:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8005718:	eb08 0702 	add.w	r7, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 800571c:	f008 fea4 	bl	800e468 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	215c      	movs	r1, #92	; 0x5c
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	4638      	mov	r0, r7
 8005728:	f008 fe9e 	bl	800e468 <memset>
 800572c:	3d01      	subs	r5, #1
 800572e:	4643      	mov	r3, r8
 8005730:	1e78      	subs	r0, r7, #1
 8005732:	4446      	add	r6, r8

    for( i = 0; i < keylen; i++ )
 8005734:	429e      	cmp	r6, r3
 8005736:	d114      	bne.n	8005762 <mbedtls_md_hmac_starts+0xa2>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	6860      	ldr	r0, [r4, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	4798      	blx	r3
 8005740:	b928      	cbnz	r0, 800574e <mbedtls_md_hmac_starts+0x8e>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	6860      	ldr	r0, [r4, #4]
 8005746:	695d      	ldr	r5, [r3, #20]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	4641      	mov	r1, r8
 800574c:	47a8      	blx	r5
 800574e:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005750:	4619      	mov	r1, r3
 8005752:	eb0d 0203 	add.w	r2, sp, r3
 8005756:	3301      	adds	r3, #1
 8005758:	2b21      	cmp	r3, #33	; 0x21
 800575a:	d10e      	bne.n	800577a <mbedtls_md_hmac_starts+0xba>

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 800575c:	b008      	add	sp, #32
 800575e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8005762:	7869      	ldrb	r1, [r5, #1]
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	404a      	eors	r2, r1
 8005768:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800576c:	7842      	ldrb	r2, [r0, #1]
 800576e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005772:	404a      	eors	r2, r1
 8005774:	f800 2f01 	strb.w	r2, [r0, #1]!
 8005778:	e7dc      	b.n	8005734 <mbedtls_md_hmac_starts+0x74>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800577a:	7011      	strb	r1, [r2, #0]
 800577c:	e7e9      	b.n	8005752 <mbedtls_md_hmac_starts+0x92>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800577e:	4801      	ldr	r0, [pc, #4]	; (8005784 <mbedtls_md_hmac_starts+0xc4>)
 8005780:	e7ec      	b.n	800575c <mbedtls_md_hmac_starts+0x9c>
 8005782:	bf00      	nop
 8005784:	ffffaf00 	.word	0xffffaf00

08005788 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8005788:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800578a:	b140      	cbz	r0, 800579e <mbedtls_md_hmac_update+0x16>
 800578c:	6803      	ldr	r3, [r0, #0]
 800578e:	b133      	cbz	r3, 800579e <mbedtls_md_hmac_update+0x16>
 8005790:	6884      	ldr	r4, [r0, #8]
 8005792:	b124      	cbz	r4, 800579e <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	6840      	ldr	r0, [r0, #4]
}
 8005798:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800579c:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800579e:	4802      	ldr	r0, [pc, #8]	; (80057a8 <mbedtls_md_hmac_update+0x20>)
}
 80057a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	ffffaf00 	.word	0xffffaf00

080057ac <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	460e      	mov	r6, r1
 80057b2:	b088      	sub	sp, #32
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80057b4:	4604      	mov	r4, r0
 80057b6:	b330      	cbz	r0, 8005806 <mbedtls_md_hmac_finish+0x5a>
 80057b8:	6803      	ldr	r3, [r0, #0]
 80057ba:	b323      	cbz	r3, 8005806 <mbedtls_md_hmac_finish+0x5a>
 80057bc:	6885      	ldr	r5, [r0, #8]
 80057be:	b315      	cbz	r5, 8005806 <mbedtls_md_hmac_finish+0x5a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80057c0:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 80057c4:	6840      	ldr	r0, [r0, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	4669      	mov	r1, sp
 80057ca:	4798      	blx	r3
 80057cc:	b9c0      	cbnz	r0, 8005800 <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6860      	ldr	r0, [r4, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	4798      	blx	r3
 80057d6:	b998      	cbnz	r0, 8005800 <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	6860      	ldr	r0, [r4, #4]
 80057dc:	695f      	ldr	r7, [r3, #20]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	eb05 0108 	add.w	r1, r5, r8
 80057e4:	47b8      	blx	r7
 80057e6:	b958      	cbnz	r0, 8005800 <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	6860      	ldr	r0, [r4, #4]
 80057ec:	695d      	ldr	r5, [r3, #20]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	4669      	mov	r1, sp
 80057f2:	47a8      	blx	r5
 80057f4:	b920      	cbnz	r0, 8005800 <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	6860      	ldr	r0, [r4, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4631      	mov	r1, r6
 80057fe:	4798      	blx	r3
}
 8005800:	b008      	add	sp, #32
 8005802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8005806:	4801      	ldr	r0, [pc, #4]	; (800580c <mbedtls_md_hmac_finish+0x60>)
 8005808:	e7fa      	b.n	8005800 <mbedtls_md_hmac_finish+0x54>
 800580a:	bf00      	nop
 800580c:	ffffaf00 	.word	0xffffaf00

08005810 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8005810:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8005812:	4604      	mov	r4, r0
 8005814:	b180      	cbz	r0, 8005838 <mbedtls_md_hmac_reset+0x28>
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	b173      	cbz	r3, 8005838 <mbedtls_md_hmac_reset+0x28>
 800581a:	6885      	ldr	r5, [r0, #8]
 800581c:	b165      	cbz	r5, 8005838 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	6840      	ldr	r0, [r0, #4]
 8005822:	4798      	blx	r3
 8005824:	b948      	cbnz	r0, 800583a <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	6860      	ldr	r0, [r4, #4]
 800582a:	695e      	ldr	r6, [r3, #20]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	4629      	mov	r1, r5
 8005830:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 8005832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8005836:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8005838:	4800      	ldr	r0, [pc, #0]	; (800583c <mbedtls_md_hmac_reset+0x2c>)
}
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	ffffaf00 	.word	0xffffaf00

08005840 <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8005840:	b120      	cbz	r0, 800584c <mbedtls_md_process+0xc>
 8005842:	6803      	ldr	r3, [r0, #0]
 8005844:	b113      	cbz	r3, 800584c <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	6840      	ldr	r0, [r0, #4]
 800584a:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800584c:	4800      	ldr	r0, [pc, #0]	; (8005850 <mbedtls_md_process+0x10>)
}
 800584e:	4770      	bx	lr
 8005850:	ffffaf00 	.word	0xffffaf00

08005854 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8005854:	b100      	cbz	r0, 8005858 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8005856:	6880      	ldr	r0, [r0, #8]
}
 8005858:	b2c0      	uxtb	r0, r0
 800585a:	4770      	bx	lr

0800585c <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800585c:	f001 bdfc 	b.w	8007458 <mbedtls_internal_sha256_process>

08005860 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 8005860:	f001 bda5 	b.w	80073ae <mbedtls_sha256_clone>

08005864 <sha224_ctx_free>:
{
 8005864:	b510      	push	{r4, lr}
 8005866:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8005868:	f001 fd97 	bl	800739a <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800586c:	4620      	mov	r0, r4
}
 800586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8005872:	f008 bdbd 	b.w	800e3f0 <free>

08005876 <sha224_ctx_alloc>:
{
 8005876:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8005878:	216c      	movs	r1, #108	; 0x6c
 800587a:	2001      	movs	r0, #1
 800587c:	f008 fd7e 	bl	800e37c <calloc>
    if( ctx != NULL )
 8005880:	4604      	mov	r4, r0
 8005882:	b108      	cbz	r0, 8005888 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8005884:	f001 fd85 	bl	8007392 <mbedtls_sha256_init>
}
 8005888:	4620      	mov	r0, r4
 800588a:	bd10      	pop	{r4, pc}

0800588c <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800588c:	2301      	movs	r3, #1
 800588e:	f002 b9ff 	b.w	8007c90 <mbedtls_sha256_ret>

08005892 <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8005892:	2300      	movs	r3, #0
 8005894:	f002 b9fc 	b.w	8007c90 <mbedtls_sha256_ret>

08005898 <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 8005898:	f002 b974 	b.w	8007b84 <mbedtls_sha256_finish_ret>

0800589c <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800589c:	f002 b96c 	b.w	8007b78 <mbedtls_sha256_update_ret>

080058a0 <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80058a0:	2101      	movs	r1, #1
 80058a2:	f001 bd89 	b.w	80073b8 <mbedtls_sha256_starts_ret>

080058a6 <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80058a6:	2100      	movs	r1, #0
 80058a8:	f001 bd86 	b.w	80073b8 <mbedtls_sha256_starts_ret>

080058ac <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4605      	mov	r5, r0
 80058b0:	b180      	cbz	r0, 80058d4 <oid_sig_alg_from_asn1+0x28>
 80058b2:	4c09      	ldr	r4, [pc, #36]	; (80058d8 <oid_sig_alg_from_asn1+0x2c>)
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	b910      	cbnz	r0, 80058be <oid_sig_alg_from_asn1+0x12>
 80058b8:	4604      	mov	r4, r0
 80058ba:	4620      	mov	r0, r4
 80058bc:	bd38      	pop	{r3, r4, r5, pc}
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	686b      	ldr	r3, [r5, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d104      	bne.n	80058d0 <oid_sig_alg_from_asn1+0x24>
 80058c6:	68a9      	ldr	r1, [r5, #8]
 80058c8:	f008 fd9a 	bl	800e400 <memcmp>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0f4      	beq.n	80058ba <oid_sig_alg_from_asn1+0xe>
 80058d0:	3414      	adds	r4, #20
 80058d2:	e7ef      	b.n	80058b4 <oid_sig_alg_from_asn1+0x8>
 80058d4:	4604      	mov	r4, r0
 80058d6:	e7f0      	b.n	80058ba <oid_sig_alg_from_asn1+0xe>
 80058d8:	08012068 	.word	0x08012068

080058dc <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80058e0:	4605      	mov	r5, r0
 80058e2:	b110      	cbz	r0, 80058ea <mbedtls_oid_get_attr_short_name+0xe>
 80058e4:	4c09      	ldr	r4, [pc, #36]	; (800590c <mbedtls_oid_get_attr_short_name+0x30>)
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	b910      	cbnz	r0, 80058f0 <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80058ea:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	686b      	ldr	r3, [r5, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d103      	bne.n	8005900 <mbedtls_oid_get_attr_short_name+0x24>
 80058f8:	68a9      	ldr	r1, [r5, #8]
 80058fa:	f008 fd81 	bl	800e400 <memcmp>
 80058fe:	b108      	cbz	r0, 8005904 <mbedtls_oid_get_attr_short_name+0x28>
 8005900:	3414      	adds	r4, #20
 8005902:	e7f0      	b.n	80058e6 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	bd70      	pop	{r4, r5, r6, pc}
 800590a:	bf00      	nop
 800590c:	08012130 	.word	0x08012130

08005910 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8005914:	4605      	mov	r5, r0
 8005916:	b110      	cbz	r0, 800591e <mbedtls_oid_get_x509_ext_type+0xe>
 8005918:	4c09      	ldr	r4, [pc, #36]	; (8005940 <mbedtls_oid_get_x509_ext_type+0x30>)
 800591a:	6820      	ldr	r0, [r4, #0]
 800591c:	b910      	cbnz	r0, 8005924 <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 800591e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8005922:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8005924:	6862      	ldr	r2, [r4, #4]
 8005926:	686b      	ldr	r3, [r5, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d103      	bne.n	8005934 <mbedtls_oid_get_x509_ext_type+0x24>
 800592c:	68a9      	ldr	r1, [r5, #8]
 800592e:	f008 fd67 	bl	800e400 <memcmp>
 8005932:	b108      	cbz	r0, 8005938 <mbedtls_oid_get_x509_ext_type+0x28>
 8005934:	3414      	adds	r4, #20
 8005936:	e7f0      	b.n	800591a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	6033      	str	r3, [r6, #0]
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	bf00      	nop
 8005940:	080120b8 	.word	0x080120b8

08005944 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8005948:	4605      	mov	r5, r0
 800594a:	b110      	cbz	r0, 8005952 <mbedtls_oid_get_extended_key_usage+0xe>
 800594c:	4c09      	ldr	r4, [pc, #36]	; (8005974 <mbedtls_oid_get_extended_key_usage+0x30>)
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	b910      	cbnz	r0, 8005958 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8005952:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8005956:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8005958:	6862      	ldr	r2, [r4, #4]
 800595a:	686b      	ldr	r3, [r5, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d103      	bne.n	8005968 <mbedtls_oid_get_extended_key_usage+0x24>
 8005960:	68a9      	ldr	r1, [r5, #8]
 8005962:	f008 fd4d 	bl	800e400 <memcmp>
 8005966:	b108      	cbz	r0, 800596c <mbedtls_oid_get_extended_key_usage+0x28>
 8005968:	3410      	adds	r4, #16
 800596a:	e7f0      	b.n	800594e <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 800596c:	68e3      	ldr	r3, [r4, #12]
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	bf00      	nop
 8005974:	08011f6c 	.word	0x08011f6c

08005978 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8005978:	b510      	push	{r4, lr}
 800597a:	460c      	mov	r4, r1
 800597c:	f7ff ff96 	bl	80058ac <oid_sig_alg_from_asn1>
 8005980:	b118      	cbz	r0, 800598a <mbedtls_oid_get_sig_alg_desc+0x12>
 8005982:	68c3      	ldr	r3, [r0, #12]
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	2000      	movs	r0, #0
 8005988:	bd10      	pop	{r4, pc}
 800598a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 800598e:	bd10      	pop	{r4, pc}

08005990 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	460d      	mov	r5, r1
 8005994:	4614      	mov	r4, r2
 8005996:	f7ff ff89 	bl	80058ac <oid_sig_alg_from_asn1>
 800599a:	b128      	cbz	r0, 80059a8 <mbedtls_oid_get_sig_alg+0x18>
 800599c:	7c03      	ldrb	r3, [r0, #16]
 800599e:	702b      	strb	r3, [r5, #0]
 80059a0:	7c43      	ldrb	r3, [r0, #17]
 80059a2:	7023      	strb	r3, [r4, #0]
 80059a4:	2000      	movs	r0, #0
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080059b0 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80059b4:	4605      	mov	r5, r0
 80059b6:	b110      	cbz	r0, 80059be <mbedtls_oid_get_pk_alg+0xe>
 80059b8:	4c09      	ldr	r4, [pc, #36]	; (80059e0 <mbedtls_oid_get_pk_alg+0x30>)
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	b910      	cbnz	r0, 80059c4 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80059be:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80059c4:	6862      	ldr	r2, [r4, #4]
 80059c6:	686b      	ldr	r3, [r5, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d103      	bne.n	80059d4 <mbedtls_oid_get_pk_alg+0x24>
 80059cc:	68a9      	ldr	r1, [r5, #8]
 80059ce:	f008 fd17 	bl	800e400 <memcmp>
 80059d2:	b108      	cbz	r0, 80059d8 <mbedtls_oid_get_pk_alg+0x28>
 80059d4:	3414      	adds	r4, #20
 80059d6:	e7f0      	b.n	80059ba <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80059d8:	7c23      	ldrb	r3, [r4, #16]
 80059da:	7033      	strb	r3, [r6, #0]
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	bf00      	nop
 80059e0:	08012018 	.word	0x08012018

080059e4 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 80059e4:	b530      	push	{r4, r5, lr}
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <mbedtls_oid_get_oid_by_md+0x24>)
 80059e8:	681c      	ldr	r4, [r3, #0]
 80059ea:	b914      	cbnz	r4, 80059f2 <mbedtls_oid_get_oid_by_md+0xe>
 80059ec:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80059f0:	bd30      	pop	{r4, r5, pc}
 80059f2:	7c1d      	ldrb	r5, [r3, #16]
 80059f4:	4285      	cmp	r5, r0
 80059f6:	d104      	bne.n	8005a02 <mbedtls_oid_get_oid_by_md+0x1e>
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	600c      	str	r4, [r1, #0]
 80059fc:	2000      	movs	r0, #0
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	bd30      	pop	{r4, r5, pc}
 8005a02:	3314      	adds	r3, #20
 8005a04:	e7f0      	b.n	80059e8 <mbedtls_oid_get_oid_by_md+0x4>
 8005a06:	bf00      	nop
 8005a08:	08011fdc 	.word	0x08011fdc

08005a0c <mbedtls_pem_init>:
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6003      	str	r3, [r0, #0]
 8005a10:	6043      	str	r3, [r0, #4]
 8005a12:	6083      	str	r3, [r0, #8]
 8005a14:	4770      	bx	lr
	...

08005a18 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8005a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	4689      	mov	r9, r1
 8005a1e:	b085      	sub	sp, #20
 8005a20:	4690      	mov	r8, r2
 8005a22:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8005a24:	4606      	mov	r6, r0
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d06a      	beq.n	8005b00 <mbedtls_pem_read_buffer+0xe8>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f008 ff55 	bl	800e8da <strstr>

    if( s1 == NULL )
 8005a30:	4604      	mov	r4, r0
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d066      	beq.n	8005b04 <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 8005a36:	4641      	mov	r1, r8
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f008 ff4e 	bl	800e8da <strstr>

    if( s2 == NULL || s2 <= s1 )
 8005a3e:	4605      	mov	r5, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d05f      	beq.n	8005b04 <mbedtls_pem_read_buffer+0xec>
 8005a44:	4284      	cmp	r4, r0
 8005a46:	d25d      	bcs.n	8005b04 <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 8005a48:	4648      	mov	r0, r9
 8005a4a:	f7fa fbc9 	bl	80001e0 <strlen>
    if( *s1 == ' '  ) s1++;
 8005a4e:	5c22      	ldrb	r2, [r4, r0]
    s1 += strlen( header );
 8005a50:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 8005a52:	2a20      	cmp	r2, #32
 8005a54:	bf08      	it	eq
 8005a56:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	2a0d      	cmp	r2, #13
 8005a5c:	bf08      	it	eq
 8005a5e:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	2a0a      	cmp	r2, #10
 8005a64:	d14e      	bne.n	8005b04 <mbedtls_pem_read_buffer+0xec>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 8005a66:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
 8005a68:	1c5c      	adds	r4, r3, #1
    end += strlen( footer );
 8005a6a:	f7fa fbb9 	bl	80001e0 <strlen>
    if( *end == ' '  ) end++;
 8005a6e:	5c2a      	ldrb	r2, [r5, r0]
    end += strlen( footer );
 8005a70:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 8005a72:	2a20      	cmp	r2, #32
 8005a74:	bf08      	it	eq
 8005a76:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	2a0d      	cmp	r2, #13
 8005a7c:	bf08      	it	eq
 8005a7e:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	2a0a      	cmp	r2, #10
 8005a84:	bf08      	it	eq
 8005a86:	3301      	addeq	r3, #1
    *use_len = end - data;
 8005a88:	1bdb      	subs	r3, r3, r7
 8005a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8005a8c:	1b2f      	subs	r7, r5, r4
 8005a8e:	2f15      	cmp	r7, #21
    *use_len = end - data;
 8005a90:	6013      	str	r3, [r2, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8005a92:	dd05      	ble.n	8005aa0 <mbedtls_pem_read_buffer+0x88>
 8005a94:	2216      	movs	r2, #22
 8005a96:	4920      	ldr	r1, [pc, #128]	; (8005b18 <mbedtls_pem_read_buffer+0x100>)
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f008 fcb1 	bl	800e400 <memcmp>
 8005a9e:	b398      	cbz	r0, 8005b08 <mbedtls_pem_read_buffer+0xf0>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 8005aa0:	42a5      	cmp	r5, r4
 8005aa2:	d933      	bls.n	8005b0c <mbedtls_pem_read_buffer+0xf4>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	9700      	str	r7, [sp, #0]
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	aa03      	add	r2, sp, #12
 8005aac:	4608      	mov	r0, r1
 8005aae:	f7fc fdc3 	bl	8002638 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 8005ab2:	302c      	adds	r0, #44	; 0x2c
 8005ab4:	d02c      	beq.n	8005b10 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8005ab6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005aba:	2001      	movs	r0, #1
 8005abc:	4641      	mov	r1, r8
 8005abe:	f008 fc5d 	bl	800e37c <calloc>
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	b330      	cbz	r0, 8005b14 <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	9700      	str	r7, [sp, #0]
 8005aca:	aa03      	add	r2, sp, #12
 8005acc:	4641      	mov	r1, r8
 8005ace:	f7fc fdb3 	bl	8002638 <mbedtls_base64_decode>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	b180      	cbz	r0, 8005afa <mbedtls_pem_read_buffer+0xe2>
 8005ad8:	442b      	add	r3, r5
    {
        mbedtls_zeroize( buf, len );
 8005ada:	462a      	mov	r2, r5
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005adc:	2100      	movs	r1, #0
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d108      	bne.n	8005af4 <mbedtls_pem_read_buffer+0xdc>
        mbedtls_free( buf );
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f008 fc84 	bl	800e3f0 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8005ae8:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 8005aec:	4620      	mov	r0, r4
 8005aee:	b005      	add	sp, #20
 8005af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005af4:	7011      	strb	r1, [r2, #0]
 8005af6:	3201      	adds	r2, #1
 8005af8:	e7f1      	b.n	8005ade <mbedtls_pem_read_buffer+0xc6>
    ctx->buf = buf;
 8005afa:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 8005afc:	6073      	str	r3, [r6, #4]
    return( 0 );
 8005afe:	e7f5      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 8005b00:	4c06      	ldr	r4, [pc, #24]	; (8005b1c <mbedtls_pem_read_buffer+0x104>)
 8005b02:	e7f3      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 8005b04:	4c06      	ldr	r4, [pc, #24]	; (8005b20 <mbedtls_pem_read_buffer+0x108>)
 8005b06:	e7f1      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 8005b08:	4c06      	ldr	r4, [pc, #24]	; (8005b24 <mbedtls_pem_read_buffer+0x10c>)
 8005b0a:	e7ef      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 8005b0c:	4c06      	ldr	r4, [pc, #24]	; (8005b28 <mbedtls_pem_read_buffer+0x110>)
 8005b0e:	e7ed      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8005b10:	4c06      	ldr	r4, [pc, #24]	; (8005b2c <mbedtls_pem_read_buffer+0x114>)
 8005b12:	e7eb      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 8005b14:	4c06      	ldr	r4, [pc, #24]	; (8005b30 <mbedtls_pem_read_buffer+0x118>)
 8005b16:	e7e9      	b.n	8005aec <mbedtls_pem_read_buffer+0xd4>
 8005b18:	080128d9 	.word	0x080128d9
 8005b1c:	ffffeb80 	.word	0xffffeb80
 8005b20:	ffffef80 	.word	0xffffef80
 8005b24:	ffffec00 	.word	0xffffec00
 8005b28:	ffffef00 	.word	0xffffef00
 8005b2c:	ffffeed4 	.word	0xffffeed4
 8005b30:	ffffee80 	.word	0xffffee80

08005b34 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
 8005b34:	6803      	ldr	r3, [r0, #0]
{
 8005b36:	b510      	push	{r4, lr}
 8005b38:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 8005b3a:	b95b      	cbnz	r3, 8005b54 <mbedtls_pem_free+0x20>
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	f008 fc57 	bl	800e3f0 <free>
    mbedtls_free( ctx->info );
 8005b42:	68a0      	ldr	r0, [r4, #8]
 8005b44:	f008 fc54 	bl	800e3f0 <free>
 8005b48:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d108      	bne.n	8005b64 <mbedtls_pem_free+0x30>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
}
 8005b52:	bd10      	pop	{r4, pc}
 8005b54:	6842      	ldr	r2, [r0, #4]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005b56:	2100      	movs	r1, #0
 8005b58:	441a      	add	r2, r3
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d0ee      	beq.n	8005b3c <mbedtls_pem_free+0x8>
 8005b5e:	7019      	strb	r1, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	e7fa      	b.n	8005b5a <mbedtls_pem_free+0x26>
 8005b64:	7022      	strb	r2, [r4, #0]
 8005b66:	3401      	adds	r4, #1
 8005b68:	e7f1      	b.n	8005b4e <mbedtls_pem_free+0x1a>

08005b6a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8005b6a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	b148      	cbz	r0, 8005b84 <mbedtls_pk_free+0x1a>
 8005b70:	6803      	ldr	r3, [r0, #0]
 8005b72:	b13b      	cbz	r3, 8005b84 <mbedtls_pk_free+0x1a>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	6840      	ldr	r0, [r0, #4]
 8005b78:	4798      	blx	r3
 8005b7a:	f104 0308 	add.w	r3, r4, #8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005b7e:	2200      	movs	r2, #0
 8005b80:	429c      	cmp	r4, r3
 8005b82:	d100      	bne.n	8005b86 <mbedtls_pk_free+0x1c>
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	7022      	strb	r2, [r4, #0]
 8005b88:	3401      	adds	r4, #1
 8005b8a:	e7f9      	b.n	8005b80 <mbedtls_pk_free+0x16>

08005b8c <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 8005b8c:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8005b8e:	4802      	ldr	r0, [pc, #8]	; (8005b98 <mbedtls_pk_info_from_type+0xc>)
 8005b90:	bf18      	it	ne
 8005b92:	2000      	movne	r0, #0
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	080128fc 	.word	0x080128fc

08005b9c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	b148      	cbz	r0, 8005bb8 <mbedtls_pk_setup+0x1c>
 8005ba4:	b141      	cbz	r1, 8005bb8 <mbedtls_pk_setup+0x1c>
 8005ba6:	6804      	ldr	r4, [r0, #0]
 8005ba8:	b934      	cbnz	r4, 8005bb8 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 8005baa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005bac:	4798      	blx	r3
 8005bae:	6068      	str	r0, [r5, #4]
 8005bb0:	b120      	cbz	r0, 8005bbc <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8005bb2:	602e      	str	r6, [r5, #0]

    return( 0 );
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <mbedtls_pk_setup+0x24>)
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <mbedtls_pk_setup+0x28>)
}
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	ffffc180 	.word	0xffffc180
 8005bc4:	ffffc080 	.word	0xffffc080

08005bc8 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 8005bc8:	b120      	cbz	r0, 8005bd4 <mbedtls_pk_can_do+0xc>
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	b113      	cbz	r3, 8005bd4 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	4718      	bx	r3
}
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	4770      	bx	lr

08005bd8 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005be4:	460e      	mov	r6, r1
 8005be6:	4617      	mov	r7, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8005be8:	4604      	mov	r4, r0
 8005bea:	b910      	cbnz	r0, 8005bf2 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8005bec:	480f      	ldr	r0, [pc, #60]	; (8005c2c <mbedtls_pk_verify+0x54>)
 8005bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8005bf2:	6802      	ldr	r2, [r0, #0]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d0f9      	beq.n	8005bec <mbedtls_pk_verify+0x14>
    if( *hash_len != 0 )
 8005bf8:	b93b      	cbnz	r3, 8005c0a <mbedtls_pk_verify+0x32>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	f7ff fcfc 	bl	80055f8 <mbedtls_md_info_from_type>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d0f3      	beq.n	8005bec <mbedtls_pk_verify+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 8005c04:	f7ff fe26 	bl	8005854 <mbedtls_md_get_size>
 8005c08:	4603      	mov	r3, r0

    if( ctx->pk_info->verify_func == NULL )
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	6915      	ldr	r5, [r2, #16]
 8005c0e:	b915      	cbnz	r5, 8005c16 <mbedtls_pk_verify+0x3e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8005c10:	4807      	ldr	r0, [pc, #28]	; (8005c30 <mbedtls_pk_verify+0x58>)
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8005c16:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005c1a:	f8cd 8020 	str.w	r8, [sp, #32]
 8005c1e:	463a      	mov	r2, r7
 8005c20:	4631      	mov	r1, r6
 8005c22:	6860      	ldr	r0, [r4, #4]
 8005c24:	46ac      	mov	ip, r5
                                       sig, sig_len ) );
}
 8005c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8005c2a:	4760      	bx	ip
 8005c2c:	ffffc180 	.word	0xffffc180
 8005c30:	ffffc100 	.word	0xffffc100

08005c34 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8005c34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	af0a      	add	r7, sp, #40	; 0x28
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	468b      	mov	fp, r1
 8005c3e:	461e      	mov	r6, r3
 8005c40:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    if( ctx == NULL || ctx->pk_info == NULL )
 8005c44:	4614      	mov	r4, r2
 8005c46:	b91a      	cbnz	r2, 8005c50 <mbedtls_pk_verify_ext+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8005c48:	4810      	ldr	r0, [pc, #64]	; (8005c8c <mbedtls_pk_verify_ext+0x58>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 8005c4a:	b001      	add	sp, #4
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f8      	beq.n	8005c48 <mbedtls_pk_verify_ext+0x14>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 8005c56:	4601      	mov	r1, r0
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7ff ffb5 	bl	8005bc8 <mbedtls_pk_can_do>
 8005c5e:	b188      	cbz	r0, 8005c84 <mbedtls_pk_verify_ext+0x50>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 8005c60:	2d06      	cmp	r5, #6
 8005c62:	d011      	beq.n	8005c88 <mbedtls_pk_verify_ext+0x54>
    if( options != NULL )
 8005c64:	f1bb 0f00 	cmp.w	fp, #0
 8005c68:	d1ee      	bne.n	8005c48 <mbedtls_pk_verify_ext+0x14>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8005c6a:	4643      	mov	r3, r8
 8005c6c:	463a      	mov	r2, r7
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4620      	mov	r0, r4
 8005c72:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005c76:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
}
 8005c7a:	b001      	add	sp, #4
 8005c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8005c80:	f7ff bfaa 	b.w	8005bd8 <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8005c84:	4802      	ldr	r0, [pc, #8]	; (8005c90 <mbedtls_pk_verify_ext+0x5c>)
 8005c86:	e7e0      	b.n	8005c4a <mbedtls_pk_verify_ext+0x16>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8005c88:	4802      	ldr	r0, [pc, #8]	; (8005c94 <mbedtls_pk_verify_ext+0x60>)
 8005c8a:	e7de      	b.n	8005c4a <mbedtls_pk_verify_ext+0x16>
 8005c8c:	ffffc180 	.word	0xffffc180
 8005c90:	ffffc100 	.word	0xffffc100
 8005c94:	ffffc680 	.word	0xffffc680

08005c98 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	af08      	add	r7, sp, #32
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	b910      	cbnz	r0, 8005cb0 <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8005caa:	4813      	ldr	r0, [pc, #76]	; (8005cf8 <mbedtls_pk_sign+0x60>)
 8005cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8005cb0:	6802      	ldr	r2, [r0, #0]
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	d0f9      	beq.n	8005caa <mbedtls_pk_sign+0x12>
    if( *hash_len != 0 )
 8005cb6:	b93b      	cbnz	r3, 8005cc8 <mbedtls_pk_sign+0x30>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8005cb8:	4608      	mov	r0, r1
 8005cba:	f7ff fc9d 	bl	80055f8 <mbedtls_md_info_from_type>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0f3      	beq.n	8005caa <mbedtls_pk_sign+0x12>
    *hash_len = mbedtls_md_get_size( md_info );
 8005cc2:	f7ff fdc7 	bl	8005854 <mbedtls_md_get_size>
 8005cc6:	4603      	mov	r3, r0

    if( ctx->pk_info->sign_func == NULL )
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	f8d2 e014 	ldr.w	lr, [r2, #20]
 8005cce:	f1be 0f00 	cmp.w	lr, #0
 8005cd2:	d102      	bne.n	8005cda <mbedtls_pk_sign+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8005cd4:	4809      	ldr	r0, [pc, #36]	; (8005cfc <mbedtls_pk_sign+0x64>)
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8005cda:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005cde:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8005ce2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005ce6:	9708      	str	r7, [sp, #32]
 8005ce8:	4632      	mov	r2, r6
 8005cea:	4629      	mov	r1, r5
 8005cec:	6860      	ldr	r0, [r4, #4]
 8005cee:	46f4      	mov	ip, lr
                                     sig, sig_len, f_rng, p_rng ) );
}
 8005cf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8005cf4:	4760      	bx	ip
 8005cf6:	bf00      	nop
 8005cf8:	ffffc180 	.word	0xffffc180
 8005cfc:	ffffc100 	.word	0xffffc100

08005d00 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8005d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d02:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 8005d06:	b140      	cbz	r0, 8005d1a <mbedtls_pk_encrypt+0x1a>
 8005d08:	6804      	ldr	r4, [r0, #0]
 8005d0a:	b134      	cbz	r4, 8005d1a <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 8005d0c:	69e4      	ldr	r4, [r4, #28]
 8005d0e:	b134      	cbz	r4, 8005d1e <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8005d10:	46a4      	mov	ip, r4
 8005d12:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
 8005d14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8005d18:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8005d1a:	4802      	ldr	r0, [pc, #8]	; (8005d24 <mbedtls_pk_encrypt+0x24>)
 8005d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8005d1e:	4802      	ldr	r0, [pc, #8]	; (8005d28 <mbedtls_pk_encrypt+0x28>)
}
 8005d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d22:	bf00      	nop
 8005d24:	ffffc180 	.word	0xffffc180
 8005d28:	ffffc100 	.word	0xffffc100

08005d2c <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8005d2c:	b120      	cbz	r0, 8005d38 <mbedtls_pk_get_bitlen+0xc>
 8005d2e:	6803      	ldr	r3, [r0, #0]
 8005d30:	b113      	cbz	r3, 8005d38 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	6840      	ldr	r0, [r0, #4]
 8005d36:	4718      	bx	r3
}
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4770      	bx	lr

08005d3c <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 8005d3c:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8005d3e:	b138      	cbz	r0, 8005d50 <mbedtls_pk_debug+0x14>
 8005d40:	6803      	ldr	r3, [r0, #0]
 8005d42:	b12b      	cbz	r3, 8005d50 <mbedtls_pk_debug+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	b12b      	cbz	r3, 8005d54 <mbedtls_pk_debug+0x18>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8005d48:	6840      	ldr	r0, [r0, #4]
 8005d4a:	4798      	blx	r3
    return( 0 );
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <mbedtls_pk_debug+0x1c>)
 8005d52:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8005d54:	4801      	ldr	r0, [pc, #4]	; (8005d5c <mbedtls_pk_debug+0x20>)
}
 8005d56:	bd08      	pop	{r3, pc}
 8005d58:	ffffc180 	.word	0xffffc180
 8005d5c:	ffffc100 	.word	0xffffc100

08005d60 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8005d60:	b118      	cbz	r0, 8005d6a <mbedtls_pk_get_name+0xa>
 8005d62:	6803      	ldr	r3, [r0, #0]
 8005d64:	b10b      	cbz	r3, 8005d6a <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 8005d66:	6858      	ldr	r0, [r3, #4]
 8005d68:	4770      	bx	lr
        return( "invalid PK" );
 8005d6a:	4801      	ldr	r0, [pc, #4]	; (8005d70 <mbedtls_pk_get_name+0x10>)
}
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	080128f0 	.word	0x080128f0

08005d74 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8005d74:	b110      	cbz	r0, 8005d7c <mbedtls_pk_get_type+0x8>
 8005d76:	6800      	ldr	r0, [r0, #0]
 8005d78:	b100      	cbz	r0, 8005d7c <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 8005d7a:	7800      	ldrb	r0, [r0, #0]
}
 8005d7c:	4770      	bx	lr

08005d7e <rsa_can_do>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8005d7e:	2801      	cmp	r0, #1
 8005d80:	d002      	beq.n	8005d88 <rsa_can_do+0xa>
 8005d82:	1f83      	subs	r3, r0, #6
 8005d84:	4258      	negs	r0, r3
 8005d86:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8005d88:	4770      	bx	lr
	...

08005d8c <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8005d8c:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8005d8e:	4a06      	ldr	r2, [pc, #24]	; (8005da8 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8005d90:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 8005d92:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8005d94:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8005d96:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 8005d9a:	4b04      	ldr	r3, [pc, #16]	; (8005dac <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8005d9c:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8005d9e:	3014      	adds	r0, #20
    items->name = "rsa.E";
 8005da0:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8005da2:	6148      	str	r0, [r1, #20]
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	0801292c 	.word	0x0801292c
 8005dac:	08012932 	.word	0x08012932

08005db0 <rsa_free_wrap>:
{
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8005db4:	f000 ffd8 	bl	8006d68 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8005db8:	4620      	mov	r0, r4
}
 8005dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8005dbe:	f008 bb17 	b.w	800e3f0 <free>

08005dc2 <rsa_alloc_wrap>:
{
 8005dc2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8005dc4:	21ac      	movs	r1, #172	; 0xac
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	f008 fad8 	bl	800e37c <calloc>
    if( ctx != NULL )
 8005dcc:	4604      	mov	r4, r0
 8005dce:	b118      	cbz	r0, 8005dd8 <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	f000 fb40 	bl	8006458 <mbedtls_rsa_init>
}
 8005dd8:	4620      	mov	r0, r4
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 8005ddc:	f000 bba6 	b.w	800652c <mbedtls_rsa_check_pub_priv>

08005de0 <rsa_get_bitlen>:
{
 8005de0:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 8005de2:	f000 fb46 	bl	8006472 <mbedtls_rsa_get_len>
}
 8005de6:	00c0      	lsls	r0, r0, #3
 8005de8:	bd08      	pop	{r3, pc}
	...

08005dec <rsa_encrypt_wrap>:
{
 8005dec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005df4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005df8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dfa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4688      	mov	r8, r1
 8005e00:	4617      	mov	r7, r2
 8005e02:	4699      	mov	r9, r3
    *olen = mbedtls_rsa_get_len( rsa );
 8005e04:	f000 fb35 	bl	8006472 <mbedtls_rsa_get_len>
    if( *olen > osize )
 8005e08:	4550      	cmp	r0, sl
    *olen = mbedtls_rsa_get_len( rsa );
 8005e0a:	f8cb 0000 	str.w	r0, [fp]
    if( *olen > osize )
 8005e0e:	d80d      	bhi.n	8005e2c <rsa_encrypt_wrap+0x40>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8005e10:	2300      	movs	r3, #0
 8005e12:	4632      	mov	r2, r6
 8005e14:	4629      	mov	r1, r5
 8005e16:	4620      	mov	r0, r4
 8005e18:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e1c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005e20:	970a      	str	r7, [sp, #40]	; 0x28
}
 8005e22:	b001      	add	sp, #4
 8005e24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8005e28:	f000 be08 	b.w	8006a3c <mbedtls_rsa_pkcs1_encrypt>
}
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <rsa_encrypt_wrap+0x48>)
 8005e2e:	b001      	add	sp, #4
 8005e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e34:	ffffbc00 	.word	0xffffbc00

08005e38 <rsa_decrypt_wrap>:
{
 8005e38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005e3e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005e46:	4693      	mov	fp, r2
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4688      	mov	r8, r1
 8005e4c:	4699      	mov	r9, r3
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 8005e4e:	f000 fb10 	bl	8006472 <mbedtls_rsa_get_len>
 8005e52:	4558      	cmp	r0, fp
 8005e54:	d10f      	bne.n	8005e76 <rsa_decrypt_wrap+0x3e>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 8005e56:	2301      	movs	r3, #1
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005e62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005e6a:	970a      	str	r7, [sp, #40]	; 0x28
}
 8005e6c:	b001      	add	sp, #4
 8005e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 8005e72:	f000 be79 	b.w	8006b68 <mbedtls_rsa_pkcs1_decrypt>
}
 8005e76:	4802      	ldr	r0, [pc, #8]	; (8005e80 <rsa_decrypt_wrap+0x48>)
 8005e78:	b001      	add	sp, #4
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	bf00      	nop
 8005e80:	ffffbf80 	.word	0xffffbf80

08005e84 <rsa_sign_wrap>:
{
 8005e84:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e8c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8005e90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e92:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005e94:	460f      	mov	r7, r1
 8005e96:	4691      	mov	r9, r2
 8005e98:	4698      	mov	r8, r3
 8005e9a:	4604      	mov	r4, r0
    *sig_len = mbedtls_rsa_get_len( rsa );
 8005e9c:	f000 fae9 	bl	8006472 <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8005ea0:	2301      	movs	r3, #1
    *sig_len = mbedtls_rsa_get_len( rsa );
 8005ea2:	f8cb 0000 	str.w	r0, [fp]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005eb0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005eb4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005eb8:	970a      	str	r7, [sp, #40]	; 0x28
}
 8005eba:	b001      	add	sp, #4
 8005ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8005ec0:	f000 bec6 	b.w	8006c50 <mbedtls_rsa_pkcs1_sign>

08005ec4 <rsa_verify_wrap>:
{
 8005ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	4606      	mov	r6, r0
 8005ecc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005ece:	460f      	mov	r7, r1
 8005ed0:	4691      	mov	r9, r2
 8005ed2:	4698      	mov	r8, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8005ed4:	f000 facd 	bl	8006472 <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 8005ed8:	42a0      	cmp	r0, r4
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8005eda:	4605      	mov	r5, r0
    if( sig_len < rsa_len )
 8005edc:	d811      	bhi.n	8005f02 <rsa_verify_wrap+0x3e>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 8005ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4619      	mov	r1, r3
 8005eec:	4630      	mov	r0, r6
 8005eee:	f000 ff2b 	bl	8006d48 <mbedtls_rsa_pkcs1_verify>
 8005ef2:	b918      	cbnz	r0, 8005efc <rsa_verify_wrap+0x38>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <rsa_verify_wrap+0x44>)
 8005ef6:	42a5      	cmp	r5, r4
 8005ef8:	bf38      	it	cc
 8005efa:	4618      	movcc	r0, r3
}
 8005efc:	b005      	add	sp, #20
 8005efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8005f02:	4802      	ldr	r0, [pc, #8]	; (8005f0c <rsa_verify_wrap+0x48>)
 8005f04:	e7fa      	b.n	8005efc <rsa_verify_wrap+0x38>
 8005f06:	bf00      	nop
 8005f08:	ffffc700 	.word	0xffffc700
 8005f0c:	ffffbc80 	.word	0xffffbc80

08005f10 <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8005f16:	2330      	movs	r3, #48	; 0x30
 8005f18:	aa09      	add	r2, sp, #36	; 0x24
{
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8005f1e:	f7fc fa76 	bl	800240e <mbedtls_asn1_get_tag>
 8005f22:	b110      	cbz	r0, 8005f2a <pk_get_rsapubkey+0x1a>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8005f24:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8005f28:	e005      	b.n	8005f36 <pk_get_rsapubkey+0x26>
    if( *p + len != end )
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2e:	4413      	add	r3, r2
 8005f30:	429d      	cmp	r5, r3
 8005f32:	d002      	beq.n	8005f3a <pk_get_rsapubkey+0x2a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8005f34:	4824      	ldr	r0, [pc, #144]	; (8005fc8 <pk_get_rsapubkey+0xb8>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8005f36:	b00a      	add	sp, #40	; 0x28
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	aa09      	add	r2, sp, #36	; 0x24
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7fc fa64 	bl	800240e <mbedtls_asn1_get_tag>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d1ec      	bne.n	8005f24 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 8005f4a:	9006      	str	r0, [sp, #24]
 8005f4c:	9005      	str	r0, [sp, #20]
 8005f4e:	9004      	str	r0, [sp, #16]
 8005f50:	9003      	str	r0, [sp, #12]
 8005f52:	9002      	str	r0, [sp, #8]
 8005f54:	9001      	str	r0, [sp, #4]
 8005f56:	9000      	str	r0, [sp, #0]
 8005f58:	4603      	mov	r3, r0
 8005f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5c:	6821      	ldr	r1, [r4, #0]
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 f9a0 	bl	80062a4 <mbedtls_rsa_import_raw>
 8005f64:	b108      	cbz	r0, 8005f6a <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8005f66:	4819      	ldr	r0, [pc, #100]	; (8005fcc <pk_get_rsapubkey+0xbc>)
 8005f68:	e7e5      	b.n	8005f36 <pk_get_rsapubkey+0x26>
    *p += len;
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f6e:	4413      	add	r3, r2
 8005f70:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8005f72:	aa09      	add	r2, sp, #36	; 0x24
 8005f74:	2302      	movs	r3, #2
 8005f76:	4629      	mov	r1, r5
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7fc fa48 	bl	800240e <mbedtls_asn1_get_tag>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d1d0      	bne.n	8005f24 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8005f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f84:	9306      	str	r3, [sp, #24]
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	9305      	str	r3, [sp, #20]
 8005f8a:	9004      	str	r0, [sp, #16]
 8005f8c:	9003      	str	r0, [sp, #12]
 8005f8e:	9002      	str	r0, [sp, #8]
 8005f90:	9001      	str	r0, [sp, #4]
 8005f92:	9000      	str	r0, [sp, #0]
 8005f94:	4603      	mov	r3, r0
 8005f96:	4602      	mov	r2, r0
 8005f98:	4601      	mov	r1, r0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f000 f982 	bl	80062a4 <mbedtls_rsa_import_raw>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d1e0      	bne.n	8005f66 <pk_get_rsapubkey+0x56>
    *p += len;
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa8:	4413      	add	r3, r2
 8005faa:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f9bb 	bl	8006328 <mbedtls_rsa_complete>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d1d7      	bne.n	8005f66 <pk_get_rsapubkey+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f000 fa5e 	bl	8006478 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d1d2      	bne.n	8005f66 <pk_get_rsapubkey+0x56>
    if( *p != end )
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	429d      	cmp	r5, r3
 8005fc4:	d0b7      	beq.n	8005f36 <pk_get_rsapubkey+0x26>
 8005fc6:	e7b5      	b.n	8005f34 <pk_get_rsapubkey+0x24>
 8005fc8:	ffffc49a 	.word	0xffffc49a
 8005fcc:	ffffc500 	.word	0xffffc500

08005fd0 <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8005fd0:	b530      	push	{r4, r5, lr}
 8005fd2:	4615      	mov	r5, r2
 8005fd4:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	605a      	str	r2, [r3, #4]
 8005fdc:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8005fde:	aa01      	add	r2, sp, #4
{
 8005fe0:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8005fe2:	f7fc fad9 	bl	8002598 <mbedtls_asn1_get_alg>
 8005fe6:	b118      	cbz	r0, 8005ff0 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8005fe8:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
    }

    return( 0 );
}
 8005fec:	b005      	add	sp, #20
 8005fee:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	a801      	add	r0, sp, #4
 8005ff4:	f7ff fcdc 	bl	80059b0 <mbedtls_oid_get_pk_alg>
 8005ff8:	b960      	cbnz	r0, 8006014 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8005ffa:	782b      	ldrb	r3, [r5, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d1f5      	bne.n	8005fec <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8006000:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8006002:	2b05      	cmp	r3, #5
 8006004:	d000      	beq.n	8006008 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8006006:	b93b      	cbnz	r3, 8006018 <pk_get_pk_alg+0x48>
 8006008:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <pk_get_pk_alg+0x4c>)
 800600c:	2a00      	cmp	r2, #0
 800600e:	bf18      	it	ne
 8006010:	4618      	movne	r0, r3
 8006012:	e7eb      	b.n	8005fec <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8006014:	4802      	ldr	r0, [pc, #8]	; (8006020 <pk_get_pk_alg+0x50>)
 8006016:	e7e9      	b.n	8005fec <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8006018:	4800      	ldr	r0, [pc, #0]	; (800601c <pk_get_pk_alg+0x4c>)
 800601a:	e7e7      	b.n	8005fec <pk_get_pk_alg+0x1c>
 800601c:	ffffc580 	.word	0xffffc580
 8006020:	ffffc380 	.word	0xffffc380

08006024 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8006024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006026:	b087      	sub	sp, #28
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8006028:	2300      	movs	r3, #0
{
 800602a:	4617      	mov	r7, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 800602c:	f88d 3007 	strb.w	r3, [sp, #7]
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006030:	aa02      	add	r2, sp, #8
 8006032:	2330      	movs	r3, #48	; 0x30
{
 8006034:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8006036:	f7fc f9ea 	bl	800240e <mbedtls_asn1_get_tag>
 800603a:	b120      	cbz	r0, 8006046 <mbedtls_pk_parse_subpubkey+0x22>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 800603c:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8006040:	4620      	mov	r0, r4
 8006042:	b007      	add	sp, #28
 8006044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = *p + len;
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	6835      	ldr	r5, [r6, #0]
 800604a:	441d      	add	r5, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 800604c:	f10d 0207 	add.w	r2, sp, #7
 8006050:	ab03      	add	r3, sp, #12
 8006052:	4629      	mov	r1, r5
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff ffbb 	bl	8005fd0 <pk_get_pk_alg>
 800605a:	4604      	mov	r4, r0
 800605c:	2800      	cmp	r0, #0
 800605e:	d1ef      	bne.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8006060:	aa02      	add	r2, sp, #8
 8006062:	4629      	mov	r1, r5
 8006064:	4630      	mov	r0, r6
 8006066:	f7fc fa45 	bl	80024f4 <mbedtls_asn1_get_bitstring_null>
 800606a:	b110      	cbz	r0, 8006072 <mbedtls_pk_parse_subpubkey+0x4e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 800606c:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 8006070:	e7e6      	b.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
    if( *p + len != end )
 8006072:	6833      	ldr	r3, [r6, #0]
 8006074:	9a02      	ldr	r2, [sp, #8]
 8006076:	4413      	add	r3, r2
 8006078:	429d      	cmp	r5, r3
 800607a:	d11b      	bne.n	80060b4 <mbedtls_pk_parse_subpubkey+0x90>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 800607c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006080:	f7ff fd84 	bl	8005b8c <mbedtls_pk_info_from_type>
 8006084:	4601      	mov	r1, r0
 8006086:	b1b8      	cbz	r0, 80060b8 <mbedtls_pk_parse_subpubkey+0x94>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fd87 	bl	8005b9c <mbedtls_pk_setup>
 800608e:	4604      	mov	r4, r0
 8006090:	2800      	cmp	r0, #0
 8006092:	d1d5      	bne.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
    if( pk_alg == MBEDTLS_PK_RSA )
 8006094:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d10f      	bne.n	80060bc <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4629      	mov	r1, r5
 80060a0:	4630      	mov	r0, r6
 80060a2:	f7ff ff35 	bl	8005f10 <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 80060a6:	4604      	mov	r4, r0
 80060a8:	b948      	cbnz	r0, 80060be <mbedtls_pk_parse_subpubkey+0x9a>
 80060aa:	6833      	ldr	r3, [r6, #0]
 80060ac:	429d      	cmp	r5, r3
 80060ae:	d0c7      	beq.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 80060b0:	4c05      	ldr	r4, [pc, #20]	; (80060c8 <mbedtls_pk_parse_subpubkey+0xa4>)
 80060b2:	e004      	b.n	80060be <mbedtls_pk_parse_subpubkey+0x9a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 80060b4:	4c04      	ldr	r4, [pc, #16]	; (80060c8 <mbedtls_pk_parse_subpubkey+0xa4>)
 80060b6:	e7c3      	b.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80060b8:	4c04      	ldr	r4, [pc, #16]	; (80060cc <mbedtls_pk_parse_subpubkey+0xa8>)
 80060ba:	e7c1      	b.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 80060bc:	4c03      	ldr	r4, [pc, #12]	; (80060cc <mbedtls_pk_parse_subpubkey+0xa8>)
        mbedtls_pk_free( pk );
 80060be:	4638      	mov	r0, r7
 80060c0:	f7ff fd53 	bl	8005b6a <mbedtls_pk_free>
 80060c4:	e7bc      	b.n	8006040 <mbedtls_pk_parse_subpubkey+0x1c>
 80060c6:	bf00      	nop
 80060c8:	ffffc49a 	.word	0xffffc49a
 80060cc:	ffffc380 	.word	0xffffc380

080060d0 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80060d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80060d6:	2300      	movs	r3, #0
{
 80060d8:	460f      	mov	r7, r1
 80060da:	4691      	mov	r9, r2
 80060dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80060de:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80060e0:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80060e2:	4604      	mov	r4, r0
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d061      	beq.n	80061ac <rsa_rsassa_pkcs1_v15_encode+0xdc>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80060e8:	f7ff fa86 	bl	80055f8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80060ec:	4607      	mov	r7, r0
 80060ee:	b920      	cbnz	r0, 80060fa <rsa_rsassa_pkcs1_v15_encode+0x2a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80060f0:	4c3d      	ldr	r4, [pc, #244]	; (80061e8 <rsa_rsassa_pkcs1_v15_encode+0x118>)
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80060f2:	4620      	mov	r0, r4
 80060f4:	b002      	add	sp, #8
 80060f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80060fa:	4620      	mov	r0, r4
 80060fc:	466a      	mov	r2, sp
 80060fe:	a901      	add	r1, sp, #4
 8006100:	f7ff fc70 	bl	80059e4 <mbedtls_oid_get_oid_by_md>
 8006104:	4604      	mov	r4, r0
 8006106:	2800      	cmp	r0, #0
 8006108:	d1f2      	bne.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 800610a:	4638      	mov	r0, r7
 800610c:	f7ff fba2 	bl	8005854 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8006110:	9f00      	ldr	r7, [sp, #0]
 8006112:	19c3      	adds	r3, r0, r7
 8006114:	f103 0208 	add.w	r2, r3, #8
 8006118:	2a7f      	cmp	r2, #127	; 0x7f
        hashlen = mbedtls_md_get_size( md_info );
 800611a:	4680      	mov	r8, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 800611c:	d8e8      	bhi.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
 800611e:	f110 010a 	adds.w	r1, r0, #10
 8006122:	d2e5      	bcs.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
            10 + hashlen + oid_size <  10 + hashlen )
 8006124:	f103 020a 	add.w	r2, r3, #10
            10 + hashlen            <  hashlen      ||
 8006128:	4291      	cmp	r1, r2
 800612a:	d8e1      	bhi.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < 10 + hashlen + oid_size )
 800612c:	4295      	cmp	r5, r2
 800612e:	d3df      	bcc.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= 10 + hashlen + oid_size;
 8006130:	f1a5 070a 	sub.w	r7, r5, #10
 8006134:	1aff      	subs	r7, r7, r3
    if( nb_pad < 3 + 8 )
 8006136:	2f0a      	cmp	r7, #10
 8006138:	d9da      	bls.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 800613a:	46b2      	mov	sl, r6
    nb_pad -= 3;
 800613c:	3f03      	subs	r7, #3
    *p++ = 0;
 800613e:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8006142:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8006144:	463a      	mov	r2, r7
    *p++ = MBEDTLS_RSA_SIGN;
 8006146:	7073      	strb	r3, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8006148:	21ff      	movs	r1, #255	; 0xff
 800614a:	4650      	mov	r0, sl
 800614c:	f008 f98c 	bl	800e468 <memset>
    p += nb_pad;
 8006150:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8006154:	2130      	movs	r1, #48	; 0x30
    *p++ = 0;
 8006156:	f80a 4007 	strb.w	r4, [sl, r7]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 800615a:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 800615c:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 800615e:	70d9      	strb	r1, [r3, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8006160:	f107 0208 	add.w	r2, r7, #8
 8006164:	4442      	add	r2, r8
 8006166:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
 8006168:	b2fa      	uxtb	r2, r7
 800616a:	1d11      	adds	r1, r2, #4
    *p++ = (unsigned char) oid_size;
 800616c:	f103 0a07 	add.w	sl, r3, #7
    *p++ = (unsigned char)( 0x04 + oid_size );
 8006170:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8006172:	2106      	movs	r1, #6
 8006174:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8006176:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8006178:	9901      	ldr	r1, [sp, #4]
 800617a:	463a      	mov	r2, r7
 800617c:	4650      	mov	r0, sl
 800617e:	f008 f94e 	bl	800e41e <memcpy>
    p += oid_size;
 8006182:	eb0a 0207 	add.w	r2, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8006186:	2305      	movs	r3, #5
 8006188:	f80a 3007 	strb.w	r3, [sl, r7]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 800618c:	2304      	movs	r3, #4
 800618e:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
 8006190:	18d3      	adds	r3, r2, r3
 8006192:	f882 8003 	strb.w	r8, [r2, #3]
    *p++ = 0x00;
 8006196:	7054      	strb	r4, [r2, #1]
    memcpy( p, hash, hashlen );
 8006198:	4649      	mov	r1, r9
 800619a:	4642      	mov	r2, r8
 800619c:	4618      	mov	r0, r3
 800619e:	f008 f93e 	bl	800e41e <memcpy>
    if( p != dst + dst_len )
 80061a2:	4435      	add	r5, r6
    p += hashlen;
 80061a4:	4480      	add	r8, r0
    if( p != dst + dst_len )
 80061a6:	4545      	cmp	r5, r8
 80061a8:	d0a3      	beq.n	80060f2 <rsa_rsassa_pkcs1_v15_encode+0x22>
 80061aa:	e01a      	b.n	80061e2 <rsa_rsassa_pkcs1_v15_encode+0x112>
        if( nb_pad < hashlen )
 80061ac:	428d      	cmp	r5, r1
 80061ae:	d39f      	bcc.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= hashlen;
 80061b0:	1a6d      	subs	r5, r5, r1
    if( nb_pad < 3 + 8 )
 80061b2:	2d0a      	cmp	r5, #10
 80061b4:	d99c      	bls.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 80061b6:	4633      	mov	r3, r6
    nb_pad -= 3;
 80061b8:	3d03      	subs	r5, #3
    *p++ = 0;
 80061ba:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80061be:	2201      	movs	r2, #1
 80061c0:	7072      	strb	r2, [r6, #1]
    memset( p, 0xFF, nb_pad );
 80061c2:	21ff      	movs	r1, #255	; 0xff
 80061c4:	462a      	mov	r2, r5
 80061c6:	4618      	mov	r0, r3
 80061c8:	f008 f94e 	bl	800e468 <memset>
 80061cc:	4603      	mov	r3, r0
    p += nb_pad;
 80061ce:	4428      	add	r0, r5
    *p++ = 0;
 80061d0:	555c      	strb	r4, [r3, r5]
        memcpy( p, hash, hashlen );
 80061d2:	463a      	mov	r2, r7
 80061d4:	4649      	mov	r1, r9
 80061d6:	3001      	adds	r0, #1
 80061d8:	f008 f921 	bl	800e41e <memcpy>
        return( 0 );
 80061dc:	e789      	b.n	80060f2 <rsa_rsassa_pkcs1_v15_encode+0x22>
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80061de:	7034      	strb	r4, [r6, #0]
 80061e0:	3601      	adds	r6, #1
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d1fb      	bne.n	80061de <rsa_rsassa_pkcs1_v15_encode+0x10e>
 80061e6:	e783      	b.n	80060f0 <rsa_rsassa_pkcs1_v15_encode+0x20>
 80061e8:	ffffbf80 	.word	0xffffbf80

080061ec <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80061ee:	f100 0508 	add.w	r5, r0, #8
 80061f2:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80061f4:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80061f6:	4628      	mov	r0, r5
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80061f8:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80061fa:	f7fc fd88 	bl	8002d0e <mbedtls_mpi_size>
 80061fe:	4287      	cmp	r7, r0
 8006200:	d001      	beq.n	8006206 <rsa_check_context.isra.0+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8006202:	4827      	ldr	r0, [pc, #156]	; (80062a0 <rsa_check_context.isra.0+0xb4>)
 8006204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	d8f9      	bhi.n	8006202 <rsa_check_context.isra.0+0x16>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 800620e:	2100      	movs	r1, #0
 8006210:	4628      	mov	r0, r5
 8006212:	f7fc ff44 	bl	800309e <mbedtls_mpi_cmp_int>
 8006216:	2800      	cmp	r0, #0
 8006218:	ddf3      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 800621a:	2100      	movs	r1, #0
 800621c:	4628      	mov	r0, r5
 800621e:	f7fc fd2c 	bl	8002c7a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8006222:	2800      	cmp	r0, #0
 8006224:	d0ed      	beq.n	8006202 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 8006226:	b9f6      	cbnz	r6, 8006266 <rsa_check_context.isra.0+0x7a>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8006228:	2100      	movs	r1, #0
 800622a:	f104 0014 	add.w	r0, r4, #20
 800622e:	f7fc ff36 	bl	800309e <mbedtls_mpi_cmp_int>
 8006232:	2800      	cmp	r0, #0
 8006234:	dde5      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 8006236:	b1a6      	cbz	r6, 8006262 <rsa_check_context.isra.0+0x76>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8006238:	2100      	movs	r1, #0
 800623a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800623e:	f7fc ff2e 	bl	800309e <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8006242:	2800      	cmp	r0, #0
 8006244:	dddd      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8006246:	2100      	movs	r1, #0
 8006248:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800624c:	f7fc ff27 	bl	800309e <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8006250:	2800      	cmp	r0, #0
 8006252:	ddd6      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8006254:	2100      	movs	r1, #0
 8006256:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800625a:	f7fc ff20 	bl	800309e <mbedtls_mpi_cmp_int>
    if( is_priv &&
 800625e:	2800      	cmp	r0, #0
 8006260:	ddcf      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
    return( 0 );
 8006262:	2000      	movs	r0, #0
 8006264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8006266:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 800626a:	2100      	movs	r1, #0
 800626c:	4628      	mov	r0, r5
 800626e:	f7fc ff16 	bl	800309e <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8006272:	2800      	cmp	r0, #0
 8006274:	ddc5      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8006276:	2100      	movs	r1, #0
 8006278:	4628      	mov	r0, r5
 800627a:	f7fc fcfe 	bl	8002c7a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 800627e:	2800      	cmp	r0, #0
 8006280:	d0bf      	beq.n	8006202 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8006282:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8006286:	2100      	movs	r1, #0
 8006288:	4628      	mov	r0, r5
 800628a:	f7fc ff08 	bl	800309e <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 800628e:	2800      	cmp	r0, #0
 8006290:	ddb7      	ble.n	8006202 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8006292:	2100      	movs	r1, #0
 8006294:	4628      	mov	r0, r5
 8006296:	f7fc fcf0 	bl	8002c7a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 800629a:	2800      	cmp	r0, #0
 800629c:	d1c4      	bne.n	8006228 <rsa_check_context.isra.0+0x3c>
 800629e:	e7b0      	b.n	8006202 <rsa_check_context.isra.0+0x16>
 80062a0:	ffffbf80 	.word	0xffffbf80

080062a4 <mbedtls_rsa_import_raw>:
{
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80062ae:	4604      	mov	r4, r0
 80062b0:	4698      	mov	r8, r3
    if( N != NULL )
 80062b2:	b149      	cbz	r1, 80062c8 <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 80062b4:	f100 0908 	add.w	r9, r0, #8
 80062b8:	4648      	mov	r0, r9
 80062ba:	f7fc fd2e 	bl	8002d1a <mbedtls_mpi_read_binary>
 80062be:	b9a0      	cbnz	r0, 80062ea <mbedtls_rsa_import_raw+0x46>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80062c0:	4648      	mov	r0, r9
 80062c2:	f7fc fd24 	bl	8002d0e <mbedtls_mpi_size>
 80062c6:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 80062c8:	f1b8 0f00 	cmp.w	r8, #0
 80062cc:	d105      	bne.n	80062da <mbedtls_rsa_import_raw+0x36>
    if( Q != NULL )
 80062ce:	b987      	cbnz	r7, 80062f2 <mbedtls_rsa_import_raw+0x4e>
    if( D != NULL )
 80062d0:	b9c6      	cbnz	r6, 8006304 <mbedtls_rsa_import_raw+0x60>
    if( E != NULL )
 80062d2:	bb05      	cbnz	r5, 8006316 <mbedtls_rsa_import_raw+0x72>
    return( 0 );
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80062da:	9a08      	ldr	r2, [sp, #32]
 80062dc:	4641      	mov	r1, r8
 80062de:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80062e2:	f7fc fd1a 	bl	8002d1a <mbedtls_mpi_read_binary>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d0f1      	beq.n	80062ce <mbedtls_rsa_import_raw+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80062ea:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 80062ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80062f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f4:	4639      	mov	r1, r7
 80062f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80062fa:	f7fc fd0e 	bl	8002d1a <mbedtls_mpi_read_binary>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d1f3      	bne.n	80062ea <mbedtls_rsa_import_raw+0x46>
 8006302:	e7e5      	b.n	80062d0 <mbedtls_rsa_import_raw+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 8006304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006306:	4631      	mov	r1, r6
 8006308:	f104 0020 	add.w	r0, r4, #32
 800630c:	f7fc fd05 	bl	8002d1a <mbedtls_mpi_read_binary>
 8006310:	2800      	cmp	r0, #0
 8006312:	d1ea      	bne.n	80062ea <mbedtls_rsa_import_raw+0x46>
 8006314:	e7dd      	b.n	80062d2 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 8006316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006318:	4629      	mov	r1, r5
 800631a:	f104 0014 	add.w	r0, r4, #20
 800631e:	f7fc fcfc 	bl	8002d1a <mbedtls_mpi_read_binary>
    if( ret != 0 )
 8006322:	2800      	cmp	r0, #0
 8006324:	d0d6      	beq.n	80062d4 <mbedtls_rsa_import_raw+0x30>
 8006326:	e7e0      	b.n	80062ea <mbedtls_rsa_import_raw+0x46>

08006328 <mbedtls_rsa_complete>:
{
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 800632c:	f100 0908 	add.w	r9, r0, #8
{
 8006330:	b085      	sub	sp, #20
 8006332:	4604      	mov	r4, r0
    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8006334:	2100      	movs	r1, #0
 8006336:	4648      	mov	r0, r9
 8006338:	f7fc feb1 	bl	800309e <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 800633c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8006340:	2100      	movs	r1, #0
    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8006342:	4683      	mov	fp, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8006344:	4630      	mov	r0, r6
 8006346:	f7fc feaa 	bl	800309e <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 800634a:	f104 0738 	add.w	r7, r4, #56	; 0x38
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 800634e:	9003      	str	r0, [sp, #12]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8006350:	2100      	movs	r1, #0
 8006352:	4638      	mov	r0, r7
 8006354:	f7fc fea3 	bl	800309e <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8006358:	f104 0820 	add.w	r8, r4, #32
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 800635c:	9002      	str	r0, [sp, #8]
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 800635e:	2100      	movs	r1, #0
 8006360:	4640      	mov	r0, r8
 8006362:	f7fc fe9c 	bl	800309e <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8006366:	f104 0a14 	add.w	sl, r4, #20
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 800636a:	4605      	mov	r5, r0
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 800636c:	2100      	movs	r1, #0
 800636e:	4650      	mov	r0, sl
 8006370:	f7fc fe95 	bl	800309e <mbedtls_mpi_cmp_int>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8006374:	9a03      	ldr	r2, [sp, #12]
 8006376:	9b02      	ldr	r3, [sp, #8]
 8006378:	b16a      	cbz	r2, 8006396 <mbedtls_rsa_complete+0x6e>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d065      	beq.n	800644a <mbedtls_rsa_complete+0x122>
 800637e:	2d00      	cmp	r5, #0
 8006380:	d05e      	beq.n	8006440 <mbedtls_rsa_complete+0x118>
 8006382:	1c01      	adds	r1, r0, #0
 8006384:	bf18      	it	ne
 8006386:	2101      	movne	r1, #1
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8006388:	f1bb 0f00 	cmp.w	fp, #0
 800638c:	d101      	bne.n	8006392 <mbedtls_rsa_complete+0x6a>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 800638e:	b103      	cbz	r3, 8006392 <mbedtls_rsa_complete+0x6a>
 8006390:	b15d      	cbz	r5, 80063aa <mbedtls_rsa_complete+0x82>
 8006392:	2500      	movs	r5, #0
 8006394:	e00c      	b.n	80063b0 <mbedtls_rsa_complete+0x88>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8006396:	f1bb 0f00 	cmp.w	fp, #0
 800639a:	d003      	beq.n	80063a4 <mbedtls_rsa_complete+0x7c>
 800639c:	b913      	cbnz	r3, 80063a4 <mbedtls_rsa_complete+0x7c>
 800639e:	b1d5      	cbz	r5, 80063d6 <mbedtls_rsa_complete+0xae>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d133      	bne.n	800640c <mbedtls_rsa_complete+0xe4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80063a4:	482b      	ldr	r0, [pc, #172]	; (8006454 <mbedtls_rsa_complete+0x12c>)
 80063a6:	e013      	b.n	80063d0 <mbedtls_rsa_complete+0xa8>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80063a8:	4629      	mov	r1, r5
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80063aa:	1c05      	adds	r5, r0, #0
 80063ac:	bf18      	it	ne
 80063ae:	2501      	movne	r5, #1
    const int is_priv = n_missing || pq_missing || d_missing;
 80063b0:	b9d1      	cbnz	r1, 80063e8 <mbedtls_rsa_complete+0xc0>
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	d0f6      	beq.n	80063a4 <mbedtls_rsa_complete+0x7c>
    if( !have_N && have_P && have_Q )
 80063b6:	f1bb 0f00 	cmp.w	fp, #0
 80063ba:	d11b      	bne.n	80063f4 <mbedtls_rsa_complete+0xcc>
 80063bc:	b1d2      	cbz	r2, 80063f4 <mbedtls_rsa_complete+0xcc>
 80063be:	b1c3      	cbz	r3, 80063f2 <mbedtls_rsa_complete+0xca>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80063c0:	463a      	mov	r2, r7
 80063c2:	4631      	mov	r1, r6
 80063c4:	4648      	mov	r0, r9
 80063c6:	f7fc ff8d 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80063ca:	b1d0      	cbz	r0, 8006402 <mbedtls_rsa_complete+0xda>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80063cc:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 80063d0:	b005      	add	sp, #20
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0e4      	beq.n	80063a4 <mbedtls_rsa_complete+0x7c>
 80063da:	4629      	mov	r1, r5
    return( rsa_check_context( ctx, is_priv, 1 ) );
 80063dc:	4620      	mov	r0, r4
}
 80063de:	b005      	add	sp, #20
 80063e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 80063e4:	f7ff bf02 	b.w	80061ec <rsa_check_context.isra.0>
    if( !have_N && have_P && have_Q )
 80063e8:	f1bb 0f00 	cmp.w	fp, #0
 80063ec:	d101      	bne.n	80063f2 <mbedtls_rsa_complete+0xca>
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	d1e5      	bne.n	80063be <mbedtls_rsa_complete+0x96>
    else if( d_missing )
 80063f2:	b1a5      	cbz	r5, 800641e <mbedtls_rsa_complete+0xf6>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 80063f4:	4643      	mov	r3, r8
 80063f6:	4652      	mov	r2, sl
 80063f8:	4639      	mov	r1, r7
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 fdde 	bl	8006fbc <mbedtls_rsa_deduce_private_exponent>
 8006400:	e00b      	b.n	800641a <mbedtls_rsa_complete+0xf2>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8006402:	4648      	mov	r0, r9
 8006404:	f7fc fc83 	bl	8002d0e <mbedtls_mpi_size>
 8006408:	6060      	str	r0, [r4, #4]
 800640a:	e7f2      	b.n	80063f2 <mbedtls_rsa_complete+0xca>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 800640c:	9700      	str	r7, [sp, #0]
 800640e:	4633      	mov	r3, r6
 8006410:	4642      	mov	r2, r8
 8006412:	4651      	mov	r1, sl
 8006414:	4648      	mov	r0, r9
 8006416:	f000 fcdf 	bl	8006dd8 <mbedtls_rsa_deduce_primes>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 800641a:	2800      	cmp	r0, #0
 800641c:	d1d6      	bne.n	80063cc <mbedtls_rsa_complete+0xa4>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 800641e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4642      	mov	r2, r8
 800642c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006430:	4639      	mov	r1, r7
 8006432:	4630      	mov	r0, r6
 8006434:	f000 ff6a 	bl	800730c <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8006438:	2800      	cmp	r0, #0
 800643a:	d1c7      	bne.n	80063cc <mbedtls_rsa_complete+0xa4>
 800643c:	2101      	movs	r1, #1
 800643e:	e7cd      	b.n	80063dc <mbedtls_rsa_complete+0xb4>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8006440:	f1bb 0f00 	cmp.w	fp, #0
 8006444:	d1b0      	bne.n	80063a8 <mbedtls_rsa_complete+0x80>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8006446:	4659      	mov	r1, fp
 8006448:	e7a1      	b.n	800638e <mbedtls_rsa_complete+0x66>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 800644a:	f1bb 0f00 	cmp.w	fp, #0
 800644e:	d1a9      	bne.n	80063a4 <mbedtls_rsa_complete+0x7c>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8006450:	4659      	mov	r1, fp
 8006452:	e79e      	b.n	8006392 <mbedtls_rsa_complete+0x6a>
 8006454:	ffffbf80 	.word	0xffffbf80

08006458 <mbedtls_rsa_init>:
{
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4604      	mov	r4, r0
 800645c:	460e      	mov	r6, r1
 800645e:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8006460:	2100      	movs	r1, #0
 8006462:	22ac      	movs	r2, #172	; 0xac
 8006464:	f008 f800 	bl	800e468 <memset>
    ctx->padding = padding;
 8006468:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 800646c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8006470:	bd70      	pop	{r4, r5, r6, pc}

08006472 <mbedtls_rsa_get_len>:
}
 8006472:	6840      	ldr	r0, [r0, #4]
 8006474:	4770      	bx	lr
	...

08006478 <mbedtls_rsa_check_pubkey>:
{
 8006478:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 800647a:	2100      	movs	r1, #0
{
 800647c:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 800647e:	f7ff feb5 	bl	80061ec <rsa_check_context.isra.0>
 8006482:	4605      	mov	r5, r0
 8006484:	b9b8      	cbnz	r0, 80064b6 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8006486:	f104 0608 	add.w	r6, r4, #8
 800648a:	4630      	mov	r0, r6
 800648c:	f7fc fc1d 	bl	8002cca <mbedtls_mpi_bitlen>
 8006490:	287f      	cmp	r0, #127	; 0x7f
 8006492:	d910      	bls.n	80064b6 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8006494:	3414      	adds	r4, #20
 8006496:	4629      	mov	r1, r5
 8006498:	4620      	mov	r0, r4
 800649a:	f7fc fbee 	bl	8002c7a <mbedtls_mpi_get_bit>
 800649e:	b150      	cbz	r0, 80064b6 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7fc fc12 	bl	8002cca <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80064a6:	2801      	cmp	r0, #1
 80064a8:	d905      	bls.n	80064b6 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80064aa:	4631      	mov	r1, r6
 80064ac:	4620      	mov	r0, r4
 80064ae:	f7fc fdb0 	bl	8003012 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80064b2:	2800      	cmp	r0, #0
 80064b4:	db00      	blt.n	80064b8 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80064b6:	4d01      	ldr	r5, [pc, #4]	; (80064bc <mbedtls_rsa_check_pubkey+0x44>)
}
 80064b8:	4628      	mov	r0, r5
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	ffffbe00 	.word	0xffffbe00

080064c0 <mbedtls_rsa_check_privkey>:
{
 80064c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c2:	b085      	sub	sp, #20
 80064c4:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80064c6:	f7ff ffd7 	bl	8006478 <mbedtls_rsa_check_pubkey>
 80064ca:	b110      	cbz	r0, 80064d2 <mbedtls_rsa_check_privkey+0x12>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80064cc:	4816      	ldr	r0, [pc, #88]	; (8006528 <mbedtls_rsa_check_privkey+0x68>)
}
 80064ce:	b005      	add	sp, #20
 80064d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 80064d2:	2101      	movs	r1, #1
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fe89 	bl	80061ec <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80064da:	2800      	cmp	r0, #0
 80064dc:	d1f6      	bne.n	80064cc <mbedtls_rsa_check_privkey+0xc>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 80064de:	f104 0314 	add.w	r3, r4, #20
 80064e2:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80064e6:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80064ea:	f104 0720 	add.w	r7, r4, #32
 80064ee:	9002      	str	r0, [sp, #8]
 80064f0:	9001      	str	r0, [sp, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	4629      	mov	r1, r5
 80064fa:	f104 0008 	add.w	r0, r4, #8
 80064fe:	f000 fe3f 	bl	8007180 <mbedtls_rsa_validate_params>
 8006502:	2800      	cmp	r0, #0
 8006504:	d1e2      	bne.n	80064cc <mbedtls_rsa_check_privkey+0xc>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8006506:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	463a      	mov	r2, r7
 8006514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	f000 fdac 	bl	8007078 <mbedtls_rsa_validate_crt>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0d4      	beq.n	80064ce <mbedtls_rsa_check_privkey+0xe>
 8006524:	e7d2      	b.n	80064cc <mbedtls_rsa_check_privkey+0xc>
 8006526:	bf00      	nop
 8006528:	ffffbe00 	.word	0xffffbe00

0800652c <mbedtls_rsa_check_pub_priv>:
{
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8006532:	f7ff ffa1 	bl	8006478 <mbedtls_rsa_check_pubkey>
 8006536:	b988      	cbnz	r0, 800655c <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff ffc1 	bl	80064c0 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 800653e:	b968      	cbnz	r0, 800655c <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8006540:	f104 0108 	add.w	r1, r4, #8
 8006544:	f105 0008 	add.w	r0, r5, #8
 8006548:	f7fc fd63 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 800654c:	b930      	cbnz	r0, 800655c <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 800654e:	f104 0114 	add.w	r1, r4, #20
 8006552:	f105 0014 	add.w	r0, r5, #20
 8006556:	f7fc fd5c 	bl	8003012 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 800655a:	b100      	cbz	r0, 800655e <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 800655c:	4800      	ldr	r0, [pc, #0]	; (8006560 <mbedtls_rsa_check_pub_priv+0x34>)
}
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	ffffbe00 	.word	0xffffbe00

08006564 <mbedtls_rsa_public>:
{
 8006564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006566:	460c      	mov	r4, r1
 8006568:	b087      	sub	sp, #28
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 800656a:	2100      	movs	r1, #0
{
 800656c:	4605      	mov	r5, r0
 800656e:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8006570:	f7ff fe3c 	bl	80061ec <rsa_check_context.isra.0>
 8006574:	bb80      	cbnz	r0, 80065d8 <mbedtls_rsa_public+0x74>
    mbedtls_mpi_init( &T );
 8006576:	a803      	add	r0, sp, #12
 8006578:	f7fc faef 	bl	8002b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 800657c:	4621      	mov	r1, r4
 800657e:	686a      	ldr	r2, [r5, #4]
 8006580:	a803      	add	r0, sp, #12
 8006582:	f7fc fbca 	bl	8002d1a <mbedtls_mpi_read_binary>
 8006586:	4604      	mov	r4, r0
 8006588:	b9d0      	cbnz	r0, 80065c0 <mbedtls_rsa_public+0x5c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 800658a:	f105 0408 	add.w	r4, r5, #8
 800658e:	4621      	mov	r1, r4
 8006590:	a803      	add	r0, sp, #12
 8006592:	f7fc fd3e 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8006596:	2800      	cmp	r0, #0
 8006598:	da1b      	bge.n	80065d2 <mbedtls_rsa_public+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 800659a:	f105 0368 	add.w	r3, r5, #104	; 0x68
 800659e:	a903      	add	r1, sp, #12
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	f105 0214 	add.w	r2, r5, #20
 80065a6:	4623      	mov	r3, r4
 80065a8:	4608      	mov	r0, r1
    olen = ctx->len;
 80065aa:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80065ac:	f7fd f8fc 	bl	80037a8 <mbedtls_mpi_exp_mod>
 80065b0:	4604      	mov	r4, r0
 80065b2:	b928      	cbnz	r0, 80065c0 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80065b4:	463a      	mov	r2, r7
 80065b6:	4631      	mov	r1, r6
 80065b8:	a803      	add	r0, sp, #12
 80065ba:	f7fc fbe4 	bl	8002d86 <mbedtls_mpi_write_binary>
 80065be:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 80065c0:	a803      	add	r0, sp, #12
 80065c2:	f7fc fad1 	bl	8002b68 <mbedtls_mpi_free>
    if( ret != 0 )
 80065c6:	b10c      	cbz	r4, 80065cc <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80065c8:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 80065cc:	4620      	mov	r0, r4
 80065ce:	b007      	add	sp, #28
 80065d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80065d2:	f06f 0403 	mvn.w	r4, #3
 80065d6:	e7f3      	b.n	80065c0 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80065d8:	4c00      	ldr	r4, [pc, #0]	; (80065dc <mbedtls_rsa_public+0x78>)
 80065da:	e7f7      	b.n	80065cc <mbedtls_rsa_public+0x68>
 80065dc:	ffffbf80 	.word	0xffffbf80

080065e0 <mbedtls_rsa_private>:
{
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	460e      	mov	r6, r1
 80065e6:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
 80065e8:	2101      	movs	r1, #1
{
 80065ea:	4604      	mov	r4, r0
 80065ec:	4692      	mov	sl, r2
 80065ee:	461d      	mov	r5, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
 80065f0:	f7ff fdfc 	bl	80061ec <rsa_check_context.isra.0>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f040 81a7 	bne.w	8006948 <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
 80065fa:	a804      	add	r0, sp, #16
 80065fc:	f7fc faad 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 8006600:	a807      	add	r0, sp, #28
 8006602:	f7fc faaa 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8006606:	a80a      	add	r0, sp, #40	; 0x28
 8006608:	f7fc faa7 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 800660c:	a80d      	add	r0, sp, #52	; 0x34
 800660e:	f7fc faa4 	bl	8002b5a <mbedtls_mpi_init>
    if( f_rng != NULL )
 8006612:	b12e      	cbz	r6, 8006620 <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
 8006614:	a816      	add	r0, sp, #88	; 0x58
 8006616:	f7fc faa0 	bl	8002b5a <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 800661a:	a819      	add	r0, sp, #100	; 0x64
 800661c:	f7fc fa9d 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8006620:	a810      	add	r0, sp, #64	; 0x40
 8006622:	f7fc fa9a 	bl	8002b5a <mbedtls_mpi_init>
 8006626:	a813      	add	r0, sp, #76	; 0x4c
 8006628:	f7fc fa97 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 800662c:	a81c      	add	r0, sp, #112	; 0x70
 800662e:	f7fc fa94 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8006632:	a81f      	add	r0, sp, #124	; 0x7c
 8006634:	f7fc fa91 	bl	8002b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8006638:	6862      	ldr	r2, [r4, #4]
 800663a:	4629      	mov	r1, r5
 800663c:	a804      	add	r0, sp, #16
 800663e:	f7fc fb6c 	bl	8002d1a <mbedtls_mpi_read_binary>
 8006642:	4603      	mov	r3, r0
 8006644:	2800      	cmp	r0, #0
 8006646:	f040 814d 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 800664a:	f104 0508 	add.w	r5, r4, #8
 800664e:	4629      	mov	r1, r5
 8006650:	a804      	add	r0, sp, #16
 8006652:	f7fc fcde 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 8006656:	2800      	cmp	r0, #0
 8006658:	f280 816f 	bge.w	800693a <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 800665c:	a904      	add	r1, sp, #16
 800665e:	a81c      	add	r0, sp, #112	; 0x70
 8006660:	f7fc fac5 	bl	8002bee <mbedtls_mpi_copy>
 8006664:	4603      	mov	r3, r0
 8006666:	2800      	cmp	r0, #0
 8006668:	f040 813c 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
 800666c:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8006670:	f104 0850 	add.w	r8, r4, #80	; 0x50
    if( f_rng != NULL )
 8006674:	2e00      	cmp	r6, #0
 8006676:	f000 8090 	beq.w	800679a <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
 800667a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80ee 	beq.w	8006860 <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8006684:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8006688:	463a      	mov	r2, r7
 800668a:	4639      	mov	r1, r7
 800668c:	4638      	mov	r0, r7
 800668e:	f7fc fe29 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 8006692:	4603      	mov	r3, r0
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 8125 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 800669a:	462a      	mov	r2, r5
 800669c:	4639      	mov	r1, r7
 800669e:	4638      	mov	r0, r7
 80066a0:	f7fd f850 	bl	8003744 <mbedtls_mpi_mod_mpi>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f040 811c 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80066ac:	f104 0798 	add.w	r7, r4, #152	; 0x98
 80066b0:	463a      	mov	r2, r7
 80066b2:	4639      	mov	r1, r7
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7fc fe15 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2800      	cmp	r0, #0
 80066be:	f040 8111 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80066c2:	462a      	mov	r2, r5
 80066c4:	4639      	mov	r1, r7
 80066c6:	4638      	mov	r0, r7
 80066c8:	f7fd f83c 	bl	8003744 <mbedtls_mpi_mod_mpi>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80066cc:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f040 8108 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80066d4:	a904      	add	r1, sp, #16
 80066d6:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80066da:	4608      	mov	r0, r1
 80066dc:	f7fc fe02 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f040 80fe 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	462a      	mov	r2, r5
 80066ec:	4608      	mov	r0, r1
 80066ee:	f7fd f829 	bl	8003744 <mbedtls_mpi_mod_mpi>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2800      	cmp	r0, #0
 80066f6:	f040 80f5 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80066fa:	2201      	movs	r2, #1
 80066fc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8006700:	a807      	add	r0, sp, #28
 8006702:	f7fc fdd9 	bl	80032b8 <mbedtls_mpi_sub_int>
 8006706:	4603      	mov	r3, r0
 8006708:	2800      	cmp	r0, #0
 800670a:	f040 80eb 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 800670e:	2201      	movs	r2, #1
 8006710:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006714:	a80a      	add	r0, sp, #40	; 0x28
 8006716:	f7fc fdcf 	bl	80032b8 <mbedtls_mpi_sub_int>
 800671a:	4603      	mov	r3, r0
 800671c:	2800      	cmp	r0, #0
 800671e:	f040 80e1 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8006722:	4653      	mov	r3, sl
 8006724:	4632      	mov	r2, r6
 8006726:	211c      	movs	r1, #28
 8006728:	a80d      	add	r0, sp, #52	; 0x34
 800672a:	f7fd faf8 	bl	8003d1e <mbedtls_mpi_fill_random>
 800672e:	4603      	mov	r3, r0
 8006730:	2800      	cmp	r0, #0
 8006732:	f040 80d7 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8006736:	aa0d      	add	r2, sp, #52	; 0x34
 8006738:	a907      	add	r1, sp, #28
 800673a:	a816      	add	r0, sp, #88	; 0x58
 800673c:	f7fc fdd2 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 8006740:	4603      	mov	r3, r0
 8006742:	2800      	cmp	r0, #0
 8006744:	f040 80ce 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8006748:	a916      	add	r1, sp, #88	; 0x58
 800674a:	464a      	mov	r2, r9
 800674c:	4608      	mov	r0, r1
 800674e:	f7fc fd58 	bl	8003202 <mbedtls_mpi_add_mpi>
 8006752:	4603      	mov	r3, r0
 8006754:	2800      	cmp	r0, #0
 8006756:	f040 80c5 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 800675a:	4653      	mov	r3, sl
 800675c:	4632      	mov	r2, r6
 800675e:	211c      	movs	r1, #28
 8006760:	a80d      	add	r0, sp, #52	; 0x34
 8006762:	f7fd fadc 	bl	8003d1e <mbedtls_mpi_fill_random>
 8006766:	4603      	mov	r3, r0
 8006768:	2800      	cmp	r0, #0
 800676a:	f040 80bb 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 800676e:	aa0d      	add	r2, sp, #52	; 0x34
 8006770:	a90a      	add	r1, sp, #40	; 0x28
 8006772:	a819      	add	r0, sp, #100	; 0x64
 8006774:	f7fc fdb6 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 8006778:	4603      	mov	r3, r0
 800677a:	2800      	cmp	r0, #0
 800677c:	f040 80b2 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8006780:	a919      	add	r1, sp, #100	; 0x64
 8006782:	4642      	mov	r2, r8
 8006784:	4608      	mov	r0, r1
 8006786:	f7fc fd3c 	bl	8003202 <mbedtls_mpi_add_mpi>
 800678a:	4603      	mov	r3, r0
 800678c:	2800      	cmp	r0, #0
 800678e:	f040 80a9 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
 8006792:	f10d 0864 	add.w	r8, sp, #100	; 0x64
        DP = &DP_blind;
 8006796:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 800679a:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800679e:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	464a      	mov	r2, r9
 80067a6:	4653      	mov	r3, sl
 80067a8:	a904      	add	r1, sp, #16
 80067aa:	a810      	add	r0, sp, #64	; 0x40
 80067ac:	f7fc fffc 	bl	80037a8 <mbedtls_mpi_exp_mod>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f040 8096 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80067b8:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80067bc:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4642      	mov	r2, r8
 80067c4:	463b      	mov	r3, r7
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	a813      	add	r0, sp, #76	; 0x4c
 80067ca:	f7fc ffed 	bl	80037a8 <mbedtls_mpi_exp_mod>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f040 8087 	bne.w	80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 80067d6:	aa13      	add	r2, sp, #76	; 0x4c
 80067d8:	a910      	add	r1, sp, #64	; 0x40
 80067da:	a804      	add	r0, sp, #16
 80067dc:	f7fc fd33 	bl	8003246 <mbedtls_mpi_sub_mpi>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d17e      	bne.n	80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80067e6:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80067ea:	a904      	add	r1, sp, #16
 80067ec:	a810      	add	r0, sp, #64	; 0x40
 80067ee:	f7fc fd79 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d175      	bne.n	80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80067f8:	4652      	mov	r2, sl
 80067fa:	a910      	add	r1, sp, #64	; 0x40
 80067fc:	a804      	add	r0, sp, #16
 80067fe:	f7fc ffa1 	bl	8003744 <mbedtls_mpi_mod_mpi>
 8006802:	4603      	mov	r3, r0
 8006804:	2800      	cmp	r0, #0
 8006806:	d16d      	bne.n	80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8006808:	463a      	mov	r2, r7
 800680a:	a904      	add	r1, sp, #16
 800680c:	a810      	add	r0, sp, #64	; 0x40
 800680e:	f7fc fd69 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 8006812:	4603      	mov	r3, r0
 8006814:	2800      	cmp	r0, #0
 8006816:	d165      	bne.n	80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8006818:	aa10      	add	r2, sp, #64	; 0x40
 800681a:	a913      	add	r1, sp, #76	; 0x4c
 800681c:	a804      	add	r0, sp, #16
 800681e:	f7fc fcf0 	bl	8003202 <mbedtls_mpi_add_mpi>
 8006822:	4603      	mov	r3, r0
 8006824:	2800      	cmp	r0, #0
 8006826:	d15d      	bne.n	80068e4 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
 8006828:	2e00      	cmp	r6, #0
 800682a:	d14b      	bne.n	80068c4 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 800682c:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	f104 0214 	add.w	r2, r4, #20
 8006836:	462b      	mov	r3, r5
 8006838:	a904      	add	r1, sp, #16
 800683a:	a81f      	add	r0, sp, #124	; 0x7c
 800683c:	f7fc ffb4 	bl	80037a8 <mbedtls_mpi_exp_mod>
 8006840:	4603      	mov	r3, r0
 8006842:	2800      	cmp	r0, #0
 8006844:	d14e      	bne.n	80068e4 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8006846:	a91c      	add	r1, sp, #112	; 0x70
 8006848:	a81f      	add	r0, sp, #124	; 0x7c
 800684a:	f7fc fbe2 	bl	8003012 <mbedtls_mpi_cmp_mpi>
 800684e:	2800      	cmp	r0, #0
 8006850:	d178      	bne.n	8006944 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8006856:	a804      	add	r0, sp, #16
 8006858:	f7fc fa95 	bl	8002d86 <mbedtls_mpi_write_binary>
 800685c:	4603      	mov	r3, r0
 800685e:	e041      	b.n	80068e4 <mbedtls_rsa_private+0x304>
    if( ctx->Vf.p != NULL )
 8006860:	230c      	movs	r3, #12
 8006862:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8006864:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8006868:	f104 078c 	add.w	r7, r4, #140	; 0x8c
        if( count++ > 10 )
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	3b01      	subs	r3, #1
 8006870:	9303      	str	r3, [sp, #12]
 8006872:	d065      	beq.n	8006940 <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8006874:	6861      	ldr	r1, [r4, #4]
 8006876:	4653      	mov	r3, sl
 8006878:	4632      	mov	r2, r6
 800687a:	3901      	subs	r1, #1
 800687c:	4658      	mov	r0, fp
 800687e:	f7fd fa4e 	bl	8003d1e <mbedtls_mpi_fill_random>
 8006882:	4603      	mov	r3, r0
 8006884:	bb70      	cbnz	r0, 80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8006886:	462a      	mov	r2, r5
 8006888:	4659      	mov	r1, fp
 800688a:	4638      	mov	r0, r7
 800688c:	f7fd f9c3 	bl	8003c16 <mbedtls_mpi_gcd>
 8006890:	4603      	mov	r3, r0
 8006892:	bb38      	cbnz	r0, 80068e4 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8006894:	2101      	movs	r1, #1
 8006896:	4638      	mov	r0, r7
 8006898:	f7fc fc01 	bl	800309e <mbedtls_mpi_cmp_int>
 800689c:	2800      	cmp	r0, #0
 800689e:	d1e5      	bne.n	800686c <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80068a0:	462a      	mov	r2, r5
 80068a2:	4659      	mov	r1, fp
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7fd fa5c 	bl	8003d62 <mbedtls_mpi_inv_mod>
 80068aa:	4603      	mov	r3, r0
 80068ac:	b9d0      	cbnz	r0, 80068e4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80068ae:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	f104 0214 	add.w	r2, r4, #20
 80068b8:	462b      	mov	r3, r5
 80068ba:	4639      	mov	r1, r7
 80068bc:	4638      	mov	r0, r7
 80068be:	f7fc ff73 	bl	80037a8 <mbedtls_mpi_exp_mod>
 80068c2:	e703      	b.n	80066cc <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80068ca:	4608      	mov	r0, r1
 80068cc:	f7fc fd0a 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80068d0:	4603      	mov	r3, r0
 80068d2:	b938      	cbnz	r0, 80068e4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80068d4:	a904      	add	r1, sp, #16
 80068d6:	462a      	mov	r2, r5
 80068d8:	4608      	mov	r0, r1
 80068da:	f7fc ff33 	bl	8003744 <mbedtls_mpi_mod_mpi>
 80068de:	4603      	mov	r3, r0
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d0a3      	beq.n	800682c <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
 80068e4:	a807      	add	r0, sp, #28
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	f7fc f93e 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80068ec:	a80a      	add	r0, sp, #40	; 0x28
 80068ee:	f7fc f93b 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80068f2:	a80d      	add	r0, sp, #52	; 0x34
 80068f4:	f7fc f938 	bl	8002b68 <mbedtls_mpi_free>
    if( f_rng != NULL )
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	b136      	cbz	r6, 800690a <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
 80068fc:	a816      	add	r0, sp, #88	; 0x58
 80068fe:	f7fc f933 	bl	8002b68 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8006902:	a819      	add	r0, sp, #100	; 0x64
 8006904:	f7fc f930 	bl	8002b68 <mbedtls_mpi_free>
 8006908:	9b03      	ldr	r3, [sp, #12]
 800690a:	9303      	str	r3, [sp, #12]
    mbedtls_mpi_free( &T );
 800690c:	a804      	add	r0, sp, #16
 800690e:	f7fc f92b 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8006912:	a810      	add	r0, sp, #64	; 0x40
 8006914:	f7fc f928 	bl	8002b68 <mbedtls_mpi_free>
 8006918:	a813      	add	r0, sp, #76	; 0x4c
 800691a:	f7fc f925 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 800691e:	a81f      	add	r0, sp, #124	; 0x7c
 8006920:	f7fc f922 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8006924:	a81c      	add	r0, sp, #112	; 0x70
 8006926:	f7fc f91f 	bl	8002b68 <mbedtls_mpi_free>
    if( ret != 0 )
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	b10b      	cbz	r3, 8006932 <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 800692e:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 8006932:	4618      	mov	r0, r3
 8006934:	b023      	add	sp, #140	; 0x8c
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800693a:	f06f 0303 	mvn.w	r3, #3
 800693e:	e7d1      	b.n	80068e4 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <mbedtls_rsa_private+0x36c>)
 8006942:	e7cf      	b.n	80068e4 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <mbedtls_rsa_private+0x370>)
 8006946:	e7cd      	b.n	80068e4 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8006948:	4b02      	ldr	r3, [pc, #8]	; (8006954 <mbedtls_rsa_private+0x374>)
 800694a:	e7f2      	b.n	8006932 <mbedtls_rsa_private+0x352>
 800694c:	ffffbb80 	.word	0xffffbb80
 8006950:	ffffbc80 	.word	0xffffbc80
 8006954:	ffffbf80 	.word	0xffffbf80

08006958 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 8006958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 800695e:	f1b9 0f01 	cmp.w	r9, #1
{
 8006962:	4606      	mov	r6, r0
 8006964:	4688      	mov	r8, r1
 8006966:	4693      	mov	fp, r2
 8006968:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800696a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 800696e:	d103      	bne.n	8006978 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
 8006970:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8006974:	2a00      	cmp	r2, #0
 8006976:	d158      	bne.n	8006a2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    if( f_rng == NULL || input == NULL || output == NULL )
 8006978:	f1b8 0f00 	cmp.w	r8, #0
 800697c:	d055      	beq.n	8006a2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d053      	beq.n	8006a2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8006982:	2d00      	cmp	r5, #0
 8006984:	d051      	beq.n	8006a2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8006986:	f117 010b 	adds.w	r1, r7, #11
    olen = ctx->len;
 800698a:	6872      	ldr	r2, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 800698c:	d24d      	bcs.n	8006a2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 800698e:	428a      	cmp	r2, r1
 8006990:	d34b      	bcc.n	8006a2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    *p++ = 0;
 8006992:	4628      	mov	r0, r5
    nb_pad = olen - 3 - ilen;
 8006994:	1bd2      	subs	r2, r2, r7
    *p++ = 0;
 8006996:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 8006998:	3a03      	subs	r2, #3
    *p++ = 0;
 800699a:	f800 1b02 	strb.w	r1, [r0], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	d12f      	bne.n	8006a04 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
        *p++ = MBEDTLS_RSA_CRYPT;
 80069a4:	2102      	movs	r1, #2
 80069a6:	1882      	adds	r2, r0, r2
 80069a8:	4604      	mov	r4, r0
 80069aa:	7069      	strb	r1, [r5, #1]
 80069ac:	9200      	str	r2, [sp, #0]
        while( nb_pad-- > 0 )
 80069ae:	9a00      	ldr	r2, [sp, #0]
 80069b0:	4294      	cmp	r4, r2
 80069b2:	d112      	bne.n	80069da <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    *p++ = 0;
 80069b4:	4620      	mov	r0, r4
 80069b6:	2200      	movs	r2, #0
 80069b8:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 80069bc:	4619      	mov	r1, r3
 80069be:	463a      	mov	r2, r7
 80069c0:	f007 fd2d 	bl	800e41e <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	d125      	bne.n	8006a16 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbe>
 80069ca:	462a      	mov	r2, r5
 80069cc:	4629      	mov	r1, r5
 80069ce:	4630      	mov	r0, r6
}
 80069d0:	b003      	add	sp, #12
 80069d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80069d6:	f7ff bdc5 	b.w	8006564 <mbedtls_rsa_public>
 80069da:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 80069de:	2201      	movs	r2, #1
 80069e0:	4621      	mov	r1, r4
 80069e2:	4658      	mov	r0, fp
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 80069e8:	7822      	ldrb	r2, [r4, #0]
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	b9fa      	cbnz	r2, 8006a2e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
 80069ee:	f1ba 0a01 	subs.w	sl, sl, #1
 80069f2:	d104      	bne.n	80069fe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa6>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80069f4:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 80069f8:	b003      	add	sp, #12
 80069fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } while( *p == 0 && --rng_dl && ret == 0 );
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d0ed      	beq.n	80069de <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x86>
 8006a02:	e7f7      	b.n	80069f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9c>
        *p++ = MBEDTLS_RSA_SIGN;
 8006a04:	2101      	movs	r1, #1
 8006a06:	1884      	adds	r4, r0, r2
 8006a08:	7069      	strb	r1, [r5, #1]
            *p++ = 0xFF;
 8006a0a:	22ff      	movs	r2, #255	; 0xff
        while( nb_pad-- > 0 )
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d0d1      	beq.n	80069b4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
            *p++ = 0xFF;
 8006a10:	f800 2b01 	strb.w	r2, [r0], #1
 8006a14:	e7fa      	b.n	8006a0c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb4>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8006a16:	462b      	mov	r3, r5
 8006a18:	465a      	mov	r2, fp
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	950c      	str	r5, [sp, #48]	; 0x30
}
 8006a20:	b003      	add	sp, #12
 8006a22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8006a26:	f7ff bddb 	b.w	80065e0 <mbedtls_rsa_private>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8006a2a:	4803      	ldr	r0, [pc, #12]	; (8006a38 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8006a2c:	e7e4      	b.n	80069f8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa0>
            if( rng_dl == 0 || ret != 0 )
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d1e0      	bne.n	80069f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9c>
            p++;
 8006a32:	3401      	adds	r4, #1
 8006a34:	e7bb      	b.n	80069ae <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
 8006a36:	bf00      	nop
 8006a38:	ffffbf80 	.word	0xffffbf80

08006a3c <mbedtls_rsa_pkcs1_encrypt>:
{
 8006a3c:	b4f0      	push	{r4, r5, r6, r7}
    switch( ctx->padding )
 8006a3e:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
 8006a42:	b917      	cbnz	r7, 8006a4a <mbedtls_rsa_pkcs1_encrypt+0xe>
}
 8006a44:	bcf0      	pop	{r4, r5, r6, r7}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8006a46:	f7ff bf87 	b.w	8006958 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
}
 8006a4a:	4801      	ldr	r0, [pc, #4]	; (8006a50 <mbedtls_rsa_pkcs1_encrypt+0x14>)
 8006a4c:	bcf0      	pop	{r4, r5, r6, r7}
 8006a4e:	4770      	bx	lr
 8006a50:	ffffbf00 	.word	0xffffbf00

08006a54 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8006a56:	2b01      	cmp	r3, #1
{
 8006a58:	b0c3      	sub	sp, #268	; 0x10c
 8006a5a:	461c      	mov	r4, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8006a5c:	d103      	bne.n	8006a66 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x12>
 8006a5e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d177      	bne.n	8006b56 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
    ilen = ctx->len;
 8006a66:	6846      	ldr	r6, [r0, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 8006a68:	f1a6 0310 	sub.w	r3, r6, #16
 8006a6c:	2bf0      	cmp	r3, #240	; 0xf0
 8006a6e:	d872      	bhi.n	8006b56 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
 8006a70:	ad02      	add	r5, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8006a72:	b9bc      	cbnz	r4, 8006aa4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x50>
 8006a74:	462a      	mov	r2, r5
 8006a76:	9949      	ldr	r1, [sp, #292]	; 0x124
 8006a78:	f7ff fd74 	bl	8006564 <mbedtls_rsa_public>
    if( ret != 0 )
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d13a      	bne.n	8006af6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
    bad |= *p++; /* First byte must be 0 */
 8006a80:	782a      	ldrb	r2, [r5, #0]
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8006a82:	7868      	ldrb	r0, [r5, #1]
    unsigned char *p, bad, pad_done = 0;
 8006a84:	2300      	movs	r3, #0
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8006a86:	f080 0001 	eor.w	r0, r0, #1
 8006a8a:	4310      	orrs	r0, r2
    size_t ilen, pad_count = 0, i;
 8006a8c:	461c      	mov	r4, r3
        for( i = 0; i < ilen - 3; i++ )
 8006a8e:	461a      	mov	r2, r3
 8006a90:	1ef1      	subs	r1, r6, #3
 8006a92:	428a      	cmp	r2, r1
 8006a94:	d34d      	bcc.n	8006b32 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xde>
        p += pad_count;
 8006a96:	f10d 030a 	add.w	r3, sp, #10
 8006a9a:	1919      	adds	r1, r3, r4
        bad |= *p++; /* Must be zero */
 8006a9c:	5d1b      	ldrb	r3, [r3, r4]
 8006a9e:	3101      	adds	r1, #1
 8006aa0:	4318      	orrs	r0, r3
 8006aa2:	e017      	b.n	8006ad4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x80>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8006aa4:	9500      	str	r5, [sp, #0]
 8006aa6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006aa8:	f7ff fd9a 	bl	80065e0 <mbedtls_rsa_private>
    if( ret != 0 )
 8006aac:	bb18      	cbnz	r0, 8006af6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
    if( mode == MBEDTLS_RSA_PRIVATE )
 8006aae:	2c01      	cmp	r4, #1
    bad |= *p++; /* First byte must be 0 */
 8006ab0:	782a      	ldrb	r2, [r5, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 8006ab2:	d1e6      	bne.n	8006a82 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2e>
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8006ab4:	786c      	ldrb	r4, [r5, #1]
 8006ab6:	f084 0402 	eor.w	r4, r4, #2
 8006aba:	4322      	orrs	r2, r4
        for( i = 0; i < ilen - 3; i++ )
 8006abc:	4601      	mov	r1, r0
    size_t ilen, pad_count = 0, i;
 8006abe:	4604      	mov	r4, r0
        for( i = 0; i < ilen - 3; i++ )
 8006ac0:	1ef7      	subs	r7, r6, #3
 8006ac2:	42b9      	cmp	r1, r7
 8006ac4:	d321      	bcc.n	8006b0a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb6>
        p += pad_count;
 8006ac6:	f10d 030a 	add.w	r3, sp, #10
 8006aca:	1919      	adds	r1, r3, r4
        bad |= *p++; /* Must be zero */
 8006acc:	5d1b      	ldrb	r3, [r3, r4]
 8006ace:	3101      	adds	r1, #1
 8006ad0:	ea42 0003 	orr.w	r0, r2, r3
    bad |= ( pad_count < 8 );
 8006ad4:	2c07      	cmp	r4, #7
 8006ad6:	bf98      	it	ls
 8006ad8:	f040 0001 	orrls.w	r0, r0, #1
    if( bad )
 8006adc:	b244      	sxtb	r4, r0
 8006ade:	bba4      	cbnz	r4, 8006b4a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xf6>
    if( ilen - ( p - buf ) > output_max_len )
 8006ae0:	1b4a      	subs	r2, r1, r5
 8006ae2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006ae4:	1ab2      	subs	r2, r6, r2
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d831      	bhi.n	8006b4e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfa>
    *olen = ilen - (p - buf);
 8006aea:	9b48      	ldr	r3, [sp, #288]	; 0x120
    memcpy( output, p, *olen );
 8006aec:	984a      	ldr	r0, [sp, #296]	; 0x128
    *olen = ilen - (p - buf);
 8006aee:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8006af0:	f007 fc95 	bl	800e41e <memcpy>
    ret = 0;
 8006af4:	4620      	mov	r0, r4
 8006af6:	2300      	movs	r3, #0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8006af8:	f240 1201 	movw	r2, #257	; 0x101
 8006afc:	461c      	mov	r4, r3
 8006afe:	18e9      	adds	r1, r5, r3
 8006b00:	3301      	adds	r3, #1
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d125      	bne.n	8006b52 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfe>
}
 8006b06:	b043      	add	sp, #268	; 0x10c
 8006b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8006b0a:	186b      	adds	r3, r5, r1
        for( i = 0; i < ilen - 3; i++ )
 8006b0c:	3101      	adds	r1, #1
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8006b0e:	789b      	ldrb	r3, [r3, #2]
 8006b10:	f1c3 0e00 	rsb	lr, r3, #0
 8006b14:	ea43 030e 	orr.w	r3, r3, lr
 8006b18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	4318      	orrs	r0, r3
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8006b22:	4243      	negs	r3, r0
 8006b24:	4303      	orrs	r3, r0
 8006b26:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b2a:	f083 0301 	eor.w	r3, r3, #1
 8006b2e:	441c      	add	r4, r3
 8006b30:	e7c7      	b.n	8006ac2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x6e>
            pad_done |= ( p[i] != 0xFF );
 8006b32:	18af      	adds	r7, r5, r2
        for( i = 0; i < ilen - 3; i++ )
 8006b34:	3201      	adds	r2, #1
            pad_done |= ( p[i] != 0xFF );
 8006b36:	78bf      	ldrb	r7, [r7, #2]
 8006b38:	2fff      	cmp	r7, #255	; 0xff
 8006b3a:	bf18      	it	ne
 8006b3c:	f043 0301 	orrne.w	r3, r3, #1
            pad_count += ( pad_done == 0 );
 8006b40:	f083 0701 	eor.w	r7, r3, #1
 8006b44:	fa54 f487 	uxtab	r4, r4, r7
 8006b48:	e7a3      	b.n	8006a92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x3e>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8006b4a:	4804      	ldr	r0, [pc, #16]	; (8006b5c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x108>)
 8006b4c:	e7d3      	b.n	8006af6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8006b4e:	4804      	ldr	r0, [pc, #16]	; (8006b60 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>)
 8006b50:	e7d1      	b.n	8006af6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8006b52:	700c      	strb	r4, [r1, #0]
 8006b54:	e7d3      	b.n	8006afe <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xaa>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8006b56:	4803      	ldr	r0, [pc, #12]	; (8006b64 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x110>)
 8006b58:	e7d5      	b.n	8006b06 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
 8006b5a:	bf00      	nop
 8006b5c:	ffffbf00 	.word	0xffffbf00
 8006b60:	ffffbc00 	.word	0xffffbc00
 8006b64:	ffffbf80 	.word	0xffffbf80

08006b68 <mbedtls_rsa_pkcs1_decrypt>:
{
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8006b6a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8006b6e:	f8dd e014 	ldr.w	lr, [sp, #20]
    switch( ctx->padding )
 8006b72:	b91c      	cbnz	r4, 8006b7c <mbedtls_rsa_pkcs1_decrypt+0x14>
}
 8006b74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8006b78:	f7ff bf6c 	b.w	8006a54 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
}
 8006b7c:	4800      	ldr	r0, [pc, #0]	; (8006b80 <mbedtls_rsa_pkcs1_decrypt+0x18>)
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	ffffbf00 	.word	0xffffbf00

08006b84 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8006b84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8006b88:	2b01      	cmp	r3, #1
{
 8006b8a:	4689      	mov	r9, r1
 8006b8c:	a90b      	add	r1, sp, #44	; 0x2c
 8006b8e:	4605      	mov	r5, r0
 8006b90:	4692      	mov	sl, r2
 8006b92:	461e      	mov	r6, r3
 8006b94:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8006b98:	c986      	ldmia	r1, {r1, r2, r7}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8006b9a:	d103      	bne.n	8006ba4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 8006b9c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d14e      	bne.n	8006c42 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbe>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8006ba4:	9700      	str	r7, [sp, #0]
 8006ba6:	686b      	ldr	r3, [r5, #4]
 8006ba8:	f7ff fa92 	bl	80060d0 <rsa_rsassa_pkcs1_v15_encode>
 8006bac:	4604      	mov	r4, r0
 8006bae:	bbd8      	cbnz	r0, 8006c28 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8006bb0:	b93e      	cbnz	r6, 8006bc2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8006bb2:	463a      	mov	r2, r7
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8006bb8:	b002      	add	sp, #8
 8006bba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8006bbe:	f7ff bcd1 	b.w	8006564 <mbedtls_rsa_public>
    sig_try = mbedtls_calloc( 1, ctx->len );
 8006bc2:	686c      	ldr	r4, [r5, #4]
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	f007 fbd8 	bl	800e37c <calloc>
    if( sig_try == NULL )
 8006bcc:	4606      	mov	r6, r0
 8006bce:	b140      	cbz	r0, 8006be2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    verif = mbedtls_calloc( 1, ctx->len );
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f007 fbd2 	bl	800e37c <calloc>
    if( verif == NULL )
 8006bd8:	4680      	mov	r8, r0
 8006bda:	b928      	cbnz	r0, 8006be8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x64>
        mbedtls_free( sig_try );
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f007 fc07 	bl	800e3f0 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8006be2:	f06f 040f 	mvn.w	r4, #15
 8006be6:	e01f      	b.n	8006c28 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8006be8:	9600      	str	r6, [sp, #0]
 8006bea:	463b      	mov	r3, r7
 8006bec:	4652      	mov	r2, sl
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f7ff fcf5 	bl	80065e0 <mbedtls_rsa_private>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	b980      	cbnz	r0, 8006c1c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8006bfa:	4642      	mov	r2, r8
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f7ff fcb0 	bl	8006564 <mbedtls_rsa_public>
 8006c04:	4604      	mov	r4, r0
 8006c06:	b948      	cbnz	r0, 8006c1c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8006c08:	686a      	ldr	r2, [r5, #4]
    unsigned char diff = 0;
 8006c0a:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d10e      	bne.n	8006c30 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xac>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8006c12:	b9a1      	cbnz	r1, 8006c3e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    memcpy( sig, sig_try, ctx->len );
 8006c14:	4631      	mov	r1, r6
 8006c16:	4638      	mov	r0, r7
 8006c18:	f007 fc01 	bl	800e41e <memcpy>
    mbedtls_free( sig_try );
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f007 fbe7 	bl	800e3f0 <free>
    mbedtls_free( verif );
 8006c22:	4640      	mov	r0, r8
 8006c24:	f007 fbe4 	bl	800e3f0 <free>
}
 8006c28:	4620      	mov	r0, r4
 8006c2a:	b002      	add	sp, #8
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        diff |= A[i] ^ B[i];
 8006c30:	f818 0003 	ldrb.w	r0, [r8, r3]
 8006c34:	5cfd      	ldrb	r5, [r7, r3]
 8006c36:	4068      	eors	r0, r5
 8006c38:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	e7e7      	b.n	8006c0e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x8a>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8006c3e:	4c02      	ldr	r4, [pc, #8]	; (8006c48 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc4>)
 8006c40:	e7ec      	b.n	8006c1c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8006c42:	4c02      	ldr	r4, [pc, #8]	; (8006c4c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
 8006c44:	e7f0      	b.n	8006c28 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
 8006c46:	bf00      	nop
 8006c48:	ffffbd00 	.word	0xffffbd00
 8006c4c:	ffffbf80 	.word	0xffffbf80

08006c50 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8006c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8006c52:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8006c56:	f89d e014 	ldrb.w	lr, [sp, #20]
    switch( ctx->padding )
 8006c5a:	b92c      	cbnz	r4, 8006c68 <mbedtls_rsa_pkcs1_sign+0x18>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8006c5c:	f8cd e014 	str.w	lr, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8006c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8006c64:	f7ff bf8e 	b.w	8006b84 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
}
 8006c68:	4800      	ldr	r0, [pc, #0]	; (8006c6c <mbedtls_rsa_pkcs1_sign+0x1c>)
 8006c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6c:	ffffbf00 	.word	0xffffbf00

08006c70 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
{
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8006c70:	2b01      	cmp	r3, #1
{
 8006c72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c76:	4680      	mov	r8, r0
 8006c78:	468a      	mov	sl, r1
 8006c7a:	4693      	mov	fp, r2
 8006c7c:	4699      	mov	r9, r3
    const size_t sig_len = ctx->len;
 8006c7e:	6845      	ldr	r5, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8006c80:	d103      	bne.n	8006c8a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 8006c82:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d152      	bne.n	8006d30 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f007 fb75 	bl	800e37c <calloc>
 8006c92:	4606      	mov	r6, r0
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d04d      	beq.n	8006d34 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f007 fb6e 	bl	800e37c <calloc>
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d049      	beq.n	8006d3a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8006ca6:	9000      	str	r0, [sp, #0]
 8006ca8:	462b      	mov	r3, r5
 8006caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cae:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8006cb2:	f7ff fa0d 	bl	80060d0 <rsa_rsassa_pkcs1_v15_encode>
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	b988      	cbnz	r0, 8006cde <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8006cba:	f1b9 0f00 	cmp.w	r9, #0
 8006cbe:	d112      	bne.n	8006ce6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x76>
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	f7ff fc4d 	bl	8006564 <mbedtls_rsa_public>
 8006cca:	4604      	mov	r4, r0
    if( ret != 0 )
 8006ccc:	b938      	cbnz	r0, 8006cde <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4603      	mov	r3, r0
    for( i = 0; i < n; i++ )
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	d10f      	bne.n	8006cf6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x86>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xd0>)
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	bf18      	it	ne
 8006cdc:	461c      	movne	r4, r3
 8006cde:	1971      	adds	r1, r6, r5
 8006ce0:	4633      	mov	r3, r6
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	e00f      	b.n	8006d06 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x96>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8006ce6:	9600      	str	r6, [sp, #0]
 8006ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cea:	465a      	mov	r2, fp
 8006cec:	4651      	mov	r1, sl
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f7ff fc76 	bl	80065e0 <mbedtls_rsa_private>
 8006cf4:	e7e9      	b.n	8006cca <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        diff |= A[i] ^ B[i];
 8006cf6:	5cf1      	ldrb	r1, [r6, r3]
 8006cf8:	5cf8      	ldrb	r0, [r7, r3]
 8006cfa:	4041      	eors	r1, r0
 8006cfc:	430a      	orrs	r2, r1
    for( i = 0; i < n; i++ )
 8006cfe:	3301      	adds	r3, #1
 8006d00:	e7e7      	b.n	8006cd2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	3301      	adds	r3, #1
 8006d06:	428b      	cmp	r3, r1
 8006d08:	d1fb      	bne.n	8006d02 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x92>
cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
        mbedtls_free( encoded );
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f007 fb70 	bl	800e3f0 <free>
    }

    if( encoded_expected != NULL )
 8006d10:	b13f      	cbz	r7, 8006d22 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
 8006d12:	443d      	add	r5, r7
 8006d14:	463b      	mov	r3, r7
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8006d16:	2200      	movs	r2, #0
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	d106      	bne.n	8006d2a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xba>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f007 fb67 	bl	800e3f0 <free>
    }

    return( ret );
}
 8006d22:	4620      	mov	r0, r4
 8006d24:	b003      	add	sp, #12
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	e7f3      	b.n	8006d18 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8006d30:	4c04      	ldr	r4, [pc, #16]	; (8006d44 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xd4>)
 8006d32:	e7f6      	b.n	8006d22 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8006d34:	f06f 040f 	mvn.w	r4, #15
 8006d38:	e7f3      	b.n	8006d22 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
 8006d3a:	f06f 040f 	mvn.w	r4, #15
 8006d3e:	e7ce      	b.n	8006cde <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 8006d40:	ffffbc80 	.word	0xffffbc80
 8006d44:	ffffbf80 	.word	0xffffbf80

08006d48 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8006d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8006d4a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8006d4e:	f89d e014 	ldrb.w	lr, [sp, #20]
    switch( ctx->padding )
 8006d52:	b92c      	cbnz	r4, 8006d60 <mbedtls_rsa_pkcs1_verify+0x18>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8006d54:	f8cd e014 	str.w	lr, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8006d58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8006d5c:	f7ff bf88 	b.w	8006c70 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
}
 8006d60:	4800      	ldr	r0, [pc, #0]	; (8006d64 <mbedtls_rsa_pkcs1_verify+0x1c>)
 8006d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d64:	ffffbf00 	.word	0xffffbf00

08006d68 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8006d6c:	308c      	adds	r0, #140	; 0x8c
 8006d6e:	f7fb fefb 	bl	8002b68 <mbedtls_mpi_free>
 8006d72:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8006d76:	f7fb fef7 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 8006d7a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d7e:	f7fb fef3 	bl	8002b68 <mbedtls_mpi_free>
 8006d82:	f104 0020 	add.w	r0, r4, #32
 8006d86:	f7fb feef 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 8006d8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006d8e:	f7fb feeb 	bl	8002b68 <mbedtls_mpi_free>
 8006d92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006d96:	f7fb fee7 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8006d9a:	f104 0014 	add.w	r0, r4, #20
 8006d9e:	f7fb fee3 	bl	8002b68 <mbedtls_mpi_free>
 8006da2:	f104 0008 	add.w	r0, r4, #8
 8006da6:	f7fb fedf 	bl	8002b68 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8006daa:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8006dae:	f7fb fedb 	bl	8002b68 <mbedtls_mpi_free>
 8006db2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8006db6:	f7fb fed7 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8006dba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dbe:	f7fb fed3 	bl	8002b68 <mbedtls_mpi_free>
 8006dc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dc6:	f7fb fecf 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8006dca:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8006dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 8006dd2:	f7fb bec9 	b.w	8002b68 <mbedtls_mpi_free>
	...

08006dd8 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	b096      	sub	sp, #88	; 0x58
 8006dde:	461f      	mov	r7, r3
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 8006de0:	4b75      	ldr	r3, [pc, #468]	; (8006fb8 <mbedtls_rsa_deduce_primes+0x1e0>)
{
 8006de2:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006de6:	4615      	mov	r5, r2
 8006de8:	4606      	mov	r6, r0
 8006dea:	4688      	mov	r8, r1
    const unsigned char primes[] = { 2,
 8006dec:	aa08      	add	r2, sp, #32
 8006dee:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
 8006df6:	4614      	mov	r4, r2
 8006df8:	c403      	stmia	r4!, {r0, r1}
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	4573      	cmp	r3, lr
 8006dfe:	4622      	mov	r2, r4
 8006e00:	d1f7      	bne.n	8006df2 <mbedtls_rsa_deduce_primes+0x1a>
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	889b      	ldrh	r3, [r3, #4]
 8006e06:	6020      	str	r0, [r4, #0]
 8006e08:	80a3      	strh	r3, [r4, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8006e0a:	b92f      	cbnz	r7, 8006e18 <mbedtls_rsa_deduce_primes+0x40>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8006e0c:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 8006e10:	4620      	mov	r0, r4
 8006e12:	b016      	add	sp, #88	; 0x58
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	d0f6      	beq.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f3      	bne.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
 8006e24:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d1ef      	bne.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7fc f936 	bl	800309e <mbedtls_mpi_cmp_int>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	ddea      	ble.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8006e36:	2101      	movs	r1, #1
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f7fc f930 	bl	800309e <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	dde4      	ble.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	f7fc f8e4 	bl	8003012 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	dade      	bge.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8006e4e:	2101      	movs	r1, #1
 8006e50:	4640      	mov	r0, r8
 8006e52:	f7fc f924 	bl	800309e <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8006e56:	2800      	cmp	r0, #0
 8006e58:	ddd8      	ble.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	f7fc f8d8 	bl	8003012 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8006e62:	2800      	cmp	r0, #0
 8006e64:	dad2      	bge.n	8006e0c <mbedtls_rsa_deduce_primes+0x34>
    mbedtls_mpi_init( &K );
 8006e66:	a805      	add	r0, sp, #20
 8006e68:	f7fb fe77 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8006e6c:	a802      	add	r0, sp, #8
 8006e6e:	f7fb fe74 	bl	8002b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8006e72:	4642      	mov	r2, r8
 8006e74:	4629      	mov	r1, r5
 8006e76:	a802      	add	r0, sp, #8
 8006e78:	f7fc fa34 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	b980      	cbnz	r0, 8006ea2 <mbedtls_rsa_deduce_primes+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8006e80:	a902      	add	r1, sp, #8
 8006e82:	2201      	movs	r2, #1
 8006e84:	4608      	mov	r0, r1
 8006e86:	f7fc fa17 	bl	80032b8 <mbedtls_mpi_sub_int>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	b948      	cbnz	r0, 8006ea2 <mbedtls_rsa_deduce_primes+0xca>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 8006e8e:	a802      	add	r0, sp, #8
 8006e90:	f7fb ff03 	bl	8002c9a <mbedtls_mpi_lsb>
 8006e94:	fa1f fa80 	uxth.w	sl, r0
 8006e98:	f1ba 0f00 	cmp.w	sl, #0
 8006e9c:	d108      	bne.n	8006eb0 <mbedtls_rsa_deduce_primes+0xd8>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8006e9e:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
 8006ea2:	a805      	add	r0, sp, #20
 8006ea4:	f7fb fe60 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8006ea8:	a802      	add	r0, sp, #8
 8006eaa:	f7fb fe5d 	bl	8002b68 <mbedtls_mpi_free>
    return( ret );
 8006eae:	e7af      	b.n	8006e10 <mbedtls_rsa_deduce_primes+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8006eb0:	b281      	uxth	r1, r0
 8006eb2:	a802      	add	r0, sp, #8
 8006eb4:	f7fb ffd6 	bl	8002e64 <mbedtls_mpi_shift_r>
 8006eb8:	4604      	mov	r4, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d1f1      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
    if( N->p[0] % 8 == 1 )
 8006ebe:	68b3      	ldr	r3, [r6, #8]
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	f005 0507 	and.w	r5, r5, #7
    for( ; attempt < num_primes; ++attempt )
 8006ec6:	1e6b      	subs	r3, r5, #1
 8006ec8:	425d      	negs	r5, r3
 8006eca:	415d      	adcs	r5, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
 8006ecc:	ab16      	add	r3, sp, #88	; 0x58
 8006ece:	442b      	add	r3, r5
 8006ed0:	a805      	add	r0, sp, #20
 8006ed2:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8006ed6:	f7fb feb4 	bl	8002c42 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8006eda:	4632      	mov	r2, r6
 8006edc:	a905      	add	r1, sp, #20
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f7fc fe99 	bl	8003c16 <mbedtls_mpi_gcd>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d1db      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 8006eea:	2101      	movs	r1, #1
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7fc f8d6 	bl	800309e <mbedtls_mpi_cmp_int>
 8006ef2:	b120      	cbz	r0, 8006efe <mbedtls_rsa_deduce_primes+0x126>
    for( ; attempt < num_primes; ++attempt )
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	b2ad      	uxth	r5, r5
 8006ef8:	2d36      	cmp	r5, #54	; 0x36
 8006efa:	d1e7      	bne.n	8006ecc <mbedtls_rsa_deduce_primes+0xf4>
 8006efc:	e7cf      	b.n	8006e9e <mbedtls_rsa_deduce_primes+0xc6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8006efe:	a905      	add	r1, sp, #20
 8006f00:	f8cd 9000 	str.w	r9, [sp]
 8006f04:	4633      	mov	r3, r6
 8006f06:	aa02      	add	r2, sp, #8
 8006f08:	4608      	mov	r0, r1
 8006f0a:	f7fc fc4d 	bl	80037a8 <mbedtls_mpi_exp_mod>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d1c6      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
 8006f14:	f04f 0801 	mov.w	r8, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8006f18:	2101      	movs	r1, #1
 8006f1a:	a805      	add	r0, sp, #20
 8006f1c:	f7fc f8bf 	bl	800309e <mbedtls_mpi_cmp_int>
 8006f20:	b930      	cbnz	r0, 8006f30 <mbedtls_rsa_deduce_primes+0x158>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 8006f22:	2101      	movs	r1, #1
 8006f24:	a805      	add	r0, sp, #20
 8006f26:	f7fc f8ba 	bl	800309e <mbedtls_mpi_cmp_int>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d0e2      	beq.n	8006ef4 <mbedtls_rsa_deduce_primes+0x11c>
 8006f2e:	e7b6      	b.n	8006e9e <mbedtls_rsa_deduce_primes+0xc6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8006f30:	a905      	add	r1, sp, #20
 8006f32:	2201      	movs	r2, #1
 8006f34:	4608      	mov	r0, r1
 8006f36:	f7fc f9a9 	bl	800328c <mbedtls_mpi_add_int>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1b0      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8006f40:	4632      	mov	r2, r6
 8006f42:	a905      	add	r1, sp, #20
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7fc fe66 	bl	8003c16 <mbedtls_mpi_gcd>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1a8      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8006f50:	2101      	movs	r1, #1
 8006f52:	4638      	mov	r0, r7
 8006f54:	f7fc f8a3 	bl	800309e <mbedtls_mpi_cmp_int>
 8006f58:	2801      	cmp	r0, #1
 8006f5a:	d10d      	bne.n	8006f78 <mbedtls_rsa_deduce_primes+0x1a0>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7fc f857 	bl	8003012 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8006f64:	3001      	adds	r0, #1
 8006f66:	d107      	bne.n	8006f78 <mbedtls_rsa_deduce_primes+0x1a0>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 8006f68:	4621      	mov	r1, r4
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f7fc fa34 	bl	80033dc <mbedtls_mpi_div_mpi>
 8006f74:	4604      	mov	r4, r0
 8006f76:	e794      	b.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8006f78:	a905      	add	r1, sp, #20
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	f7fc f99b 	bl	80032b8 <mbedtls_mpi_sub_int>
 8006f82:	4604      	mov	r4, r0
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d18c      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8006f88:	aa05      	add	r2, sp, #20
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fc f9a9 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 8006f92:	4604      	mov	r4, r0
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d184      	bne.n	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8006f98:	a905      	add	r1, sp, #20
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	f7fc fbd1 	bl	8003744 <mbedtls_mpi_mod_mpi>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f47f af7c 	bne.w	8006ea2 <mbedtls_rsa_deduce_primes+0xca>
        for( iter = 1; iter <= order; ++iter )
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	fa1f f888 	uxth.w	r8, r8
 8006fb2:	45c2      	cmp	sl, r8
 8006fb4:	d2b0      	bcs.n	8006f18 <mbedtls_rsa_deduce_primes+0x140>
 8006fb6:	e7b4      	b.n	8006f22 <mbedtls_rsa_deduce_primes+0x14a>
 8006fb8:	0800f85c 	.word	0x0800f85c

08006fbc <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8006fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8006fc8:	461d      	mov	r5, r3
 8006fca:	b92b      	cbnz	r3, 8006fd8 <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8006fcc:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	b006      	add	sp, #24
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc f85f 	bl	800309e <mbedtls_mpi_cmp_int>
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1f2      	bne.n	8006fcc <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f7fc f858 	bl	800309e <mbedtls_mpi_cmp_int>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	ddec      	ble.n	8006fcc <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7fc f852 	bl	800309e <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	dde6      	ble.n	8006fcc <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 8006ffe:	4641      	mov	r1, r8
 8007000:	4630      	mov	r0, r6
 8007002:	f7fc f84c 	bl	800309e <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8007006:	2800      	cmp	r0, #0
 8007008:	d0e0      	beq.n	8006fcc <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
 800700a:	4668      	mov	r0, sp
 800700c:	f7fb fda5 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8007010:	a803      	add	r0, sp, #12
 8007012:	f7fb fda2 	bl	8002b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8007016:	4621      	mov	r1, r4
 8007018:	2201      	movs	r2, #1
 800701a:	4668      	mov	r0, sp
 800701c:	f7fc f94c 	bl	80032b8 <mbedtls_mpi_sub_int>
 8007020:	4604      	mov	r4, r0
 8007022:	bb10      	cbnz	r0, 800706a <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8007024:	2201      	movs	r2, #1
 8007026:	4639      	mov	r1, r7
 8007028:	a803      	add	r0, sp, #12
 800702a:	f7fc f945 	bl	80032b8 <mbedtls_mpi_sub_int>
 800702e:	4604      	mov	r4, r0
 8007030:	b9d8      	cbnz	r0, 800706a <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8007032:	aa03      	add	r2, sp, #12
 8007034:	4669      	mov	r1, sp
 8007036:	4628      	mov	r0, r5
 8007038:	f7fc fded 	bl	8003c16 <mbedtls_mpi_gcd>
 800703c:	4604      	mov	r4, r0
 800703e:	b9a0      	cbnz	r0, 800706a <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8007040:	aa03      	add	r2, sp, #12
 8007042:	4669      	mov	r1, sp
 8007044:	4668      	mov	r0, sp
 8007046:	f7fc f94d 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 800704a:	4604      	mov	r4, r0
 800704c:	b968      	cbnz	r0, 800706a <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 800704e:	4601      	mov	r1, r0
 8007050:	462b      	mov	r3, r5
 8007052:	466a      	mov	r2, sp
 8007054:	4668      	mov	r0, sp
 8007056:	f7fc f9c1 	bl	80033dc <mbedtls_mpi_div_mpi>
 800705a:	4604      	mov	r4, r0
 800705c:	b928      	cbnz	r0, 800706a <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 800705e:	466a      	mov	r2, sp
 8007060:	4631      	mov	r1, r6
 8007062:	4628      	mov	r0, r5
 8007064:	f7fc fe7d 	bl	8003d62 <mbedtls_mpi_inv_mod>
 8007068:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
 800706a:	4668      	mov	r0, sp
 800706c:	f7fb fd7c 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8007070:	a803      	add	r0, sp, #12
 8007072:	f7fb fd79 	bl	8002b68 <mbedtls_mpi_free>
    return( ret );
 8007076:	e7ab      	b.n	8006fd0 <mbedtls_rsa_deduce_private_exponent+0x14>

08007078 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 8007078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800707c:	b087      	sub	sp, #28
 800707e:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 8007080:	4668      	mov	r0, sp
{
 8007082:	4699      	mov	r9, r3
 8007084:	460d      	mov	r5, r1
 8007086:	4690      	mov	r8, r2
 8007088:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800708a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    mbedtls_mpi_init( &K );
 800708c:	f7fb fd65 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8007090:	a803      	add	r0, sp, #12
 8007092:	f7fb fd62 	bl	8002b5a <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 8007096:	f1b9 0f00 	cmp.w	r9, #0
 800709a:	d10d      	bne.n	80070b8 <mbedtls_rsa_validate_crt+0x40>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 800709c:	bb5f      	cbnz	r7, 80070f6 <mbedtls_rsa_validate_crt+0x7e>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 800709e:	2e00      	cmp	r6, #0
 80070a0:	d144      	bne.n	800712c <mbedtls_rsa_validate_crt+0xb4>
{
 80070a2:	2400      	movs	r4, #0
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 80070a4:	4668      	mov	r0, sp
 80070a6:	f7fb fd5f 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80070aa:	a803      	add	r0, sp, #12
 80070ac:	f7fb fd5c 	bl	8002b68 <mbedtls_mpi_free>

    return( ret );
}
 80070b0:	4620      	mov	r0, r4
 80070b2:	b007      	add	sp, #28
 80070b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( P == NULL )
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	d05b      	beq.n	8007174 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80070bc:	2201      	movs	r2, #1
 80070be:	4621      	mov	r1, r4
 80070c0:	4668      	mov	r0, sp
 80070c2:	f7fc f8f9 	bl	80032b8 <mbedtls_mpi_sub_int>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d14b      	bne.n	8007162 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 80070ca:	4642      	mov	r2, r8
 80070cc:	4649      	mov	r1, r9
 80070ce:	a803      	add	r0, sp, #12
 80070d0:	f7fc f8b9 	bl	8003246 <mbedtls_mpi_sub_mpi>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d144      	bne.n	8007162 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80070d8:	a903      	add	r1, sp, #12
 80070da:	466a      	mov	r2, sp
 80070dc:	4608      	mov	r0, r1
 80070de:	f7fc fb31 	bl	8003744 <mbedtls_mpi_mod_mpi>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d13d      	bne.n	8007162 <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80070e6:	4601      	mov	r1, r0
 80070e8:	a803      	add	r0, sp, #12
 80070ea:	f7fb ffd8 	bl	800309e <mbedtls_mpi_cmp_int>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d0d4      	beq.n	800709c <mbedtls_rsa_validate_crt+0x24>
{
 80070f2:	4c21      	ldr	r4, [pc, #132]	; (8007178 <mbedtls_rsa_validate_crt+0x100>)
 80070f4:	e7d6      	b.n	80070a4 <mbedtls_rsa_validate_crt+0x2c>
        if( Q == NULL )
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	d03c      	beq.n	8007174 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80070fa:	2201      	movs	r2, #1
 80070fc:	4629      	mov	r1, r5
 80070fe:	4668      	mov	r0, sp
 8007100:	f7fc f8da 	bl	80032b8 <mbedtls_mpi_sub_int>
 8007104:	bb68      	cbnz	r0, 8007162 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 8007106:	4642      	mov	r2, r8
 8007108:	4639      	mov	r1, r7
 800710a:	a803      	add	r0, sp, #12
 800710c:	f7fc f89b 	bl	8003246 <mbedtls_mpi_sub_mpi>
 8007110:	bb38      	cbnz	r0, 8007162 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8007112:	a903      	add	r1, sp, #12
 8007114:	466a      	mov	r2, sp
 8007116:	4608      	mov	r0, r1
 8007118:	f7fc fb14 	bl	8003744 <mbedtls_mpi_mod_mpi>
 800711c:	bb08      	cbnz	r0, 8007162 <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 800711e:	4601      	mov	r1, r0
 8007120:	a803      	add	r0, sp, #12
 8007122:	f7fb ffbc 	bl	800309e <mbedtls_mpi_cmp_int>
 8007126:	2800      	cmp	r0, #0
 8007128:	d1e3      	bne.n	80070f2 <mbedtls_rsa_validate_crt+0x7a>
 800712a:	e7b8      	b.n	800709e <mbedtls_rsa_validate_crt+0x26>
        if( P == NULL || Q == NULL )
 800712c:	b314      	cbz	r4, 8007174 <mbedtls_rsa_validate_crt+0xfc>
 800712e:	b30d      	cbz	r5, 8007174 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8007130:	462a      	mov	r2, r5
 8007132:	4631      	mov	r1, r6
 8007134:	4668      	mov	r0, sp
 8007136:	f7fc f8d5 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 800713a:	b990      	cbnz	r0, 8007162 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 800713c:	2201      	movs	r2, #1
 800713e:	4669      	mov	r1, sp
 8007140:	4668      	mov	r0, sp
 8007142:	f7fc f8b9 	bl	80032b8 <mbedtls_mpi_sub_int>
 8007146:	b960      	cbnz	r0, 8007162 <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 8007148:	4622      	mov	r2, r4
 800714a:	4669      	mov	r1, sp
 800714c:	4668      	mov	r0, sp
 800714e:	f7fc faf9 	bl	8003744 <mbedtls_mpi_mod_mpi>
 8007152:	b930      	cbnz	r0, 8007162 <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8007154:	4601      	mov	r1, r0
 8007156:	4668      	mov	r0, sp
 8007158:	f7fb ffa1 	bl	800309e <mbedtls_mpi_cmp_int>
 800715c:	2800      	cmp	r0, #0
 800715e:	d1c8      	bne.n	80070f2 <mbedtls_rsa_validate_crt+0x7a>
 8007160:	e79f      	b.n	80070a2 <mbedtls_rsa_validate_crt+0x2a>
    if( ret != 0 &&
 8007162:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 8007166:	d0c4      	beq.n	80070f2 <mbedtls_rsa_validate_crt+0x7a>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 8007168:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 800716c:	d002      	beq.n	8007174 <mbedtls_rsa_validate_crt+0xfc>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 800716e:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 8007172:	e797      	b.n	80070a4 <mbedtls_rsa_validate_crt+0x2c>
{
 8007174:	4c01      	ldr	r4, [pc, #4]	; (800717c <mbedtls_rsa_validate_crt+0x104>)
 8007176:	e795      	b.n	80070a4 <mbedtls_rsa_validate_crt+0x2c>
 8007178:	ffffbe00 	.word	0xffffbe00
 800717c:	ffffbf80 	.word	0xffffbf80

08007180 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8007180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007184:	b087      	sub	sp, #28
 8007186:	4606      	mov	r6, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 8007188:	4668      	mov	r0, sp
{
 800718a:	4688      	mov	r8, r1
 800718c:	4691      	mov	r9, r2
 800718e:	461d      	mov	r5, r3
 8007190:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    mbedtls_mpi_init( &K );
 8007192:	f7fb fce2 	bl	8002b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8007196:	a803      	add	r0, sp, #12
 8007198:	f7fb fcdf 	bl	8002b5a <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 800719c:	f1b8 0f00 	cmp.w	r8, #0
 80071a0:	d046      	beq.n	8007230 <mbedtls_rsa_validate_params+0xb0>
 80071a2:	f1b9 0f00 	cmp.w	r9, #0
 80071a6:	d043      	beq.n	8007230 <mbedtls_rsa_validate_params+0xb0>
 80071a8:	b996      	cbnz	r6, 80071d0 <mbedtls_rsa_validate_params+0x50>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	d14a      	bne.n	8007244 <mbedtls_rsa_validate_params+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80071ae:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 80071b0:	4668      	mov	r0, sp
 80071b2:	f7fb fcd9 	bl	8002b68 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80071b6:	a803      	add	r0, sp, #12
 80071b8:	f7fb fcd6 	bl	8002b68 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80071bc:	b124      	cbz	r4, 80071c8 <mbedtls_rsa_validate_params+0x48>
 80071be:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 80071c2:	d001      	beq.n	80071c8 <mbedtls_rsa_validate_params+0x48>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80071c4:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
 80071c8:	4620      	mov	r0, r4
 80071ca:	b007      	add	sp, #28
 80071cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80071d0:	464a      	mov	r2, r9
 80071d2:	4641      	mov	r1, r8
 80071d4:	4668      	mov	r0, sp
 80071d6:	f7fc f885 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80071da:	4604      	mov	r4, r0
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1e7      	bne.n	80071b0 <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80071e0:	2101      	movs	r1, #1
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7fb ff5b 	bl	800309e <mbedtls_mpi_cmp_int>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	dd1f      	ble.n	800722c <mbedtls_rsa_validate_params+0xac>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 80071ec:	4631      	mov	r1, r6
 80071ee:	4668      	mov	r0, sp
 80071f0:	f7fb ff0f 	bl	8003012 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80071f4:	b9d0      	cbnz	r0, 800722c <mbedtls_rsa_validate_params+0xac>
    if( N != NULL && D != NULL && E != NULL )
 80071f6:	2d00      	cmp	r5, #0
 80071f8:	d0d9      	beq.n	80071ae <mbedtls_rsa_validate_params+0x2e>
 80071fa:	b1e7      	cbz	r7, 8007236 <mbedtls_rsa_validate_params+0xb6>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80071fc:	2101      	movs	r1, #1
 80071fe:	4628      	mov	r0, r5
 8007200:	f7fb ff4d 	bl	800309e <mbedtls_mpi_cmp_int>
 8007204:	2800      	cmp	r0, #0
 8007206:	dd11      	ble.n	800722c <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8007208:	2101      	movs	r1, #1
 800720a:	4638      	mov	r0, r7
 800720c:	f7fb ff47 	bl	800309e <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8007210:	2800      	cmp	r0, #0
 8007212:	dd0b      	ble.n	800722c <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	f7fb fefb 	bl	8003012 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 800721c:	2800      	cmp	r0, #0
 800721e:	da05      	bge.n	800722c <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8007220:	4631      	mov	r1, r6
 8007222:	4638      	mov	r0, r7
 8007224:	f7fb fef5 	bl	8003012 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8007228:	2800      	cmp	r0, #0
 800722a:	db04      	blt.n	8007236 <mbedtls_rsa_validate_params+0xb6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 800722c:	4c36      	ldr	r4, [pc, #216]	; (8007308 <mbedtls_rsa_validate_params+0x188>)
            goto cleanup;
 800722e:	e7bf      	b.n	80071b0 <mbedtls_rsa_validate_params+0x30>
    if( N != NULL && D != NULL && E != NULL )
 8007230:	b10e      	cbz	r6, 8007236 <mbedtls_rsa_validate_params+0xb6>
 8007232:	2d00      	cmp	r5, #0
 8007234:	d1e1      	bne.n	80071fa <mbedtls_rsa_validate_params+0x7a>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8007236:	f1b8 0f00 	cmp.w	r8, #0
 800723a:	d0b8      	beq.n	80071ae <mbedtls_rsa_validate_params+0x2e>
 800723c:	f1b9 0f00 	cmp.w	r9, #0
 8007240:	d0b5      	beq.n	80071ae <mbedtls_rsa_validate_params+0x2e>
 8007242:	e7b2      	b.n	80071aa <mbedtls_rsa_validate_params+0x2a>
 8007244:	2f00      	cmp	r7, #0
 8007246:	d0b2      	beq.n	80071ae <mbedtls_rsa_validate_params+0x2e>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8007248:	2101      	movs	r1, #1
 800724a:	4640      	mov	r0, r8
 800724c:	f7fb ff27 	bl	800309e <mbedtls_mpi_cmp_int>
 8007250:	2800      	cmp	r0, #0
 8007252:	ddeb      	ble.n	800722c <mbedtls_rsa_validate_params+0xac>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 8007254:	2101      	movs	r1, #1
 8007256:	4648      	mov	r0, r9
 8007258:	f7fb ff21 	bl	800309e <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 800725c:	2800      	cmp	r0, #0
 800725e:	dde5      	ble.n	800722c <mbedtls_rsa_validate_params+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8007260:	463a      	mov	r2, r7
 8007262:	4629      	mov	r1, r5
 8007264:	4668      	mov	r0, sp
 8007266:	f7fc f83d 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 800726a:	4604      	mov	r4, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	d19f      	bne.n	80071b0 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8007270:	2201      	movs	r2, #1
 8007272:	4669      	mov	r1, sp
 8007274:	4668      	mov	r0, sp
 8007276:	f7fc f81f 	bl	80032b8 <mbedtls_mpi_sub_int>
 800727a:	4604      	mov	r4, r0
 800727c:	2800      	cmp	r0, #0
 800727e:	d197      	bne.n	80071b0 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 8007280:	2201      	movs	r2, #1
 8007282:	4641      	mov	r1, r8
 8007284:	a803      	add	r0, sp, #12
 8007286:	f7fc f817 	bl	80032b8 <mbedtls_mpi_sub_int>
 800728a:	4604      	mov	r4, r0
 800728c:	2800      	cmp	r0, #0
 800728e:	d18f      	bne.n	80071b0 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8007290:	aa03      	add	r2, sp, #12
 8007292:	4669      	mov	r1, sp
 8007294:	4668      	mov	r0, sp
 8007296:	f7fc fa55 	bl	8003744 <mbedtls_mpi_mod_mpi>
 800729a:	4604      	mov	r4, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	d187      	bne.n	80071b0 <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80072a0:	4601      	mov	r1, r0
 80072a2:	4668      	mov	r0, sp
 80072a4:	f7fb fefb 	bl	800309e <mbedtls_mpi_cmp_int>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1bf      	bne.n	800722c <mbedtls_rsa_validate_params+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80072ac:	463a      	mov	r2, r7
 80072ae:	4629      	mov	r1, r5
 80072b0:	4668      	mov	r0, sp
 80072b2:	f7fc f817 	bl	80032e4 <mbedtls_mpi_mul_mpi>
 80072b6:	4604      	mov	r4, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f47f af79 	bne.w	80071b0 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80072be:	2201      	movs	r2, #1
 80072c0:	4669      	mov	r1, sp
 80072c2:	4668      	mov	r0, sp
 80072c4:	f7fb fff8 	bl	80032b8 <mbedtls_mpi_sub_int>
 80072c8:	4604      	mov	r4, r0
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f47f af70 	bne.w	80071b0 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80072d0:	2201      	movs	r2, #1
 80072d2:	4649      	mov	r1, r9
 80072d4:	a803      	add	r0, sp, #12
 80072d6:	f7fb ffef 	bl	80032b8 <mbedtls_mpi_sub_int>
 80072da:	4604      	mov	r4, r0
 80072dc:	2800      	cmp	r0, #0
 80072de:	f47f af67 	bne.w	80071b0 <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80072e2:	aa03      	add	r2, sp, #12
 80072e4:	4669      	mov	r1, sp
 80072e6:	4668      	mov	r0, sp
 80072e8:	f7fc fa2c 	bl	8003744 <mbedtls_mpi_mod_mpi>
 80072ec:	4604      	mov	r4, r0
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f47f af5e 	bne.w	80071b0 <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80072f4:	4601      	mov	r1, r0
 80072f6:	4668      	mov	r0, sp
 80072f8:	f7fb fed1 	bl	800309e <mbedtls_mpi_cmp_int>
 80072fc:	4604      	mov	r4, r0
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f af56 	beq.w	80071b0 <mbedtls_rsa_validate_params+0x30>
 8007304:	e792      	b.n	800722c <mbedtls_rsa_validate_params+0xac>
 8007306:	bf00      	nop
 8007308:	ffffbe00 	.word	0xffffbe00

0800730c <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 800730c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	4607      	mov	r7, r0
 8007312:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 8007314:	a801      	add	r0, sp, #4
{
 8007316:	460e      	mov	r6, r1
 8007318:	4691      	mov	r9, r2
 800731a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800731e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mbedtls_mpi_init( &K );
 8007320:	f7fb fc1b 	bl	8002b5a <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 8007324:	f1ba 0f00 	cmp.w	sl, #0
 8007328:	d105      	bne.n	8007336 <mbedtls_rsa_deduce_crt+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 800732a:	f1b8 0f00 	cmp.w	r8, #0
 800732e:	d118      	bne.n	8007362 <mbedtls_rsa_deduce_crt+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 8007330:	bb45      	cbnz	r5, 8007384 <mbedtls_rsa_deduce_crt+0x78>
 8007332:	462c      	mov	r4, r5
 8007334:	e00e      	b.n	8007354 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 8007336:	2201      	movs	r2, #1
 8007338:	4639      	mov	r1, r7
 800733a:	a801      	add	r0, sp, #4
 800733c:	f7fb ffbc 	bl	80032b8 <mbedtls_mpi_sub_int>
 8007340:	4604      	mov	r4, r0
 8007342:	b938      	cbnz	r0, 8007354 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8007344:	aa01      	add	r2, sp, #4
 8007346:	4649      	mov	r1, r9
 8007348:	4650      	mov	r0, sl
 800734a:	f7fc f9fb 	bl	8003744 <mbedtls_mpi_mod_mpi>
 800734e:	4604      	mov	r4, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	d0ea      	beq.n	800732a <mbedtls_rsa_deduce_crt+0x1e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
    mbedtls_mpi_free( &K );
 8007354:	a801      	add	r0, sp, #4
 8007356:	f7fb fc07 	bl	8002b68 <mbedtls_mpi_free>

    return( ret );
}
 800735a:	4620      	mov	r0, r4
 800735c:	b004      	add	sp, #16
 800735e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 8007362:	2201      	movs	r2, #1
 8007364:	4631      	mov	r1, r6
 8007366:	a801      	add	r0, sp, #4
 8007368:	f7fb ffa6 	bl	80032b8 <mbedtls_mpi_sub_int>
 800736c:	4604      	mov	r4, r0
 800736e:	2800      	cmp	r0, #0
 8007370:	d1f0      	bne.n	8007354 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8007372:	aa01      	add	r2, sp, #4
 8007374:	4649      	mov	r1, r9
 8007376:	4640      	mov	r0, r8
 8007378:	f7fc f9e4 	bl	8003744 <mbedtls_mpi_mod_mpi>
 800737c:	4604      	mov	r4, r0
 800737e:	2800      	cmp	r0, #0
 8007380:	d0d6      	beq.n	8007330 <mbedtls_rsa_deduce_crt+0x24>
 8007382:	e7e7      	b.n	8007354 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 8007384:	463a      	mov	r2, r7
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	f7fc fcea 	bl	8003d62 <mbedtls_mpi_inv_mod>
 800738e:	4604      	mov	r4, r0
 8007390:	e7e0      	b.n	8007354 <mbedtls_rsa_deduce_crt+0x48>

08007392 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8007392:	226c      	movs	r2, #108	; 0x6c
 8007394:	2100      	movs	r1, #0
 8007396:	f007 b867 	b.w	800e468 <memset>

0800739a <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 800739a:	b120      	cbz	r0, 80073a6 <mbedtls_sha256_free+0xc>
 800739c:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80073a0:	2200      	movs	r2, #0
 80073a2:	4298      	cmp	r0, r3
 80073a4:	d100      	bne.n	80073a8 <mbedtls_sha256_free+0xe>
 80073a6:	4770      	bx	lr
 80073a8:	7002      	strb	r2, [r0, #0]
 80073aa:	3001      	adds	r0, #1
 80073ac:	e7f9      	b.n	80073a2 <mbedtls_sha256_free+0x8>

080073ae <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80073ae:	b508      	push	{r3, lr}
    *dst = *src;
 80073b0:	226c      	movs	r2, #108	; 0x6c
 80073b2:	f007 f834 	bl	800e41e <memcpy>
 80073b6:	bd08      	pop	{r3, pc}

080073b8 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 80073bc:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 80073be:	b9b9      	cbnz	r1, 80073f0 <mbedtls_sha256_starts_ret+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80073c0:	4b18      	ldr	r3, [pc, #96]	; (8007424 <mbedtls_sha256_starts_ret+0x6c>)
 80073c2:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <mbedtls_sha256_starts_ret+0x70>)
 80073c6:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 80073c8:	4b18      	ldr	r3, [pc, #96]	; (800742c <mbedtls_sha256_starts_ret+0x74>)
 80073ca:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 80073cc:	4b18      	ldr	r3, [pc, #96]	; (8007430 <mbedtls_sha256_starts_ret+0x78>)
 80073ce:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 80073d0:	4b18      	ldr	r3, [pc, #96]	; (8007434 <mbedtls_sha256_starts_ret+0x7c>)
 80073d2:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 80073d4:	4b18      	ldr	r3, [pc, #96]	; (8007438 <mbedtls_sha256_starts_ret+0x80>)
 80073d6:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 80073d8:	4b18      	ldr	r3, [pc, #96]	; (800743c <mbedtls_sha256_starts_ret+0x84>)
 80073da:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80073dc:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80073e0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80073e4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 80073e8:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80073ea:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 80073ec:	2000      	movs	r0, #0
 80073ee:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <mbedtls_sha256_starts_ret+0x88>)
 80073f2:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <mbedtls_sha256_starts_ret+0x8c>)
 80073f6:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 80073f8:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 80073fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007400:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8007404:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8007406:	4b10      	ldr	r3, [pc, #64]	; (8007448 <mbedtls_sha256_starts_ret+0x90>)
 8007408:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <mbedtls_sha256_starts_ret+0x94>)
 800740c:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 800740e:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8007412:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8007416:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800741a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 800741c:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <mbedtls_sha256_starts_ret+0x98>)
 800741e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <mbedtls_sha256_starts_ret+0x9c>)
 8007422:	e7e1      	b.n	80073e8 <mbedtls_sha256_starts_ret+0x30>
 8007424:	6a09e667 	.word	0x6a09e667
 8007428:	bb67ae85 	.word	0xbb67ae85
 800742c:	3c6ef372 	.word	0x3c6ef372
 8007430:	a54ff53a 	.word	0xa54ff53a
 8007434:	510e527f 	.word	0x510e527f
 8007438:	9b05688c 	.word	0x9b05688c
 800743c:	1f83d9ab 	.word	0x1f83d9ab
 8007440:	c1059ed8 	.word	0xc1059ed8
 8007444:	367cd507 	.word	0x367cd507
 8007448:	f70e5939 	.word	0xf70e5939
 800744c:	ffc00b31 	.word	0xffc00b31
 8007450:	64f98fa7 	.word	0x64f98fa7
 8007454:	befa4fa4 	.word	0xbefa4fa4

08007458 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b0cf      	sub	sp, #316	; 0x13c
 800745e:	f100 0308 	add.w	r3, r0, #8
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8007466:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8007468:	ac06      	add	r4, sp, #24
 800746a:	f852 0b04 	ldr.w	r0, [r2], #4
 800746e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 8007472:	3301      	adds	r3, #1
 8007474:	2b08      	cmp	r3, #8
 8007476:	d1f7      	bne.n	8007468 <mbedtls_internal_sha256_process+0x10>
 8007478:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 800747a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 800747e:	784b      	ldrb	r3, [r1, #1]
 8007480:	7808      	ldrb	r0, [r1, #0]
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007488:	78c8      	ldrb	r0, [r1, #3]
 800748a:	4303      	orrs	r3, r0
 800748c:	7888      	ldrb	r0, [r1, #2]
 800748e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007492:	f84b 3022 	str.w	r3, [fp, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8007496:	3201      	adds	r2, #1
 8007498:	2a10      	cmp	r2, #16
 800749a:	f101 0104 	add.w	r1, r1, #4
 800749e:	d1ee      	bne.n	800747e <mbedtls_internal_sha256_process+0x26>
 80074a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074a2:	9101      	str	r1, [sp, #4]
 80074a4:	4998      	ldr	r1, [pc, #608]	; (8007708 <mbedtls_internal_sha256_process+0x2b0>)
 80074a6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80074aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074b0:	9b08      	ldr	r3, [sp, #32]
 80074b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80074b4:	9e07      	ldr	r6, [sp, #28]
 80074b6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80074ba:	9102      	str	r1, [sp, #8]
 80074bc:	46de      	mov	lr, fp
 80074be:	460d      	mov	r5, r1

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80074c0:	9901      	ldr	r1, [sp, #4]
 80074c2:	f8de 0000 	ldr.w	r0, [lr]
 80074c6:	ea4f 24f1 	mov.w	r4, r1, ror #11
 80074ca:	ea84 14b1 	eor.w	r4, r4, r1, ror #6
 80074ce:	ea84 6471 	eor.w	r4, r4, r1, ror #25
 80074d2:	6829      	ldr	r1, [r5, #0]
 80074d4:	4401      	add	r1, r0
 80074d6:	9801      	ldr	r0, [sp, #4]
 80074d8:	440c      	add	r4, r1
 80074da:	ea87 010a 	eor.w	r1, r7, sl
 80074de:	4001      	ands	r1, r0
 80074e0:	ea81 010a 	eor.w	r1, r1, sl
 80074e4:	440c      	add	r4, r1
 80074e6:	ea46 0009 	orr.w	r0, r6, r9
 80074ea:	ea4f 3179 	mov.w	r1, r9, ror #13
 80074ee:	44a0      	add	r8, r4
 80074f0:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 80074f4:	ea06 0409 	and.w	r4, r6, r9
 80074f8:	4018      	ands	r0, r3
 80074fa:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80074fe:	4320      	orrs	r0, r4
 8007500:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007502:	686c      	ldr	r4, [r5, #4]
 8007504:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007508:	440c      	add	r4, r1
 800750a:	9901      	ldr	r1, [sp, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800750c:	4442      	add	r2, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800750e:	44a2      	add	sl, r4
 8007510:	ea87 0401 	eor.w	r4, r7, r1
 8007514:	4014      	ands	r4, r2
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8007516:	4480      	add	r8, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007518:	ea84 0007 	eor.w	r0, r4, r7
 800751c:	eb0a 0400 	add.w	r4, sl, r0
 8007520:	ea4f 2af2 	mov.w	sl, r2, ror #11
 8007524:	ea8a 1ab2 	eor.w	sl, sl, r2, ror #6
 8007528:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 800752c:	44a2      	add	sl, r4
 800752e:	ea48 0109 	orr.w	r1, r8, r9
 8007532:	ea4f 3478 	mov.w	r4, r8, ror #13
 8007536:	ea08 0009 	and.w	r0, r8, r9
 800753a:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 800753e:	4031      	ands	r1, r6
 8007540:	4301      	orrs	r1, r0
 8007542:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8007546:	68a8      	ldr	r0, [r5, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007548:	440c      	add	r4, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800754a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800754e:	4408      	add	r0, r1
 8007550:	9901      	ldr	r1, [sp, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007552:	4453      	add	r3, sl
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8007554:	4407      	add	r7, r0
 8007556:	ea82 0001 	eor.w	r0, r2, r1
 800755a:	4018      	ands	r0, r3
 800755c:	ea80 0c01 	eor.w	ip, r0, r1
 8007560:	eb07 000c 	add.w	r0, r7, ip
 8007564:	ea4f 27f3 	mov.w	r7, r3, ror #11
 8007568:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800756c:	4454      	add	r4, sl
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800756e:	ea87 6773 	eor.w	r7, r7, r3, ror #25
 8007572:	4407      	add	r7, r0
 8007574:	ea48 0104 	orr.w	r1, r8, r4
 8007578:	ea4f 3074 	mov.w	r0, r4, ror #13
 800757c:	eb07 0c06 	add.w	ip, r7, r6
 8007580:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8007584:	ea08 0604 	and.w	r6, r8, r4
 8007588:	ea01 0109 	and.w	r1, r1, r9
 800758c:	4331      	orrs	r1, r6
 800758e:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8007592:	f8de 600c 	ldr.w	r6, [lr, #12]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8007596:	4408      	add	r0, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8007598:	68e9      	ldr	r1, [r5, #12]
 800759a:	4431      	add	r1, r6
 800759c:	9e01      	ldr	r6, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800759e:	4438      	add	r0, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80075a0:	ea82 0703 	eor.w	r7, r2, r3
 80075a4:	4431      	add	r1, r6
 80075a6:	ea07 070c 	and.w	r7, r7, ip
 80075aa:	ea4f 26fc 	mov.w	r6, ip, ror #11
 80075ae:	4057      	eors	r7, r2
 80075b0:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 80075b4:	4439      	add	r1, r7
 80075b6:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 80075ba:	440e      	add	r6, r1
 80075bc:	ea44 0700 	orr.w	r7, r4, r0
 80075c0:	ea4f 3170 	mov.w	r1, r0, ror #13
 80075c4:	ea04 0a00 	and.w	sl, r4, r0
 80075c8:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80075cc:	ea07 0708 	and.w	r7, r7, r8
 80075d0:	ea47 070a 	orr.w	r7, r7, sl
 80075d4:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 80075d8:	4439      	add	r1, r7
 80075da:	4431      	add	r1, r6
 80075dc:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80075de:	f8de 7010 	ldr.w	r7, [lr, #16]
 80075e2:	692e      	ldr	r6, [r5, #16]
 80075e4:	ea83 0a0c 	eor.w	sl, r3, ip
 80075e8:	443e      	add	r6, r7
 80075ea:	4432      	add	r2, r6
 80075ec:	ea0a 0a09 	and.w	sl, sl, r9
 80075f0:	ea4f 26f9 	mov.w	r6, r9, ror #11
 80075f4:	ea8a 0a03 	eor.w	sl, sl, r3
 80075f8:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 80075fc:	4452      	add	r2, sl
 80075fe:	ea86 6679 	eor.w	r6, r6, r9, ror #25
 8007602:	4416      	add	r6, r2
 8007604:	ea40 0701 	orr.w	r7, r0, r1
 8007608:	ea4f 3271 	mov.w	r2, r1, ror #13
 800760c:	ea00 0a01 	and.w	sl, r0, r1
 8007610:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8007614:	4027      	ands	r7, r4
 8007616:	ea47 070a 	orr.w	r7, r7, sl
 800761a:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 800761e:	443a      	add	r2, r7
 8007620:	4432      	add	r2, r6
 8007622:	44b0      	add	r8, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8007624:	f8de 7014 	ldr.w	r7, [lr, #20]
 8007628:	696e      	ldr	r6, [r5, #20]
 800762a:	ea8c 0a09 	eor.w	sl, ip, r9
 800762e:	443e      	add	r6, r7
 8007630:	4433      	add	r3, r6
 8007632:	ea0a 0a08 	and.w	sl, sl, r8
 8007636:	ea4f 26f8 	mov.w	r6, r8, ror #11
 800763a:	ea8a 0a0c 	eor.w	sl, sl, ip
 800763e:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 8007642:	4453      	add	r3, sl
 8007644:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8007648:	441e      	add	r6, r3
 800764a:	eb04 0a06 	add.w	sl, r4, r6
 800764e:	ea4f 3372 	mov.w	r3, r2, ror #13
 8007652:	ea41 0402 	orr.w	r4, r1, r2
 8007656:	ea01 0702 	and.w	r7, r1, r2
 800765a:	4004      	ands	r4, r0
 800765c:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 8007660:	433c      	orrs	r4, r7
 8007662:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8007666:	4423      	add	r3, r4
 8007668:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800766a:	69ac      	ldr	r4, [r5, #24]
 800766c:	f8de 6018 	ldr.w	r6, [lr, #24]
 8007670:	ea89 0708 	eor.w	r7, r9, r8
 8007674:	4434      	add	r4, r6
 8007676:	ea07 070a 	and.w	r7, r7, sl
 800767a:	ea4f 26fa 	mov.w	r6, sl, ror #11
 800767e:	ea87 0709 	eor.w	r7, r7, r9
 8007682:	44a4      	add	ip, r4
 8007684:	ea86 16ba 	eor.w	r6, r6, sl, ror #6
 8007688:	44bc      	add	ip, r7
 800768a:	ea86 667a 	eor.w	r6, r6, sl, ror #25
 800768e:	44b4      	add	ip, r6
 8007690:	eb00 070c 	add.w	r7, r0, ip
 8007694:	ea4f 3673 	mov.w	r6, r3, ror #13
 8007698:	ea42 0003 	orr.w	r0, r2, r3
 800769c:	4008      	ands	r0, r1
 800769e:	ea02 0403 	and.w	r4, r2, r3
 80076a2:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 80076a6:	4320      	orrs	r0, r4
 80076a8:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80076ac:	f8de 401c 	ldr.w	r4, [lr, #28]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80076b0:	4406      	add	r6, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80076b2:	69e8      	ldr	r0, [r5, #28]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80076b4:	4466      	add	r6, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80076b6:	4420      	add	r0, r4
 80076b8:	ea88 0c0a 	eor.w	ip, r8, sl
 80076bc:	4481      	add	r9, r0
 80076be:	ea0c 0c07 	and.w	ip, ip, r7
 80076c2:	ea4f 20f7 	mov.w	r0, r7, ror #11
 80076c6:	ea8c 0c08 	eor.w	ip, ip, r8
 80076ca:	ea80 10b7 	eor.w	r0, r0, r7, ror #6
 80076ce:	ea80 6077 	eor.w	r0, r0, r7, ror #25
 80076d2:	44e1      	add	r9, ip
 80076d4:	4481      	add	r9, r0
 80076d6:	4449      	add	r1, r9
 80076d8:	9101      	str	r1, [sp, #4]
 80076da:	ea43 0006 	orr.w	r0, r3, r6
 80076de:	ea4f 3176 	mov.w	r1, r6, ror #13
 80076e2:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 80076e6:	4010      	ands	r0, r2
 80076e8:	ea03 0406 	and.w	r4, r3, r6
 80076ec:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 80076f0:	4320      	orrs	r0, r4
 80076f2:	4408      	add	r0, r1
    for( i = 0; i < 16; i += 8 )
 80076f4:	4905      	ldr	r1, [pc, #20]	; (800770c <mbedtls_internal_sha256_process+0x2b4>)
 80076f6:	3520      	adds	r5, #32
 80076f8:	42a9      	cmp	r1, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80076fa:	4481      	add	r9, r0
 80076fc:	f10e 0e20 	add.w	lr, lr, #32
    for( i = 0; i < 16; i += 8 )
 8007700:	f47f aede 	bne.w	80074c0 <mbedtls_internal_sha256_process+0x68>
 8007704:	e004      	b.n	8007710 <mbedtls_internal_sha256_process+0x2b8>
 8007706:	bf00      	nop
 8007708:	08012938 	.word	0x08012938
 800770c:	08012978 	.word	0x08012978
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8007710:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38
 8007714:	f8db 5004 	ldr.w	r5, [fp, #4]
 8007718:	f8db 0000 	ldr.w	r0, [fp]
 800771c:	ea4f 44f1 	mov.w	r4, r1, ror #19
 8007720:	ea84 4471 	eor.w	r4, r4, r1, ror #17
 8007724:	ea84 2491 	eor.w	r4, r4, r1, lsr #10
 8007728:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 800772c:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 8007730:	4401      	add	r1, r0
 8007732:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 8007736:	ea8e 0ed5 	eor.w	lr, lr, r5, lsr #3
 800773a:	440c      	add	r4, r1
 800773c:	eb04 010e 	add.w	r1, r4, lr
 8007740:	9104      	str	r1, [sp, #16]
 8007742:	9901      	ldr	r1, [sp, #4]
 8007744:	9c01      	ldr	r4, [sp, #4]
 8007746:	ea4f 20f1 	mov.w	r0, r1, ror #11
 800774a:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 800774e:	ea80 6171 	eor.w	r1, r0, r1, ror #25
 8007752:	ea87 000a 	eor.w	r0, r7, sl
 8007756:	4020      	ands	r0, r4
 8007758:	ea80 000a 	eor.w	r0, r0, sl
 800775c:	4408      	add	r0, r1
 800775e:	9902      	ldr	r1, [sp, #8]
 8007760:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007762:	4401      	add	r1, r0
 8007764:	9804      	ldr	r0, [sp, #16]
 8007766:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800776a:	4401      	add	r1, r0
 800776c:	4488      	add	r8, r1
 800776e:	eb08 0c02 	add.w	ip, r8, r2
 8007772:	ea46 0109 	orr.w	r1, r6, r9
 8007776:	ea4f 3279 	mov.w	r2, r9, ror #13
 800777a:	ea06 0009 	and.w	r0, r6, r9
 800777e:	ea82 02b9 	eor.w	r2, r2, r9, ror #2
 8007782:	4019      	ands	r1, r3
 8007784:	ea82 52b9 	eor.w	r2, r2, r9, ror #22
 8007788:	4301      	orrs	r1, r0
 800778a:	4411      	add	r1, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800778c:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 8007790:	f8db 0008 	ldr.w	r0, [fp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8007794:	4488      	add	r8, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8007796:	ea4f 41f2 	mov.w	r1, r2, ror #19
 800779a:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 800779e:	ea81 2192 	eor.w	r1, r1, r2, lsr #10
 80077a2:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80077a6:	442a      	add	r2, r5
 80077a8:	440a      	add	r2, r1
 80077aa:	ea4f 41b0 	mov.w	r1, r0, ror #18
 80077ae:	ea81 11f0 	eor.w	r1, r1, r0, ror #7
 80077b2:	ea81 01d0 	eor.w	r1, r1, r0, lsr #3
 80077b6:	440a      	add	r2, r1
 80077b8:	9902      	ldr	r1, [sp, #8]
 80077ba:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 80077be:	ea87 0504 	eor.w	r5, r7, r4
 80077c2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80077c4:	4454      	add	r4, sl
 80077c6:	18a1      	adds	r1, r4, r2
 80077c8:	ea05 050c 	and.w	r5, r5, ip
 80077cc:	ea4f 24fc 	mov.w	r4, ip, ror #11
 80077d0:	407d      	eors	r5, r7
 80077d2:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 80077d6:	ea84 647c 	eor.w	r4, r4, ip, ror #25
 80077da:	440d      	add	r5, r1
 80077dc:	1961      	adds	r1, r4, r5
 80077de:	eb01 0a03 	add.w	sl, r1, r3
 80077e2:	ea4f 3478 	mov.w	r4, r8, ror #13
 80077e6:	ea48 0309 	orr.w	r3, r8, r9
 80077ea:	ea08 0509 	and.w	r5, r8, r9
 80077ee:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 80077f2:	4033      	ands	r3, r6
 80077f4:	432b      	orrs	r3, r5
 80077f6:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 80077fa:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	f8db 500c 	ldr.w	r5, [fp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8007802:	440c      	add	r4, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8007804:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8007808:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 800780c:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 8007810:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8007814:	4403      	add	r3, r0
 8007816:	ea4f 40b5 	mov.w	r0, r5, ror #18
 800781a:	440b      	add	r3, r1
 800781c:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 8007820:	9902      	ldr	r1, [sp, #8]
 8007822:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 8007826:	4403      	add	r3, r0
 8007828:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800782a:	9901      	ldr	r1, [sp, #4]
 800782c:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
 8007830:	ea8c 0e01 	eor.w	lr, ip, r1
 8007834:	4438      	add	r0, r7
 8007836:	ea0e 0e0a 	and.w	lr, lr, sl
 800783a:	4418      	add	r0, r3
 800783c:	ea8e 0e01 	eor.w	lr, lr, r1
 8007840:	4486      	add	lr, r0
 8007842:	ea4f 20fa 	mov.w	r0, sl, ror #11
 8007846:	ea80 10ba 	eor.w	r0, r0, sl, ror #6
 800784a:	ea80 607a 	eor.w	r0, r0, sl, ror #25
 800784e:	eb00 010e 	add.w	r1, r0, lr
 8007852:	1988      	adds	r0, r1, r6
 8007854:	9003      	str	r0, [sp, #12]
 8007856:	ea4f 3774 	mov.w	r7, r4, ror #13
 800785a:	ea48 0004 	orr.w	r0, r8, r4
 800785e:	ea08 0604 	and.w	r6, r8, r4
 8007862:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 8007866:	ea00 0009 	and.w	r0, r0, r9
 800786a:	ea87 57b4 	eor.w	r7, r7, r4, ror #22
 800786e:	4330      	orrs	r0, r6
 8007870:	4438      	add	r0, r7
 8007872:	4408      	add	r0, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8007874:	ea4f 41f2 	mov.w	r1, r2, ror #19
 8007878:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 800787c:	ea81 2292 	eor.w	r2, r1, r2, lsr #10
 8007880:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
 8007884:	f8db 7010 	ldr.w	r7, [fp, #16]
 8007888:	440d      	add	r5, r1
 800788a:	442a      	add	r2, r5
 800788c:	ea4f 45b7 	mov.w	r5, r7, ror #18
 8007890:	ea85 15f7 	eor.w	r5, r5, r7, ror #7
 8007894:	ea85 05d7 	eor.w	r5, r5, r7, lsr #3
 8007898:	4415      	add	r5, r2
 800789a:	9a02      	ldr	r2, [sp, #8]
 800789c:	9903      	ldr	r1, [sp, #12]
 800789e:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 80078a0:	9a01      	ldr	r2, [sp, #4]
 80078a2:	f8cb 504c 	str.w	r5, [fp, #76]	; 0x4c
 80078a6:	4416      	add	r6, r2
 80078a8:	ea8c 020a 	eor.w	r2, ip, sl
 80078ac:	400a      	ands	r2, r1
 80078ae:	442e      	add	r6, r5
 80078b0:	ea82 020c 	eor.w	r2, r2, ip
 80078b4:	4432      	add	r2, r6
 80078b6:	9e03      	ldr	r6, [sp, #12]
 80078b8:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80078bc:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 80078c0:	ea81 6176 	eor.w	r1, r1, r6, ror #25
 80078c4:	188e      	adds	r6, r1, r2
 80078c6:	ea44 0200 	orr.w	r2, r4, r0
 80078ca:	ea4f 3170 	mov.w	r1, r0, ror #13
 80078ce:	ea04 0e00 	and.w	lr, r4, r0
 80078d2:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80078d6:	ea02 0208 	and.w	r2, r2, r8
 80078da:	ea42 020e 	orr.w	r2, r2, lr
 80078de:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 80078e2:	4411      	add	r1, r2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80078e4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80078e8:	ea82 4273 	eor.w	r2, r2, r3, ror #17
 80078ec:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
 80078f0:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80078f4:	4431      	add	r1, r6
 80078f6:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80078f8:	f8db 6014 	ldr.w	r6, [fp, #20]
 80078fc:	4417      	add	r7, r2
 80078fe:	443b      	add	r3, r7
 8007900:	ea4f 47b6 	mov.w	r7, r6, ror #18
 8007904:	ea87 17f6 	eor.w	r7, r7, r6, ror #7
 8007908:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 800790c:	441f      	add	r7, r3
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	f8cb 7050 	str.w	r7, [fp, #80]	; 0x50
 8007914:	ea8a 0e03 	eor.w	lr, sl, r3
 8007918:	9b02      	ldr	r3, [sp, #8]
 800791a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791c:	ea0e 0e09 	and.w	lr, lr, r9
 8007920:	443b      	add	r3, r7
 8007922:	ea4f 22f9 	mov.w	r2, r9, ror #11
 8007926:	4463      	add	r3, ip
 8007928:	ea8e 0e0a 	eor.w	lr, lr, sl
 800792c:	ea82 12b9 	eor.w	r2, r2, r9, ror #6
 8007930:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 8007934:	449e      	add	lr, r3
 8007936:	eb02 030e 	add.w	r3, r2, lr
 800793a:	ea40 0e01 	orr.w	lr, r0, r1
 800793e:	ea4f 3271 	mov.w	r2, r1, ror #13
 8007942:	ea00 0c01 	and.w	ip, r0, r1
 8007946:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 800794a:	ea0e 0e04 	and.w	lr, lr, r4
 800794e:	ea4e 0e0c 	orr.w	lr, lr, ip
 8007952:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 8007956:	4472      	add	r2, lr
 8007958:	441a      	add	r2, r3
 800795a:	4498      	add	r8, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800795c:	ea4f 43f5 	mov.w	r3, r5, ror #19
 8007960:	ea83 4375 	eor.w	r3, r3, r5, ror #17
 8007964:	f8db e018 	ldr.w	lr, [fp, #24]
 8007968:	ea83 2595 	eor.w	r5, r3, r5, lsr #10
 800796c:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8007970:	441e      	add	r6, r3
 8007972:	ea4f 43be 	mov.w	r3, lr, ror #18
 8007976:	ea83 13fe 	eor.w	r3, r3, lr, ror #7
 800797a:	ea83 03de 	eor.w	r3, r3, lr, lsr #3
 800797e:	4435      	add	r5, r6
 8007980:	441d      	add	r5, r3
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	f8cb 5054 	str.w	r5, [fp, #84]	; 0x54
 8007988:	ea83 0c09 	eor.w	ip, r3, r9
 800798c:	ea0c 0c08 	and.w	ip, ip, r8
 8007990:	ea8c 0c03 	eor.w	ip, ip, r3
 8007994:	9b02      	ldr	r3, [sp, #8]
 8007996:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8007998:	ea4f 23f8 	mov.w	r3, r8, ror #11
 800799c:	442e      	add	r6, r5
 800799e:	4456      	add	r6, sl
 80079a0:	ea83 13b8 	eor.w	r3, r3, r8, ror #6
 80079a4:	44b4      	add	ip, r6
 80079a6:	ea83 6378 	eor.w	r3, r3, r8, ror #25
 80079aa:	eb03 060c 	add.w	r6, r3, ip
 80079ae:	eb04 0a06 	add.w	sl, r4, r6
 80079b2:	ea4f 3372 	mov.w	r3, r2, ror #13
 80079b6:	ea41 0402 	orr.w	r4, r1, r2
 80079ba:	ea01 0c02 	and.w	ip, r1, r2
 80079be:	4004      	ands	r4, r0
 80079c0:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 80079c4:	ea44 040c 	orr.w	r4, r4, ip
 80079c8:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 80079cc:	4423      	add	r3, r4
 80079ce:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80079d0:	ea4f 46f7 	mov.w	r6, r7, ror #19
 80079d4:	ea86 4677 	eor.w	r6, r6, r7, ror #17
 80079d8:	f8db 401c 	ldr.w	r4, [fp, #28]
 80079dc:	ea86 2797 	eor.w	r7, r6, r7, lsr #10
 80079e0:	f8db 603c 	ldr.w	r6, [fp, #60]	; 0x3c
 80079e4:	44b6      	add	lr, r6
 80079e6:	ea4f 46b4 	mov.w	r6, r4, ror #18
 80079ea:	ea86 16f4 	eor.w	r6, r6, r4, ror #7
 80079ee:	ea86 06d4 	eor.w	r6, r6, r4, lsr #3
 80079f2:	4477      	add	r7, lr
 80079f4:	4437      	add	r7, r6
 80079f6:	9e02      	ldr	r6, [sp, #8]
 80079f8:	f8cb 7058 	str.w	r7, [fp, #88]	; 0x58
 80079fc:	6db6      	ldr	r6, [r6, #88]	; 0x58
 80079fe:	ea89 0c08 	eor.w	ip, r9, r8
 8007a02:	eb06 0e07 	add.w	lr, r6, r7
 8007a06:	9e03      	ldr	r6, [sp, #12]
 8007a08:	ea0c 0c0a 	and.w	ip, ip, sl
 8007a0c:	ea8c 0c09 	eor.w	ip, ip, r9
 8007a10:	4476      	add	r6, lr
 8007a12:	4466      	add	r6, ip
 8007a14:	ea4f 2cfa 	mov.w	ip, sl, ror #11
 8007a18:	ea8c 1cba 	eor.w	ip, ip, sl, ror #6
 8007a1c:	ea8c 6c7a 	eor.w	ip, ip, sl, ror #25
 8007a20:	44b4      	add	ip, r6
 8007a22:	eb00 070c 	add.w	r7, r0, ip
 8007a26:	ea4f 3673 	mov.w	r6, r3, ror #13
 8007a2a:	ea42 0003 	orr.w	r0, r2, r3
 8007a2e:	4008      	ands	r0, r1
 8007a30:	ea02 0e03 	and.w	lr, r2, r3
 8007a34:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 8007a38:	ea40 000e 	orr.w	r0, r0, lr
 8007a3c:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
 8007a40:	4406      	add	r6, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8007a42:	ea4f 40f5 	mov.w	r0, r5, ror #19
 8007a46:	ea80 4075 	eor.w	r0, r0, r5, ror #17
 8007a4a:	f8db e020 	ldr.w	lr, [fp, #32]
 8007a4e:	ea80 2595 	eor.w	r5, r0, r5, lsr #10
 8007a52:	9804      	ldr	r0, [sp, #16]
 8007a54:	4404      	add	r4, r0
 8007a56:	ea4f 40be 	mov.w	r0, lr, ror #18
 8007a5a:	ea80 10fe 	eor.w	r0, r0, lr, ror #7
 8007a5e:	ea80 0ede 	eor.w	lr, r0, lr, lsr #3
 8007a62:	9802      	ldr	r0, [sp, #8]
 8007a64:	4425      	add	r5, r4
 8007a66:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8007a68:	4475      	add	r5, lr
 8007a6a:	ea88 040a 	eor.w	r4, r8, sl
 8007a6e:	4428      	add	r0, r5
 8007a70:	403c      	ands	r4, r7
 8007a72:	4481      	add	r9, r0
 8007a74:	ea84 0408 	eor.w	r4, r4, r8
 8007a78:	444c      	add	r4, r9
 8007a7a:	ea4f 29f7 	mov.w	r9, r7, ror #11
 8007a7e:	ea89 19b7 	eor.w	r9, r9, r7, ror #6
 8007a82:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 8007a86:	44a1      	add	r9, r4
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8007a88:	4466      	add	r6, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8007a8a:	4449      	add	r1, r9
 8007a8c:	9101      	str	r1, [sp, #4]
 8007a8e:	ea43 0006 	orr.w	r0, r3, r6
 8007a92:	ea4f 3176 	mov.w	r1, r6, ror #13
 8007a96:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 8007a9a:	4010      	ands	r0, r2
 8007a9c:	ea03 0406 	and.w	r4, r3, r6
 8007aa0:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 8007aa4:	4320      	orrs	r0, r4
 8007aa6:	4401      	add	r1, r0
 8007aa8:	4489      	add	r9, r1
 8007aaa:	9902      	ldr	r1, [sp, #8]
 8007aac:	f8cb 505c 	str.w	r5, [fp, #92]	; 0x5c
 8007ab0:	3120      	adds	r1, #32
 8007ab2:	9102      	str	r1, [sp, #8]
 8007ab4:	f10b 0b20 	add.w	fp, fp, #32
    for( i = 16; i < 64; i += 8 )
 8007ab8:	a93e      	add	r1, sp, #248	; 0xf8
 8007aba:	4559      	cmp	r1, fp
 8007abc:	f47f ae28 	bne.w	8007710 <mbedtls_internal_sha256_process+0x2b8>
 8007ac0:	9901      	ldr	r1, [sp, #4]
 8007ac2:	9308      	str	r3, [sp, #32]
 8007ac4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8007ac8:	910a      	str	r1, [sp, #40]	; 0x28
 8007aca:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007ace:	970b      	str	r7, [sp, #44]	; 0x2c
 8007ad0:	f8cd 9018 	str.w	r9, [sp, #24]
 8007ad4:	9607      	str	r6, [sp, #28]
 8007ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad8:	2300      	movs	r3, #0
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8007ada:	9a05      	ldr	r2, [sp, #20]
 8007adc:	a906      	add	r1, sp, #24
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	9905      	ldr	r1, [sp, #20]
    for( i = 0; i < 8; i++ )
 8007ae8:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8007aea:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
 8007aee:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 8007af0:	9105      	str	r1, [sp, #20]
    for( i = 0; i < 8; i++ )
 8007af2:	d1f2      	bne.n	8007ada <mbedtls_internal_sha256_process+0x682>

    return( 0 );
}
 8007af4:	2000      	movs	r0, #0
 8007af6:	b04f      	add	sp, #316	; 0x13c
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007afc <mbedtls_sha256_update_ret.part.0>:
    uint32_t left;

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8007afc:	6803      	ldr	r3, [r0, #0]
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	4605      	mov	r5, r0
    left = ctx->total[0] & 0x3F;
 8007b04:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8007b08:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8007b0a:	429a      	cmp	r2, r3
    ctx->total[0] += (uint32_t) ilen;
 8007b0c:	602b      	str	r3, [r5, #0]
        ctx->total[1]++;
 8007b0e:	bf84      	itt	hi
 8007b10:	686b      	ldrhi	r3, [r5, #4]
 8007b12:	3301      	addhi	r3, #1
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
 8007b14:	460f      	mov	r7, r1
 8007b16:	4614      	mov	r4, r2
        ctx->total[1]++;
 8007b18:	bf88      	it	hi
 8007b1a:	606b      	strhi	r3, [r5, #4]

    if( left && ilen >= fill )
 8007b1c:	b308      	cbz	r0, 8007b62 <mbedtls_sha256_update_ret.part.0+0x66>
    fill = 64 - left;
 8007b1e:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
    if( left && ilen >= fill )
 8007b22:	4296      	cmp	r6, r2
 8007b24:	d813      	bhi.n	8007b4e <mbedtls_sha256_update_ret.part.0+0x52>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8007b26:	f105 0828 	add.w	r8, r5, #40	; 0x28
 8007b2a:	4632      	mov	r2, r6
 8007b2c:	4440      	add	r0, r8
 8007b2e:	f006 fc76 	bl	800e41e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8007b32:	4641      	mov	r1, r8
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7ff fc8f 	bl	8007458 <mbedtls_internal_sha256_process>
 8007b3a:	b9d8      	cbnz	r0, 8007b74 <mbedtls_sha256_update_ret.part.0+0x78>
            return( ret );

        input += fill;
 8007b3c:	4437      	add	r7, r6
        ilen  -= fill;
 8007b3e:	1ba6      	subs	r6, r4, r6
    if( left && ilen >= fill )
 8007b40:	4634      	mov	r4, r6
 8007b42:	1b31      	subs	r1, r6, r4
        left = 0;
    }

    while( ilen >= 64 )
 8007b44:	2c3f      	cmp	r4, #63	; 0x3f
 8007b46:	4439      	add	r1, r7
 8007b48:	d80d      	bhi.n	8007b66 <mbedtls_sha256_update_ret.part.0+0x6a>
 8007b4a:	460f      	mov	r7, r1
 8007b4c:	2000      	movs	r0, #0

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 8007b4e:	b184      	cbz	r4, 8007b72 <mbedtls_sha256_update_ret.part.0+0x76>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8007b50:	3528      	adds	r5, #40	; 0x28
 8007b52:	4622      	mov	r2, r4
 8007b54:	4639      	mov	r1, r7
 8007b56:	4428      	add	r0, r5
 8007b58:	f006 fc61 	bl	800e41e <memcpy>

    return( 0 );
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( left && ilen >= fill )
 8007b62:	4616      	mov	r6, r2
 8007b64:	e7ec      	b.n	8007b40 <mbedtls_sha256_update_ret.part.0+0x44>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8007b66:	4628      	mov	r0, r5
 8007b68:	f7ff fc76 	bl	8007458 <mbedtls_internal_sha256_process>
 8007b6c:	b910      	cbnz	r0, 8007b74 <mbedtls_sha256_update_ret.part.0+0x78>
        ilen  -= 64;
 8007b6e:	3c40      	subs	r4, #64	; 0x40
 8007b70:	e7e7      	b.n	8007b42 <mbedtls_sha256_update_ret.part.0+0x46>
    return( 0 );
 8007b72:	4620      	mov	r0, r4
}
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b78 <mbedtls_sha256_update_ret>:
    if( ilen == 0 )
 8007b78:	b10a      	cbz	r2, 8007b7e <mbedtls_sha256_update_ret+0x6>
 8007b7a:	f7ff bfbf 	b.w	8007afc <mbedtls_sha256_update_ret.part.0>
}
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4770      	bx	lr
	...

08007b84 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8007b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 8007b86:	6802      	ldr	r2, [r0, #0]
{
 8007b88:	460d      	mov	r5, r1
         | ( ctx->total[1] <<  3 );
 8007b8a:	6841      	ldr	r1, [r0, #4]
    high = ( ctx->total[0] >> 29 )
 8007b8c:	0f53      	lsrs	r3, r2, #29
 8007b8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
{
 8007b92:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8007b94:	0e18      	lsrs	r0, r3, #24
    low  = ( ctx->total[0] <<  3 );
 8007b96:	00d1      	lsls	r1, r2, #3
    PUT_UINT32_BE( high, msglen, 0 );
 8007b98:	f88d 0000 	strb.w	r0, [sp]
 8007b9c:	0c18      	lsrs	r0, r3, #16
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8007b9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    PUT_UINT32_BE( high, msglen, 0 );
 8007ba2:	f88d 0001 	strb.w	r0, [sp, #1]
 8007ba6:	f88d 3003 	strb.w	r3, [sp, #3]
 8007baa:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( low,  msglen, 4 );
 8007bac:	0e0b      	lsrs	r3, r1, #24
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8007bae:	2a37      	cmp	r2, #55	; 0x37
    PUT_UINT32_BE( low,  msglen, 4 );
 8007bb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8007bb4:	ea4f 4311 	mov.w	r3, r1, lsr #16
    PUT_UINT32_BE( high, msglen, 0 );
 8007bb8:	f88d 0002 	strb.w	r0, [sp, #2]
    PUT_UINT32_BE( low,  msglen, 4 );
 8007bbc:	f88d 3005 	strb.w	r3, [sp, #5]
 8007bc0:	f88d 1007 	strb.w	r1, [sp, #7]
 8007bc4:	ea4f 2311 	mov.w	r3, r1, lsr #8
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8007bc8:	bf94      	ite	ls
 8007bca:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 8007bce:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 8007bd2:	492e      	ldr	r1, [pc, #184]	; (8007c8c <mbedtls_sha256_finish_ret+0x108>)
    PUT_UINT32_BE( low,  msglen, 4 );
 8007bd4:	f88d 3006 	strb.w	r3, [sp, #6]
    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f7ff ffcd 	bl	8007b78 <mbedtls_sha256_update_ret>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d152      	bne.n	8007c88 <mbedtls_sha256_finish_ret+0x104>
 8007be2:	2208      	movs	r2, #8
 8007be4:	4669      	mov	r1, sp
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7ff ff88 	bl	8007afc <mbedtls_sha256_update_ret.part.0>
        return( ret );

    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d14b      	bne.n	8007c88 <mbedtls_sha256_finish_ret+0x104>
        return( ret );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8007bf0:	7ae3      	ldrb	r3, [r4, #11]
 8007bf2:	702b      	strb	r3, [r5, #0]
 8007bf4:	8963      	ldrh	r3, [r4, #10]
 8007bf6:	706b      	strb	r3, [r5, #1]
 8007bf8:	68a3      	ldr	r3, [r4, #8]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	70ab      	strb	r3, [r5, #2]
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8007c02:	7be3      	ldrb	r3, [r4, #15]
 8007c04:	712b      	strb	r3, [r5, #4]
 8007c06:	89e3      	ldrh	r3, [r4, #14]
 8007c08:	716b      	strb	r3, [r5, #5]
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	0a1b      	lsrs	r3, r3, #8
 8007c0e:	71ab      	strb	r3, [r5, #6]
 8007c10:	68e3      	ldr	r3, [r4, #12]
 8007c12:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8007c14:	7ce3      	ldrb	r3, [r4, #19]
 8007c16:	722b      	strb	r3, [r5, #8]
 8007c18:	8a63      	ldrh	r3, [r4, #18]
 8007c1a:	726b      	strb	r3, [r5, #9]
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	0a1b      	lsrs	r3, r3, #8
 8007c20:	72ab      	strb	r3, [r5, #10]
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8007c26:	7de3      	ldrb	r3, [r4, #23]
 8007c28:	732b      	strb	r3, [r5, #12]
 8007c2a:	8ae3      	ldrh	r3, [r4, #22]
 8007c2c:	736b      	strb	r3, [r5, #13]
 8007c2e:	6963      	ldr	r3, [r4, #20]
 8007c30:	0a1b      	lsrs	r3, r3, #8
 8007c32:	73ab      	strb	r3, [r5, #14]
 8007c34:	6963      	ldr	r3, [r4, #20]
 8007c36:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8007c38:	7ee3      	ldrb	r3, [r4, #27]
 8007c3a:	742b      	strb	r3, [r5, #16]
 8007c3c:	8b63      	ldrh	r3, [r4, #26]
 8007c3e:	746b      	strb	r3, [r5, #17]
 8007c40:	69a3      	ldr	r3, [r4, #24]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	74ab      	strb	r3, [r5, #18]
 8007c46:	69a3      	ldr	r3, [r4, #24]
 8007c48:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8007c4a:	7fe3      	ldrb	r3, [r4, #31]
 8007c4c:	752b      	strb	r3, [r5, #20]
 8007c4e:	8be3      	ldrh	r3, [r4, #30]
 8007c50:	756b      	strb	r3, [r5, #21]
 8007c52:	69e3      	ldr	r3, [r4, #28]
 8007c54:	0a1b      	lsrs	r3, r3, #8
 8007c56:	75ab      	strb	r3, [r5, #22]
 8007c58:	69e3      	ldr	r3, [r4, #28]
 8007c5a:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8007c5c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007c60:	762b      	strb	r3, [r5, #24]
 8007c62:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007c64:	766b      	strb	r3, [r5, #25]
 8007c66:	6a23      	ldr	r3, [r4, #32]
 8007c68:	0a1b      	lsrs	r3, r3, #8
 8007c6a:	76ab      	strb	r3, [r5, #26]
 8007c6c:	6a23      	ldr	r3, [r4, #32]
 8007c6e:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8007c70:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007c72:	b94b      	cbnz	r3, 8007c88 <mbedtls_sha256_finish_ret+0x104>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8007c74:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8007c78:	772b      	strb	r3, [r5, #28]
 8007c7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007c7c:	776b      	strb	r3, [r5, #29]
 8007c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	77ab      	strb	r3, [r5, #30]
 8007c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c86:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 8007c88:	b003      	add	sp, #12
 8007c8a:	bd30      	pop	{r4, r5, pc}
 8007c8c:	08012a38 	.word	0x08012a38

08007c90 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	b09d      	sub	sp, #116	; 0x74
 8007c94:	461f      	mov	r7, r3
 8007c96:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8007c98:	a801      	add	r0, sp, #4
{
 8007c9a:	460e      	mov	r6, r1
 8007c9c:	4614      	mov	r4, r2
    mbedtls_sha256_init( &ctx );
 8007c9e:	f7ff fb78 	bl	8007392 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	a801      	add	r0, sp, #4
 8007ca6:	f7ff fb87 	bl	80073b8 <mbedtls_sha256_starts_ret>
 8007caa:	4601      	mov	r1, r0
 8007cac:	b958      	cbnz	r0, 8007cc6 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	a801      	add	r0, sp, #4
 8007cb4:	f7ff ff60 	bl	8007b78 <mbedtls_sha256_update_ret>
 8007cb8:	4601      	mov	r1, r0
 8007cba:	b920      	cbnz	r0, 8007cc6 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	a801      	add	r0, sp, #4
 8007cc0:	f7ff ff60 	bl	8007b84 <mbedtls_sha256_finish_ret>
 8007cc4:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 8007cc6:	a801      	add	r0, sp, #4
 8007cc8:	f7ff fb67 	bl	800739a <mbedtls_sha256_free>

    return( ret );
}
 8007ccc:	4608      	mov	r0, r1
 8007cce:	b01d      	add	sp, #116	; 0x74
 8007cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007cd4 <mbedtls_ssl_list_ciphersuites>:

#if defined(MBEDTLS_SSL_CIPHERSUITES)
const int *mbedtls_ssl_list_ciphersuites( void )
{
    return( ciphersuite_preference );
}
 8007cd4:	4800      	ldr	r0, [pc, #0]	; (8007cd8 <mbedtls_ssl_list_ciphersuites+0x4>)
 8007cd6:	4770      	bx	lr
 8007cd8:	08012ad8 	.word	0x08012ad8

08007cdc <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	b912      	cbnz	r2, 8007ce8 <mbedtls_ssl_ciphersuite_from_id+0xc>
            return( cur );

        cur++;
    }

    return( NULL );
 8007ce2:	4613      	mov	r3, r2
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	4770      	bx	lr
        if( cur->id == ciphersuite )
 8007ce8:	4282      	cmp	r2, r0
 8007cea:	d0fb      	beq.n	8007ce4 <mbedtls_ssl_ciphersuite_from_id+0x8>
        cur++;
 8007cec:	3320      	adds	r3, #32
 8007cee:	e7f6      	b.n	8007cde <mbedtls_ssl_ciphersuite_from_id+0x2>
 8007cf0:	08012a78 	.word	0x08012a78

08007cf4 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 8007cf4:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 8007cf6:	f7ff fff1 	bl	8007cdc <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 8007cfa:	b108      	cbz	r0, 8007d00 <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 8007cfc:	6840      	ldr	r0, [r0, #4]
 8007cfe:	bd08      	pop	{r3, pc}
        return( "unknown" );
 8007d00:	4800      	ldr	r0, [pc, #0]	; (8007d04 <mbedtls_ssl_get_ciphersuite_name+0x10>)
}
 8007d02:	bd08      	pop	{r3, pc}
 8007d04:	08011659 	.word	0x08011659

08007d08 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8007d08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007d0a:	b10b      	cbz	r3, 8007d10 <mbedtls_ssl_own_key+0x8>
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b913      	cbnz	r3, 8007d16 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 8007d10:	6803      	ldr	r3, [r0, #0]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38

    return( key_cert == NULL ? NULL : key_cert->key );
 8007d14:	b10b      	cbz	r3, 8007d1a <mbedtls_ssl_own_key+0x12>
 8007d16:	6858      	ldr	r0, [r3, #4]
 8007d18:	4770      	bx	lr
 8007d1a:	4618      	mov	r0, r3
}
 8007d1c:	4770      	bx	lr
	...

08007d20 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8007d24:	6843      	ldr	r3, [r0, #4]
 8007d26:	2b10      	cmp	r3, #16
{
 8007d28:	b099      	sub	sp, #100	; 0x64
 8007d2a:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8007d2c:	d05b      	beq.n	8007de6 <mbedtls_ssl_handshake_client_step+0xc6>
 8007d2e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007d30:	2900      	cmp	r1, #0
 8007d32:	d058      	beq.n	8007de6 <mbedtls_ssl_handshake_client_step+0xc6>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    printf("handshake: %d \r\n", ssl->handshake);
 8007d34:	48aa      	ldr	r0, [pc, #680]	; (8007fe0 <mbedtls_ssl_handshake_client_step+0x2c0>)
 8007d36:	f006 fc59 	bl	800e5ec <iprintf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	4ba9      	ldr	r3, [pc, #676]	; (8007fe4 <mbedtls_ssl_handshake_client_step+0x2c4>)
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	4aa9      	ldr	r2, [pc, #676]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007d44:	f640 5308 	movw	r3, #3336	; 0xd08
 8007d48:	2102      	movs	r1, #2
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f7fc fc3a 	bl	80045c4 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8007d50:	4620      	mov	r0, r4
 8007d52:	f001 fc07 	bl	8009564 <mbedtls_ssl_flush_output>
 8007d56:	4605      	mov	r5, r0
 8007d58:	b9c0      	cbnz	r0, 8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	2b0f      	cmp	r3, #15
 8007d5e:	f200 86b3 	bhi.w	8008ac8 <mbedtls_ssl_handshake_client_step+0xda8>
 8007d62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007d66:	0010      	.short	0x0010
 8007d68:	00fe0017 	.word	0x00fe0017
 8007d6c:	039a0395 	.word	0x039a0395
 8007d70:	04d303f9 	.word	0x04d303f9
 8007d74:	051a0516 	.word	0x051a0516
 8007d78:	068f05be 	.word	0x068f05be
 8007d7c:	06970693 	.word	0x06970693
 8007d80:	069f069b 	.word	0x069f069b
 8007d84:	06ac      	.short	0x06ac
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 8007d86:	2201      	movs	r2, #1
 8007d88:	6062      	str	r2, [r4, #4]
            break;
 8007d8a:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	b019      	add	sp, #100	; 0x64
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 8007d94:	4b95      	ldr	r3, [pc, #596]	; (8007fec <mbedtls_ssl_handshake_client_step+0x2cc>)
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	2102      	movs	r1, #2
 8007d9a:	f240 23da 	movw	r3, #730	; 0x2da
 8007d9e:	4a92      	ldr	r2, [pc, #584]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7fc fc0f 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->conf->f_rng == NULL )
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	698b      	ldr	r3, [r1, #24]
 8007daa:	b953      	cbnz	r3, 8007dc2 <mbedtls_ssl_handshake_client_step+0xa2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 8007dac:	4b90      	ldr	r3, [pc, #576]	; (8007ff0 <mbedtls_ssl_handshake_client_step+0x2d0>)
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4a8d      	ldr	r2, [pc, #564]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
        return( MBEDTLS_ERR_SSL_NO_RNG );
 8007db2:	4d90      	ldr	r5, [pc, #576]	; (8007ff4 <mbedtls_ssl_handshake_client_step+0x2d4>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 8007db4:	f240 23de 	movw	r3, #734	; 0x2de
 8007db8:	2101      	movs	r1, #1
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f7fc fc02 	bl	80045c4 <mbedtls_debug_print_msg>
 8007dc0:	e7e4      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
        ssl->major_ver = ssl->conf->min_major_ver;
 8007dc2:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
 8007dc6:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 8007dc8:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
 8007dcc:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
 8007dce:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 8007dd2:	b950      	cbnz	r0, 8007dea <mbedtls_ssl_handshake_client_step+0xca>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 8007dd4:	4b88      	ldr	r3, [pc, #544]	; (8007ff8 <mbedtls_ssl_handshake_client_step+0x2d8>)
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4a83      	ldr	r2, [pc, #524]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007dda:	f240 23ed 	movw	r3, #749	; 0x2ed
 8007dde:	2101      	movs	r1, #1
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7fc fbef 	bl	80045c4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8007de6:	4d85      	ldr	r5, [pc, #532]	; (8007ffc <mbedtls_ssl_handshake_client_step+0x2dc>)
 8007de8:	e7d0      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    buf = ssl->out_msg;
 8007dea:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
                       ssl->conf->transport, p );
 8007dee:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8007df2:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
 8007df6:	f108 0304 	add.w	r3, r8, #4
 8007dfa:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8007dfe:	f003 fb25 	bl	800b44c <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 8007e02:	f898 3005 	ldrb.w	r3, [r8, #5]
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	f898 3004 	ldrb.w	r3, [r8, #4]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	4b7c      	ldr	r3, [pc, #496]	; (8008000 <mbedtls_ssl_handshake_client_step+0x2e0>)
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	4a75      	ldr	r2, [pc, #468]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007e14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e18:	2103      	movs	r1, #3
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7fc fbd2 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 8007e20:	6823      	ldr	r3, [r4, #0]
    unsigned char *p = ssl->handshake->randbytes;
 8007e22:	6b26      	ldr	r6, [r4, #48]	; 0x30
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 8007e24:	699d      	ldr	r5, [r3, #24]
 8007e26:	69d8      	ldr	r0, [r3, #28]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	f106 0188 	add.w	r1, r6, #136	; 0x88
 8007e2e:	47a8      	blx	r5
 8007e30:	4605      	mov	r5, r0
 8007e32:	b950      	cbnz	r0, 8007e4a <mbedtls_ssl_handshake_client_step+0x12a>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	221c      	movs	r2, #28
 8007e38:	699d      	ldr	r5, [r3, #24]
 8007e3a:	69d8      	ldr	r0, [r3, #28]
 8007e3c:	f106 018c 	add.w	r1, r6, #140	; 0x8c
 8007e40:	47a8      	blx	r5
 8007e42:	4605      	mov	r5, r0
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f000 864b 	beq.w	8008ae0 <mbedtls_ssl_handshake_client_step+0xdc0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 8007e4a:	4b6e      	ldr	r3, [pc, #440]	; (8008004 <mbedtls_ssl_handshake_client_step+0x2e4>)
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	9501      	str	r5, [sp, #4]
 8007e50:	f44f 7341 	mov.w	r3, #772	; 0x304
 8007e54:	e063      	b.n	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
        n = 0;
 8007e56:	2600      	movs	r6, #0
 8007e58:	f000 be68 	b.w	8008b2c <mbedtls_ssl_handshake_client_step+0xe0c>
        *p++ = ssl->session_negotiate->id[i];
 8007e5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e5e:	441a      	add	r2, r3
 8007e60:	7b12      	ldrb	r2, [r2, #12]
 8007e62:	54ea      	strb	r2, [r5, r3]
    for( i = 0; i < n; i++ )
 8007e64:	3301      	adds	r3, #1
 8007e66:	f000 be66 	b.w	8008b36 <mbedtls_ssl_handshake_client_step+0xe16>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f7ff ff36 	bl	8007cdc <mbedtls_ssl_ciphersuite_from_id>
        if( ciphersuite_info == NULL )
 8007e70:	b308      	cbz	r0, 8007eb6 <mbedtls_ssl_handshake_client_step+0x196>
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	6901      	ldr	r1, [r0, #16]
 8007e76:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	dc1b      	bgt.n	8007eb6 <mbedtls_ssl_handshake_client_step+0x196>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 8007e7e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 8007e82:	6982      	ldr	r2, [r0, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	db16      	blt.n	8007eb6 <mbedtls_ssl_handshake_client_step+0x196>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 8007e88:	f8d9 3000 	ldr.w	r3, [r9]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	4b5e      	ldr	r3, [pc, #376]	; (8008008 <mbedtls_ssl_handshake_client_step+0x2e8>)
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	465a      	mov	r2, fp
 8007e94:	f240 3382 	movw	r3, #898	; 0x382
 8007e98:	2103      	movs	r1, #3
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f7fc fb92 	bl	80045c4 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 8007ea0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ea4:	121a      	asrs	r2, r3, #8
 8007ea6:	4633      	mov	r3, r6
        n++;
 8007ea8:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 8007eaa:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 8007eae:	f8d9 2000 	ldr.w	r2, [r9]
 8007eb2:	7072      	strb	r2, [r6, #1]
 8007eb4:	461e      	mov	r6, r3
 8007eb6:	f109 0904 	add.w	r9, r9, #4
 8007eba:	f000 be5f 	b.w	8008b7c <mbedtls_ssl_handshake_client_step+0xe5c>
        sig_alg_len += 2;
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	f000 beaa 	b.w	8008c18 <mbedtls_ssl_handshake_client_step+0xef8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 8007ec4:	4b51      	ldr	r3, [pc, #324]	; (800800c <mbedtls_ssl_handshake_client_step+0x2ec>)
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4a47      	ldr	r2, [pc, #284]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007eca:	23cb      	movs	r3, #203	; 0xcb
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f7fc fb78 	bl	80045c4 <mbedtls_debug_print_msg>
    *olen = 0;
 8007ed4:	2500      	movs	r5, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 8007ed6:	4b4e      	ldr	r3, [pc, #312]	; (8008010 <mbedtls_ssl_handshake_client_step+0x2f0>)
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	9501      	str	r5, [sp, #4]
 8007edc:	f240 430f 	movw	r3, #1039	; 0x40f
 8007ee0:	4a41      	ldr	r2, [pc, #260]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007ee2:	2103      	movs	r1, #3
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7fc fb6d 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 8007eea:	bb5d      	cbnz	r5, 8007f44 <mbedtls_ssl_handshake_client_step+0x224>
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8007eec:	1d35      	adds	r5, r6, #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8007eee:	2316      	movs	r3, #22
 8007ef0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8007ef4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = p - buf;
 8007ef8:	eba5 0508 	sub.w	r5, r5, r8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8007efc:	2601      	movs	r6, #1
    ssl->out_msglen  = p - buf;
 8007efe:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8007f02:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 8007f04:	6863      	ldr	r3, [r4, #4]
 8007f06:	4433      	add	r3, r6
 8007f08:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f001 fbba 	bl	8009684 <mbedtls_ssl_write_record>
 8007f10:	4605      	mov	r5, r0
 8007f12:	b1e0      	cbz	r0, 8007f4e <mbedtls_ssl_handshake_client_step+0x22e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8007f14:	4b3f      	ldr	r3, [pc, #252]	; (8008014 <mbedtls_ssl_handshake_client_step+0x2f4>)
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	9001      	str	r0, [sp, #4]
 8007f1a:	f240 4325 	movw	r3, #1061	; 0x425
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 8007f1e:	4a32      	ldr	r2, [pc, #200]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007f20:	2101      	movs	r1, #1
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7fc fb7e 	bl	8004624 <mbedtls_debug_print_ret>
 8007f28:	e730      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
 8007f2a:	9308      	str	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8007f2c:	f003 fa85 	bl	800b43a <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 8007f30:	eb0b 0209 	add.w	r2, fp, r9
 8007f34:	9b08      	ldr	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8007f36:	f80b 0005 	strb.w	r0, [fp, r5]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 8007f3a:	464d      	mov	r5, r9
 8007f3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f40:	f000 be7c 	b.w	8008c3c <mbedtls_ssl_handshake_client_step+0xf1c>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8007f44:	0a2b      	lsrs	r3, r5, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8007f46:	7175      	strb	r5, [r6, #5]
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8007f48:	7133      	strb	r3, [r6, #4]
        p += ext_len;
 8007f4a:	443d      	add	r5, r7
 8007f4c:	e7cf      	b.n	8007eee <mbedtls_ssl_handshake_client_step+0x1ce>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 8007f4e:	4b32      	ldr	r3, [pc, #200]	; (8008018 <mbedtls_ssl_handshake_client_step+0x2f8>)
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	f240 4329 	movw	r3, #1065	; 0x429
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 8007f56:	4a24      	ldr	r2, [pc, #144]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f7fc fb32 	bl	80045c4 <mbedtls_debug_print_msg>
 8007f60:	e714      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 8007f62:	4b2e      	ldr	r3, [pc, #184]	; (800801c <mbedtls_ssl_handshake_client_step+0x2fc>)
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007f68:	f240 53b2 	movw	r3, #1458	; 0x5b2
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7fc fb28 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8007f74:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 8007f76:	6e67      	ldr	r7, [r4, #100]	; 0x64
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8007f78:	f002 f94c 	bl	800a214 <mbedtls_ssl_read_record>
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	b128      	cbz	r0, 8007f8c <mbedtls_ssl_handshake_client_step+0x26c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8007f80:	4b27      	ldr	r3, [pc, #156]	; (8008020 <mbedtls_ssl_handshake_client_step+0x300>)
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	9001      	str	r0, [sp, #4]
 8007f86:	f240 53b9 	movw	r3, #1465	; 0x5b9
 8007f8a:	e7c8      	b.n	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8007f8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007f8e:	2b16      	cmp	r3, #22
 8007f90:	d00f      	beq.n	8007fb2 <mbedtls_ssl_handshake_client_step+0x292>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8007f92:	4b24      	ldr	r3, [pc, #144]	; (8008024 <mbedtls_ssl_handshake_client_step+0x304>)
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	f240 53d3 	movw	r3, #1491	; 0x5d3
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8007f9a:	4a13      	ldr	r2, [pc, #76]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7fc fb10 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8007fa4:	220a      	movs	r2, #10
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 fdfd 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8007fae:	4d1e      	ldr	r5, [pc, #120]	; (8008028 <mbedtls_ssl_handshake_client_step+0x308>)
 8007fb0:	e6ec      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 8007fb2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007fb4:	2b29      	cmp	r3, #41	; 0x29
 8007fb6:	d902      	bls.n	8007fbe <mbedtls_ssl_handshake_client_step+0x29e>
 8007fb8:	783b      	ldrb	r3, [r7, #0]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d038      	beq.n	8008030 <mbedtls_ssl_handshake_client_step+0x310>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8007fbe:	4b19      	ldr	r3, [pc, #100]	; (8008024 <mbedtls_ssl_handshake_client_step+0x304>)
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	f240 53ef 	movw	r3, #1519	; 0x5ef
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8007fc6:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7fc fafa 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8007fd0:	2232      	movs	r2, #50	; 0x32
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f001 fde7 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8007fda:	4d14      	ldr	r5, [pc, #80]	; (800802c <mbedtls_ssl_handshake_client_step+0x30c>)
 8007fdc:	e6d6      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
 8007fde:	bf00      	nop
 8007fe0:	08012b2b 	.word	0x08012b2b
 8007fe4:	08012b65 	.word	0x08012b65
 8007fe8:	08012b3c 	.word	0x08012b3c
 8007fec:	08012b76 	.word	0x08012b76
 8007ff0:	08012b8c 	.word	0x08012b8c
 8007ff4:	ffff8c00 	.word	0xffff8c00
 8007ff8:	08012b9c 	.word	0x08012b9c
 8007ffc:	ffff8f00 	.word	0xffff8f00
 8008000:	08012bf2 	.word	0x08012bf2
 8008004:	0801334a 	.word	0x0801334a
 8008008:	08012c50 	.word	0x08012c50
 800800c:	08011bfb 	.word	0x08011bfb
 8008010:	08012d41 	.word	0x08012d41
 8008014:	08012d6a 	.word	0x08012d6a
 8008018:	08012d83 	.word	0x08012d83
 800801c:	08012d99 	.word	0x08012d99
 8008020:	08012daf 	.word	0x08012daf
 8008024:	08012dc7 	.word	0x08012dc7
 8008028:	ffff8900 	.word	0xffff8900
 800802c:	ffff8680 	.word	0xffff8680
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 8008030:	f107 0a04 	add.w	sl, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 8008034:	9302      	str	r3, [sp, #8]
 8008036:	4bba      	ldr	r3, [pc, #744]	; (8008320 <mbedtls_ssl_handshake_client_step+0x600>)
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4aba      	ldr	r2, [pc, #744]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 800803c:	f8cd a004 	str.w	sl, [sp, #4]
 8008040:	f240 6302 	movw	r3, #1538	; 0x602
 8008044:	2103      	movs	r1, #3
 8008046:	4620      	mov	r0, r4
 8008048:	f7fc fb1a 	bl	8004680 <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 800804c:	4621      	mov	r1, r4
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 800804e:	f104 0008 	add.w	r0, r4, #8
                      ssl->conf->transport, buf + 0 );
 8008052:	f851 3b0c 	ldr.w	r3, [r1], #12
 8008056:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 800805a:	4653      	mov	r3, sl
 800805c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008060:	f003 f9f7 	bl	800b452 <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	68a2      	ldr	r2, [r4, #8]
 8008068:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 800806c:	68e1      	ldr	r1, [r4, #12]
 800806e:	f893 604d 	ldrb.w	r6, [r3, #77]	; 0x4d
 8008072:	4282      	cmp	r2, r0
 8008074:	db09      	blt.n	800808a <mbedtls_ssl_handshake_client_step+0x36a>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8008076:	f893 e04f 	ldrb.w	lr, [r3, #79]	; 0x4f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 800807a:	4571      	cmp	r1, lr
 800807c:	db05      	blt.n	800808a <mbedtls_ssl_handshake_client_step+0x36a>
        ssl->major_ver > ssl->conf->max_major_ver ||
 800807e:	f893 e04c 	ldrb.w	lr, [r3, #76]	; 0x4c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8008082:	4572      	cmp	r2, lr
 8008084:	dc01      	bgt.n	800808a <mbedtls_ssl_handshake_client_step+0x36a>
        ssl->major_ver > ssl->conf->max_major_ver ||
 8008086:	42b1      	cmp	r1, r6
 8008088:	dd19      	ble.n	80080be <mbedtls_ssl_handshake_client_step+0x39e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 800808a:	9606      	str	r6, [sp, #24]
 800808c:	f893 504c 	ldrb.w	r5, [r3, #76]	; 0x4c
 8008090:	9505      	str	r5, [sp, #20]
 8008092:	9104      	str	r1, [sp, #16]
 8008094:	9203      	str	r2, [sp, #12]
 8008096:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800809a:	9302      	str	r3, [sp, #8]
 800809c:	4ba2      	ldr	r3, [pc, #648]	; (8008328 <mbedtls_ssl_handshake_client_step+0x608>)
 800809e:	9001      	str	r0, [sp, #4]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4aa0      	ldr	r2, [pc, #640]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80080a4:	4da1      	ldr	r5, [pc, #644]	; (800832c <mbedtls_ssl_handshake_client_step+0x60c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 80080a6:	f240 630f 	movw	r3, #1551	; 0x60f
 80080aa:	2101      	movs	r1, #1
 80080ac:	4620      	mov	r0, r4
 80080ae:	f7fc fa89 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80080b2:	2246      	movs	r2, #70	; 0x46
 80080b4:	2102      	movs	r1, #2
 80080b6:	4620      	mov	r0, r4
 80080b8:	f001 fd76 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 80080bc:	e666      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	79ba      	ldrb	r2, [r7, #6]
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80080c8:	7a7a      	ldrb	r2, [r7, #9]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	7a3a      	ldrb	r2, [r7, #8]
 80080ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	4b96      	ldr	r3, [pc, #600]	; (8008330 <mbedtls_ssl_handshake_client_step+0x610>)
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	4a92      	ldr	r2, [pc, #584]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 80080da:	f240 631b 	movw	r3, #1563	; 0x61b
 80080de:	2103      	movs	r1, #3
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7fc fa6f 	bl	80045c4 <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 80080e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80080e8:	1db9      	adds	r1, r7, #6
 80080ea:	460a      	mov	r2, r1
 80080ec:	33a8      	adds	r3, #168	; 0xa8
 80080ee:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80080f2:	f852 6b04 	ldr.w	r6, [r2], #4
 80080f6:	f843 6b04 	str.w	r6, [r3], #4
 80080fa:	4282      	cmp	r2, r0
 80080fc:	d1f9      	bne.n	80080f2 <mbedtls_ssl_handshake_client_step+0x3d2>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 80080fe:	2320      	movs	r3, #32
    n = buf[34];
 8008100:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	4b8b      	ldr	r3, [pc, #556]	; (8008334 <mbedtls_ssl_handshake_client_step+0x614>)
 8008108:	9101      	str	r1, [sp, #4]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4a85      	ldr	r2, [pc, #532]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 800810e:	f240 6321 	movw	r3, #1569	; 0x621
 8008112:	2103      	movs	r1, #3
 8008114:	4620      	mov	r0, r4
 8008116:	f7fc fab3 	bl	8004680 <mbedtls_debug_print_buf>
    if( n > 32 )
 800811a:	2e20      	cmp	r6, #32
 800811c:	d904      	bls.n	8008128 <mbedtls_ssl_handshake_client_step+0x408>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800811e:	4b86      	ldr	r3, [pc, #536]	; (8008338 <mbedtls_ssl_handshake_client_step+0x618>)
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	f240 6325 	movw	r3, #1573	; 0x625
 8008126:	e74e      	b.n	8007fc6 <mbedtls_ssl_handshake_client_step+0x2a6>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 8008128:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800812a:	f106 032b 	add.w	r3, r6, #43	; 0x2b
 800812e:	429a      	cmp	r2, r3
 8008130:	d915      	bls.n	800815e <mbedtls_ssl_handshake_client_step+0x43e>
        ext_len = ( ( buf[38 + n] <<  8 )
 8008132:	eb0a 0306 	add.w	r3, sl, r6
 8008136:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 800813a:	f893 8027 	ldrb.w	r8, [r3, #39]	; 0x27
 800813e:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 8008142:	f108 33ff 	add.w	r3, r8, #4294967295
 8008146:	2b02      	cmp	r3, #2
 8008148:	d904      	bls.n	8008154 <mbedtls_ssl_handshake_client_step+0x434>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 800814a:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 800814e:	4443      	add	r3, r8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 8008150:	429a      	cmp	r2, r3
 8008152:	d00f      	beq.n	8008174 <mbedtls_ssl_handshake_client_step+0x454>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8008154:	4b78      	ldr	r3, [pc, #480]	; (8008338 <mbedtls_ssl_handshake_client_step+0x618>)
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	f240 6333 	movw	r3, #1587	; 0x633
 800815c:	e733      	b.n	8007fc6 <mbedtls_ssl_handshake_client_step+0x2a6>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 800815e:	f106 032a 	add.w	r3, r6, #42	; 0x2a
 8008162:	429a      	cmp	r2, r3
 8008164:	d004      	beq.n	8008170 <mbedtls_ssl_handshake_client_step+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8008166:	4b74      	ldr	r3, [pc, #464]	; (8008338 <mbedtls_ssl_handshake_client_step+0x618>)
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	f240 633f 	movw	r3, #1599	; 0x63f
 800816e:	e72a      	b.n	8007fc6 <mbedtls_ssl_handshake_client_step+0x2a6>
        ext_len = 0;
 8008170:	f04f 0800 	mov.w	r8, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8008174:	eb0a 0306 	add.w	r3, sl, r6
 8008178:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800817c:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
    comp = buf[37 + n];
 8008180:	f106 0325 	add.w	r3, r6, #37	; 0x25
 8008184:	9308      	str	r3, [sp, #32]
 8008186:	f81a 3003 	ldrb.w	r3, [sl, r3]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 800818a:	ea4b 2b02 	orr.w	fp, fp, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 800818e:	b183      	cbz	r3, 80081b2 <mbedtls_ssl_handshake_client_step+0x492>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	4b6a      	ldr	r3, [pc, #424]	; (800833c <mbedtls_ssl_handshake_client_step+0x61c>)
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4a63      	ldr	r2, [pc, #396]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 8008198:	4d69      	ldr	r5, [pc, #420]	; (8008340 <mbedtls_ssl_handshake_client_step+0x620>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 800819a:	f240 635c 	movw	r3, #1628	; 0x65c
 800819e:	2101      	movs	r1, #1
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7fc fa0f 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80081a6:	222f      	movs	r2, #47	; 0x2f
 80081a8:	2102      	movs	r1, #2
 80081aa:	4620      	mov	r0, r4
 80081ac:	f001 fcfc 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 80081b0:	e5ec      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 80081b2:	4658      	mov	r0, fp
 80081b4:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 80081b8:	f7ff fd90 	bl	8007cdc <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 80081bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 80081be:	f8c9 0000 	str.w	r0, [r9]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	b981      	cbnz	r1, 80081e8 <mbedtls_ssl_handshake_client_step+0x4c8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 80081c6:	4b5f      	ldr	r3, [pc, #380]	; (8008344 <mbedtls_ssl_handshake_client_step+0x624>)
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	4620      	mov	r0, r4
 80081cc:	f8cd b004 	str.w	fp, [sp, #4]
 80081d0:	f240 6369 	movw	r3, #1641	; 0x669
 80081d4:	4a53      	ldr	r2, [pc, #332]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 80081d6:	2101      	movs	r1, #1
 80081d8:	f7fc f9f4 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80081dc:	2250      	movs	r2, #80	; 0x50
 80081de:	2102      	movs	r1, #2
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 fce1 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 80081e6:	e5fe      	b.n	8007de6 <mbedtls_ssl_handshake_client_step+0xc6>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 80081e8:	4620      	mov	r0, r4
 80081ea:	f002 fb8b 	bl	800a904 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 80081ee:	4b56      	ldr	r3, [pc, #344]	; (8008348 <mbedtls_ssl_handshake_client_step+0x628>)
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	4a4c      	ldr	r2, [pc, #304]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 80081f4:	9601      	str	r6, [sp, #4]
 80081f6:	f240 6371 	movw	r3, #1649	; 0x671
 80081fa:	2103      	movs	r1, #3
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7fc f9e1 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 8008202:	3727      	adds	r7, #39	; 0x27
 8008204:	4b51      	ldr	r3, [pc, #324]	; (800834c <mbedtls_ssl_handshake_client_step+0x62c>)
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4a46      	ldr	r2, [pc, #280]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 800820a:	9602      	str	r6, [sp, #8]
 800820c:	f240 6372 	movw	r3, #1650	; 0x672
 8008210:	9701      	str	r7, [sp, #4]
 8008212:	2103      	movs	r1, #3
 8008214:	4620      	mov	r0, r4
 8008216:	f7fc fa33 	bl	8004680 <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 800821a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800821c:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8008220:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8008224:	b1aa      	cbz	r2, 8008252 <mbedtls_ssl_handshake_client_step+0x532>
 8008226:	b1a6      	cbz	r6, 8008252 <mbedtls_ssl_handshake_client_step+0x532>
 8008228:	f8d9 2000 	ldr.w	r2, [r9]
 800822c:	4593      	cmp	fp, r2
 800822e:	d110      	bne.n	8008252 <mbedtls_ssl_handshake_client_step+0x532>
        ssl->session_negotiate->ciphersuite != i ||
 8008230:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008234:	b96a      	cbnz	r2, 8008252 <mbedtls_ssl_handshake_client_step+0x532>
        ssl->session_negotiate->compression != comp ||
 8008236:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800823a:	4296      	cmp	r6, r2
 800823c:	d109      	bne.n	8008252 <mbedtls_ssl_handshake_client_step+0x532>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 800823e:	4632      	mov	r2, r6
 8008240:	4639      	mov	r1, r7
 8008242:	f109 000c 	add.w	r0, r9, #12
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	f006 f8da 	bl	800e400 <memcmp>
        ssl->session_negotiate->id_len != n ||
 800824c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824e:	2800      	cmp	r0, #0
 8008250:	d04c      	beq.n	80082ec <mbedtls_ssl_handshake_client_step+0x5cc>
        ssl->state++;
 8008252:	6862      	ldr	r2, [r4, #4]
 8008254:	3201      	adds	r2, #1
 8008256:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 8008258:	2200      	movs	r2, #0
 800825a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 800825e:	4639      	mov	r1, r7
        ssl->session_negotiate->compression = comp;
 8008260:	f8c9 2004 	str.w	r2, [r9, #4]
        ssl->session_negotiate->ciphersuite = i;
 8008264:	f8c9 b000 	str.w	fp, [r9]
        ssl->session_negotiate->id_len = n;
 8008268:	f8c9 6008 	str.w	r6, [r9, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 800826c:	4632      	mov	r2, r6
 800826e:	f109 000c 	add.w	r0, r9, #12
 8008272:	f006 f8d4 	bl	800e41e <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 8008276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008278:	4a35      	ldr	r2, [pc, #212]	; (8008350 <mbedtls_ssl_handshake_client_step+0x630>)
 800827a:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 800827e:	4b35      	ldr	r3, [pc, #212]	; (8008354 <mbedtls_ssl_handshake_client_step+0x634>)
 8008280:	2900      	cmp	r1, #0
 8008282:	bf08      	it	eq
 8008284:	4613      	moveq	r3, r2
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	4b33      	ldr	r3, [pc, #204]	; (8008358 <mbedtls_ssl_handshake_client_step+0x638>)
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	4a25      	ldr	r2, [pc, #148]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 800828e:	f44f 63d3 	mov.w	r3, #1688	; 0x698
 8008292:	2103      	movs	r1, #3
 8008294:	4620      	mov	r0, r4
 8008296:	f7fc f995 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 800829a:	4b30      	ldr	r3, [pc, #192]	; (800835c <mbedtls_ssl_handshake_client_step+0x63c>)
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4a21      	ldr	r2, [pc, #132]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 80082a0:	f8cd b004 	str.w	fp, [sp, #4]
 80082a4:	f240 639a 	movw	r3, #1690	; 0x69a
 80082a8:	2103      	movs	r1, #3
 80082aa:	4620      	mov	r0, r4
 80082ac:	f7fc f98a 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 80082b0:	9b08      	ldr	r3, [sp, #32]
 80082b2:	4a1c      	ldr	r2, [pc, #112]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 80082b4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	4b29      	ldr	r3, [pc, #164]	; (8008360 <mbedtls_ssl_handshake_client_step+0x640>)
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	4620      	mov	r0, r4
 80082c0:	f240 639b 	movw	r3, #1691	; 0x69b
 80082c4:	2103      	movs	r1, #3
 80082c6:	f7fc f97d 	bl	80045c4 <mbedtls_debug_print_msg>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 80082ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f7ff fd05 	bl	8007cdc <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d148      	bne.n	8008368 <mbedtls_ssl_handshake_client_step+0x648>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <mbedtls_ssl_handshake_client_step+0x618>)
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	f240 63a5 	movw	r3, #1701	; 0x6a5
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80082de:	4a11      	ldr	r2, [pc, #68]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 80082e0:	2101      	movs	r1, #1
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7fc f96e 	bl	80045c4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80082e8:	222f      	movs	r2, #47	; 0x2f
 80082ea:	e672      	b.n	8007fd2 <mbedtls_ssl_handshake_client_step+0x2b2>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80082ec:	230c      	movs	r3, #12
 80082ee:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 fe4b 	bl	8008f8c <mbedtls_ssl_derive_keys>
 80082f6:	4607      	mov	r7, r0
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d0bc      	beq.n	8008276 <mbedtls_ssl_handshake_client_step+0x556>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <mbedtls_ssl_handshake_client_step+0x644>)
 80082fe:	9001      	str	r0, [sp, #4]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	4a08      	ldr	r2, [pc, #32]	; (8008324 <mbedtls_ssl_handshake_client_step+0x604>)
 8008304:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8008308:	2101      	movs	r1, #1
 800830a:	4620      	mov	r0, r4
 800830c:	f7fc f98a 	bl	8004624 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8008310:	2250      	movs	r2, #80	; 0x50
 8008312:	2102      	movs	r1, #2
 8008314:	4620      	mov	r0, r4
 8008316:	f001 fc47 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 800831a:	463d      	mov	r5, r7
 800831c:	e536      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
 800831e:	bf00      	nop
 8008320:	08012de0 	.word	0x08012de0
 8008324:	08012b3c 	.word	0x08012b3c
 8008328:	08012df6 	.word	0x08012df6
 800832c:	ffff9180 	.word	0xffff9180
 8008330:	08012e42 	.word	0x08012e42
 8008334:	08012e62 	.word	0x08012e62
 8008338:	08012dc7 	.word	0x08012dc7
 800833c:	08012e7d 	.word	0x08012e7d
 8008340:	ffff8f80 	.word	0xffff8f80
 8008344:	08012e9f 	.word	0x08012e9f
 8008348:	08012ec3 	.word	0x08012ec3
 800834c:	08012ee5 	.word	0x08012ee5
 8008350:	08012b28 	.word	0x08012b28
 8008354:	08013946 	.word	0x08013946
 8008358:	08012f16 	.word	0x08012f16
 800835c:	08012f32 	.word	0x08012f32
 8008360:	08012f59 	.word	0x08012f59
 8008364:	08012efe 	.word	0x08012efe
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 8008368:	6843      	ldr	r3, [r0, #4]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	4bae      	ldr	r3, [pc, #696]	; (8008628 <mbedtls_ssl_handshake_client_step+0x908>)
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4aae      	ldr	r2, [pc, #696]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
 8008372:	f240 63ab 	movw	r3, #1707	; 0x6ab
 8008376:	2103      	movs	r1, #3
 8008378:	4620      	mov	r0, r4
 800837a:	f7fc f923 	bl	80045c4 <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	68e2      	ldr	r2, [r4, #12]
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	3b04      	subs	r3, #4
 8008388:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800838c:	b921      	cbnz	r1, 8008398 <mbedtls_ssl_handshake_client_step+0x678>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800838e:	4ba8      	ldr	r3, [pc, #672]	; (8008630 <mbedtls_ssl_handshake_client_step+0x910>)
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8008396:	e7a2      	b.n	80082de <mbedtls_ssl_handshake_client_step+0x5be>
            ssl->session_negotiate->ciphersuite )
 8008398:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 800839a:	6810      	ldr	r0, [r2, #0]
 800839c:	4281      	cmp	r1, r0
 800839e:	d1f3      	bne.n	8008388 <mbedtls_ssl_handshake_client_step+0x668>
    ssl->session_negotiate->compression = comp;
 80083a0:	2300      	movs	r3, #0
 80083a2:	6053      	str	r3, [r2, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 80083a4:	4ba3      	ldr	r3, [pc, #652]	; (8008634 <mbedtls_ssl_handshake_client_step+0x914>)
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	f8cd 8004 	str.w	r8, [sp, #4]
 80083ac:	f240 63ce 	movw	r3, #1742	; 0x6ce
 80083b0:	4a9e      	ldr	r2, [pc, #632]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 80083b2:	4f9e      	ldr	r7, [pc, #632]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 80083b4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 8008684 <mbedtls_ssl_handshake_client_step+0x964>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 80083b8:	2102      	movs	r1, #2
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7fc f902 	bl	80045c4 <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 80083c0:	3628      	adds	r6, #40	; 0x28
 80083c2:	44b2      	add	sl, r6
    while( ext_len )
 80083c4:	f1b8 0f00 	cmp.w	r8, #0
 80083c8:	d111      	bne.n	80083ee <mbedtls_ssl_handshake_client_step+0x6ce>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80083ca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 844b 	bne.w	8008c6a <mbedtls_ssl_handshake_client_step+0xf4a>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80083da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083de:	2b20      	cmp	r3, #32
 80083e0:	f040 8443 	bne.w	8008c6a <mbedtls_ssl_handshake_client_step+0xf4a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 80083e4:	4b94      	ldr	r3, [pc, #592]	; (8008638 <mbedtls_ssl_handshake_client_step+0x918>)
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	f240 7369 	movw	r3, #1897	; 0x769
 80083ec:	e02a      	b.n	8008444 <mbedtls_ssl_handshake_client_step+0x724>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 80083ee:	f89a 2000 	ldrb.w	r2, [sl]
                                | ( ext[1]       ) );
 80083f2:	f89a 3001 	ldrb.w	r3, [sl, #1]
                                | ( ext[3]       ) );
 80083f6:	f89a 6003 	ldrb.w	r6, [sl, #3]
                                | ( ext[1]       ) );
 80083fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
 80083fe:	f89a 2002 	ldrb.w	r2, [sl, #2]
                                | ( ext[3]       ) );
 8008402:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
        if( ext_size + 4 > ext_len )
 8008406:	f106 0904 	add.w	r9, r6, #4
 800840a:	45c1      	cmp	r9, r8
 800840c:	d904      	bls.n	8008418 <mbedtls_ssl_handshake_client_step+0x6f8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 800840e:	4b88      	ldr	r3, [pc, #544]	; (8008630 <mbedtls_ssl_handshake_client_step+0x910>)
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	f240 63d9 	movw	r3, #1753	; 0x6d9
 8008416:	e5d6      	b.n	8007fc6 <mbedtls_ssl_handshake_client_step+0x2a6>
        switch( ext_id )
 8008418:	f64f 7201 	movw	r2, #65281	; 0xff01
 800841c:	4293      	cmp	r3, r2
 800841e:	d12c      	bne.n	800847a <mbedtls_ssl_handshake_client_step+0x75a>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 8008420:	f8cd b000 	str.w	fp, [sp]
 8008424:	f240 63e2 	movw	r3, #1762	; 0x6e2
 8008428:	463a      	mov	r2, r7
 800842a:	2103      	movs	r1, #3
 800842c:	4620      	mov	r0, r4
 800842e:	f7fc f8c9 	bl	80045c4 <mbedtls_debug_print_msg>
        if( len != 1 || buf[0] != 0x00 )
 8008432:	2e01      	cmp	r6, #1
 8008434:	d102      	bne.n	800843c <mbedtls_ssl_handshake_client_step+0x71c>
 8008436:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800843a:	b153      	cbz	r3, 8008452 <mbedtls_ssl_handshake_client_step+0x732>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 800843c:	4b7f      	ldr	r3, [pc, #508]	; (800863c <mbedtls_ssl_handshake_client_step+0x91c>)
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	f44f 6389 	mov.w	r3, #1096	; 0x448
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 8008444:	4a79      	ldr	r2, [pc, #484]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
 8008446:	2101      	movs	r1, #1
 8008448:	4620      	mov	r0, r4
 800844a:	f7fc f8bb 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800844e:	2228      	movs	r2, #40	; 0x28
 8008450:	e5bf      	b.n	8007fd2 <mbedtls_ssl_handshake_client_step+0x2b2>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8008452:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
        ext_len -= 4 + ext_size;
 8008456:	eba8 0606 	sub.w	r6, r8, r6
 800845a:	f1a6 0804 	sub.w	r8, r6, #4
        if( ext_len > 0 && ext_len < 4 )
 800845e:	3e05      	subs	r6, #5
 8008460:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 8008462:	44ca      	add	sl, r9
        if( ext_len > 0 && ext_len < 4 )
 8008464:	d8ae      	bhi.n	80083c4 <mbedtls_ssl_handshake_client_step+0x6a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8008466:	4b72      	ldr	r3, [pc, #456]	; (8008630 <mbedtls_ssl_handshake_client_step+0x910>)
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4a70      	ldr	r2, [pc, #448]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
 800846c:	f240 735e 	movw	r3, #1886	; 0x75e
 8008470:	2101      	movs	r1, #1
 8008472:	4620      	mov	r0, r4
 8008474:	f7fc f8a6 	bl	80045c4 <mbedtls_debug_print_msg>
 8008478:	e5af      	b.n	8007fda <mbedtls_ssl_handshake_client_step+0x2ba>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	4b70      	ldr	r3, [pc, #448]	; (8008640 <mbedtls_ssl_handshake_client_step+0x920>)
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	463a      	mov	r2, r7
 8008482:	f240 7356 	movw	r3, #1878	; 0x756
 8008486:	2103      	movs	r1, #3
 8008488:	4620      	mov	r0, r4
 800848a:	f7fc f89b 	bl	80045c4 <mbedtls_debug_print_msg>
 800848e:	e7e2      	b.n	8008456 <mbedtls_ssl_handshake_client_step+0x736>
           ret = mbedtls_ssl_parse_certificate( ssl );
 8008490:	4620      	mov	r0, r4
 8008492:	f001 ffdd 	bl	800a450 <mbedtls_ssl_parse_certificate>
           ret = mbedtls_ssl_parse_finished( ssl );
 8008496:	4605      	mov	r5, r0
           break;
 8008498:	e478      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800849a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 800849c:	4a63      	ldr	r2, [pc, #396]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800849e:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 80084a0:	4b68      	ldr	r3, [pc, #416]	; (8008644 <mbedtls_ssl_handshake_client_step+0x924>)
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	2102      	movs	r1, #2
 80084a6:	f640 03e6 	movw	r3, #2278	; 0x8e6
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7fc f88a 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80084b0:	7ab3      	ldrb	r3, [r6, #10]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d10b      	bne.n	80084ce <mbedtls_ssl_handshake_client_step+0x7ae>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 80084b6:	4b64      	ldr	r3, [pc, #400]	; (8008648 <mbedtls_ssl_handshake_client_step+0x928>)
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	f640 03eb 	movw	r3, #2283	; 0x8eb
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 80084be:	4a5b      	ldr	r2, [pc, #364]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
 80084c0:	2102      	movs	r1, #2
 80084c2:	4620      	mov	r0, r4
 80084c4:	f7fc f87e 	bl	80045c4 <mbedtls_debug_print_msg>
        ssl->state++;
 80084c8:	6863      	ldr	r3, [r4, #4]
 80084ca:	3301      	adds	r3, #1
 80084cc:	e2f4      	b.n	8008ab8 <mbedtls_ssl_handshake_client_step+0xd98>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80084ce:	4620      	mov	r0, r4
 80084d0:	f001 fea0 	bl	800a214 <mbedtls_ssl_read_record>
 80084d4:	4605      	mov	r5, r0
 80084d6:	b128      	cbz	r0, 80084e4 <mbedtls_ssl_handshake_client_step+0x7c4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80084d8:	4b5c      	ldr	r3, [pc, #368]	; (800864c <mbedtls_ssl_handshake_client_step+0x92c>)
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	9001      	str	r0, [sp, #4]
 80084de:	f640 130b 	movw	r3, #2315	; 0x90b
 80084e2:	e51c      	b.n	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80084e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80084e6:	2b16      	cmp	r3, #22
 80084e8:	d004      	beq.n	80084f4 <mbedtls_ssl_handshake_client_step+0x7d4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 80084ea:	4b59      	ldr	r3, [pc, #356]	; (8008650 <mbedtls_ssl_handshake_client_step+0x930>)
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	f640 1311 	movw	r3, #2321	; 0x911
 80084f2:	e552      	b.n	8007f9a <mbedtls_ssl_handshake_client_step+0x27a>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 80084f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	2a0c      	cmp	r2, #12
 80084fa:	d014      	beq.n	8008526 <mbedtls_ssl_handshake_client_step+0x806>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80084fc:	7ab3      	ldrb	r3, [r6, #10]
 80084fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8008502:	2b05      	cmp	r3, #5
 8008504:	d10a      	bne.n	800851c <mbedtls_ssl_handshake_client_step+0x7fc>
            ssl->keep_current_message = 1;
 8008506:	2301      	movs	r3, #1
 8008508:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ssl->state++;
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	3301      	adds	r3, #1
 8008510:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 8008512:	4b50      	ldr	r3, [pc, #320]	; (8008654 <mbedtls_ssl_handshake_client_step+0x934>)
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	f640 2314 	movw	r3, #2580	; 0xa14
 800851a:	e51c      	b.n	8007f56 <mbedtls_ssl_handshake_client_step+0x236>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 800851c:	4b4e      	ldr	r3, [pc, #312]	; (8008658 <mbedtls_ssl_handshake_client_step+0x938>)
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	f640 1327 	movw	r3, #2343	; 0x927
 8008524:	e539      	b.n	8007f9a <mbedtls_ssl_handshake_client_step+0x27a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 8008526:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 8008528:	3304      	adds	r3, #4
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 800852a:	3a04      	subs	r2, #4
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	4b4b      	ldr	r3, [pc, #300]	; (800865c <mbedtls_ssl_handshake_client_step+0x93c>)
 8008530:	9202      	str	r2, [sp, #8]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	4a3d      	ldr	r2, [pc, #244]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
 8008536:	f44f 6313 	mov.w	r3, #2352	; 0x930
 800853a:	2103      	movs	r1, #3
 800853c:	4620      	mov	r0, r4
 800853e:	f7fc f89f 	bl	8004680 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8008542:	4b47      	ldr	r3, [pc, #284]	; (8008660 <mbedtls_ssl_handshake_client_step+0x940>)
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	f640 137d 	movw	r3, #2429	; 0x97d
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800854a:	4a38      	ldr	r2, [pc, #224]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800854c:	4d45      	ldr	r5, [pc, #276]	; (8008664 <mbedtls_ssl_handshake_client_step+0x944>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800854e:	2101      	movs	r1, #1
 8008550:	4620      	mov	r0, r4
 8008552:	f7fc f837 	bl	80045c4 <mbedtls_debug_print_msg>
 8008556:	e419      	b.n	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8008558:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 800855a:	4a34      	ldr	r2, [pc, #208]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800855c:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 800855e:	4b42      	ldr	r3, [pc, #264]	; (8008668 <mbedtls_ssl_handshake_client_step+0x948>)
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2102      	movs	r1, #2
 8008564:	f640 2335 	movw	r3, #2613	; 0xa35
 8008568:	4620      	mov	r0, r4
 800856a:	f7fc f82b 	bl	80045c4 <mbedtls_debug_print_msg>
 800856e:	7ab3      	ldrb	r3, [r6, #10]
 8008570:	3b01      	subs	r3, #1
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b09      	cmp	r3, #9
 8008576:	f200 837e 	bhi.w	8008c76 <mbedtls_ssl_handshake_client_step+0xf56>
 800857a:	2701      	movs	r7, #1
 800857c:	fa07 f303 	lsl.w	r3, r7, r3
 8008580:	f240 320f 	movw	r2, #783	; 0x30f
 8008584:	4213      	tst	r3, r2
 8008586:	f000 8376 	beq.w	8008c76 <mbedtls_ssl_handshake_client_step+0xf56>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800858a:	4620      	mov	r0, r4
 800858c:	f001 fe42 	bl	800a214 <mbedtls_ssl_read_record>
 8008590:	4605      	mov	r5, r0
 8008592:	b128      	cbz	r0, 80085a0 <mbedtls_ssl_handshake_client_step+0x880>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8008594:	4b2d      	ldr	r3, [pc, #180]	; (800864c <mbedtls_ssl_handshake_client_step+0x92c>)
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	9501      	str	r5, [sp, #4]
 800859a:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 800859e:	e4be      	b.n	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80085a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80085a2:	2b16      	cmp	r3, #22
 80085a4:	d004      	beq.n	80085b0 <mbedtls_ssl_handshake_client_step+0x890>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80085a6:	4b31      	ldr	r3, [pc, #196]	; (800866c <mbedtls_ssl_handshake_client_step+0x94c>)
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	f640 2346 	movw	r3, #2630	; 0xa46
 80085ae:	e4f4      	b.n	8007f9a <mbedtls_ssl_handshake_client_step+0x27a>
    ssl->state++;
 80085b0:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 80085b2:	4a2f      	ldr	r2, [pc, #188]	; (8008670 <mbedtls_ssl_handshake_client_step+0x950>)
    ssl->state++;
 80085b4:	3301      	adds	r3, #1
 80085b6:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80085b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b0d      	cmp	r3, #13
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 80085c8:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <mbedtls_ssl_handshake_client_step+0x954>)
 80085ca:	bf18      	it	ne
 80085cc:	4613      	movne	r3, r2
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	4b29      	ldr	r3, [pc, #164]	; (8008678 <mbedtls_ssl_handshake_client_step+0x958>)
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	4a15      	ldr	r2, [pc, #84]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
 80085d6:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 80085da:	2103      	movs	r1, #3
 80085dc:	4620      	mov	r0, r4
 80085de:	f7fb fff1 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 80085e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80085e6:	b933      	cbnz	r3, 80085f6 <mbedtls_ssl_handshake_client_step+0x8d6>
        ssl->keep_current_message = 1;
 80085e8:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 80085ec:	4b23      	ldr	r3, [pc, #140]	; (800867c <mbedtls_ssl_handshake_client_step+0x95c>)
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80085f4:	e4af      	b.n	8007f56 <mbedtls_ssl_handshake_client_step+0x236>
    buf = ssl->in_msg;
 80085f6:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 80085fa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80085fc:	f898 6004 	ldrb.w	r6, [r8, #4]
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 8008600:	1db3      	adds	r3, r6, #6
 8008602:	429a      	cmp	r2, r3
 8008604:	d240      	bcs.n	8008688 <mbedtls_ssl_handshake_client_step+0x968>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8008606:	4b19      	ldr	r3, [pc, #100]	; (800866c <mbedtls_ssl_handshake_client_step+0x94c>)
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	f640 2379 	movw	r3, #2681	; 0xa79
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800860e:	4a07      	ldr	r2, [pc, #28]	; (800862c <mbedtls_ssl_handshake_client_step+0x90c>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8008610:	4d1b      	ldr	r5, [pc, #108]	; (8008680 <mbedtls_ssl_handshake_client_step+0x960>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8008612:	2101      	movs	r1, #1
 8008614:	4620      	mov	r0, r4
 8008616:	f7fb ffd5 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800861a:	2232      	movs	r2, #50	; 0x32
 800861c:	2102      	movs	r1, #2
 800861e:	4620      	mov	r0, r4
 8008620:	f001 fac2 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 8008624:	f7ff bbb2 	b.w	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
 8008628:	08012f79 	.word	0x08012f79
 800862c:	08012b3c 	.word	0x08012b3c
 8008630:	08012dc7 	.word	0x08012dc7
 8008634:	08012f9e 	.word	0x08012f9e
 8008638:	0801302f 	.word	0x0801302f
 800863c:	08012fe5 	.word	0x08012fe5
 8008640:	08013008 	.word	0x08013008
 8008644:	0801305c 	.word	0x0801305c
 8008648:	08013079 	.word	0x08013079
 800864c:	08012daf 	.word	0x08012daf
 8008650:	0801309b 	.word	0x0801309b
 8008654:	080130bb 	.word	0x080130bb
 8008658:	080130d8 	.word	0x080130d8
 800865c:	080130c4 	.word	0x080130c4
 8008660:	08013108 	.word	0x08013108
 8008664:	ffff9400 	.word	0xffff9400
 8008668:	0801311c 	.word	0x0801311c
 800866c:	08013139 	.word	0x08013139
 8008670:	08012b28 	.word	0x08012b28
 8008674:	08013946 	.word	0x08013946
 8008678:	08013159 	.word	0x08013159
 800867c:	0801319f 	.word	0x0801319f
 8008680:	ffff8580 	.word	0xffff8580
 8008684:	08012fc7 	.word	0x08012fc7
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8008688:	68e2      	ldr	r2, [r4, #12]
 800868a:	2a03      	cmp	r2, #3
 800868c:	d12c      	bne.n	80086e8 <mbedtls_ssl_handshake_client_step+0x9c8>
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800868e:	eb08 0206 	add.w	r2, r8, r6
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8008692:	f818 7003 	ldrb.w	r7, [r8, r3]
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8008696:	7952      	ldrb	r2, [r2, #5]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 8008698:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8008958 <mbedtls_ssl_handshake_client_step+0xc38>
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 800869c:	f106 0a07 	add.w	sl, r6, #7
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80086a0:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 80086a4:	44c2      	add	sl, r8
        for( i = 0; i < sig_alg_len; i += 2 )
 80086a6:	46a9      	mov	r9, r5
 80086a8:	454f      	cmp	r7, r9
 80086aa:	d80a      	bhi.n	80086c2 <mbedtls_ssl_handshake_client_step+0x9a2>
        n += 2 + sig_alg_len;
 80086ac:	4437      	add	r7, r6
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 80086ae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        n += 2 + sig_alg_len;
 80086b0:	1cbe      	adds	r6, r7, #2
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 80086b2:	3708      	adds	r7, #8
 80086b4:	42bb      	cmp	r3, r7
 80086b6:	d217      	bcs.n	80086e8 <mbedtls_ssl_handshake_client_step+0x9c8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80086b8:	4ba4      	ldr	r3, [pc, #656]	; (800894c <mbedtls_ssl_handshake_client_step+0xc2c>)
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	f640 2394 	movw	r3, #2708	; 0xa94
 80086c0:	e7a5      	b.n	800860e <mbedtls_ssl_handshake_client_step+0x8ee>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 80086c2:	eb0a 0309 	add.w	r3, sl, r9
 80086c6:	465a      	mov	r2, fp
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	9302      	str	r3, [sp, #8]
 80086cc:	f81a 3009 	ldrb.w	r3, [sl, r9]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	4b9f      	ldr	r3, [pc, #636]	; (8008950 <mbedtls_ssl_handshake_client_step+0xc30>)
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	2103      	movs	r1, #3
 80086d8:	f640 238c 	movw	r3, #2700	; 0xa8c
 80086dc:	4620      	mov	r0, r4
 80086de:	f7fb ff71 	bl	80045c4 <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 80086e2:	f109 0902 	add.w	r9, r9, #2
 80086e6:	e7df      	b.n	80086a8 <mbedtls_ssl_handshake_client_step+0x988>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80086e8:	44b0      	add	r8, r6
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80086ea:	3607      	adds	r6, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80086ec:	f898 2005 	ldrb.w	r2, [r8, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80086f0:	f898 3006 	ldrb.w	r3, [r8, #6]
 80086f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80086f8:	441e      	add	r6, r3
 80086fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80086fc:	42b3      	cmp	r3, r6
 80086fe:	f43f af75 	beq.w	80085ec <mbedtls_ssl_handshake_client_step+0x8cc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8008702:	4b92      	ldr	r3, [pc, #584]	; (800894c <mbedtls_ssl_handshake_client_step+0xc2c>)
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	f640 23a3 	movw	r3, #2723	; 0xaa3
 800870a:	e780      	b.n	800860e <mbedtls_ssl_handshake_client_step+0x8ee>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 800870c:	4b91      	ldr	r3, [pc, #580]	; (8008954 <mbedtls_ssl_handshake_client_step+0xc34>)
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4a91      	ldr	r2, [pc, #580]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
 8008712:	f640 23b4 	movw	r3, #2740	; 0xab4
 8008716:	2102      	movs	r1, #2
 8008718:	4620      	mov	r0, r4
 800871a:	f7fb ff53 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800871e:	4620      	mov	r0, r4
 8008720:	f001 fd78 	bl	800a214 <mbedtls_ssl_read_record>
 8008724:	4605      	mov	r5, r0
 8008726:	b130      	cbz	r0, 8008736 <mbedtls_ssl_handshake_client_step+0xa16>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8008728:	4b8c      	ldr	r3, [pc, #560]	; (800895c <mbedtls_ssl_handshake_client_step+0xc3c>)
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	9001      	str	r0, [sp, #4]
 800872e:	f640 23b8 	movw	r3, #2744	; 0xab8
 8008732:	f7ff bbf4 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8008736:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008738:	2b16      	cmp	r3, #22
 800873a:	d009      	beq.n	8008750 <mbedtls_ssl_handshake_client_step+0xa30>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800873c:	4b88      	ldr	r3, [pc, #544]	; (8008960 <mbedtls_ssl_handshake_client_step+0xc40>)
 800873e:	4a86      	ldr	r2, [pc, #536]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	2101      	movs	r1, #1
 8008744:	f640 23be 	movw	r3, #2750	; 0xabe
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 8008748:	4620      	mov	r0, r4
 800874a:	f7fb ff3b 	bl	80045c4 <mbedtls_debug_print_msg>
 800874e:	e42e      	b.n	8007fae <mbedtls_ssl_handshake_client_step+0x28e>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8008750:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008752:	2b04      	cmp	r3, #4
 8008754:	d103      	bne.n	800875e <mbedtls_ssl_handshake_client_step+0xa3e>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 8008756:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b0e      	cmp	r3, #14
 800875c:	d010      	beq.n	8008780 <mbedtls_ssl_handshake_client_step+0xa60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800875e:	4b80      	ldr	r3, [pc, #512]	; (8008960 <mbedtls_ssl_handshake_client_step+0xc40>)
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	4a7d      	ldr	r2, [pc, #500]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 8008764:	4d7f      	ldr	r5, [pc, #508]	; (8008964 <mbedtls_ssl_handshake_client_step+0xc44>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 8008766:	f640 23c5 	movw	r3, #2757	; 0xac5
 800876a:	2101      	movs	r1, #1
 800876c:	4620      	mov	r0, r4
 800876e:	f7fb ff29 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8008772:	2232      	movs	r2, #50	; 0x32
 8008774:	2102      	movs	r1, #2
 8008776:	4620      	mov	r0, r4
 8008778:	f001 fa16 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 800877c:	f7ff bb06 	b.w	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    ssl->state++;
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	3301      	adds	r3, #1
 8008784:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 8008786:	4b78      	ldr	r3, [pc, #480]	; (8008968 <mbedtls_ssl_handshake_client_step+0xc48>)
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	f640 23d2 	movw	r3, #2770	; 0xad2
 800878e:	f7ff bbe2 	b.w	8007f56 <mbedtls_ssl_handshake_client_step+0x236>
           ret = mbedtls_ssl_write_certificate( ssl );
 8008792:	4620      	mov	r0, r4
 8008794:	f001 fd94 	bl	800a2c0 <mbedtls_ssl_write_certificate>
 8008798:	e67d      	b.n	8008496 <mbedtls_ssl_handshake_client_step+0x776>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800879a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 800879c:	4a6e      	ldr	r2, [pc, #440]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800879e:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 80087a0:	4b72      	ldr	r3, [pc, #456]	; (800896c <mbedtls_ssl_handshake_client_step+0xc4c>)
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2102      	movs	r1, #2
 80087a6:	f640 23de 	movw	r3, #2782	; 0xade
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7fb ff0a 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80087b0:	7aae      	ldrb	r6, [r5, #10]
 80087b2:	2e01      	cmp	r6, #1
 80087b4:	f040 808a 	bne.w	80088cc <mbedtls_ssl_handshake_client_step+0xbac>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80087b8:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80087ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80087bc:	68e3      	ldr	r3, [r4, #12]
                       ssl->conf->transport, p );
 80087be:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80087c2:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 80087c6:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80087ca:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80087ce:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80087d0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80087d4:	4643      	mov	r3, r8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80087d6:	bf0c      	ite	eq
 80087d8:	2700      	moveq	r7, #0
 80087da:	2702      	movne	r7, #2
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80087dc:	f002 fe36 	bl	800b44c <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	f105 01ca 	add.w	r1, r5, #202	; 0xca
 80087e6:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80087ea:	69d8      	ldr	r0, [r3, #28]
 80087ec:	222e      	movs	r2, #46	; 0x2e
 80087ee:	47c8      	blx	r9
 80087f0:	4605      	mov	r5, r0
 80087f2:	b130      	cbz	r0, 8008802 <mbedtls_ssl_handshake_client_step+0xae2>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 80087f4:	4b5e      	ldr	r3, [pc, #376]	; (8008970 <mbedtls_ssl_handshake_client_step+0xc50>)
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	9001      	str	r0, [sp, #4]
 80087fa:	f640 0348 	movw	r3, #2120	; 0x848
 80087fe:	f7ff bb8e 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    ssl->handshake->pmslen = 48;
 8008802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008804:	2230      	movs	r2, #48	; 0x30
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if( ssl->session_negotiate->peer_cert == NULL )
 800880a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800880c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800880e:	b930      	cbnz	r0, 800881e <mbedtls_ssl_handshake_client_step+0xafe>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 8008810:	4b58      	ldr	r3, [pc, #352]	; (8008974 <mbedtls_ssl_handshake_client_step+0xc54>)
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4a50      	ldr	r2, [pc, #320]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
 8008816:	f44f 6305 	mov.w	r3, #2128	; 0x850
 800881a:	2102      	movs	r1, #2
 800881c:	e794      	b.n	8008748 <mbedtls_ssl_handshake_client_step+0xa28>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 800881e:	4631      	mov	r1, r6
 8008820:	30bc      	adds	r0, #188	; 0xbc
 8008822:	f7fd f9d1 	bl	8005bc8 <mbedtls_pk_can_do>
 8008826:	b958      	cbnz	r0, 8008840 <mbedtls_ssl_handshake_client_step+0xb20>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 8008828:	4b53      	ldr	r3, [pc, #332]	; (8008978 <mbedtls_ssl_handshake_client_step+0xc58>)
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	4a4a      	ldr	r2, [pc, #296]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 800882e:	4d53      	ldr	r5, [pc, #332]	; (800897c <mbedtls_ssl_handshake_client_step+0xc5c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 8008830:	f640 035a 	movw	r3, #2138	; 0x85a
 8008834:	4631      	mov	r1, r6
 8008836:	4620      	mov	r0, r4
 8008838:	f7fb fec4 	bl	80045c4 <mbedtls_debug_print_msg>
 800883c:	f7ff baa6 	b.w	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8008840:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8008842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008844:	69d5      	ldr	r5, [r2, #28]
 8008846:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8008848:	9503      	str	r5, [sp, #12]
 800884a:	6995      	ldr	r5, [r2, #24]
 800884c:	9502      	str	r5, [sp, #8]
 800884e:	f5c7 657f 	rsb	r5, r7, #4080	; 0xff0
 8008852:	350c      	adds	r5, #12
 8008854:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008858:	9501      	str	r5, [sp, #4]
 800885a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800885c:	ad0c      	add	r5, sp, #48	; 0x30
 800885e:	9500      	str	r5, [sp, #0]
    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8008860:	1d3b      	adds	r3, r7, #4
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8008862:	440b      	add	r3, r1
 8008864:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8008868:	4641      	mov	r1, r8
 800886a:	30bc      	adds	r0, #188	; 0xbc
 800886c:	f7fd fa48 	bl	8005d00 <mbedtls_pk_encrypt>
 8008870:	4605      	mov	r5, r0
 8008872:	b130      	cbz	r0, 8008882 <mbedtls_ssl_handshake_client_step+0xb62>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 8008874:	4b42      	ldr	r3, [pc, #264]	; (8008980 <mbedtls_ssl_handshake_client_step+0xc60>)
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	9001      	str	r0, [sp, #4]
 800887a:	f640 0364 	movw	r3, #2148	; 0x864
 800887e:	f7ff bb4e 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    if( len_bytes == 2 )
 8008882:	b14f      	cbz	r7, 8008898 <mbedtls_ssl_handshake_client_step+0xb78>
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 8008884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008886:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800888a:	0a19      	lsrs	r1, r3, #8
 800888c:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 800888e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008892:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 8008894:	3302      	adds	r3, #2
 8008896:	930c      	str	r3, [sp, #48]	; 0x30
    ssl->out_msglen  = i + n;
 8008898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800889a:	3304      	adds	r3, #4
 800889c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80088a0:	2316      	movs	r3, #22
 80088a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80088a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80088aa:	2210      	movs	r2, #16
 80088ac:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 80088ae:	6863      	ldr	r3, [r4, #4]
 80088b0:	3301      	adds	r3, #1
 80088b2:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fee5 	bl	8009684 <mbedtls_ssl_write_record>
 80088ba:	4605      	mov	r5, r0
 80088bc:	b158      	cbz	r0, 80088d6 <mbedtls_ssl_handshake_client_step+0xbb6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80088be:	4b31      	ldr	r3, [pc, #196]	; (8008984 <mbedtls_ssl_handshake_client_step+0xc64>)
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	9501      	str	r5, [sp, #4]
 80088c4:	f640 33cc 	movw	r3, #3020	; 0xbcc
 80088c8:	f7ff bb29 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80088cc:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <mbedtls_ssl_handshake_client_step+0xc68>)
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 80088d4:	e639      	b.n	800854a <mbedtls_ssl_handshake_client_step+0x82a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 80088d6:	4b2d      	ldr	r3, [pc, #180]	; (800898c <mbedtls_ssl_handshake_client_step+0xc6c>)
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	f44f 633d 	mov.w	r3, #3024	; 0xbd0
 80088de:	f7ff bb3a 	b.w	8007f56 <mbedtls_ssl_handshake_client_step+0x236>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80088e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 80088e4:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <mbedtls_ssl_handshake_client_step+0xc38>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80088e6:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	930b      	str	r3, [sp, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 80088ec:	4b28      	ldr	r3, [pc, #160]	; (8008990 <mbedtls_ssl_handshake_client_step+0xc70>)
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	2102      	movs	r1, #2
 80088f2:	f640 4303 	movw	r3, #3075	; 0xc03
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7fb fe64 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fb45 	bl	8008f8c <mbedtls_ssl_derive_keys>
 8008902:	4605      	mov	r5, r0
 8008904:	b130      	cbz	r0, 8008914 <mbedtls_ssl_handshake_client_step+0xbf4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8008906:	4b23      	ldr	r3, [pc, #140]	; (8008994 <mbedtls_ssl_handshake_client_step+0xc74>)
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	9001      	str	r0, [sp, #4]
 800890c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008910:	f7ff bb05 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8008914:	7ab3      	ldrb	r3, [r6, #10]
 8008916:	1f5a      	subs	r2, r3, #5
 8008918:	2a03      	cmp	r2, #3
 800891a:	d901      	bls.n	8008920 <mbedtls_ssl_handshake_client_step+0xc00>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 800891c:	2b0b      	cmp	r3, #11
 800891e:	d104      	bne.n	800892a <mbedtls_ssl_handshake_client_step+0xc0a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8008920:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <mbedtls_ssl_handshake_client_step+0xc78>)
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	f640 4311 	movw	r3, #3089	; 0xc11
 8008928:	e5c9      	b.n	80084be <mbedtls_ssl_handshake_client_step+0x79e>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 800892a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800892e:	b143      	cbz	r3, 8008942 <mbedtls_ssl_handshake_client_step+0xc22>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8008930:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008932:	b10e      	cbz	r6, 8008938 <mbedtls_ssl_handshake_client_step+0xc18>
 8008934:	6873      	ldr	r3, [r6, #4]
 8008936:	b913      	cbnz	r3, 800893e <mbedtls_ssl_handshake_client_step+0xc1e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38

    return( key_cert == NULL ? NULL : key_cert->cert );
 800893c:	b10b      	cbz	r3, 8008942 <mbedtls_ssl_handshake_client_step+0xc22>
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	bb63      	cbnz	r3, 800899c <mbedtls_ssl_handshake_client_step+0xc7c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8008942:	4b15      	ldr	r3, [pc, #84]	; (8008998 <mbedtls_ssl_handshake_client_step+0xc78>)
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	f640 4318 	movw	r3, #3096	; 0xc18
 800894a:	e5b8      	b.n	80084be <mbedtls_ssl_handshake_client_step+0x79e>
 800894c:	08013139 	.word	0x08013139
 8008950:	08013174 	.word	0x08013174
 8008954:	080131bc 	.word	0x080131bc
 8008958:	08012b3c 	.word	0x08012b3c
 800895c:	08012daf 	.word	0x08012daf
 8008960:	080131d7 	.word	0x080131d7
 8008964:	ffff8480 	.word	0xffff8480
 8008968:	080131f5 	.word	0x080131f5
 800896c:	08013210 	.word	0x08013210
 8008970:	0801322d 	.word	0x0801322d
 8008974:	08013233 	.word	0x08013233
 8008978:	08013248 	.word	0x08013248
 800897c:	ffff9300 	.word	0xffff9300
 8008980:	08013266 	.word	0x08013266
 8008984:	08012d6a 	.word	0x08012d6a
 8008988:	08013108 	.word	0x08013108
 800898c:	08013280 	.word	0x08013280
 8008990:	0801329d 	.word	0x0801329d
 8008994:	08012efe 	.word	0x08012efe
 8008998:	080132b9 	.word	0x080132b9
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 800899c:	4620      	mov	r0, r4
 800899e:	f7ff f9b3 	bl	8007d08 <mbedtls_ssl_own_key>
 80089a2:	b958      	cbnz	r0, 80089bc <mbedtls_ssl_handshake_client_step+0xc9c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 80089a4:	4bb6      	ldr	r3, [pc, #728]	; (8008c80 <mbedtls_ssl_handshake_client_step+0xf60>)
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	4ab6      	ldr	r2, [pc, #728]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 80089aa:	4db7      	ldr	r5, [pc, #732]	; (8008c88 <mbedtls_ssl_handshake_client_step+0xf68>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 80089ac:	f640 431f 	movw	r3, #3103	; 0xc1f
 80089b0:	2101      	movs	r1, #1
 80089b2:	4620      	mov	r0, r4
 80089b4:	f7fb fe06 	bl	80045c4 <mbedtls_debug_print_msg>
 80089b8:	f7ff b9e8 	b.w	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
    ssl->handshake->calc_verify( ssl, hash );
 80089bc:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 80089be:	a90c      	add	r1, sp, #48	; 0x30
 80089c0:	4620      	mov	r0, r4
 80089c2:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80089c4:	68e3      	ldr	r3, [r4, #12]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d130      	bne.n	8008a2c <mbedtls_ssl_handshake_client_step+0xd0c>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80089ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	7a5d      	ldrb	r5, [r3, #9]
 80089d0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80089d4:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80089d6:	bf0b      	itete	eq
 80089d8:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80089da:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80089dc:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80089de:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80089e0:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
 80089e2:	bf18      	it	ne
 80089e4:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80089e6:	f7ff f98f 	bl	8007d08 <mbedtls_ssl_own_key>
 80089ea:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 80089ee:	f002 fd1c 	bl	800b42a <mbedtls_ssl_sig_from_pk>
 80089f2:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7ff f987 	bl	8007d08 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80089fa:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	9203      	str	r2, [sp, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	9302      	str	r3, [sp, #8]
 8008a04:	ab0b      	add	r3, sp, #44	; 0x2c
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4629      	mov	r1, r5
 8008a12:	2300      	movs	r3, #0
 8008a14:	aa0c      	add	r2, sp, #48	; 0x30
 8008a16:	f7fd f93f 	bl	8005c98 <mbedtls_pk_sign>
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	b158      	cbz	r0, 8008a36 <mbedtls_ssl_handshake_client_step+0xd16>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 8008a1e:	4b9b      	ldr	r3, [pc, #620]	; (8008c8c <mbedtls_ssl_handshake_client_step+0xf6c>)
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	9001      	str	r0, [sp, #4]
 8008a24:	f640 4376 	movw	r3, #3190	; 0xc76
 8008a28:	f7ff ba79 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8008a2c:	4b98      	ldr	r3, [pc, #608]	; (8008c90 <mbedtls_ssl_handshake_client_step+0xf70>)
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	f640 436e 	movw	r3, #3182	; 0xc6e
 8008a34:	e589      	b.n	800854a <mbedtls_ssl_handshake_client_step+0x82a>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 8008a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a38:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008a3c:	0a19      	lsrs	r1, r3, #8
 8008a3e:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 8008a40:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008a44:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 8008a46:	3308      	adds	r3, #8
 8008a48:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8008a4c:	2316      	movs	r3, #22
 8008a4e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 8008a52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008a56:	220f      	movs	r2, #15
 8008a58:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fe0f 	bl	8009684 <mbedtls_ssl_write_record>
 8008a66:	4605      	mov	r5, r0
 8008a68:	b130      	cbz	r0, 8008a78 <mbedtls_ssl_handshake_client_step+0xd58>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8008a6a:	4b8a      	ldr	r3, [pc, #552]	; (8008c94 <mbedtls_ssl_handshake_client_step+0xf74>)
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	9001      	str	r0, [sp, #4]
 8008a70:	f640 4385 	movw	r3, #3205	; 0xc85
 8008a74:	f7ff ba53 	b.w	8007f1e <mbedtls_ssl_handshake_client_step+0x1fe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 8008a78:	4b87      	ldr	r3, [pc, #540]	; (8008c98 <mbedtls_ssl_handshake_client_step+0xf78>)
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	f640 4389 	movw	r3, #3209	; 0xc89
 8008a80:	f7ff ba69 	b.w	8007f56 <mbedtls_ssl_handshake_client_step+0x236>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 8008a84:	4620      	mov	r0, r4
 8008a86:	f001 fe85 	bl	800a794 <mbedtls_ssl_write_change_cipher_spec>
 8008a8a:	e504      	b.n	8008496 <mbedtls_ssl_handshake_client_step+0x776>
           ret = mbedtls_ssl_write_finished( ssl );
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f001 ff53 	bl	800a938 <mbedtls_ssl_write_finished>
 8008a92:	e500      	b.n	8008496 <mbedtls_ssl_handshake_client_step+0x776>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 8008a94:	4620      	mov	r0, r4
 8008a96:	f001 feb7 	bl	800a808 <mbedtls_ssl_parse_change_cipher_spec>
 8008a9a:	e4fc      	b.n	8008496 <mbedtls_ssl_handshake_client_step+0x776>
           ret = mbedtls_ssl_parse_finished( ssl );
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f001 ffc1 	bl	800aa24 <mbedtls_ssl_parse_finished>
 8008aa2:	e4f8      	b.n	8008496 <mbedtls_ssl_handshake_client_step+0x776>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 8008aa4:	4b7d      	ldr	r3, [pc, #500]	; (8008c9c <mbedtls_ssl_handshake_client_step+0xf7c>)
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	4a76      	ldr	r2, [pc, #472]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008aaa:	f640 5377 	movw	r3, #3447	; 0xd77
 8008aae:	2102      	movs	r1, #2
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7fb fd87 	bl	80045c4 <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8008ab6:	230f      	movs	r3, #15
        ssl->state++;
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	f7ff b967 	b.w	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
           mbedtls_ssl_handshake_wrapup( ssl );
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f002 facc 	bl	800b05c <mbedtls_ssl_handshake_wrapup>
           break;
 8008ac4:	f7ff b962 	b.w	8007d8c <mbedtls_ssl_handshake_client_step+0x6c>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	4b75      	ldr	r3, [pc, #468]	; (8008ca0 <mbedtls_ssl_handshake_client_step+0xf80>)
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4a6d      	ldr	r2, [pc, #436]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008ad0:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7fb fd74 	bl	80045c4 <mbedtls_debug_print_msg>
 8008adc:	f7ff b983 	b.w	8007de6 <mbedtls_ssl_handshake_client_step+0xc6>
    memcpy( p, ssl->handshake->randbytes, 32 );
 8008ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p += 2;
 8008ae2:	f108 0106 	add.w	r1, r8, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 8008ae6:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8008aea:	4608      	mov	r0, r1
 8008aec:	33a8      	adds	r3, #168	; 0xa8
 8008aee:	f852 5b04 	ldr.w	r5, [r2], #4
 8008af2:	f840 5b04 	str.w	r5, [r0], #4
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d1f9      	bne.n	8008aee <mbedtls_ssl_handshake_client_step+0xdce>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 8008afa:	2320      	movs	r3, #32
 8008afc:	9302      	str	r3, [sp, #8]
 8008afe:	4b69      	ldr	r3, [pc, #420]	; (8008ca4 <mbedtls_ssl_handshake_client_step+0xf84>)
 8008b00:	9101      	str	r1, [sp, #4]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4a5f      	ldr	r2, [pc, #380]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008b06:	f240 3309 	movw	r3, #777	; 0x309
 8008b0a:	2103      	movs	r1, #3
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7fb fdb7 	bl	8004680 <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 8008b12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b14:	689e      	ldr	r6, [r3, #8]
    if( n < 16 || n > 32 ||
 8008b16:	f1a6 0310 	sub.w	r3, r6, #16
 8008b1a:	2b10      	cmp	r3, #16
 8008b1c:	f63f a99b 	bhi.w	8007e56 <mbedtls_ssl_handshake_client_step+0x136>
        ssl->handshake->resume == 0 )
 8008b20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if( n < 16 || n > 32 ||
 8008b22:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
        n = 0;
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bf08      	it	eq
 8008b2a:	2600      	moveq	r6, #0
    *p++ = (unsigned char) n;
 8008b2c:	f108 0527 	add.w	r5, r8, #39	; 0x27
 8008b30:	f888 6026 	strb.w	r6, [r8, #38]	; 0x26
    for( i = 0; i < n; i++ )
 8008b34:	2300      	movs	r3, #0
 8008b36:	429e      	cmp	r6, r3
 8008b38:	f47f a990 	bne.w	8007e5c <mbedtls_ssl_handshake_client_step+0x13c>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 8008b3c:	4b5a      	ldr	r3, [pc, #360]	; (8008ca8 <mbedtls_ssl_handshake_client_step+0xf88>)
 8008b3e:	9601      	str	r6, [sp, #4]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4a50      	ldr	r2, [pc, #320]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 8008b44:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8008c84 <mbedtls_ssl_handshake_client_step+0xf64>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 8008b48:	f240 333e 	movw	r3, #830	; 0x33e
 8008b4c:	2103      	movs	r1, #3
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7fb fd38 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 8008b54:	4b55      	ldr	r3, [pc, #340]	; (8008cac <mbedtls_ssl_handshake_client_step+0xf8c>)
 8008b56:	9602      	str	r6, [sp, #8]
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4a4a      	ldr	r2, [pc, #296]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008b5c:	9501      	str	r5, [sp, #4]
 8008b5e:	f240 333f 	movw	r3, #831	; 0x33f
 8008b62:	2103      	movs	r1, #3
 8008b64:	4620      	mov	r0, r4
 8008b66:	f7fb fd8b 	bl	8004680 <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	68e2      	ldr	r2, [r4, #12]
 8008b6e:	eb05 0a06 	add.w	sl, r5, r6
 8008b72:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
    p += 2;
 8008b76:	f10a 0602 	add.w	r6, sl, #2
    n = 0;
 8008b7a:	2700      	movs	r7, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
 8008b7c:	f8d9 5000 	ldr.w	r5, [r9]
 8008b80:	2d00      	cmp	r5, #0
 8008b82:	f47f a972 	bne.w	8007e6a <mbedtls_ssl_handshake_client_step+0x14a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 8008b86:	4b4a      	ldr	r3, [pc, #296]	; (8008cb0 <mbedtls_ssl_handshake_client_step+0xf90>)
 8008b88:	9701      	str	r7, [sp, #4]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4a3d      	ldr	r2, [pc, #244]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008b8e:	f240 3389 	movw	r3, #905	; 0x389
 8008b92:	2103      	movs	r1, #3
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7fb fd15 	bl	80045c4 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 8008b9a:	4b46      	ldr	r3, [pc, #280]	; (8008cb4 <mbedtls_ssl_handshake_client_step+0xf94>)
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4a39      	ldr	r2, [pc, #228]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008ba0:	f240 3392 	movw	r3, #914	; 0x392
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7fb fd0c 	bl	80045c4 <mbedtls_debug_print_msg>
        n++;
 8008bac:	3701      	adds	r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 8008bae:	23ff      	movs	r3, #255	; 0xff
 8008bb0:	7073      	strb	r3, [r6, #1]
    *q++ = (unsigned char)( n >> 7 );
 8008bb2:	09fb      	lsrs	r3, r7, #7
    *q++ = (unsigned char)( n << 1 );
 8008bb4:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 8008bb6:	7035      	strb	r5, [r6, #0]
    *q++ = (unsigned char)( n >> 7 );
 8008bb8:	f88a 3000 	strb.w	r3, [sl]
    *q++ = (unsigned char)( n << 1 );
 8008bbc:	f88a 7001 	strb.w	r7, [sl, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 8008bc0:	4b3d      	ldr	r3, [pc, #244]	; (8008cb8 <mbedtls_ssl_handshake_client_step+0xf98>)
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	2701      	movs	r7, #1
 8008bc6:	9701      	str	r7, [sp, #4]
 8008bc8:	f240 33c3 	movw	r3, #963	; 0x3c3
 8008bcc:	4a2d      	ldr	r2, [pc, #180]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008bce:	2103      	movs	r1, #3
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7fb fcf7 	bl	80045c4 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 8008bd6:	4b39      	ldr	r3, [pc, #228]	; (8008cbc <mbedtls_ssl_handshake_client_step+0xf9c>)
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	2103      	movs	r1, #3
 8008bdc:	f240 33c5 	movw	r3, #965	; 0x3c5
 8008be0:	9501      	str	r5, [sp, #4]
 8008be2:	4a28      	ldr	r2, [pc, #160]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7fb fced 	bl	80045c4 <mbedtls_debug_print_msg>
        *p++ = 1;
 8008bea:	70b7      	strb	r7, [r6, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8008bec:	70f5      	strb	r5, [r6, #3]
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8008bf4:	2903      	cmp	r1, #3
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 8008bf6:	f106 0706 	add.w	r7, r6, #6
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8008bfa:	f47f a96c 	bne.w	8007ed6 <mbedtls_ssl_handshake_client_step+0x1b6>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 8008bfe:	4b30      	ldr	r3, [pc, #192]	; (8008cc0 <mbedtls_ssl_handshake_client_step+0xfa0>)
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4a20      	ldr	r2, [pc, #128]	; (8008c84 <mbedtls_ssl_handshake_client_step+0xf64>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8008c04:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 8008c08:	23bd      	movs	r3, #189	; 0xbd
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7fb fcda 	bl	80045c4 <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
    size_t sig_alg_len = 0;
 8008c16:	462b      	mov	r3, r5
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8008c18:	f85a 5013 	ldr.w	r5, [sl, r3, lsl #1]
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	f47f a94e 	bne.w	8007ebe <mbedtls_ssl_handshake_client_step+0x19e>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8008c22:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 8008c26:	4297      	cmp	r7, r2
 8008c28:	f63f a94c 	bhi.w	8007ec4 <mbedtls_ssl_handshake_client_step+0x1a4>
 8008c2c:	1bd2      	subs	r2, r2, r7
 8008c2e:	3306      	adds	r3, #6
 8008c30:	429a      	cmp	r2, r3
 8008c32:	f4ff a947 	bcc.w	8007ec4 <mbedtls_ssl_handshake_client_step+0x1a4>
    unsigned char *sig_alg_list = buf + 6;
 8008c36:	f106 0b0c 	add.w	fp, r6, #12
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 8008c3a:	2301      	movs	r3, #1
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8008c3c:	f85a 0015 	ldr.w	r0, [sl, r5, lsl #1]
 8008c40:	f105 0902 	add.w	r9, r5, #2
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f47f a970 	bne.w	8007f2a <mbedtls_ssl_handshake_client_step+0x20a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 8008c4a:	230d      	movs	r3, #13
 8008c4c:	71f3      	strb	r3, [r6, #7]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 8008c4e:	b2eb      	uxtb	r3, r5
 8008c50:	1c9a      	adds	r2, r3, #2
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 8008c52:	ea4f 2919 	mov.w	r9, r9, lsr #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 8008c56:	7272      	strb	r2, [r6, #9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 8008c58:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 8008c5a:	71b0      	strb	r0, [r6, #6]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 8008c5c:	f886 9008 	strb.w	r9, [r6, #8]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 8008c60:	72b2      	strb	r2, [r6, #10]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 8008c62:	72f3      	strb	r3, [r6, #11]
    *olen = 6 + sig_alg_len;
 8008c64:	3506      	adds	r5, #6
 8008c66:	f7ff b936 	b.w	8007ed6 <mbedtls_ssl_handshake_client_step+0x1b6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 8008c6a:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <mbedtls_ssl_handshake_client_step+0xfa4>)
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	f240 738b 	movw	r3, #1931	; 0x78b
 8008c72:	f7ff b970 	b.w	8007f56 <mbedtls_ssl_handshake_client_step+0x236>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <mbedtls_ssl_handshake_client_step+0xfa8>)
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	f640 2339 	movw	r3, #2617	; 0xa39
 8008c7e:	e41e      	b.n	80084be <mbedtls_ssl_handshake_client_step+0x79e>
 8008c80:	080132da 	.word	0x080132da
 8008c84:	08012b3c 	.word	0x08012b3c
 8008c88:	ffff8a00 	.word	0xffff8a00
 8008c8c:	080132fd 	.word	0x080132fd
 8008c90:	08013108 	.word	0x08013108
 8008c94:	08012d6a 	.word	0x08012d6a
 8008c98:	0801330d 	.word	0x0801330d
 8008c9c:	08013329 	.word	0x08013329
 8008ca0:	08013339 	.word	0x08013339
 8008ca4:	0801335e 	.word	0x0801335e
 8008ca8:	08012c15 	.word	0x08012c15
 8008cac:	08012c37 	.word	0x08012c37
 8008cb0:	08012c74 	.word	0x08012c74
 8008cb4:	08012ca8 	.word	0x08012ca8
 8008cb8:	08012ccd 	.word	0x08012ccd
 8008cbc:	08012ced 	.word	0x08012ced
 8008cc0:	08012d0d 	.word	0x08012d0d
 8008cc4:	08013379 	.word	0x08013379
 8008cc8:	0801338f 	.word	0x0801338f

08008ccc <mbedtls_zeroize>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8008ccc:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4288      	cmp	r0, r1
 8008cd2:	d100      	bne.n	8008cd6 <mbedtls_zeroize+0xa>
}
 8008cd4:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8008cd6:	7003      	strb	r3, [r0, #0]
 8008cd8:	3001      	adds	r0, #1
 8008cda:	e7f9      	b.n	8008cd0 <mbedtls_zeroize+0x4>

08008cdc <ssl_set_timer>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 8008cdc:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 8008cde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 8008ce4:	b17b      	cbz	r3, 8008d06 <ssl_set_timer+0x2a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <ssl_set_timer+0x30>)
 8008ce8:	9101      	str	r1, [sp, #4]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <ssl_set_timer+0x34>)
 8008cee:	2352      	movs	r3, #82	; 0x52
 8008cf0:	2103      	movs	r1, #3
 8008cf2:	f7fb fc67 	bl	80045c4 <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8008cf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008cf8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	08a9      	lsrs	r1, r5, #2
}
 8008cfe:	b003      	add	sp, #12
 8008d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8008d04:	4718      	bx	r3
}
 8008d06:	b003      	add	sp, #12
 8008d08:	bd30      	pop	{r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	0801416f 	.word	0x0801416f
 8008d10:	08014146 	.word	0x08014146

08008d14 <ssl_calc_finished_tls_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8008d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8008d18:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
{
 8008d1a:	b0a8      	sub	sp, #160	; 0xa0
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4688      	mov	r8, r1
 8008d20:	4691      	mov	r9, r2
    if( !session )
 8008d22:	b906      	cbnz	r6, 8008d26 <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 8008d24:	6a86      	ldr	r6, [r0, #40]	; 0x28
#if !defined(MBEDTLS_SHA256_ALT)
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 8008d26:	4f2a      	ldr	r7, [pc, #168]	; (8008dd0 <ssl_calc_finished_tls_sha256+0xbc>)
    mbedtls_sha256_init( &sha256 );
 8008d28:	a80d      	add	r0, sp, #52	; 0x34
 8008d2a:	f7fe fb32 	bl	8007392 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 8008d2e:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <ssl_calc_finished_tls_sha256+0xc0>)
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	4a29      	ldr	r2, [pc, #164]	; (8008dd8 <ssl_calc_finished_tls_sha256+0xc4>)
 8008d34:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8008d38:	4620      	mov	r0, r4
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	f7fb fc42 	bl	80045c4 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8008d40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008d42:	a80d      	add	r0, sp, #52	; 0x34
 8008d44:	3108      	adds	r1, #8
 8008d46:	f7fe fb32 	bl	80073ae <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 8008d4a:	ab0f      	add	r3, sp, #60	; 0x3c
 8008d4c:	2520      	movs	r5, #32
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	4b22      	ldr	r3, [pc, #136]	; (8008ddc <ssl_calc_finished_tls_sha256+0xc8>)
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	4620      	mov	r0, r4
 8008d56:	f241 4304 	movw	r3, #5124	; 0x1404
 8008d5a:	9502      	str	r5, [sp, #8]
 8008d5c:	4a1e      	ldr	r2, [pc, #120]	; (8008dd8 <ssl_calc_finished_tls_sha256+0xc4>)
 8008d5e:	2104      	movs	r1, #4
 8008d60:	f7fb fc8e 	bl	8004680 <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 8008d64:	4a1e      	ldr	r2, [pc, #120]	; (8008de0 <ssl_calc_finished_tls_sha256+0xcc>)
             ? "client finished"
             : "server finished";

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8008d66:	a905      	add	r1, sp, #20
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 8008d68:	f1b9 0f00 	cmp.w	r9, #0
 8008d6c:	bf18      	it	ne
 8008d6e:	4617      	movne	r7, r2
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8008d70:	a80d      	add	r0, sp, #52	; 0x34

    ssl->handshake->tls_prf( session->master, 48, sender,
 8008d72:	f04f 090c 	mov.w	r9, #12
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8008d76:	f7fe ff05 	bl	8007b84 <mbedtls_sha256_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
 8008d7a:	e88d 0320 	stmia.w	sp, {r5, r8, r9}
 8008d7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d80:	463a      	mov	r2, r7
 8008d82:	f8d3 a080 	ldr.w	sl, [r3, #128]	; 0x80
 8008d86:	2130      	movs	r1, #48	; 0x30
 8008d88:	ab05      	add	r3, sp, #20
 8008d8a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 8008d8e:	47d0      	blx	sl
                             padbuf, 32, buf, len );

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 8008d90:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <ssl_calc_finished_tls_sha256+0xd0>)
 8008d92:	4a11      	ldr	r2, [pc, #68]	; (8008dd8 <ssl_calc_finished_tls_sha256+0xc4>)
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2103      	movs	r1, #3
 8008d98:	f241 4310 	movw	r3, #5136	; 0x1410
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008da2:	f8cd 8004 	str.w	r8, [sp, #4]
 8008da6:	f7fb fc6b 	bl	8004680 <mbedtls_debug_print_buf>

    mbedtls_sha256_free( &sha256 );
 8008daa:	a80d      	add	r0, sp, #52	; 0x34
 8008dac:	f7fe faf5 	bl	800739a <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8008db0:	4629      	mov	r1, r5
 8008db2:	a805      	add	r0, sp, #20
 8008db4:	f7ff ff8a 	bl	8008ccc <mbedtls_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <ssl_calc_finished_tls_sha256+0xd4>)
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	4a06      	ldr	r2, [pc, #24]	; (8008dd8 <ssl_calc_finished_tls_sha256+0xc4>)
 8008dbe:	f241 4316 	movw	r3, #5142	; 0x1416
 8008dc2:	2102      	movs	r1, #2
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7fb fbfd 	bl	80045c4 <mbedtls_debug_print_msg>
}
 8008dca:	b028      	add	sp, #160	; 0xa0
 8008dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd0:	0801406d 	.word	0x0801406d
 8008dd4:	0801408d 	.word	0x0801408d
 8008dd8:	08014146 	.word	0x08014146
 8008ddc:	080140aa 	.word	0x080140aa
 8008de0:	0801407d 	.word	0x0801407d
 8008de4:	080140be 	.word	0x080140be
 8008de8:	080140d3 	.word	0x080140d3

08008dec <ssl_calc_verify_tls_sha256>:
{
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	b0a0      	sub	sp, #128	; 0x80
 8008df0:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 8008df2:	4d18      	ldr	r5, [pc, #96]	; (8008e54 <ssl_calc_verify_tls_sha256+0x68>)
    mbedtls_sha256_init( &sha256 );
 8008df4:	a805      	add	r0, sp, #20
{
 8008df6:	460e      	mov	r6, r1
    mbedtls_sha256_init( &sha256 );
 8008df8:	f7fe facb 	bl	8007392 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 8008dfc:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <ssl_calc_verify_tls_sha256+0x6c>)
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	462a      	mov	r2, r5
 8008e02:	f240 432d 	movw	r3, #1069	; 0x42d
 8008e06:	4620      	mov	r0, r4
 8008e08:	2102      	movs	r1, #2
 8008e0a:	f7fb fbdb 	bl	80045c4 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8008e0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008e10:	a805      	add	r0, sp, #20
 8008e12:	3108      	adds	r1, #8
 8008e14:	f7fe facb 	bl	80073ae <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8008e18:	4631      	mov	r1, r6
 8008e1a:	a805      	add	r0, sp, #20
 8008e1c:	f7fe feb2 	bl	8007b84 <mbedtls_sha256_finish_ret>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 8008e20:	2320      	movs	r3, #32
 8008e22:	9302      	str	r3, [sp, #8]
 8008e24:	4b0d      	ldr	r3, [pc, #52]	; (8008e5c <ssl_calc_verify_tls_sha256+0x70>)
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	9601      	str	r6, [sp, #4]
 8008e2e:	f240 4332 	movw	r3, #1074	; 0x432
 8008e32:	2103      	movs	r1, #3
 8008e34:	f7fb fc24 	bl	8004680 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <ssl_calc_verify_tls_sha256+0x74>)
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	f240 4333 	movw	r3, #1075	; 0x433
 8008e42:	2102      	movs	r1, #2
 8008e44:	4620      	mov	r0, r4
 8008e46:	f7fb fbbd 	bl	80045c4 <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 8008e4a:	a805      	add	r0, sp, #20
 8008e4c:	f7fe faa5 	bl	800739a <mbedtls_sha256_free>
}
 8008e50:	b020      	add	sp, #128	; 0x80
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	08014146 	.word	0x08014146
 8008e58:	080140e5 	.word	0x080140e5
 8008e5c:	080140fb 	.word	0x080140fb
 8008e60:	08014114 	.word	0x08014114

08008e64 <ssl_update_checksum_sha256>:
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8008e64:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008e66:	3008      	adds	r0, #8
 8008e68:	f7fe be86 	b.w	8007b78 <mbedtls_sha256_update_ret>

08008e6c <ssl_update_checksum_start>:
 8008e6c:	f7ff bffa 	b.w	8008e64 <ssl_update_checksum_sha256>

08008e70 <tls_prf_sha256>:
{
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	b0af      	sub	sp, #188	; 0xbc
 8008e76:	e88d 0003 	stmia.w	sp, {r0, r1}
    mbedtls_md_init( &md_ctx );
 8008e7a:	a803      	add	r0, sp, #12
{
 8008e7c:	4691      	mov	r9, r2
 8008e7e:	469b      	mov	fp, r3
 8008e80:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
    mbedtls_md_init( &md_ctx );
 8008e82:	f7fc fbc7 	bl	8005614 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 8008e86:	2006      	movs	r0, #6
 8008e88:	f7fc fbb6 	bl	80055f8 <mbedtls_md_info_from_type>
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d074      	beq.n	8008f7c <tls_prf_sha256+0x10c>
    md_len = mbedtls_md_get_size( md_info );
 8008e92:	f7fc fcdf 	bl	8005854 <mbedtls_md_get_size>
 8008e96:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f7f7 f9a1 	bl	80001e0 <strlen>
 8008e9e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8008ea0:	1827      	adds	r7, r4, r0
 8008ea2:	19da      	adds	r2, r3, r7
 8008ea4:	2a80      	cmp	r2, #128	; 0x80
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	d86a      	bhi.n	8008f80 <tls_prf_sha256+0x110>
    memcpy( tmp + md_len, label, nb );
 8008eaa:	ab0e      	add	r3, sp, #56	; 0x38
 8008eac:	eb03 0804 	add.w	r8, r3, r4
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	f005 fab2 	bl	800e41e <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 8008eba:	ab0e      	add	r3, sp, #56	; 0x38
 8008ebc:	19d8      	adds	r0, r3, r7
 8008ebe:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	f005 faac 	bl	800e41e <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4651      	mov	r1, sl
 8008eca:	a803      	add	r0, sp, #12
 8008ecc:	f7fc fbc8 	bl	8005660 <mbedtls_md_setup>
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	bb00      	cbnz	r0, 8008f16 <tls_prf_sha256+0xa6>
    nb += rlen;
 8008ed4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8008ed6:	e89d 0006 	ldmia.w	sp, {r1, r2}
    nb += rlen;
 8008eda:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8008edc:	a803      	add	r0, sp, #12
 8008ede:	f7fc fbef 	bl	80056c0 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	a803      	add	r0, sp, #12
 8008ee8:	f7fc fc4e 	bl	8005788 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8008eec:	a90e      	add	r1, sp, #56	; 0x38
 8008eee:	a803      	add	r0, sp, #12
 8008ef0:	f7fc fc5c 	bl	80057ac <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 8008ef4:	46b8      	mov	r8, r7
 8008ef6:	f10d 0a18 	add.w	sl, sp, #24
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8008efa:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 8008efc:	4546      	cmp	r6, r8
        mbedtls_md_hmac_reset ( &md_ctx );
 8008efe:	a803      	add	r0, sp, #12
    for( i = 0; i < dlen; i += md_len )
 8008f00:	d80d      	bhi.n	8008f1e <tls_prf_sha256+0xae>
    mbedtls_md_free( &md_ctx );
 8008f02:	f7fc fb8c 	bl	800561e <mbedtls_md_free>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8008f06:	2180      	movs	r1, #128	; 0x80
 8008f08:	a80e      	add	r0, sp, #56	; 0x38
 8008f0a:	f7ff fedf 	bl	8008ccc <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8008f0e:	2120      	movs	r1, #32
 8008f10:	4650      	mov	r0, sl
 8008f12:	f7ff fedb 	bl	8008ccc <mbedtls_zeroize>
}
 8008f16:	4638      	mov	r0, r7
 8008f18:	b02f      	add	sp, #188	; 0xbc
 8008f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 8008f1e:	f7fc fc77 	bl	8005810 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8008f22:	462a      	mov	r2, r5
 8008f24:	a90e      	add	r1, sp, #56	; 0x38
 8008f26:	a803      	add	r0, sp, #12
 8008f28:	f7fc fc2e 	bl	8005788 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 8008f2c:	4651      	mov	r1, sl
 8008f2e:	a803      	add	r0, sp, #12
 8008f30:	f7fc fc3c 	bl	80057ac <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 8008f34:	a803      	add	r0, sp, #12
 8008f36:	f7fc fc6b 	bl	8005810 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8008f3a:	4622      	mov	r2, r4
 8008f3c:	a90e      	add	r1, sp, #56	; 0x38
 8008f3e:	a803      	add	r0, sp, #12
 8008f40:	f7fc fc22 	bl	8005788 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8008f44:	a90e      	add	r1, sp, #56	; 0x38
 8008f46:	a803      	add	r0, sp, #12
 8008f48:	f7fc fc30 	bl	80057ac <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8008f4c:	eb04 0108 	add.w	r1, r4, r8
            dstbuf[i + j]  = h_i[j];
 8008f50:	9839      	ldr	r0, [sp, #228]	; 0xe4
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8008f52:	428e      	cmp	r6, r1
 8008f54:	bf2c      	ite	cs
 8008f56:	4622      	movcs	r2, r4
 8008f58:	fbb6 f2f4 	udivcc	r2, r6, r4
        for( j = 0; j < k; j++ )
 8008f5c:	f04f 0300 	mov.w	r3, #0
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8008f60:	bf38      	it	cc
 8008f62:	fb04 6212 	mlscc	r2, r4, r2, r6
            dstbuf[i + j]  = h_i[j];
 8008f66:	4480      	add	r8, r0
        for( j = 0; j < k; j++ )
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d101      	bne.n	8008f70 <tls_prf_sha256+0x100>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8008f6c:	4688      	mov	r8, r1
 8008f6e:	e7c5      	b.n	8008efc <tls_prf_sha256+0x8c>
            dstbuf[i + j]  = h_i[j];
 8008f70:	f81a 0003 	ldrb.w	r0, [sl, r3]
 8008f74:	f808 0003 	strb.w	r0, [r8, r3]
        for( j = 0; j < k; j++ )
 8008f78:	3301      	adds	r3, #1
 8008f7a:	e7f5      	b.n	8008f68 <tls_prf_sha256+0xf8>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8008f7c:	4f01      	ldr	r7, [pc, #4]	; (8008f84 <tls_prf_sha256+0x114>)
 8008f7e:	e7ca      	b.n	8008f16 <tls_prf_sha256+0xa6>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8008f80:	4f01      	ldr	r7, [pc, #4]	; (8008f88 <tls_prf_sha256+0x118>)
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 8008f82:	e7c8      	b.n	8008f16 <tls_prf_sha256+0xa6>
 8008f84:	ffff9400 	.word	0xffff9400
 8008f88:	ffff8f00 	.word	0xffff8f00

08008f8c <mbedtls_ssl_derive_keys>:
{
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 8008f92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 8008f94:	6c04      	ldr	r4, [r0, #64]	; 0x40
    mbedtls_ssl_session *session = ssl->session_negotiate;
 8008f96:	9306      	str	r3, [sp, #24]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 8008f98:	4b96      	ldr	r3, [pc, #600]	; (80091f4 <mbedtls_ssl_derive_keys+0x268>)
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8008f9a:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 8008f9e:	4a96      	ldr	r2, [pc, #600]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	2102      	movs	r1, #2
 8008fa4:	f240 2301 	movw	r3, #513	; 0x201
{
 8008fa8:	4606      	mov	r6, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 8008faa:	f7fb fb0b 	bl	80045c4 <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	7a18      	ldrb	r0, [r3, #8]
 8008fb2:	f7fb f839 	bl	8004028 <mbedtls_cipher_info_from_type>
 8008fb6:	6823      	ldr	r3, [r4, #0]
    if( cipher_info == NULL )
 8008fb8:	4681      	mov	r9, r0
 8008fba:	b978      	cbnz	r0, 8008fdc <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 8008fbc:	7a1b      	ldrb	r3, [r3, #8]
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	4b8e      	ldr	r3, [pc, #568]	; (80091fc <mbedtls_ssl_derive_keys+0x270>)
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	f240 2307 	movw	r3, #519	; 0x207
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 8008fc8:	4a8b      	ldr	r2, [pc, #556]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8008fca:	4d8d      	ldr	r5, [pc, #564]	; (8009200 <mbedtls_ssl_derive_keys+0x274>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7fb faf8 	bl	80045c4 <mbedtls_debug_print_msg>
}
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	b059      	add	sp, #356	; 0x164
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8008fdc:	7a58      	ldrb	r0, [r3, #9]
 8008fde:	f7fc fb0b 	bl	80055f8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8008fe2:	4683      	mov	fp, r0
 8008fe4:	b938      	cbnz	r0, 8008ff6 <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	7a5b      	ldrb	r3, [r3, #9]
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	4b85      	ldr	r3, [pc, #532]	; (8009204 <mbedtls_ssl_derive_keys+0x278>)
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	f240 230f 	movw	r3, #527	; 0x20f
 8008ff4:	e7e8      	b.n	8008fc8 <mbedtls_ssl_derive_keys+0x3c>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8008ff6:	68f1      	ldr	r1, [r6, #12]
 8008ff8:	2903      	cmp	r1, #3
 8008ffa:	d116      	bne.n	800902a <mbedtls_ssl_derive_keys+0x9e>
        handshake->tls_prf = tls_prf_sha256;
 8008ffc:	4b82      	ldr	r3, [pc, #520]	; (8009208 <mbedtls_ssl_derive_keys+0x27c>)
 8008ffe:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8009002:	4b82      	ldr	r3, [pc, #520]	; (800920c <mbedtls_ssl_derive_keys+0x280>)
 8009004:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8009008:	4b81      	ldr	r3, [pc, #516]	; (8009210 <mbedtls_ssl_derive_keys+0x284>)
 800900a:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
    if( handshake->resume == 0 )
 800900e:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8009012:	f108 07c8 	add.w	r7, r8, #200	; 0xc8
 8009016:	b19b      	cbz	r3, 8009040 <mbedtls_ssl_derive_keys+0xb4>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 8009018:	4b7e      	ldr	r3, [pc, #504]	; (8009214 <mbedtls_ssl_derive_keys+0x288>)
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	4a76      	ldr	r2, [pc, #472]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 800901e:	f44f 7322 	mov.w	r3, #648	; 0x288
 8009022:	4630      	mov	r0, r6
 8009024:	f7fb face 	bl	80045c4 <mbedtls_debug_print_msg>
 8009028:	e039      	b.n	800909e <mbedtls_ssl_derive_keys+0x112>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800902a:	4b7b      	ldr	r3, [pc, #492]	; (8009218 <mbedtls_ssl_derive_keys+0x28c>)
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	f240 233e 	movw	r3, #574	; 0x23e
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009032:	4a71      	ldr	r2, [pc, #452]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8009034:	4d79      	ldr	r5, [pc, #484]	; (800921c <mbedtls_ssl_derive_keys+0x290>)
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009036:	2101      	movs	r1, #1
 8009038:	4630      	mov	r0, r6
 800903a:	f7fb fac3 	bl	80045c4 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800903e:	e7c9      	b.n	8008fd4 <mbedtls_ssl_derive_keys+0x48>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 8009040:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8009044:	9302      	str	r3, [sp, #8]
 8009046:	4b76      	ldr	r3, [pc, #472]	; (8009220 <mbedtls_ssl_derive_keys+0x294>)
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	4a6b      	ldr	r2, [pc, #428]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 800904c:	9701      	str	r7, [sp, #4]
 800904e:	f240 234f 	movw	r3, #591	; 0x24f
 8009052:	4630      	mov	r0, r6
 8009054:	f7fb fb14 	bl	8004680 <mbedtls_debug_print_buf>
                                  session->master, 48 );
 8009058:	9b06      	ldr	r3, [sp, #24]
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 800905a:	4a72      	ldr	r2, [pc, #456]	; (8009224 <mbedtls_ssl_derive_keys+0x298>)
                                  session->master, 48 );
 800905c:	332c      	adds	r3, #44	; 0x2c
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8009064:	2340      	movs	r3, #64	; 0x40
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	f8cd a008 	str.w	sl, [sp, #8]
 800906c:	f8d8 5080 	ldr.w	r5, [r8, #128]	; 0x80
 8009070:	f8d8 1084 	ldr.w	r1, [r8, #132]	; 0x84
 8009074:	f108 0388 	add.w	r3, r8, #136	; 0x88
 8009078:	4638      	mov	r0, r7
 800907a:	47a8      	blx	r5
        if( ret != 0 )
 800907c:	4605      	mov	r5, r0
 800907e:	b150      	cbz	r0, 8009096 <mbedtls_ssl_derive_keys+0x10a>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8009080:	4b69      	ldr	r3, [pc, #420]	; (8009228 <mbedtls_ssl_derive_keys+0x29c>)
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	9001      	str	r0, [sp, #4]
 8009086:	f240 2381 	movw	r3, #641	; 0x281
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800908a:	4a5b      	ldr	r2, [pc, #364]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 800908c:	2101      	movs	r1, #1
 800908e:	4630      	mov	r0, r6
 8009090:	f7fb fac8 	bl	8004624 <mbedtls_debug_print_ret>
        return( ret );
 8009094:	e79e      	b.n	8008fd4 <mbedtls_ssl_derive_keys+0x48>
        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 8009096:	4651      	mov	r1, sl
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff fe17 	bl	8008ccc <mbedtls_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 800909e:	f108 0388 	add.w	r3, r8, #136	; 0x88
 80090a2:	ad08      	add	r5, sp, #32
 80090a4:	469a      	mov	sl, r3
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	6859      	ldr	r1, [r3, #4]
 80090aa:	462a      	mov	r2, r5
 80090ac:	c203      	stmia	r2!, {r0, r1}
 80090ae:	3308      	adds	r3, #8
 80090b0:	42bb      	cmp	r3, r7
 80090b2:	4615      	mov	r5, r2
 80090b4:	d1f7      	bne.n	80090a6 <mbedtls_ssl_derive_keys+0x11a>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80090b6:	ad10      	add	r5, sp, #64	; 0x40
 80090b8:	4652      	mov	r2, sl
 80090ba:	af18      	add	r7, sp, #96	; 0x60
 80090bc:	462b      	mov	r3, r5
 80090be:	cb03      	ldmia	r3!, {r0, r1}
 80090c0:	42bb      	cmp	r3, r7
 80090c2:	6010      	str	r0, [r2, #0]
 80090c4:	6051      	str	r1, [r2, #4]
 80090c6:	461d      	mov	r5, r3
 80090c8:	f102 0208 	add.w	r2, r2, #8
 80090cc:	d1f6      	bne.n	80090bc <mbedtls_ssl_derive_keys+0x130>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80090ce:	ad08      	add	r5, sp, #32
 80090d0:	f108 02a8 	add.w	r2, r8, #168	; 0xa8
 80090d4:	af10      	add	r7, sp, #64	; 0x40
 80090d6:	462b      	mov	r3, r5
 80090d8:	cb03      	ldmia	r3!, {r0, r1}
 80090da:	42bb      	cmp	r3, r7
 80090dc:	6010      	str	r0, [r2, #0]
 80090de:	6051      	str	r1, [r2, #4]
 80090e0:	461d      	mov	r5, r3
 80090e2:	f102 0208 	add.w	r2, r2, #8
 80090e6:	d1f6      	bne.n	80090d6 <mbedtls_ssl_derive_keys+0x14a>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80090e8:	2140      	movs	r1, #64	; 0x40
 80090ea:	a808      	add	r0, sp, #32
 80090ec:	f7ff fdee 	bl	8008ccc <mbedtls_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80090f0:	9b06      	ldr	r3, [sp, #24]
 80090f2:	4a4e      	ldr	r2, [pc, #312]	; (800922c <mbedtls_ssl_derive_keys+0x2a0>)
 80090f4:	332c      	adds	r3, #44	; 0x2c
 80090f6:	9307      	str	r3, [sp, #28]
 80090f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090fc:	9302      	str	r3, [sp, #8]
 80090fe:	2740      	movs	r7, #64	; 0x40
 8009100:	ab18      	add	r3, sp, #96	; 0x60
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	9700      	str	r7, [sp, #0]
 8009106:	f8d8 5080 	ldr.w	r5, [r8, #128]	; 0x80
 800910a:	9807      	ldr	r0, [sp, #28]
 800910c:	4653      	mov	r3, sl
 800910e:	2130      	movs	r1, #48	; 0x30
 8009110:	47a8      	blx	r5
    if( ret != 0 )
 8009112:	4605      	mov	r5, r0
 8009114:	b128      	cbz	r0, 8009122 <mbedtls_ssl_derive_keys+0x196>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 8009116:	4b44      	ldr	r3, [pc, #272]	; (8009228 <mbedtls_ssl_derive_keys+0x29c>)
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	9001      	str	r0, [sp, #4]
 800911c:	f240 23a2 	movw	r3, #674	; 0x2a2
 8009120:	e7b3      	b.n	800908a <mbedtls_ssl_derive_keys+0xfe>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 8009122:	9b06      	ldr	r3, [sp, #24]
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f7fe fde5 	bl	8007cf4 <mbedtls_ssl_get_ciphersuite_name>
 800912a:	4b41      	ldr	r3, [pc, #260]	; (8009230 <mbedtls_ssl_derive_keys+0x2a4>)
 800912c:	9001      	str	r0, [sp, #4]
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	4a31      	ldr	r2, [pc, #196]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 8009132:	f240 23a7 	movw	r3, #679	; 0x2a7
 8009136:	2103      	movs	r1, #3
 8009138:	4630      	mov	r0, r6
 800913a:	f7fb fa43 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 800913e:	2330      	movs	r3, #48	; 0x30
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	9b07      	ldr	r3, [sp, #28]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	4b37      	ldr	r3, [pc, #220]	; (8009224 <mbedtls_ssl_derive_keys+0x298>)
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	4a2b      	ldr	r2, [pc, #172]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 800914c:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8009150:	2103      	movs	r1, #3
 8009152:	4630      	mov	r0, r6
 8009154:	f7fb fa94 	bl	8004680 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 8009158:	4b36      	ldr	r3, [pc, #216]	; (8009234 <mbedtls_ssl_derive_keys+0x2a8>)
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	4a26      	ldr	r2, [pc, #152]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 800915e:	9702      	str	r7, [sp, #8]
 8009160:	f240 23a9 	movw	r3, #681	; 0x2a9
 8009164:	2104      	movs	r1, #4
 8009166:	4630      	mov	r0, r6
 8009168:	f8cd a004 	str.w	sl, [sp, #4]
 800916c:	f7fb fa88 	bl	8004680 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 8009170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	ab18      	add	r3, sp, #96	; 0x60
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	4b2f      	ldr	r3, [pc, #188]	; (8009238 <mbedtls_ssl_derive_keys+0x2ac>)
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <mbedtls_ssl_derive_keys+0x26c>)
 8009180:	f240 23aa 	movw	r3, #682	; 0x2aa
 8009184:	2104      	movs	r1, #4
 8009186:	4630      	mov	r0, r6
 8009188:	f7fb fa7a 	bl	8004680 <mbedtls_debug_print_buf>
    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 800918c:	4639      	mov	r1, r7
 800918e:	4650      	mov	r0, sl
 8009190:	f7ff fd9c 	bl	8008ccc <mbedtls_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 8009194:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009198:	08db      	lsrs	r3, r3, #3
 800919a:	6063      	str	r3, [r4, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 800919c:	f899 3001 	ldrb.w	r3, [r9, #1]
 80091a0:	2b06      	cmp	r3, #6
 80091a2:	d001      	beq.n	80091a8 <mbedtls_ssl_derive_keys+0x21c>
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d10e      	bne.n	80091c6 <mbedtls_ssl_derive_keys+0x23a>
        transform->ivlen = 12;
 80091a8:	230c      	movs	r3, #12
 80091aa:	60e3      	str	r3, [r4, #12]
        transform->fixed_ivlen = 4;
 80091ac:	2304      	movs	r3, #4
 80091ae:	6123      	str	r3, [r4, #16]
        transform->maclen = 0;
 80091b0:	2500      	movs	r5, #0
                            + ( transform->ciphersuite_info->flags &
 80091b2:	6823      	ldr	r3, [r4, #0]
        transform->maclen = 0;
 80091b4:	6165      	str	r5, [r4, #20]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 80091b6:	7f1b      	ldrb	r3, [r3, #28]
 80091b8:	f013 0f02 	tst.w	r3, #2
                            + ( transform->ciphersuite_info->flags &
 80091bc:	bf14      	ite	ne
 80091be:	2310      	movne	r3, #16
 80091c0:	2318      	moveq	r3, #24
                transform->minlen += transform->ivlen;
 80091c2:	60a3      	str	r3, [r4, #8]
 80091c4:	e049      	b.n	800925a <mbedtls_ssl_derive_keys+0x2ce>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80091c6:	2201      	movs	r2, #1
 80091c8:	4659      	mov	r1, fp
 80091ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80091ce:	f7fc fa47 	bl	8005660 <mbedtls_md_setup>
 80091d2:	4605      	mov	r5, r0
 80091d4:	b938      	cbnz	r0, 80091e6 <mbedtls_ssl_derive_keys+0x25a>
 80091d6:	2201      	movs	r2, #1
 80091d8:	4659      	mov	r1, fp
 80091da:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80091de:	f7fc fa3f 	bl	8005660 <mbedtls_md_setup>
 80091e2:	4605      	mov	r5, r0
 80091e4:	b360      	cbz	r0, 8009240 <mbedtls_ssl_derive_keys+0x2b4>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <mbedtls_ssl_derive_keys+0x2b0>)
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	9501      	str	r5, [sp, #4]
 80091ec:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 80091f0:	e74b      	b.n	800908a <mbedtls_ssl_derive_keys+0xfe>
 80091f2:	bf00      	nop
 80091f4:	080133fc 	.word	0x080133fc
 80091f8:	08014146 	.word	0x08014146
 80091fc:	0801340b 	.word	0x0801340b
 8009200:	ffff8f00 	.word	0xffff8f00
 8009204:	08013428 	.word	0x08013428
 8009208:	08008e71 	.word	0x08008e71
 800920c:	08008ded 	.word	0x08008ded
 8009210:	08008d15 	.word	0x08008d15
 8009214:	0801345e 	.word	0x0801345e
 8009218:	08013108 	.word	0x08013108
 800921c:	ffff9400 	.word	0xffff9400
 8009220:	08013449 	.word	0x08013449
 8009224:	0801344c 	.word	0x0801344c
 8009228:	0801345a 	.word	0x0801345a
 800922c:	0801347d 	.word	0x0801347d
 8009230:	0801348b 	.word	0x0801348b
 8009234:	08012e70 	.word	0x08012e70
 8009238:	0801349c 	.word	0x0801349c
 800923c:	080134a6 	.word	0x080134a6
        mac_key_len = mbedtls_md_get_size( md_info );
 8009240:	4658      	mov	r0, fp
 8009242:	f7fc fb07 	bl	8005854 <mbedtls_md_get_size>
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8009246:	f899 3001 	ldrb.w	r3, [r9, #1]
        transform->ivlen = cipher_info->iv_size;
 800924a:	f8d9 200c 	ldr.w	r2, [r9, #12]
        transform->maclen = mac_key_len;
 800924e:	6160      	str	r0, [r4, #20]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8009250:	2b07      	cmp	r3, #7
        mac_key_len = mbedtls_md_get_size( md_info );
 8009252:	4605      	mov	r5, r0
        transform->ivlen = cipher_info->iv_size;
 8009254:	60e2      	str	r2, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8009256:	d13c      	bne.n	80092d2 <mbedtls_ssl_derive_keys+0x346>
            transform->minlen = transform->maclen;
 8009258:	60a0      	str	r0, [r4, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 800925a:	6963      	ldr	r3, [r4, #20]
 800925c:	9304      	str	r3, [sp, #16]
 800925e:	68e3      	ldr	r3, [r4, #12]
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	6863      	ldr	r3, [r4, #4]
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	4b64      	ldr	r3, [pc, #400]	; (80093fc <mbedtls_ssl_derive_keys+0x470>)
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4a64      	ldr	r2, [pc, #400]	; (8009400 <mbedtls_ssl_derive_keys+0x474>)
 8009270:	f240 3316 	movw	r3, #790	; 0x316
 8009274:	2103      	movs	r1, #3
 8009276:	4630      	mov	r0, r6
 8009278:	f7fb f9a4 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800927c:	6833      	ldr	r3, [r6, #0]
 800927e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009282:	07db      	lsls	r3, r3, #31
 8009284:	d437      	bmi.n	80092f6 <mbedtls_ssl_derive_keys+0x36a>
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8009286:	f8d4 8004 	ldr.w	r8, [r4, #4]
        key1 = keyblk + mac_key_len * 2;
 800928a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 800928e:	ab18      	add	r3, sp, #96	; 0x60
 8009290:	eb0a 0708 	add.w	r7, sl, r8
 8009294:	441f      	add	r7, r3
        mac_dec = keyblk + mac_key_len;
 8009296:	eb03 0b05 	add.w	fp, r3, r5
        iv_copy_len = ( transform->fixed_ivlen ) ?
 800929a:	6923      	ldr	r3, [r4, #16]
                            transform->fixed_ivlen : transform->ivlen;
 800929c:	b903      	cbnz	r3, 80092a0 <mbedtls_ssl_derive_keys+0x314>
 800929e:	68e3      	ldr	r3, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80092a0:	9306      	str	r3, [sp, #24]
 80092a2:	461a      	mov	r2, r3
 80092a4:	eb07 0108 	add.w	r1, r7, r8
 80092a8:	f104 0018 	add.w	r0, r4, #24
 80092ac:	f005 f8b7 	bl	800e41e <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	eb03 0108 	add.w	r1, r3, r8
 80092b6:	461a      	mov	r2, r3
 80092b8:	4439      	add	r1, r7
 80092ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80092be:	f005 f8ae 	bl	800e41e <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80092c2:	68f3      	ldr	r3, [r6, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dc1b      	bgt.n	8009300 <mbedtls_ssl_derive_keys+0x374>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80092c8:	4b4e      	ldr	r3, [pc, #312]	; (8009404 <mbedtls_ssl_derive_keys+0x478>)
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	f44f 7358 	mov.w	r3, #864	; 0x360
 80092d0:	e6af      	b.n	8009032 <mbedtls_ssl_derive_keys+0xa6>
                                  + cipher_info->block_size
 80092d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
                                  - transform->maclen % cipher_info->block_size;
 80092d6:	fbb0 f1f3 	udiv	r1, r0, r3
 80092da:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 80092de:	68f1      	ldr	r1, [r6, #12]
                transform->minlen = transform->maclen
 80092e0:	60a3      	str	r3, [r4, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 80092e2:	3902      	subs	r1, #2
 80092e4:	2901      	cmp	r1, #1
 80092e6:	d801      	bhi.n	80092ec <mbedtls_ssl_derive_keys+0x360>
                transform->minlen += transform->ivlen;
 80092e8:	4413      	add	r3, r2
 80092ea:	e76a      	b.n	80091c2 <mbedtls_ssl_derive_keys+0x236>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80092ec:	4b45      	ldr	r3, [pc, #276]	; (8009404 <mbedtls_ssl_derive_keys+0x478>)
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	f240 330e 	movw	r3, #782	; 0x30e
 80092f4:	e69d      	b.n	8009032 <mbedtls_ssl_derive_keys+0xa6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80092f6:	4b43      	ldr	r3, [pc, #268]	; (8009404 <mbedtls_ssl_derive_keys+0x478>)
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	f44f 7351 	mov.w	r3, #836	; 0x344
 80092fe:	e698      	b.n	8009032 <mbedtls_ssl_derive_keys+0xa6>
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 8009300:	462a      	mov	r2, r5
 8009302:	a918      	add	r1, sp, #96	; 0x60
 8009304:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8009308:	f7fc f9da 	bl	80056c0 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 800930c:	f104 0850 	add.w	r8, r4, #80	; 0x50
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8009310:	462a      	mov	r2, r5
 8009312:	4659      	mov	r1, fp
 8009314:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8009318:	f7fc f9d2 	bl	80056c0 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 800931c:	4649      	mov	r1, r9
 800931e:	4640      	mov	r0, r8
 8009320:	f7fb f828 	bl	8004374 <mbedtls_cipher_setup>
 8009324:	4605      	mov	r5, r0
 8009326:	b128      	cbz	r0, 8009334 <mbedtls_ssl_derive_keys+0x3a8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8009328:	4b37      	ldr	r3, [pc, #220]	; (8009408 <mbedtls_ssl_derive_keys+0x47c>)
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	9001      	str	r0, [sp, #4]
 800932e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8009332:	e6aa      	b.n	800908a <mbedtls_ssl_derive_keys+0xfe>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8009334:	3490      	adds	r4, #144	; 0x90
 8009336:	4649      	mov	r1, r9
 8009338:	4620      	mov	r0, r4
 800933a:	f7fb f81b 	bl	8004374 <mbedtls_cipher_setup>
 800933e:	4605      	mov	r5, r0
 8009340:	b128      	cbz	r0, 800934e <mbedtls_ssl_derive_keys+0x3c2>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8009342:	4b31      	ldr	r3, [pc, #196]	; (8009408 <mbedtls_ssl_derive_keys+0x47c>)
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	f240 338b 	movw	r3, #907	; 0x38b
 800934c:	e69d      	b.n	800908a <mbedtls_ssl_derive_keys+0xfe>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 800934e:	a918      	add	r1, sp, #96	; 0x60
 8009350:	2301      	movs	r3, #1
 8009352:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009356:	4451      	add	r1, sl
 8009358:	4640      	mov	r0, r8
 800935a:	f7fa fe89 	bl	8004070 <mbedtls_cipher_setkey>
 800935e:	4605      	mov	r5, r0
 8009360:	b128      	cbz	r0, 800936e <mbedtls_ssl_derive_keys+0x3e2>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8009362:	4b2a      	ldr	r3, [pc, #168]	; (800940c <mbedtls_ssl_derive_keys+0x480>)
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	9001      	str	r0, [sp, #4]
 8009368:	f240 3393 	movw	r3, #915	; 0x393
 800936c:	e68d      	b.n	800908a <mbedtls_ssl_derive_keys+0xfe>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 800936e:	4603      	mov	r3, r0
 8009370:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009374:	4639      	mov	r1, r7
 8009376:	4620      	mov	r0, r4
 8009378:	f7fa fe7a 	bl	8004070 <mbedtls_cipher_setkey>
 800937c:	4605      	mov	r5, r0
 800937e:	b128      	cbz	r0, 800938c <mbedtls_ssl_derive_keys+0x400>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8009380:	4b22      	ldr	r3, [pc, #136]	; (800940c <mbedtls_ssl_derive_keys+0x480>)
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	9001      	str	r0, [sp, #4]
 8009386:	f240 339b 	movw	r3, #923	; 0x39b
 800938a:	e67e      	b.n	800908a <mbedtls_ssl_derive_keys+0xfe>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 800938c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d123      	bne.n	80093dc <mbedtls_ssl_derive_keys+0x450>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 8009394:	2104      	movs	r1, #4
 8009396:	4640      	mov	r0, r8
 8009398:	f7fa ffd4 	bl	8004344 <mbedtls_cipher_set_padding_mode>
 800939c:	4607      	mov	r7, r0
 800939e:	b158      	cbz	r0, 80093b8 <mbedtls_ssl_derive_keys+0x42c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 80093a0:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <mbedtls_ssl_derive_keys+0x484>)
 80093a2:	9001      	str	r0, [sp, #4]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4a16      	ldr	r2, [pc, #88]	; (8009400 <mbedtls_ssl_derive_keys+0x474>)
 80093a8:	f240 33a5 	movw	r3, #933	; 0x3a5
 80093ac:	2101      	movs	r1, #1
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7fb f938 	bl	8004624 <mbedtls_debug_print_ret>
            return( ret );
 80093b4:	463d      	mov	r5, r7
 80093b6:	e60d      	b.n	8008fd4 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 80093b8:	4620      	mov	r0, r4
 80093ba:	2104      	movs	r1, #4
 80093bc:	f7fa ffc2 	bl	8004344 <mbedtls_cipher_set_padding_mode>
 80093c0:	4604      	mov	r4, r0
 80093c2:	b158      	cbz	r0, 80093dc <mbedtls_ssl_derive_keys+0x450>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 80093c4:	4b12      	ldr	r3, [pc, #72]	; (8009410 <mbedtls_ssl_derive_keys+0x484>)
 80093c6:	9001      	str	r0, [sp, #4]
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4a0d      	ldr	r2, [pc, #52]	; (8009400 <mbedtls_ssl_derive_keys+0x474>)
 80093cc:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 80093d0:	2101      	movs	r1, #1
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7fb f926 	bl	8004624 <mbedtls_debug_print_ret>
            return( ret );
 80093d8:	4625      	mov	r5, r4
 80093da:	e5fb      	b.n	8008fd4 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 80093dc:	a818      	add	r0, sp, #96	; 0x60
 80093de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093e2:	f7ff fc73 	bl	8008ccc <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <mbedtls_ssl_derive_keys+0x488>)
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	4a05      	ldr	r2, [pc, #20]	; (8009400 <mbedtls_ssl_derive_keys+0x474>)
 80093ec:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 80093f0:	2102      	movs	r1, #2
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7fb f8e6 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 80093f8:	e5ec      	b.n	8008fd4 <mbedtls_ssl_derive_keys+0x48>
 80093fa:	bf00      	nop
 80093fc:	080134b7 	.word	0x080134b7
 8009400:	08014146 	.word	0x08014146
 8009404:	08013108 	.word	0x08013108
 8009408:	080134e5 	.word	0x080134e5
 800940c:	080134fa 	.word	0x080134fa
 8009410:	08013510 	.word	0x08013510
 8009414:	08013530 	.word	0x08013530

08009418 <mbedtls_ssl_fetch_input>:
{
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	b085      	sub	sp, #20
 800941e:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 8009420:	4b45      	ldr	r3, [pc, #276]	; (8009538 <mbedtls_ssl_fetch_input+0x120>)
 8009422:	9300      	str	r3, [sp, #0]
{
 8009424:	460e      	mov	r6, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 8009426:	f640 03c6 	movw	r3, #2246	; 0x8c6
 800942a:	4a44      	ldr	r2, [pc, #272]	; (800953c <mbedtls_ssl_fetch_input+0x124>)
 800942c:	2102      	movs	r1, #2
 800942e:	f7fb f8c9 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8009432:	6963      	ldr	r3, [r4, #20]
 8009434:	b97b      	cbnz	r3, 8009456 <mbedtls_ssl_fetch_input+0x3e>
 8009436:	69a3      	ldr	r3, [r4, #24]
 8009438:	b96b      	cbnz	r3, 8009456 <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800943a:	4b41      	ldr	r3, [pc, #260]	; (8009540 <mbedtls_ssl_fetch_input+0x128>)
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	f640 03cb 	movw	r3, #2251	; 0x8cb
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 8009442:	4a3e      	ldr	r2, [pc, #248]	; (800953c <mbedtls_ssl_fetch_input+0x124>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8009444:	4d3f      	ldr	r5, [pc, #252]	; (8009544 <mbedtls_ssl_fetch_input+0x12c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 8009446:	2101      	movs	r1, #1
 8009448:	4620      	mov	r0, r4
 800944a:	f7fb f8bb 	bl	80045c4 <mbedtls_debug_print_msg>
}
 800944e:	4628      	mov	r0, r5
 8009450:	b005      	add	sp, #20
 8009452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 8009456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009458:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 8009460:	331d      	adds	r3, #29
 8009462:	42b3      	cmp	r3, r6
 8009464:	d204      	bcs.n	8009470 <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 8009466:	4b38      	ldr	r3, [pc, #224]	; (8009548 <mbedtls_ssl_fetch_input+0x130>)
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	f640 03d1 	movw	r3, #2257	; 0x8d1
 800946e:	e7e8      	b.n	8009442 <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8009470:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009472:	4f36      	ldr	r7, [pc, #216]	; (800954c <mbedtls_ssl_fetch_input+0x134>)
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	9602      	str	r6, [sp, #8]
 8009478:	9700      	str	r7, [sp, #0]
 800947a:	f640 1364 	movw	r3, #2404	; 0x964
 800947e:	4a2f      	ldr	r2, [pc, #188]	; (800953c <mbedtls_ssl_fetch_input+0x124>)
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 8009480:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800955c <mbedtls_ssl_fetch_input+0x144>
 8009484:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800953c <mbedtls_ssl_fetch_input+0x124>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8009488:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009560 <mbedtls_ssl_fetch_input+0x148>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 800948c:	2102      	movs	r1, #2
 800948e:	4620      	mov	r0, r4
 8009490:	f7fb f898 	bl	80045c4 <mbedtls_debug_print_msg>
        while( ssl->in_left < nb_want )
 8009494:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009496:	42ae      	cmp	r6, r5
 8009498:	d80a      	bhi.n	80094b0 <mbedtls_ssl_fetch_input+0x98>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 800949a:	4b2d      	ldr	r3, [pc, #180]	; (8009550 <mbedtls_ssl_fetch_input+0x138>)
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4a27      	ldr	r2, [pc, #156]	; (800953c <mbedtls_ssl_fetch_input+0x124>)
 80094a0:	f640 1389 	movw	r3, #2441	; 0x989
 80094a4:	2102      	movs	r1, #2
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7fb f88c 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 80094ac:	2500      	movs	r5, #0
 80094ae:	e7ce      	b.n	800944e <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 80094b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            len = nb_want - ssl->in_left;
 80094b2:	1b75      	subs	r5, r6, r5
    if( ssl->f_get_timer == NULL )
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d032      	beq.n	800951e <mbedtls_ssl_fetch_input+0x106>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80094b8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80094ba:	4798      	blx	r3
 80094bc:	2802      	cmp	r0, #2
 80094be:	d12e      	bne.n	800951e <mbedtls_ssl_fetch_input+0x106>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 80094c0:	f8cd 9000 	str.w	r9, [sp]
 80094c4:	2360      	movs	r3, #96	; 0x60
 80094c6:	4642      	mov	r2, r8
 80094c8:	2103      	movs	r1, #3
 80094ca:	4620      	mov	r0, r4
 80094cc:	f7fb f87a 	bl	80045c4 <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 80094d0:	4655      	mov	r5, sl
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 80094d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	4642      	mov	r2, r8
 80094d8:	f640 137c 	movw	r3, #2428	; 0x97c
 80094dc:	2102      	movs	r1, #2
 80094de:	4620      	mov	r0, r4
 80094e0:	9602      	str	r6, [sp, #8]
 80094e2:	9700      	str	r7, [sp, #0]
 80094e4:	f7fb f86e 	bl	80045c4 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 80094e8:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <mbedtls_ssl_fetch_input+0x13c>)
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	9501      	str	r5, [sp, #4]
 80094ee:	f640 137d 	movw	r3, #2429	; 0x97d
 80094f2:	4642      	mov	r2, r8
 80094f4:	2102      	movs	r1, #2
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7fb f894 	bl	8004624 <mbedtls_debug_print_ret>
            if( ret == 0 )
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	d00c      	beq.n	800951a <mbedtls_ssl_fetch_input+0x102>
            if( ret < 0 )
 8009500:	dba5      	blt.n	800944e <mbedtls_ssl_fetch_input+0x36>
            ssl->in_left += ret;
 8009502:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009504:	441d      	add	r5, r3
 8009506:	6765      	str	r5, [r4, #116]	; 0x74
 8009508:	e7c4      	b.n	8009494 <mbedtls_ssl_fetch_input+0x7c>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	4401      	add	r1, r0
 800950e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009510:	69e0      	ldr	r0, [r4, #28]
 8009512:	462a      	mov	r2, r5
 8009514:	47d8      	blx	fp
                    ret = ssl->f_recv( ssl->p_bio,
 8009516:	4605      	mov	r5, r0
 8009518:	e7db      	b.n	80094d2 <mbedtls_ssl_fetch_input+0xba>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 800951a:	4d0f      	ldr	r5, [pc, #60]	; (8009558 <mbedtls_ssl_fetch_input+0x140>)
 800951c:	e797      	b.n	800944e <mbedtls_ssl_fetch_input+0x36>
                if( ssl->f_recv_timeout != NULL )
 800951e:	f8d4 b018 	ldr.w	fp, [r4, #24]
 8009522:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009524:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009526:	f1bb 0f00 	cmp.w	fp, #0
 800952a:	d1ee      	bne.n	800950a <mbedtls_ssl_fetch_input+0xf2>
                    ret = ssl->f_recv( ssl->p_bio,
 800952c:	4401      	add	r1, r0
 800952e:	6963      	ldr	r3, [r4, #20]
 8009530:	69e0      	ldr	r0, [r4, #28]
 8009532:	462a      	mov	r2, r5
 8009534:	4798      	blx	r3
 8009536:	e7ee      	b.n	8009516 <mbedtls_ssl_fetch_input+0xfe>
 8009538:	0801353f 	.word	0x0801353f
 800953c:	08014146 	.word	0x08014146
 8009540:	0801354e 	.word	0x0801354e
 8009544:	ffff8f00 	.word	0xffff8f00
 8009548:	0801358a 	.word	0x0801358a
 800954c:	080135a9 	.word	0x080135a9
 8009550:	080135e6 	.word	0x080135e6
 8009554:	080135d0 	.word	0x080135d0
 8009558:	ffff8d80 	.word	0xffff8d80
 800955c:	080135c2 	.word	0x080135c2
 8009560:	ffff9800 	.word	0xffff9800

08009564 <mbedtls_ssl_flush_output>:
{
 8009564:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009568:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 800956a:	4b3d      	ldr	r3, [pc, #244]	; (8009660 <mbedtls_ssl_flush_output+0xfc>)
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	4a3d      	ldr	r2, [pc, #244]	; (8009664 <mbedtls_ssl_flush_output+0x100>)
 8009570:	f640 1396 	movw	r3, #2454	; 0x996
 8009574:	2102      	movs	r1, #2
 8009576:	f7fb f825 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	b96b      	cbnz	r3, 800959a <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800957e:	4b3a      	ldr	r3, [pc, #232]	; (8009668 <mbedtls_ssl_flush_output+0x104>)
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4a38      	ldr	r2, [pc, #224]	; (8009664 <mbedtls_ssl_flush_output+0x100>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8009584:	4d39      	ldr	r5, [pc, #228]	; (800966c <mbedtls_ssl_flush_output+0x108>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8009586:	f640 139b 	movw	r3, #2459	; 0x99b
 800958a:	2101      	movs	r1, #1
 800958c:	4620      	mov	r0, r4
 800958e:	f7fb f819 	bl	80045c4 <mbedtls_debug_print_msg>
}
 8009592:	4628      	mov	r0, r5
 8009594:	b004      	add	sp, #16
 8009596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 800959a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800959e:	2d00      	cmp	r5, #0
 80095a0:	d049      	beq.n	8009636 <mbedtls_ssl_flush_output+0xd2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 80095a2:	4f33      	ldr	r7, [pc, #204]	; (8009670 <mbedtls_ssl_flush_output+0x10c>)
 80095a4:	4e2f      	ldr	r6, [pc, #188]	; (8009664 <mbedtls_ssl_flush_output+0x100>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 80095a6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8009680 <mbedtls_ssl_flush_output+0x11c>
    while( ssl->out_left > 0 )
 80095aa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80095ae:	b9b3      	cbnz	r3, 80095de <mbedtls_ssl_flush_output+0x7a>
 80095b0:	2207      	movs	r2, #7
        if( ++ssl->out_ctr[i - 1] != 0 )
 80095b2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80095b6:	5c8b      	ldrb	r3, [r1, r2]
 80095b8:	3301      	adds	r3, #1
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	548b      	strb	r3, [r1, r2]
 80095be:	3a01      	subs	r2, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d142      	bne.n	800964a <mbedtls_ssl_flush_output+0xe6>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80095c4:	1c53      	adds	r3, r2, #1
 80095c6:	d1f4      	bne.n	80095b2 <mbedtls_ssl_flush_output+0x4e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 80095c8:	4b2a      	ldr	r3, [pc, #168]	; (8009674 <mbedtls_ssl_flush_output+0x110>)
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	4a25      	ldr	r2, [pc, #148]	; (8009664 <mbedtls_ssl_flush_output+0x100>)
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80095ce:	4d2a      	ldr	r5, [pc, #168]	; (8009678 <mbedtls_ssl_flush_output+0x114>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 80095d0:	f640 13be 	movw	r3, #2494	; 0x9be
 80095d4:	2101      	movs	r1, #1
 80095d6:	4620      	mov	r0, r4
 80095d8:	f7fa fff4 	bl	80045c4 <mbedtls_debug_print_msg>
 80095dc:	e7d9      	b.n	8009592 <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 80095de:	9302      	str	r3, [sp, #8]
 80095e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80095e4:	9700      	str	r7, [sp, #0]
 80095e6:	3305      	adds	r3, #5
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	4632      	mov	r2, r6
 80095ec:	f640 13a9 	movw	r3, #2473	; 0x9a9
 80095f0:	2102      	movs	r1, #2
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7fa ffe6 	bl	80045c4 <mbedtls_debug_print_msg>
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 80095f8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
              ssl->out_msglen - ssl->out_left;
 80095fc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8009600:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8009604:	6923      	ldr	r3, [r4, #16]
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 8009606:	3105      	adds	r1, #5
              ssl->out_msglen - ssl->out_left;
 8009608:	1a89      	subs	r1, r1, r2
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 800960a:	4401      	add	r1, r0
 800960c:	69e0      	ldr	r0, [r4, #28]
 800960e:	4798      	blx	r3
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 8009610:	f8cd 8000 	str.w	r8, [sp]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8009614:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 8009616:	9001      	str	r0, [sp, #4]
 8009618:	f640 13af 	movw	r3, #2479	; 0x9af
 800961c:	4632      	mov	r2, r6
 800961e:	2102      	movs	r1, #2
 8009620:	4620      	mov	r0, r4
 8009622:	f7fa ffff 	bl	8004624 <mbedtls_debug_print_ret>
        if( ret <= 0 )
 8009626:	2d00      	cmp	r5, #0
 8009628:	ddb3      	ble.n	8009592 <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 800962a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800962e:	1b5d      	subs	r5, r3, r5
 8009630:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8009634:	e7b9      	b.n	80095aa <mbedtls_ssl_flush_output+0x46>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8009636:	4b11      	ldr	r3, [pc, #68]	; (800967c <mbedtls_ssl_flush_output+0x118>)
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4a0a      	ldr	r2, [pc, #40]	; (8009664 <mbedtls_ssl_flush_output+0x100>)
 800963c:	f640 13a2 	movw	r3, #2466	; 0x9a2
 8009640:	2102      	movs	r1, #2
 8009642:	4620      	mov	r0, r4
 8009644:	f7fa ffbe 	bl	80045c4 <mbedtls_debug_print_msg>
        return( 0 );
 8009648:	e7a3      	b.n	8009592 <mbedtls_ssl_flush_output+0x2e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <mbedtls_ssl_flush_output+0x118>)
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	4a05      	ldr	r2, [pc, #20]	; (8009664 <mbedtls_ssl_flush_output+0x100>)
 8009650:	f640 13c2 	movw	r3, #2498	; 0x9c2
 8009654:	2102      	movs	r1, #2
 8009656:	4620      	mov	r0, r4
 8009658:	f7fa ffb4 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800965c:	2500      	movs	r5, #0
 800965e:	e798      	b.n	8009592 <mbedtls_ssl_flush_output+0x2e>
 8009660:	080135f5 	.word	0x080135f5
 8009664:	08014146 	.word	0x08014146
 8009668:	0801354e 	.word	0x0801354e
 800966c:	ffff8f00 	.word	0xffff8f00
 8009670:	08013605 	.word	0x08013605
 8009674:	08013642 	.word	0x08013642
 8009678:	ffff9480 	.word	0xffff9480
 800967c:	08013632 	.word	0x08013632
 8009680:	08013626 	.word	0x08013626

08009684 <mbedtls_ssl_write_record>:
{
 8009684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	b08e      	sub	sp, #56	; 0x38
 800968a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 800968c:	4bac      	ldr	r3, [pc, #688]	; (8009940 <mbedtls_ssl_write_record+0x2bc>)
    size_t len = ssl->out_msglen;
 800968e:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 8009692:	4aac      	ldr	r2, [pc, #688]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	2102      	movs	r1, #2
 8009698:	f640 23b3 	movw	r3, #2739	; 0xab3
 800969c:	f7fa ff92 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80096a0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80096a4:	2b16      	cmp	r3, #22
 80096a6:	d125      	bne.n	80096f4 <mbedtls_ssl_write_record+0x70>
        out_msg_type = ssl->out_msg[0];
 80096a8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80096ac:	780a      	ldrb	r2, [r1, #0]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80096ae:	b17a      	cbz	r2, 80096d0 <mbedtls_ssl_write_record+0x4c>
 80096b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096b2:	b96b      	cbnz	r3, 80096d0 <mbedtls_ssl_write_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80096b4:	4ba4      	ldr	r3, [pc, #656]	; (8009948 <mbedtls_ssl_write_record+0x2c4>)
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	4aa2      	ldr	r2, [pc, #648]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80096ba:	4da4      	ldr	r5, [pc, #656]	; (800994c <mbedtls_ssl_write_record+0x2c8>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80096bc:	f640 23c5 	movw	r3, #2757	; 0xac5
 80096c0:	2101      	movs	r1, #1
 80096c2:	4620      	mov	r0, r4
 80096c4:	f7fa ff7e 	bl	80045c4 <mbedtls_debug_print_msg>
}
 80096c8:	4628      	mov	r0, r5
 80096ca:	b00e      	add	sp, #56	; 0x38
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 80096d0:	1f2b      	subs	r3, r5, #4
 80096d2:	0c18      	lsrs	r0, r3, #16
 80096d4:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 80096d6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80096da:	0a18      	lsrs	r0, r3, #8
 80096dc:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 80096de:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80096e2:	70cb      	strb	r3, [r1, #3]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 80096e4:	b132      	cbz	r2, 80096f4 <mbedtls_ssl_write_record+0x70>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 80096e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096e8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80096ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ee:	462a      	mov	r2, r5
 80096f0:	4620      	mov	r0, r4
 80096f2:	4798      	blx	r3
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80096f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80096f8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80096fc:	701a      	strb	r2, [r3, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80096fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8009702:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8009704:	68a1      	ldr	r1, [r4, #8]
 8009706:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 8009708:	709a      	strb	r2, [r3, #2]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 800970a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800970e:	0a2a      	lsrs	r2, r5, #8
 8009710:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 8009712:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009716:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 8009718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 813a 	beq.w	8009994 <mbedtls_ssl_write_record+0x310>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 8009720:	4b8b      	ldr	r3, [pc, #556]	; (8009950 <mbedtls_ssl_write_record+0x2cc>)
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4a87      	ldr	r2, [pc, #540]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
 8009726:	f240 5304 	movw	r3, #1284	; 0x504
 800972a:	2102      	movs	r1, #2
 800972c:	4620      	mov	r0, r4
 800972e:	f7fa ff49 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8009732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009734:	b10b      	cbz	r3, 800973a <mbedtls_ssl_write_record+0xb6>
 8009736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009738:	b953      	cbnz	r3, 8009750 <mbedtls_ssl_write_record+0xcc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800973a:	4b83      	ldr	r3, [pc, #524]	; (8009948 <mbedtls_ssl_write_record+0x2c4>)
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	f44f 63a1 	mov.w	r3, #1288	; 0x508
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009742:	4a80      	ldr	r2, [pc, #512]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8009744:	4d81      	ldr	r5, [pc, #516]	; (800994c <mbedtls_ssl_write_record+0x2c8>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009746:	2101      	movs	r1, #1
 8009748:	4620      	mov	r0, r4
 800974a:	f7fa ff3b 	bl	80045c4 <mbedtls_debug_print_msg>
 800974e:	e024      	b.n	800979a <mbedtls_ssl_write_record+0x116>
    if( NULL == ctx || NULL == ctx->cipher_info )
 8009750:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8009752:	b105      	cbz	r5, 8009756 <mbedtls_ssl_write_record+0xd2>
    return ctx->cipher_info->mode;
 8009754:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 8009756:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	4b7c      	ldr	r3, [pc, #496]	; (8009954 <mbedtls_ssl_write_record+0x2d0>)
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4a77      	ldr	r2, [pc, #476]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
 8009768:	f240 530f 	movw	r3, #1295	; 0x50f
 800976c:	2104      	movs	r1, #4
 800976e:	4620      	mov	r0, r4
 8009770:	f7fa ff86 	bl	8004680 <mbedtls_debug_print_buf>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8009774:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977c:	d913      	bls.n	80097a6 <mbedtls_ssl_write_record+0x122>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 800977e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	4b74      	ldr	r3, [pc, #464]	; (8009958 <mbedtls_ssl_write_record+0x2d4>)
 8009786:	9202      	str	r2, [sp, #8]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4a6e      	ldr	r2, [pc, #440]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800978c:	4d73      	ldr	r5, [pc, #460]	; (800995c <mbedtls_ssl_write_record+0x2d8>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 800978e:	f240 5315 	movw	r3, #1301	; 0x515
 8009792:	2101      	movs	r1, #1
 8009794:	4620      	mov	r0, r4
 8009796:	f7fa ff15 	bl	80045c4 <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 800979a:	4b71      	ldr	r3, [pc, #452]	; (8009960 <mbedtls_ssl_write_record+0x2dc>)
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	9501      	str	r5, [sp, #4]
 80097a0:	f640 3337 	movw	r3, #2871	; 0xb37
 80097a4:	e12d      	b.n	8009a02 <mbedtls_ssl_write_record+0x37e>
    if( mode == MBEDTLS_MODE_STREAM ||
 80097a6:	2d07      	cmp	r5, #7
 80097a8:	d001      	beq.n	80097ae <mbedtls_ssl_write_record+0x12a>
 80097aa:	2d02      	cmp	r5, #2
 80097ac:	d14f      	bne.n	800984e <mbedtls_ssl_write_record+0x1ca>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd51      	ble.n	8009858 <mbedtls_ssl_write_record+0x1d4>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 80097b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097b6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80097ba:	2208      	movs	r2, #8
 80097bc:	3038      	adds	r0, #56	; 0x38
 80097be:	f7fb ffe3 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 80097c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097c4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80097c8:	2203      	movs	r2, #3
 80097ca:	3038      	adds	r0, #56	; 0x38
 80097cc:	f7fb ffdc 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 80097d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097d2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80097d6:	2202      	movs	r2, #2
 80097d8:	3038      	adds	r0, #56	; 0x38
 80097da:	f7fb ffd5 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 80097de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097e0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80097e4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80097e8:	3038      	adds	r0, #56	; 0x38
 80097ea:	f7fb ffcd 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 80097ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097f0:	f10d 0818 	add.w	r8, sp, #24
 80097f4:	4641      	mov	r1, r8
 80097f6:	3038      	adds	r0, #56	; 0x38
 80097f8:	f7fb ffd8 	bl	80057ac <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 80097fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097fe:	3038      	adds	r0, #56	; 0x38
 8009800:	f7fc f806 	bl	8005810 <mbedtls_md_hmac_reset>
            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 8009804:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009808:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800980c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800980e:	4641      	mov	r1, r8
 8009810:	6952      	ldr	r2, [r2, #20]
 8009812:	4418      	add	r0, r3
 8009814:	f004 fe03 	bl	800e41e <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 8009818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800981a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	9302      	str	r3, [sp, #8]
 8009822:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009826:	4413      	add	r3, r2
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	4b4e      	ldr	r3, [pc, #312]	; (8009964 <mbedtls_ssl_write_record+0x2e0>)
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4a45      	ldr	r2, [pc, #276]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
 8009830:	f240 534c 	movw	r3, #1356	; 0x54c
 8009834:	2104      	movs	r1, #4
 8009836:	4620      	mov	r0, r4
 8009838:	f7fa ff22 	bl	8004680 <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 800983c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800983e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009842:	694b      	ldr	r3, [r1, #20]
    if( mode == MBEDTLS_MODE_CBC )
 8009844:	2d02      	cmp	r5, #2
        ssl->out_msglen += ssl->transform_out->maclen;
 8009846:	441a      	add	r2, r3
 8009848:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    if( mode == MBEDTLS_MODE_CBC )
 800984c:	d009      	beq.n	8009862 <mbedtls_ssl_write_record+0x1de>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800984e:	4b3e      	ldr	r3, [pc, #248]	; (8009948 <mbedtls_ssl_write_record+0x2c4>)
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	f240 6337 	movw	r3, #1591	; 0x637
 8009856:	e774      	b.n	8009742 <mbedtls_ssl_write_record+0xbe>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009858:	4b3b      	ldr	r3, [pc, #236]	; (8009948 <mbedtls_ssl_write_record+0x2c4>)
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	f240 5346 	movw	r3, #1350	; 0x546
 8009860:	e76f      	b.n	8009742 <mbedtls_ssl_write_record+0xbe>
        size_t enc_msglen, padlen, olen = 0, i;
 8009862:	2300      	movs	r3, #0
 8009864:	9306      	str	r3, [sp, #24]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 8009866:	68c9      	ldr	r1, [r1, #12]
 8009868:	1c50      	adds	r0, r2, #1
 800986a:	fbb0 f6f1 	udiv	r6, r0, r1
 800986e:	fb01 0616 	mls	r6, r1, r6, r0
 8009872:	1b8e      	subs	r6, r1, r6
        if( padlen == ssl->transform_out->ivlen )
 8009874:	42b1      	cmp	r1, r6
 8009876:	f000 80d4 	beq.w	8009a22 <mbedtls_ssl_write_record+0x39e>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800987a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800987e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009882:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 8009884:	3301      	adds	r3, #1
 8009886:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8009888:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 800988a:	d2f6      	bcs.n	800987a <mbedtls_ssl_write_record+0x1f6>
        ssl->out_msglen += padlen + 1;
 800988c:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8009890:	68e3      	ldr	r3, [r4, #12]
        ssl->out_msglen += padlen + 1;
 8009892:	3701      	adds	r7, #1
 8009894:	4437      	add	r7, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8009896:	2b01      	cmp	r3, #1
        ssl->out_msglen += padlen + 1;
 8009898:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800989c:	dc2b      	bgt.n	80098f6 <mbedtls_ssl_write_record+0x272>
        enc_msg = ssl->out_msg;
 800989e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 80098a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098a4:	4a27      	ldr	r2, [pc, #156]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
 80098a6:	3601      	adds	r6, #1
 80098a8:	9603      	str	r6, [sp, #12]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	4b2c      	ldr	r3, [pc, #176]	; (8009968 <mbedtls_ssl_write_record+0x2e4>)
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2103      	movs	r1, #3
 80098ba:	f240 53f3 	movw	r3, #1523	; 0x5f3
 80098be:	4620      	mov	r0, r4
 80098c0:	f7fa fe80 	bl	80045c4 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 80098c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80098c6:	9501      	str	r5, [sp, #4]
 80098c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80098cc:	9700      	str	r7, [sp, #0]
 80098ce:	462b      	mov	r3, r5
 80098d0:	68c2      	ldr	r2, [r0, #12]
 80098d2:	f100 0118 	add.w	r1, r0, #24
 80098d6:	3050      	adds	r0, #80	; 0x50
 80098d8:	f7fa fd6a 	bl	80043b0 <mbedtls_cipher_crypt>
 80098dc:	4605      	mov	r5, r0
 80098de:	b330      	cbz	r0, 800992e <mbedtls_ssl_write_record+0x2aa>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 80098e0:	4b22      	ldr	r3, [pc, #136]	; (800996c <mbedtls_ssl_write_record+0x2e8>)
 80098e2:	9001      	str	r0, [sp, #4]
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4a17      	ldr	r2, [pc, #92]	; (8009944 <mbedtls_ssl_write_record+0x2c0>)
 80098e8:	f240 53fb 	movw	r3, #1531	; 0x5fb
 80098ec:	2101      	movs	r1, #1
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7fa fe98 	bl	8004624 <mbedtls_debug_print_ret>
 80098f4:	e751      	b.n	800979a <mbedtls_ssl_write_record+0x116>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80098fa:	699d      	ldr	r5, [r3, #24]
 80098fc:	68ca      	ldr	r2, [r1, #12]
 80098fe:	69d8      	ldr	r0, [r3, #28]
 8009900:	3118      	adds	r1, #24
 8009902:	47a8      	blx	r5
            if( ret != 0 )
 8009904:	4605      	mov	r5, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	f47f af47 	bne.w	800979a <mbedtls_ssl_write_record+0x116>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 800990c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800990e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009912:	68ca      	ldr	r2, [r1, #12]
 8009914:	3118      	adds	r1, #24
 8009916:	f004 fd82 	bl	800e41e <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 800991a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            enc_msglen = ssl->out_msglen;
 800991c:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 8009920:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 8009922:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
            ssl->out_msglen += ssl->transform_out->ivlen;
 8009926:	443b      	add	r3, r7
 8009928:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800992c:	e7b9      	b.n	80098a2 <mbedtls_ssl_write_record+0x21e>
        if( enc_msglen != olen )
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	429f      	cmp	r7, r3
 8009932:	d01d      	beq.n	8009970 <mbedtls_ssl_write_record+0x2ec>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <mbedtls_ssl_write_record+0x2c4>)
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	f240 6301 	movw	r3, #1537	; 0x601
 800993c:	e701      	b.n	8009742 <mbedtls_ssl_write_record+0xbe>
 800993e:	bf00      	nop
 8009940:	08013ef5 	.word	0x08013ef5
 8009944:	08014146 	.word	0x08014146
 8009948:	08013108 	.word	0x08013108
 800994c:	ffff9400 	.word	0xffff9400
 8009950:	08013f05 	.word	0x08013f05
 8009954:	08013f14 	.word	0x08013f14
 8009958:	08013f33 	.word	0x08013f33
 800995c:	ffff8f00 	.word	0xffff8f00
 8009960:	0801405d 	.word	0x0801405d
 8009964:	08013f5b 	.word	0x08013f5b
 8009968:	08013f68 	.word	0x08013f68
 800996c:	08013fb6 	.word	0x08013fb6
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 8009970:	4b2e      	ldr	r3, [pc, #184]	; (8009a2c <mbedtls_ssl_write_record+0x3a8>)
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	4a2e      	ldr	r2, [pc, #184]	; (8009a30 <mbedtls_ssl_write_record+0x3ac>)
 8009976:	f240 6342 	movw	r3, #1602	; 0x642
 800997a:	2102      	movs	r1, #2
 800997c:	4620      	mov	r0, r4
 800997e:	f7fa fe21 	bl	80045c4 <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 8009982:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8009986:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800998a:	0a19      	lsrs	r1, r3, #8
 800998c:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 800998e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009992:	7053      	strb	r3, [r2, #1]
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8009994:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 8009998:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 800999c:	3305      	adds	r3, #5
 800999e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 80099a2:	7808      	ldrb	r0, [r1, #0]
 80099a4:	784a      	ldrb	r2, [r1, #1]
 80099a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80099aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80099ae:	9204      	str	r2, [sp, #16]
 80099b0:	789a      	ldrb	r2, [r3, #2]
 80099b2:	9203      	str	r2, [sp, #12]
 80099b4:	785a      	ldrb	r2, [r3, #1]
 80099b6:	9202      	str	r2, [sp, #8]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <mbedtls_ssl_write_record+0x3b0>)
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4a1b      	ldr	r2, [pc, #108]	; (8009a30 <mbedtls_ssl_write_record+0x3ac>)
 80099c2:	f640 3345 	movw	r3, #2885	; 0xb45
 80099c6:	2103      	movs	r1, #3
 80099c8:	4620      	mov	r0, r4
 80099ca:	f7fa fdfb 	bl	80045c4 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 80099ce:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80099d2:	4a17      	ldr	r2, [pc, #92]	; (8009a30 <mbedtls_ssl_write_record+0x3ac>)
 80099d4:	3305      	adds	r3, #5
 80099d6:	9302      	str	r3, [sp, #8]
 80099d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	4b16      	ldr	r3, [pc, #88]	; (8009a38 <mbedtls_ssl_write_record+0x3b4>)
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	2104      	movs	r1, #4
 80099e4:	f640 3348 	movw	r3, #2888	; 0xb48
 80099e8:	4620      	mov	r0, r4
 80099ea:	f7fa fe49 	bl	8004680 <mbedtls_debug_print_buf>
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80099ee:	4620      	mov	r0, r4
 80099f0:	f7ff fdb8 	bl	8009564 <mbedtls_ssl_flush_output>
 80099f4:	4605      	mov	r5, r0
 80099f6:	b150      	cbz	r0, 8009a0e <mbedtls_ssl_write_record+0x38a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 80099f8:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <mbedtls_ssl_write_record+0x3b8>)
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	9001      	str	r0, [sp, #4]
 80099fe:	f640 334d 	movw	r3, #2893	; 0xb4d
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 8009a02:	4a0b      	ldr	r2, [pc, #44]	; (8009a30 <mbedtls_ssl_write_record+0x3ac>)
 8009a04:	2101      	movs	r1, #1
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7fa fe0c 	bl	8004624 <mbedtls_debug_print_ret>
                return( ret );
 8009a0c:	e65c      	b.n	80096c8 <mbedtls_ssl_write_record+0x44>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <mbedtls_ssl_write_record+0x3bc>)
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <mbedtls_ssl_write_record+0x3ac>)
 8009a14:	f640 3351 	movw	r3, #2897	; 0xb51
 8009a18:	2102      	movs	r1, #2
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7fa fdd2 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 8009a20:	e652      	b.n	80096c8 <mbedtls_ssl_write_record+0x44>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8009a22:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
            padlen = 0;
 8009a26:	461e      	mov	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8009a28:	548b      	strb	r3, [r1, r2]
 8009a2a:	e72f      	b.n	800988c <mbedtls_ssl_write_record+0x208>
 8009a2c:	08013fcb 	.word	0x08013fcb
 8009a30:	08014146 	.word	0x08014146
 8009a34:	08013fda 	.word	0x08013fda
 8009a38:	08014016 	.word	0x08014016
 8009a3c:	08014034 	.word	0x08014034
 8009a40:	0801404d 	.word	0x0801404d

08009a44 <mbedtls_ssl_prepare_handshake_record>:
{
 8009a44:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8009a46:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8009a48:	2903      	cmp	r1, #3
{
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8009a4e:	d80b      	bhi.n	8009a68 <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 8009a50:	4b19      	ldr	r3, [pc, #100]	; (8009ab8 <mbedtls_ssl_prepare_handshake_record+0x74>)
 8009a52:	9101      	str	r1, [sp, #4]
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	4a19      	ldr	r2, [pc, #100]	; (8009abc <mbedtls_ssl_prepare_handshake_record+0x78>)
 8009a58:	f640 4335 	movw	r3, #3125	; 0xc35
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	f7fa fdb1 	bl	80045c4 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8009a62:	4817      	ldr	r0, [pc, #92]	; (8009ac0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
}
 8009a64:	b005      	add	sp, #20
 8009a66:	bd30      	pop	{r4, r5, pc}
                    ( ssl->in_msg[1] << 16 ) |
 8009a68:	6e42      	ldr	r2, [r0, #100]	; 0x64
                    ( ssl->in_msg[2] << 8  ) |
 8009a6a:	7893      	ldrb	r3, [r2, #2]
                    ( ssl->in_msg[1] << 16 ) |
 8009a6c:	7855      	ldrb	r5, [r2, #1]
                    ( ssl->in_msg[2] << 8  ) |
 8009a6e:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 8009a70:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                      ssl->in_msg[3] );
 8009a74:	78d5      	ldrb	r5, [r2, #3]
                    ( ssl->in_msg[2] << 8  ) |
 8009a76:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8009a78:	3304      	adds	r3, #4
 8009a7a:	6783      	str	r3, [r0, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	7813      	ldrb	r3, [r2, #0]
 8009a80:	9302      	str	r3, [sp, #8]
 8009a82:	4b10      	ldr	r3, [pc, #64]	; (8009ac4 <mbedtls_ssl_prepare_handshake_record+0x80>)
 8009a84:	9101      	str	r1, [sp, #4]
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4a0c      	ldr	r2, [pc, #48]	; (8009abc <mbedtls_ssl_prepare_handshake_record+0x78>)
 8009a8a:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8009a8e:	2103      	movs	r1, #3
 8009a90:	f7fa fd98 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 8009a94:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009a96:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d20a      	bcs.n	8009ab2 <mbedtls_ssl_prepare_handshake_record+0x6e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <mbedtls_ssl_prepare_handshake_record+0x84>)
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f640 437e 	movw	r3, #3198	; 0xc7e
 8009aa6:	4a05      	ldr	r2, [pc, #20]	; (8009abc <mbedtls_ssl_prepare_handshake_record+0x78>)
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	f7fa fd8b 	bl	80045c4 <mbedtls_debug_print_msg>
 8009aae:	4807      	ldr	r0, [pc, #28]	; (8009acc <mbedtls_ssl_prepare_handshake_record+0x88>)
 8009ab0:	e7d8      	b.n	8009a64 <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e7d6      	b.n	8009a64 <mbedtls_ssl_prepare_handshake_record+0x20>
 8009ab6:	bf00      	nop
 8009ab8:	0801399d 	.word	0x0801399d
 8009abc:	08014146 	.word	0x08014146
 8009ac0:	ffff8e00 	.word	0xffff8e00
 8009ac4:	080139bd 	.word	0x080139bd
 8009ac8:	080139f3 	.word	0x080139f3
 8009acc:	ffff8f80 	.word	0xffff8f80

08009ad0 <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8009ad0:	6842      	ldr	r2, [r0, #4]
 8009ad2:	2a10      	cmp	r2, #16
{
 8009ad4:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8009ad6:	d008      	beq.n	8009aea <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 8009ad8:	6b02      	ldr	r2, [r0, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8009ada:	b132      	cbz	r2, 8009aea <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8009adc:	6f54      	ldr	r4, [r2, #116]	; 0x74
 8009ade:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8009ae0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009ae2:	4623      	mov	r3, r4
}
 8009ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8009ae8:	4718      	bx	r3
}
 8009aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <mbedtls_ssl_handle_message_type>:
{
 8009af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8009af2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009af4:	2b16      	cmp	r3, #22
{
 8009af6:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8009af8:	d004      	beq.n	8009b04 <mbedtls_ssl_handle_message_type+0x14>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8009afa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009afc:	2b15      	cmp	r3, #21
 8009afe:	d007      	beq.n	8009b10 <mbedtls_ssl_handle_message_type+0x20>
            return( 0 );
 8009b00:	2000      	movs	r0, #0
 8009b02:	e003      	b.n	8009b0c <mbedtls_ssl_handle_message_type+0x1c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8009b04:	f7ff ff9e 	bl	8009a44 <mbedtls_ssl_prepare_handshake_record>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d0f6      	beq.n	8009afa <mbedtls_ssl_handle_message_type+0xa>
}
 8009b0c:	b004      	add	sp, #16
 8009b0e:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 8009b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b12:	785a      	ldrb	r2, [r3, #1]
 8009b14:	9202      	str	r2, [sp, #8]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	4b1b      	ldr	r3, [pc, #108]	; (8009b88 <mbedtls_ssl_handle_message_type+0x98>)
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	4a1b      	ldr	r2, [pc, #108]	; (8009b8c <mbedtls_ssl_handle_message_type+0x9c>)
 8009b20:	f241 030b 	movw	r3, #4107	; 0x100b
 8009b24:	2102      	movs	r1, #2
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7fa fd4c 	bl	80045c4 <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8009b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	2a02      	cmp	r2, #2
 8009b32:	d10c      	bne.n	8009b4e <mbedtls_ssl_handle_message_type+0x5e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <mbedtls_ssl_handle_message_type+0xa0>)
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f241 0313 	movw	r3, #4115	; 0x1013
 8009b42:	4a12      	ldr	r2, [pc, #72]	; (8009b8c <mbedtls_ssl_handle_message_type+0x9c>)
 8009b44:	2101      	movs	r1, #1
 8009b46:	f7fa fd3d 	bl	80045c4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8009b4a:	4812      	ldr	r0, [pc, #72]	; (8009b94 <mbedtls_ssl_handle_message_type+0xa4>)
 8009b4c:	e7de      	b.n	8009b0c <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8009b4e:	2a01      	cmp	r2, #1
 8009b50:	d118      	bne.n	8009b84 <mbedtls_ssl_handle_message_type+0x94>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8009b52:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8009b54:	b953      	cbnz	r3, 8009b6c <mbedtls_ssl_handle_message_type+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <mbedtls_ssl_handle_message_type+0xa8>)
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f241 031a 	movw	r3, #4122	; 0x101a
 8009b60:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <mbedtls_ssl_handle_message_type+0x9c>)
 8009b62:	2102      	movs	r1, #2
 8009b64:	f7fa fd2e 	bl	80045c4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8009b68:	480c      	ldr	r0, [pc, #48]	; (8009b9c <mbedtls_ssl_handle_message_type+0xac>)
 8009b6a:	e7cf      	b.n	8009b0c <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8009b6c:	2b64      	cmp	r3, #100	; 0x64
 8009b6e:	d109      	bne.n	8009b84 <mbedtls_ssl_handle_message_type+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <mbedtls_ssl_handle_message_type+0xb0>)
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	4a05      	ldr	r2, [pc, #20]	; (8009b8c <mbedtls_ssl_handle_message_type+0x9c>)
 8009b76:	f241 0322 	movw	r3, #4130	; 0x1022
 8009b7a:	2102      	movs	r1, #2
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f7fa fd21 	bl	80045c4 <mbedtls_debug_print_msg>
 8009b82:	e7bd      	b.n	8009b00 <mbedtls_ssl_handle_message_type+0x10>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8009b84:	4807      	ldr	r0, [pc, #28]	; (8009ba4 <mbedtls_ssl_handle_message_type+0xb4>)
 8009b86:	e7c1      	b.n	8009b0c <mbedtls_ssl_handle_message_type+0x1c>
 8009b88:	08013676 	.word	0x08013676
 8009b8c:	08014146 	.word	0x08014146
 8009b90:	0801369a 	.word	0x0801369a
 8009b94:	ffff8880 	.word	0xffff8880
 8009b98:	080136bc 	.word	0x080136bc
 8009b9c:	ffff8780 	.word	0xffff8780
 8009ba0:	080136d6 	.word	0x080136d6
 8009ba4:	ffff9980 	.word	0xffff9980

08009ba8 <mbedtls_ssl_send_alert_message>:
{
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	460f      	mov	r7, r1
 8009bac:	b085      	sub	sp, #20
 8009bae:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d03d      	beq.n	8009c32 <mbedtls_ssl_send_alert_message+0x8a>
 8009bb6:	6803      	ldr	r3, [r0, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d03a      	beq.n	8009c32 <mbedtls_ssl_send_alert_message+0x8a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <mbedtls_ssl_send_alert_message+0x90>)
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4a1e      	ldr	r2, [pc, #120]	; (8009c3c <mbedtls_ssl_send_alert_message+0x94>)
 8009bc2:	f241 0352 	movw	r3, #4178	; 0x1052
 8009bc6:	2102      	movs	r1, #2
 8009bc8:	f7fa fcfc 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 8009bcc:	4b1c      	ldr	r3, [pc, #112]	; (8009c40 <mbedtls_ssl_send_alert_message+0x98>)
 8009bce:	9502      	str	r5, [sp, #8]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	4a1a      	ldr	r2, [pc, #104]	; (8009c3c <mbedtls_ssl_send_alert_message+0x94>)
 8009bd4:	9701      	str	r7, [sp, #4]
 8009bd6:	f241 0353 	movw	r3, #4179	; 0x1053
 8009bda:	2103      	movs	r1, #3
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f7fa fcf1 	bl	80045c4 <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8009be2:	2315      	movs	r3, #21
 8009be4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0] = level;
 8009be8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen = 2;
 8009bec:	2602      	movs	r6, #2
 8009bee:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8009bf2:	701f      	strb	r7, [r3, #0]
    ssl->out_msg[1] = message;
 8009bf4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8009bf8:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 8009bfa:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8009bfc:	f7ff fd42 	bl	8009684 <mbedtls_ssl_write_record>
 8009c00:	4605      	mov	r5, r0
 8009c02:	b160      	cbz	r0, 8009c1e <mbedtls_ssl_send_alert_message+0x76>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8009c04:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <mbedtls_ssl_send_alert_message+0x9c>)
 8009c06:	9001      	str	r0, [sp, #4]
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	4a0c      	ldr	r2, [pc, #48]	; (8009c3c <mbedtls_ssl_send_alert_message+0x94>)
 8009c0c:	f241 035c 	movw	r3, #4188	; 0x105c
 8009c10:	2101      	movs	r1, #1
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7fa fd06 	bl	8004624 <mbedtls_debug_print_ret>
}
 8009c18:	4628      	mov	r0, r5
 8009c1a:	b005      	add	sp, #20
 8009c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 8009c1e:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <mbedtls_ssl_send_alert_message+0xa0>)
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	4a06      	ldr	r2, [pc, #24]	; (8009c3c <mbedtls_ssl_send_alert_message+0x94>)
 8009c24:	f241 035f 	movw	r3, #4191	; 0x105f
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7fa fcca 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 8009c30:	e7f2      	b.n	8009c18 <mbedtls_ssl_send_alert_message+0x70>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8009c32:	4d06      	ldr	r5, [pc, #24]	; (8009c4c <mbedtls_ssl_send_alert_message+0xa4>)
 8009c34:	e7f0      	b.n	8009c18 <mbedtls_ssl_send_alert_message+0x70>
 8009c36:	bf00      	nop
 8009c38:	08013d97 	.word	0x08013d97
 8009c3c:	08014146 	.word	0x08014146
 8009c40:	08013dad 	.word	0x08013dad
 8009c44:	08012d6a 	.word	0x08012d6a
 8009c48:	08013dcc 	.word	0x08013dcc
 8009c4c:	ffff8f00 	.word	0xffff8f00

08009c50 <mbedtls_ssl_read_record_layer>:
{
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ssl->in_hslen != 0 )
 8009c54:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8009c56:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
 8009c58:	b091      	sub	sp, #68	; 0x44
 8009c5a:	4604      	mov	r4, r0
    if( ssl->in_hslen != 0 )
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	d03a      	beq.n	8009cd6 <mbedtls_ssl_read_record_layer+0x86>
        if( ssl->in_offt != NULL )
 8009c60:	b163      	cbz	r3, 8009c7c <mbedtls_ssl_read_record_layer+0x2c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009c62:	4b95      	ldr	r3, [pc, #596]	; (8009eb8 <mbedtls_ssl_read_record_layer+0x268>)
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	4a95      	ldr	r2, [pc, #596]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8009c68:	4d95      	ldr	r5, [pc, #596]	; (8009ec0 <mbedtls_ssl_read_record_layer+0x270>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009c6a:	f640 730e 	movw	r3, #3854	; 0xf0e
 8009c6e:	2101      	movs	r1, #1
 8009c70:	f7fa fca8 	bl	80045c4 <mbedtls_debug_print_msg>
}
 8009c74:	4628      	mov	r0, r5
 8009c76:	b011      	add	sp, #68	; 0x44
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 8009c7c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8009c7e:	4291      	cmp	r1, r2
 8009c80:	d227      	bcs.n	8009cd2 <mbedtls_ssl_read_record_layer+0x82>
            ssl->in_msglen -= ssl->in_hslen;
 8009c82:	1a52      	subs	r2, r2, r1
 8009c84:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8009c86:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009c88:	4401      	add	r1, r0
 8009c8a:	f004 fbd3 	bl	800e434 <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 8009c8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009c90:	9302      	str	r3, [sp, #8]
 8009c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	4b8b      	ldr	r3, [pc, #556]	; (8009ec4 <mbedtls_ssl_read_record_layer+0x274>)
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	4a88      	ldr	r2, [pc, #544]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009c9c:	f640 732e 	movw	r3, #3886	; 0xf2e
 8009ca0:	2104      	movs	r1, #4
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7fa fcec 	bl	8004680 <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen > 0 )
 8009cac:	6f27      	ldr	r7, [r4, #112]	; 0x70
 8009cae:	b99f      	cbnz	r7, 8009cd8 <mbedtls_ssl_read_record_layer+0x88>
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8009cb0:	2105      	movs	r1, #5
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7ff fbb0 	bl	8009418 <mbedtls_ssl_fetch_input>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	b188      	cbz	r0, 8009ce0 <mbedtls_ssl_read_record_layer+0x90>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8009cbc:	4b82      	ldr	r3, [pc, #520]	; (8009ec8 <mbedtls_ssl_read_record_layer+0x278>)
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	9001      	str	r0, [sp, #4]
 8009cc2:	f640 7359 	movw	r3, #3929	; 0xf59
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 8009cc6:	4a7d      	ldr	r2, [pc, #500]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009cc8:	2101      	movs	r1, #1
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7fa fcaa 	bl	8004624 <mbedtls_debug_print_ret>
 8009cd0:	e7d0      	b.n	8009c74 <mbedtls_ssl_read_record_layer+0x24>
            ssl->in_msglen = 0;
 8009cd2:	6703      	str	r3, [r0, #112]	; 0x70
 8009cd4:	e7e8      	b.n	8009ca8 <mbedtls_ssl_read_record_layer+0x58>
    else if( ssl->in_offt != NULL )
 8009cd6:	b10b      	cbz	r3, 8009cdc <mbedtls_ssl_read_record_layer+0x8c>
        return( 0 );
 8009cd8:	2500      	movs	r5, #0
 8009cda:	e7cb      	b.n	8009c74 <mbedtls_ssl_read_record_layer+0x24>
        ssl->in_msglen = 0;
 8009cdc:	6703      	str	r3, [r0, #112]	; 0x70
 8009cde:	e7e5      	b.n	8009cac <mbedtls_ssl_read_record_layer+0x5c>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 8009ce0:	2305      	movs	r3, #5
 8009ce2:	9302      	str	r3, [sp, #8]
 8009ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	4b78      	ldr	r3, [pc, #480]	; (8009ecc <mbedtls_ssl_read_record_layer+0x27c>)
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	4a73      	ldr	r2, [pc, #460]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009cee:	f640 53c5 	movw	r3, #3525	; 0xdc5
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f7fa fcc3 	bl	8004680 <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 8009cfa:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8009cfc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    ssl->in_msgtype =  ssl->in_hdr[0];
 8009cfe:	7811      	ldrb	r1, [r2, #0]
 8009d00:	66e1      	str	r1, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8009d02:	7805      	ldrb	r5, [r0, #0]
 8009d04:	7843      	ldrb	r3, [r0, #1]
 8009d06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009d0a:	6723      	str	r3, [r4, #112]	; 0x70
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8009d0c:	7856      	ldrb	r6, [r2, #1]
        *minor = ver[1];
 8009d0e:	7895      	ldrb	r5, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	4b6f      	ldr	r3, [pc, #444]	; (8009ed0 <mbedtls_ssl_read_record_layer+0x280>)
 8009d14:	9101      	str	r1, [sp, #4]
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	9503      	str	r5, [sp, #12]
 8009d1a:	f640 53ce 	movw	r3, #3534	; 0xdce
 8009d1e:	9602      	str	r6, [sp, #8]
 8009d20:	4a66      	ldr	r2, [pc, #408]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009d22:	2103      	movs	r1, #3
 8009d24:	4620      	mov	r0, r4
 8009d26:	f7fa fc4d 	bl	80045c4 <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 8009d2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d2c:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d90f      	bls.n	8009d52 <mbedtls_ssl_read_record_layer+0x102>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 8009d32:	4b68      	ldr	r3, [pc, #416]	; (8009ed4 <mbedtls_ssl_read_record_layer+0x284>)
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	4a61      	ldr	r2, [pc, #388]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f640 53d6 	movw	r3, #3542	; 0xdd6
 8009d40:	f7fa fc40 	bl	80045c4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009d44:	220a      	movs	r2, #10
 8009d46:	2102      	movs	r1, #2
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7ff ff2d 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8009d4e:	4d62      	ldr	r5, [pc, #392]	; (8009ed8 <mbedtls_ssl_read_record_layer+0x288>)
 8009d50:	e790      	b.n	8009c74 <mbedtls_ssl_read_record_layer+0x24>
    if( major_ver != ssl->major_ver )
 8009d52:	68a3      	ldr	r3, [r4, #8]
 8009d54:	429e      	cmp	r6, r3
 8009d56:	d009      	beq.n	8009d6c <mbedtls_ssl_read_record_layer+0x11c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 8009d58:	4b60      	ldr	r3, [pc, #384]	; (8009edc <mbedtls_ssl_read_record_layer+0x28c>)
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	f640 53e6 	movw	r3, #3558	; 0xde6
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8009d60:	4a56      	ldr	r2, [pc, #344]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009d62:	2101      	movs	r1, #1
 8009d64:	4620      	mov	r0, r4
 8009d66:	f7fa fc2d 	bl	80045c4 <mbedtls_debug_print_msg>
 8009d6a:	e7f0      	b.n	8009d4e <mbedtls_ssl_read_record_layer+0xfe>
    if( minor_ver > ssl->conf->max_minor_ver )
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009d72:	429d      	cmp	r5, r3
 8009d74:	dd04      	ble.n	8009d80 <mbedtls_ssl_read_record_layer+0x130>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 8009d76:	4b5a      	ldr	r3, [pc, #360]	; (8009ee0 <mbedtls_ssl_read_record_layer+0x290>)
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	f640 53ec 	movw	r3, #3564	; 0xdec
 8009d7e:	e7ef      	b.n	8009d60 <mbedtls_ssl_read_record_layer+0x110>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 8009d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d82:	6d22      	ldr	r2, [r4, #80]	; 0x50
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8009d84:	6f21      	ldr	r1, [r4, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 8009d8c:	331d      	adds	r3, #29
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8009d8e:	4299      	cmp	r1, r3
 8009d90:	d904      	bls.n	8009d9c <mbedtls_ssl_read_record_layer+0x14c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8009d92:	4b54      	ldr	r3, [pc, #336]	; (8009ee4 <mbedtls_ssl_read_record_layer+0x294>)
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8009d9a:	e7e1      	b.n	8009d60 <mbedtls_ssl_read_record_layer+0x110>
    if( ssl->transform_in == NULL )
 8009d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d9e:	b94b      	cbnz	r3, 8009db4 <mbedtls_ssl_read_record_layer+0x164>
        if( ssl->in_msglen < 1 ||
 8009da0:	1e4b      	subs	r3, r1, #1
 8009da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da6:	f0c0 81ea 	bcc.w	800a17e <mbedtls_ssl_read_record_layer+0x52e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8009daa:	4b4e      	ldr	r3, [pc, #312]	; (8009ee4 <mbedtls_ssl_read_record_layer+0x294>)
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	f640 53fe 	movw	r3, #3582	; 0xdfe
 8009db2:	e7d5      	b.n	8009d60 <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	4299      	cmp	r1, r3
 8009db8:	d204      	bcs.n	8009dc4 <mbedtls_ssl_read_record_layer+0x174>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8009dba:	4b4a      	ldr	r3, [pc, #296]	; (8009ee4 <mbedtls_ssl_read_record_layer+0x294>)
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	f640 6306 	movw	r3, #3590	; 0xe06
 8009dc2:	e7cd      	b.n	8009d60 <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8009dc4:	68e2      	ldr	r2, [r4, #12]
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	f340 81d9 	ble.w	800a17e <mbedtls_ssl_read_record_layer+0x52e>
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 8009dcc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8009dd0:	4299      	cmp	r1, r3
 8009dd2:	f240 81d4 	bls.w	800a17e <mbedtls_ssl_read_record_layer+0x52e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8009dd6:	4b43      	ldr	r3, [pc, #268]	; (8009ee4 <mbedtls_ssl_read_record_layer+0x294>)
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	f640 631b 	movw	r3, #3611	; 0xe1b
 8009dde:	e7bf      	b.n	8009d60 <mbedtls_ssl_read_record_layer+0x110>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 8009de0:	6f23      	ldr	r3, [r4, #112]	; 0x70
        ssl->in_left = 0;
 8009de2:	6765      	str	r5, [r4, #116]	; 0x74
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 8009de4:	3305      	adds	r3, #5
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	4b3e      	ldr	r3, [pc, #248]	; (8009ee8 <mbedtls_ssl_read_record_layer+0x298>)
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	4a32      	ldr	r2, [pc, #200]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009df2:	f640 6378 	movw	r3, #3704	; 0xe78
 8009df6:	2104      	movs	r1, #4
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7fa fc41 	bl	8004680 <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 8009dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f43f af69 	beq.w	8009cd8 <mbedtls_ssl_read_record_layer+0x88>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 8009e06:	4b39      	ldr	r3, [pc, #228]	; (8009eec <mbedtls_ssl_read_record_layer+0x29c>)
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4a2c      	ldr	r2, [pc, #176]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009e0c:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8009e10:	2102      	movs	r1, #2
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7fa fbd6 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 8009e18:	6a23      	ldr	r3, [r4, #32]
 8009e1a:	b10b      	cbz	r3, 8009e20 <mbedtls_ssl_read_record_layer+0x1d0>
 8009e1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009e1e:	b950      	cbnz	r0, 8009e36 <mbedtls_ssl_read_record_layer+0x1e6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009e20:	4b25      	ldr	r3, [pc, #148]	; (8009eb8 <mbedtls_ssl_read_record_layer+0x268>)
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	f240 6354 	movw	r3, #1620	; 0x654
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009e28:	4a24      	ldr	r2, [pc, #144]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8009e2a:	4d25      	ldr	r5, [pc, #148]	; (8009ec0 <mbedtls_ssl_read_record_layer+0x270>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7fa fbc8 	bl	80045c4 <mbedtls_debug_print_msg>
 8009e34:	e086      	b.n	8009f44 <mbedtls_ssl_read_record_layer+0x2f4>
    if( NULL == ctx || NULL == ctx->cipher_info )
 8009e36:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8009e3a:	b103      	cbz	r3, 8009e3e <mbedtls_ssl_read_record_layer+0x1ee>
    return ctx->cipher_info->mode;
 8009e3c:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 8009e3e:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8009e40:	6882      	ldr	r2, [r0, #8]
 8009e42:	4296      	cmp	r6, r2
 8009e44:	d20b      	bcs.n	8009e5e <mbedtls_ssl_read_record_layer+0x20e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 8009e46:	4b2a      	ldr	r3, [pc, #168]	; (8009ef0 <mbedtls_ssl_read_record_layer+0x2a0>)
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	9202      	str	r2, [sp, #8]
 8009e4c:	9601      	str	r6, [sp, #4]
 8009e4e:	f240 635d 	movw	r3, #1629	; 0x65d
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 8009e52:	4a1a      	ldr	r2, [pc, #104]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009e54:	2101      	movs	r1, #1
 8009e56:	4620      	mov	r0, r4
 8009e58:	f7fa fbb4 	bl	80045c4 <mbedtls_debug_print_msg>
 8009e5c:	e01d      	b.n	8009e9a <mbedtls_ssl_read_record_layer+0x24a>
    if( mode == MBEDTLS_MODE_CBC )
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	f040 80ed 	bne.w	800a03e <mbedtls_ssl_read_record_layer+0x3ee>
        size_t olen = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	9308      	str	r3, [sp, #32]
 8009e68:	68c2      	ldr	r2, [r0, #12]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8009e6a:	68e1      	ldr	r1, [r4, #12]
 8009e6c:	6945      	ldr	r5, [r0, #20]
            minlen += ssl->transform_in->ivlen;
 8009e6e:	2901      	cmp	r1, #1
 8009e70:	bfc8      	it	gt
 8009e72:	4617      	movgt	r7, r2
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8009e74:	19d3      	adds	r3, r2, r7
 8009e76:	429e      	cmp	r6, r3
 8009e78:	d303      	bcc.n	8009e82 <mbedtls_ssl_read_record_layer+0x232>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 8009e7a:	1c6b      	adds	r3, r5, #1
 8009e7c:	441f      	add	r7, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8009e7e:	42be      	cmp	r6, r7
 8009e80:	d20d      	bcs.n	8009e9e <mbedtls_ssl_read_record_layer+0x24e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 8009e82:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <mbedtls_ssl_read_record_layer+0x2a4>)
 8009e84:	9202      	str	r2, [sp, #8]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	9503      	str	r5, [sp, #12]
 8009e8a:	9601      	str	r6, [sp, #4]
 8009e8c:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8009e90:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <mbedtls_ssl_read_record_layer+0x26c>)
 8009e92:	2101      	movs	r1, #1
 8009e94:	4620      	mov	r0, r4
 8009e96:	f7fa fb95 	bl	80045c4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8009e9a:	4d17      	ldr	r5, [pc, #92]	; (8009ef8 <mbedtls_ssl_read_record_layer+0x2a8>)
 8009e9c:	e052      	b.n	8009f44 <mbedtls_ssl_read_record_layer+0x2f4>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 8009e9e:	fbb6 f7f2 	udiv	r7, r6, r2
 8009ea2:	fb02 6717 	mls	r7, r2, r7, r6
 8009ea6:	b35f      	cbz	r7, 8009f00 <mbedtls_ssl_read_record_layer+0x2b0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 8009ea8:	4b14      	ldr	r3, [pc, #80]	; (8009efc <mbedtls_ssl_read_record_layer+0x2ac>)
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	9202      	str	r2, [sp, #8]
 8009eae:	9601      	str	r6, [sp, #4]
 8009eb0:	f240 7319 	movw	r3, #1817	; 0x719
 8009eb4:	e7cd      	b.n	8009e52 <mbedtls_ssl_read_record_layer+0x202>
 8009eb6:	bf00      	nop
 8009eb8:	08013108 	.word	0x08013108
 8009ebc:	08014146 	.word	0x08014146
 8009ec0:	ffff9400 	.word	0xffff9400
 8009ec4:	08013b49 	.word	0x08013b49
 8009ec8:	08013b65 	.word	0x08013b65
 8009ecc:	08013b7d 	.word	0x08013b7d
 8009ed0:	08013b91 	.word	0x08013b91
 8009ed4:	08013bcc 	.word	0x08013bcc
 8009ed8:	ffff8e00 	.word	0xffff8e00
 8009edc:	08013be0 	.word	0x08013be0
 8009ee0:	08013bf7 	.word	0x08013bf7
 8009ee4:	08013c0e 	.word	0x08013c0e
 8009ee8:	08013c21 	.word	0x08013c21
 8009eec:	08013c3b 	.word	0x08013c3b
 8009ef0:	08013c4a 	.word	0x08013c4a
 8009ef4:	08013c67 	.word	0x08013c67
 8009ef8:	ffff8e80 	.word	0xffff8e80
 8009efc:	08013ca5 	.word	0x08013ca5
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8009f00:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 8009f02:	f8d4 9064 	ldr.w	r9, [r4, #100]	; 0x64
 8009f06:	f100 0128 	add.w	r1, r0, #40	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8009f0a:	dd05      	ble.n	8009f18 <mbedtls_ssl_read_record_layer+0x2c8>
            dec_msglen -= ssl->transform_in->ivlen;
 8009f0c:	1ab6      	subs	r6, r6, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 8009f0e:	6726      	str	r6, [r4, #112]	; 0x70
 8009f10:	468e      	mov	lr, r1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8009f12:	463d      	mov	r5, r7
 8009f14:	42aa      	cmp	r2, r5
 8009f16:	d11b      	bne.n	8009f50 <mbedtls_ssl_read_record_layer+0x300>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8009f18:	f10d 0820 	add.w	r8, sp, #32
 8009f1c:	f8cd 8008 	str.w	r8, [sp, #8]
 8009f20:	e88d 0240 	stmia.w	sp, {r6, r9}
 8009f24:	464b      	mov	r3, r9
 8009f26:	3090      	adds	r0, #144	; 0x90
 8009f28:	f7fa fa42 	bl	80043b0 <mbedtls_cipher_crypt>
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	b1b0      	cbz	r0, 8009f5e <mbedtls_ssl_read_record_layer+0x30e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 8009f30:	4baa      	ldr	r3, [pc, #680]	; (800a1dc <mbedtls_ssl_read_record_layer+0x58c>)
 8009f32:	9001      	str	r0, [sp, #4]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4aaa      	ldr	r2, [pc, #680]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 8009f38:	f240 7331 	movw	r3, #1841	; 0x731
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7fa fb70 	bl	8004624 <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 8009f44:	4ba7      	ldr	r3, [pc, #668]	; (800a1e4 <mbedtls_ssl_read_record_layer+0x594>)
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	9501      	str	r5, [sp, #4]
 8009f4a:	f640 638e 	movw	r3, #3726	; 0xe8e
 8009f4e:	e6ba      	b.n	8009cc6 <mbedtls_ssl_read_record_layer+0x76>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8009f50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009f52:	f813 c005 	ldrb.w	ip, [r3, r5]
 8009f56:	f80e cb01 	strb.w	ip, [lr], #1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8009f5a:	3501      	adds	r5, #1
 8009f5c:	e7da      	b.n	8009f14 <mbedtls_ssl_read_record_layer+0x2c4>
        if( dec_msglen != olen )
 8009f5e:	9b08      	ldr	r3, [sp, #32]
 8009f60:	429e      	cmp	r6, r3
 8009f62:	d004      	beq.n	8009f6e <mbedtls_ssl_read_record_layer+0x31e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009f64:	4ba0      	ldr	r3, [pc, #640]	; (800a1e8 <mbedtls_ssl_read_record_layer+0x598>)
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	f240 7337 	movw	r3, #1847	; 0x737
 8009f6c:	e75c      	b.n	8009e28 <mbedtls_ssl_read_record_layer+0x1d8>
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8009f6e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009f70:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8009f72:	6b62      	ldr	r2, [r4, #52]	; 0x34
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8009f74:	f101 3eff 	add.w	lr, r1, #4294967295
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8009f78:	6956      	ldr	r6, [r2, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8009f7a:	f810 300e 	ldrb.w	r3, [r0, lr]
 8009f7e:	3301      	adds	r3, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8009f80:	199a      	adds	r2, r3, r6
 8009f82:	4291      	cmp	r1, r2
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8009f84:	68e2      	ldr	r2, [r4, #12]
    size_t padlen = 0, correct = 1;
 8009f86:	bf2c      	ite	cs
 8009f88:	2501      	movcs	r5, #1
            padlen = 0;
 8009f8a:	462b      	movcc	r3, r5
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	dd51      	ble.n	800a034 <mbedtls_ssl_read_record_layer+0x3e4>
            correct &= ( ssl->in_msglen >= padlen + 1 );
 8009f90:	1c5a      	adds	r2, r3, #1
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 8009f92:	4291      	cmp	r1, r2
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 8009f94:	ebae 0e03 	sub.w	lr, lr, r3
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 8009f98:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8009f9c:	bf2c      	ite	cs
 8009f9e:	2201      	movcs	r2, #1
 8009fa0:	2200      	movcc	r2, #0
 8009fa2:	45b6      	cmp	lr, r6
 8009fa4:	bf28      	it	cs
 8009fa6:	2200      	movcs	r2, #0
 8009fa8:	4015      	ands	r5, r2
            size_t pad_count = 0, real_count = 1;
 8009faa:	2601      	movs	r6, #1
 8009fac:	f04f 0c00 	mov.w	ip, #0
            for( i = 1; i <= 256; i++ )
 8009fb0:	4632      	mov	r2, r6
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8009fb2:	fb05 0e0e 	mla	lr, r5, lr, r0
 8009fb6:	f103 3bff 	add.w	fp, r3, #4294967295
            for( i = 1; i <= 256; i++ )
 8009fba:	f240 1a01 	movw	sl, #257	; 0x101
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8009fbe:	f81e 9002 	ldrb.w	r9, [lr, r2]
                real_count &= ( i <= padlen );
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	bf34      	ite	cc
 8009fc6:	2600      	movcc	r6, #0
 8009fc8:	f006 0601 	andcs.w	r6, r6, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8009fcc:	45d9      	cmp	r9, fp
            for( i = 1; i <= 256; i++ )
 8009fce:	f102 0201 	add.w	r2, r2, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8009fd2:	bf14      	ite	ne
 8009fd4:	f04f 0900 	movne.w	r9, #0
 8009fd8:	f04f 0901 	moveq.w	r9, #1
            for( i = 1; i <= 256; i++ )
 8009fdc:	4552      	cmp	r2, sl
                pad_count += real_count *
 8009fde:	fb06 cc09 	mla	ip, r6, r9, ip
            for( i = 1; i <= 256; i++ )
 8009fe2:	d1ec      	bne.n	8009fbe <mbedtls_ssl_read_record_layer+0x36e>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 8009fe4:	4563      	cmp	r3, ip
 8009fe6:	bf14      	ite	ne
 8009fe8:	2500      	movne	r5, #0
 8009fea:	f005 0501 	andeq.w	r5, r5, #1
            padlen &= correct * 0x1FF;
 8009fee:	026e      	lsls	r6, r5, #9
 8009ff0:	1b76      	subs	r6, r6, r5
 8009ff2:	401e      	ands	r6, r3
        ssl->in_msglen -= padlen;
 8009ff4:	1b89      	subs	r1, r1, r6
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 8009ff6:	4b7d      	ldr	r3, [pc, #500]	; (800a1ec <mbedtls_ssl_read_record_layer+0x59c>)
        ssl->in_msglen -= padlen;
 8009ff8:	6721      	str	r1, [r4, #112]	; 0x70
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 8009ffa:	9102      	str	r1, [sp, #8]
 8009ffc:	9001      	str	r0, [sp, #4]
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	4a77      	ldr	r2, [pc, #476]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 800a002:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 800a006:	2104      	movs	r1, #4
 800a008:	4620      	mov	r0, r4
 800a00a:	f7fa fb39 	bl	8004680 <mbedtls_debug_print_buf>
        ssl->in_msglen -= ssl->transform_in->maclen;
 800a00e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a010:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a012:	6952      	ldr	r2, [r2, #20]
 800a014:	1a9b      	subs	r3, r3, r2
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 800a016:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        ssl->in_msglen -= ssl->transform_in->maclen;
 800a018:	6723      	str	r3, [r4, #112]	; 0x70
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 800a01a:	0a1b      	lsrs	r3, r3, #8
 800a01c:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 800a01e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a020:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a022:	705a      	strb	r2, [r3, #1]
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800a024:	68e3      	ldr	r3, [r4, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	dc0e      	bgt.n	800a048 <mbedtls_ssl_read_record_layer+0x3f8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800a02a:	4b6f      	ldr	r3, [pc, #444]	; (800a1e8 <mbedtls_ssl_read_record_layer+0x598>)
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	f240 73e2 	movw	r3, #2018	; 0x7e2
 800a032:	e6f9      	b.n	8009e28 <mbedtls_ssl_read_record_layer+0x1d8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800a034:	4b6c      	ldr	r3, [pc, #432]	; (800a1e8 <mbedtls_ssl_read_record_layer+0x598>)
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	f240 7391 	movw	r3, #1937	; 0x791
 800a03c:	e6f4      	b.n	8009e28 <mbedtls_ssl_read_record_layer+0x1d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800a03e:	4b6a      	ldr	r3, [pc, #424]	; (800a1e8 <mbedtls_ssl_read_record_layer+0x598>)
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	f240 739b 	movw	r3, #1947	; 0x79b
 800a046:	e6ef      	b.n	8009e28 <mbedtls_ssl_read_record_layer+0x1d8>
 800a048:	6f22      	ldr	r2, [r4, #112]	; 0x70
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800a04a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a04c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a04e:	3215      	adds	r2, #21
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 800a050:	18b3      	adds	r3, r6, r2
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 800a052:	0992      	lsrs	r2, r2, #6
            extra_run &= correct * 0xFF;
 800a054:	022e      	lsls	r6, r5, #8
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 800a056:	ebc2 1293 	rsb	r2, r2, r3, lsr #6
            extra_run &= correct * 0xFF;
 800a05a:	1b76      	subs	r6, r6, r5
 800a05c:	4016      	ands	r6, r2
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800a05e:	3044      	adds	r0, #68	; 0x44
 800a060:	2208      	movs	r2, #8
 800a062:	f7fb fb91 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 800a066:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a068:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a06a:	2203      	movs	r2, #3
 800a06c:	3044      	adds	r0, #68	; 0x44
 800a06e:	f7fb fb8b 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 800a072:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a074:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a076:	2202      	movs	r2, #2
 800a078:	3044      	adds	r0, #68	; 0x44
 800a07a:	f7fb fb85 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 800a07e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a080:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a082:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a084:	3044      	adds	r0, #68	; 0x44
 800a086:	f7fb fb7f 	bl	8005788 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 800a08a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a08c:	4641      	mov	r1, r8
 800a08e:	3044      	adds	r0, #68	; 0x44
 800a090:	f7fb fb8c 	bl	80057ac <mbedtls_md_hmac_finish>
            for( j = 0; j < extra_run + 1; j++ )
 800a094:	f04f 0900 	mov.w	r9, #0
 800a098:	3601      	adds	r6, #1
 800a09a:	45b1      	cmp	r9, r6
 800a09c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a09e:	d34b      	bcc.n	800a138 <mbedtls_ssl_read_record_layer+0x4e8>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 800a0a0:	3044      	adds	r0, #68	; 0x44
 800a0a2:	f7fb fbb5 	bl	8005810 <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
 800a0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a8:	4a4d      	ldr	r2, [pc, #308]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	4b50      	ldr	r3, [pc, #320]	; (800a1f0 <mbedtls_ssl_read_record_layer+0x5a0>)
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	2104      	movs	r1, #4
 800a0b4:	f240 73e6 	movw	r3, #2022	; 0x7e6
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f8cd 8004 	str.w	r8, [sp, #4]
 800a0be:	f7fa fadf 	bl	8004680 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
 800a0c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0c4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0cc:	4413      	add	r3, r2
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	4b48      	ldr	r3, [pc, #288]	; (800a1f4 <mbedtls_ssl_read_record_layer+0x5a4>)
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	4a42      	ldr	r2, [pc, #264]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 800a0d6:	f44f 63fd 	mov.w	r3, #2024	; 0x7e8
 800a0da:	2104      	movs	r1, #4
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7fa facf 	bl	8004680 <mbedtls_debug_print_buf>
        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 800a0e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a0e6:	6959      	ldr	r1, [r3, #20]
 800a0e8:	6f22      	ldr	r2, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f88d 301f 	strb.w	r3, [sp, #31]

    for( i = 0; i < n; i++ )
 800a0f0:	42b9      	cmp	r1, r7
 800a0f2:	d128      	bne.n	800a146 <mbedtls_ssl_read_record_layer+0x4f6>
        diff |= A[i] ^ B[i];

    return( diff );
 800a0f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800a0f8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f47f aecc 	bne.w	8009e9a <mbedtls_ssl_read_record_layer+0x24a>
        if( correct == 0 )
 800a102:	2d00      	cmp	r5, #0
 800a104:	f43f aec9 	beq.w	8009e9a <mbedtls_ssl_read_record_layer+0x24a>
    if( ssl->in_msglen == 0 )
 800a108:	b352      	cbz	r2, 800a160 <mbedtls_ssl_read_record_layer+0x510>
        ssl->nb_zero = 0;
 800a10a:	67e1      	str	r1, [r4, #124]	; 0x7c
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800a10c:	2308      	movs	r3, #8
            if( ++ssl->in_ctr[i - 1] != 0 )
 800a10e:	3b01      	subs	r3, #1
 800a110:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a112:	5cca      	ldrb	r2, [r1, r3]
 800a114:	3201      	adds	r2, #1
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	54ca      	strb	r2, [r1, r3]
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d13d      	bne.n	800a19a <mbedtls_ssl_read_record_layer+0x54a>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f5      	bne.n	800a10e <mbedtls_ssl_read_record_layer+0x4be>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 800a122:	4b35      	ldr	r3, [pc, #212]	; (800a1f8 <mbedtls_ssl_read_record_layer+0x5a8>)
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	4a2e      	ldr	r2, [pc, #184]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 800a128:	4d34      	ldr	r5, [pc, #208]	; (800a1fc <mbedtls_ssl_read_record_layer+0x5ac>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 800a12a:	f640 0324 	movw	r3, #2084	; 0x824
 800a12e:	2101      	movs	r1, #1
 800a130:	4620      	mov	r0, r4
 800a132:	f7fa fa47 	bl	80045c4 <mbedtls_debug_print_msg>
 800a136:	e705      	b.n	8009f44 <mbedtls_ssl_read_record_layer+0x2f4>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 800a138:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a13a:	3044      	adds	r0, #68	; 0x44
 800a13c:	f7fb fb80 	bl	8005840 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 800a140:	f109 0901 	add.w	r9, r9, #1
 800a144:	e7a9      	b.n	800a09a <mbedtls_ssl_read_record_layer+0x44a>
 800a146:	19d3      	adds	r3, r2, r7
        diff |= A[i] ^ B[i];
 800a148:	5cc3      	ldrb	r3, [r0, r3]
 800a14a:	f818 e007 	ldrb.w	lr, [r8, r7]
 800a14e:	f89d 601f 	ldrb.w	r6, [sp, #31]
 800a152:	ea83 030e 	eor.w	r3, r3, lr
 800a156:	4333      	orrs	r3, r6
 800a158:	f88d 301f 	strb.w	r3, [sp, #31]
    for( i = 0; i < n; i++ )
 800a15c:	3701      	adds	r7, #1
 800a15e:	e7c7      	b.n	800a0f0 <mbedtls_ssl_read_record_layer+0x4a0>
        ssl->nb_zero++;
 800a160:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a162:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 800a164:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 800a166:	67e3      	str	r3, [r4, #124]	; 0x7c
        if( ssl->nb_zero > 3 )
 800a168:	ddd0      	ble.n	800a10c <mbedtls_ssl_read_record_layer+0x4bc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 800a16a:	4b25      	ldr	r3, [pc, #148]	; (800a200 <mbedtls_ssl_read_record_layer+0x5b0>)
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	4a1c      	ldr	r2, [pc, #112]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 800a170:	f640 030e 	movw	r3, #2062	; 0x80e
 800a174:	2101      	movs	r1, #1
 800a176:	4620      	mov	r0, r4
 800a178:	f7fa fa24 	bl	80045c4 <mbedtls_debug_print_msg>
 800a17c:	e68d      	b.n	8009e9a <mbedtls_ssl_read_record_layer+0x24a>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 800a17e:	3105      	adds	r1, #5
 800a180:	4620      	mov	r0, r4
 800a182:	f7ff f949 	bl	8009418 <mbedtls_ssl_fetch_input>
 800a186:	4605      	mov	r5, r0
 800a188:	2800      	cmp	r0, #0
 800a18a:	f43f ae29 	beq.w	8009de0 <mbedtls_ssl_read_record_layer+0x190>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 800a18e:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <mbedtls_ssl_read_record_layer+0x5b4>)
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	9501      	str	r5, [sp, #4]
 800a194:	f640 7383 	movw	r3, #3971	; 0xf83
 800a198:	e595      	b.n	8009cc6 <mbedtls_ssl_read_record_layer+0x76>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 800a19a:	4b1b      	ldr	r3, [pc, #108]	; (800a208 <mbedtls_ssl_read_record_layer+0x5b8>)
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	4a10      	ldr	r2, [pc, #64]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 800a1a0:	f640 0329 	movw	r3, #2089	; 0x829
 800a1a4:	2102      	movs	r1, #2
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f7fa fa0c 	bl	80045c4 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 800a1ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a1ae:	9302      	str	r3, [sp, #8]
 800a1b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	4b15      	ldr	r3, [pc, #84]	; (800a20c <mbedtls_ssl_read_record_layer+0x5bc>)
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <mbedtls_ssl_read_record_layer+0x590>)
 800a1ba:	f640 6393 	movw	r3, #3731	; 0xe93
 800a1be:	2104      	movs	r1, #4
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f7fa fa5d 	bl	8004680 <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 800a1c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a1c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1cc:	f67f ad84 	bls.w	8009cd8 <mbedtls_ssl_read_record_layer+0x88>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <mbedtls_ssl_read_record_layer+0x5c0>)
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	f640 6397 	movw	r3, #3735	; 0xe97
 800a1d8:	e5c2      	b.n	8009d60 <mbedtls_ssl_read_record_layer+0x110>
 800a1da:	bf00      	nop
 800a1dc:	08013fb6 	.word	0x08013fb6
 800a1e0:	08014146 	.word	0x08014146
 800a1e4:	08013d87 	.word	0x08013d87
 800a1e8:	08013108 	.word	0x08013108
 800a1ec:	08013cc4 	.word	0x08013cc4
 800a1f0:	08013ce0 	.word	0x08013ce0
 800a1f4:	08013ced 	.word	0x08013ced
 800a1f8:	08013d38 	.word	0x08013d38
 800a1fc:	ffff9480 	.word	0xffff9480
 800a200:	08013cfa 	.word	0x08013cfa
 800a204:	08013b65 	.word	0x08013b65
 800a208:	08013d5c 	.word	0x08013d5c
 800a20c:	08013d6b 	.word	0x08013d6b
 800a210:	08013c0e 	.word	0x08013c0e

0800a214 <mbedtls_ssl_read_record>:
{
 800a214:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 800a216:	4b25      	ldr	r3, [pc, #148]	; (800a2ac <mbedtls_ssl_read_record+0x98>)
 800a218:	9300      	str	r3, [sp, #0]
{
 800a21a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 800a21c:	f640 63bf 	movw	r3, #3775	; 0xebf
 800a220:	4a23      	ldr	r2, [pc, #140]	; (800a2b0 <mbedtls_ssl_read_record+0x9c>)
 800a222:	2102      	movs	r1, #2
 800a224:	f7fa f9ce 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 800a228:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a22c:	bb83      	cbnz	r3, 800a290 <mbedtls_ssl_read_record+0x7c>
            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 800a22e:	4620      	mov	r0, r4
 800a230:	f7ff fd0e 	bl	8009c50 <mbedtls_ssl_read_record_layer>
 800a234:	4605      	mov	r5, r0
 800a236:	b160      	cbz	r0, 800a252 <mbedtls_ssl_read_record+0x3e>
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <mbedtls_ssl_read_record+0xa0>)
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	9001      	str	r0, [sp, #4]
 800a23e:	f640 63c7 	movw	r3, #3783	; 0xec7
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 800a242:	4a1b      	ldr	r2, [pc, #108]	; (800a2b0 <mbedtls_ssl_read_record+0x9c>)
 800a244:	2101      	movs	r1, #1
 800a246:	4620      	mov	r0, r4
 800a248:	f7fa f9ec 	bl	8004624 <mbedtls_debug_print_ret>
}
 800a24c:	4628      	mov	r0, r5
 800a24e:	b003      	add	sp, #12
 800a250:	bd30      	pop	{r4, r5, pc}
            ret = mbedtls_ssl_handle_message_type( ssl );
 800a252:	4620      	mov	r0, r4
 800a254:	f7ff fc4c 	bl	8009af0 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 800a258:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 800a25c:	4605      	mov	r5, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 800a25e:	d0e6      	beq.n	800a22e <mbedtls_ssl_read_record+0x1a>
        if( 0 != ret )
 800a260:	b128      	cbz	r0, 800a26e <mbedtls_ssl_read_record+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 800a262:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <mbedtls_ssl_read_record+0xa0>)
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	9001      	str	r0, [sp, #4]
 800a268:	f640 63d1 	movw	r3, #3793	; 0xed1
 800a26c:	e7e9      	b.n	800a242 <mbedtls_ssl_read_record+0x2e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800a26e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a270:	2b16      	cmp	r3, #22
 800a272:	d102      	bne.n	800a27a <mbedtls_ssl_read_record+0x66>
            mbedtls_ssl_update_handshake_status( ssl );
 800a274:	4620      	mov	r0, r4
 800a276:	f7ff fc2b 	bl	8009ad0 <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 800a27a:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <mbedtls_ssl_read_record+0xa4>)
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	4a0c      	ldr	r2, [pc, #48]	; (800a2b0 <mbedtls_ssl_read_record+0x9c>)
 800a280:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 800a284:	2102      	movs	r1, #2
 800a286:	4620      	mov	r0, r4
 800a288:	f7fa f99c 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800a28c:	2500      	movs	r5, #0
 800a28e:	e7dd      	b.n	800a24c <mbedtls_ssl_read_record+0x38>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <mbedtls_ssl_read_record+0xa8>)
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4a06      	ldr	r2, [pc, #24]	; (800a2b0 <mbedtls_ssl_read_record+0x9c>)
 800a296:	f640 63dc 	movw	r3, #3804	; 0xedc
 800a29a:	2102      	movs	r1, #2
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7fa f991 	bl	80045c4 <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800a2a8:	e7e7      	b.n	800a27a <mbedtls_ssl_read_record+0x66>
 800a2aa:	bf00      	nop
 800a2ac:	08013aec 	.word	0x08013aec
 800a2b0:	08014146 	.word	0x08014146
 800a2b4:	08013afb 	.word	0x08013afb
 800a2b8:	08013b3a 	.word	0x08013b3a
 800a2bc:	08013b19 	.word	0x08013b19

0800a2c0 <mbedtls_ssl_write_certificate>:
{
 800a2c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800a2c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800a2c6:	4a5a      	ldr	r2, [pc, #360]	; (800a430 <mbedtls_ssl_write_certificate+0x170>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800a2c8:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800a2ca:	4b5a      	ldr	r3, [pc, #360]	; (800a434 <mbedtls_ssl_write_certificate+0x174>)
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	2102      	movs	r1, #2
 800a2d0:	f241 03a1 	movw	r3, #4257	; 0x10a1
{
 800a2d4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800a2d6:	f7fa f975 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800a2da:	7aab      	ldrb	r3, [r5, #10]
 800a2dc:	2b0b      	cmp	r3, #11
 800a2de:	d816      	bhi.n	800a30e <mbedtls_ssl_write_certificate+0x4e>
 800a2e0:	f44f 6516 	mov.w	r5, #2400	; 0x960
 800a2e4:	40dd      	lsrs	r5, r3
 800a2e6:	43ed      	mvns	r5, r5
 800a2e8:	f015 0501 	ands.w	r5, r5, #1
 800a2ec:	d10f      	bne.n	800a30e <mbedtls_ssl_write_certificate+0x4e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800a2ee:	4b52      	ldr	r3, [pc, #328]	; (800a438 <mbedtls_ssl_write_certificate+0x178>)
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	f241 03a8 	movw	r3, #4264	; 0x10a8
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800a2f6:	4a4e      	ldr	r2, [pc, #312]	; (800a430 <mbedtls_ssl_write_certificate+0x170>)
 800a2f8:	2102      	movs	r1, #2
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7fa f962 	bl	80045c4 <mbedtls_debug_print_msg>
            ssl->state++;
 800a300:	6863      	ldr	r3, [r4, #4]
 800a302:	3301      	adds	r3, #1
 800a304:	6063      	str	r3, [r4, #4]
}
 800a306:	4628      	mov	r0, r5
 800a308:	b004      	add	sp, #16
 800a30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800a314:	07db      	lsls	r3, r3, #31
 800a316:	d407      	bmi.n	800a328 <mbedtls_ssl_write_certificate+0x68>
        if( ssl->client_auth == 0 )
 800a318:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800a31c:	b925      	cbnz	r5, 800a328 <mbedtls_ssl_write_certificate+0x68>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800a31e:	4b46      	ldr	r3, [pc, #280]	; (800a438 <mbedtls_ssl_write_certificate+0x178>)
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	f241 03b2 	movw	r3, #4274	; 0x10b2
 800a326:	e7e6      	b.n	800a2f6 <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800a328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a32a:	b10b      	cbz	r3, 800a330 <mbedtls_ssl_write_certificate+0x70>
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	b90b      	cbnz	r3, 800a334 <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 800a330:	6b93      	ldr	r3, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 800a332:	b103      	cbz	r3, 800a336 <mbedtls_ssl_write_certificate+0x76>
 800a334:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	4b40      	ldr	r3, [pc, #256]	; (800a43c <mbedtls_ssl_write_certificate+0x17c>)
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4a3c      	ldr	r2, [pc, #240]	; (800a430 <mbedtls_ssl_write_certificate+0x170>)
 800a33e:	f241 03d5 	movw	r3, #4309	; 0x10d5
 800a342:	2103      	movs	r1, #3
 800a344:	4620      	mov	r0, r4
 800a346:	f7fa fa4b 	bl	80047e0 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800a34a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a34c:	b10b      	cbz	r3, 800a352 <mbedtls_ssl_write_certificate+0x92>
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	b91b      	cbnz	r3, 800a35a <mbedtls_ssl_write_certificate+0x9a>
        key_cert = ssl->conf->key_cert;
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 800a356:	2b00      	cmp	r3, #0
 800a358:	d05d      	beq.n	800a416 <mbedtls_ssl_write_certificate+0x156>
 800a35a:	681e      	ldr	r6, [r3, #0]
 800a35c:	2207      	movs	r2, #7
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 800a35e:	f640 77fd 	movw	r7, #4093	; 0xffd
    while( crt != NULL )
 800a362:	bb46      	cbnz	r6, 800a3b6 <mbedtls_ssl_write_certificate+0xf6>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 800a364:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a368:	1fd3      	subs	r3, r2, #7
 800a36a:	0c18      	lsrs	r0, r3, #16
 800a36c:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 800a36e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a372:	0a18      	lsrs	r0, r3, #8
 800a374:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 800a376:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a37a:	718b      	strb	r3, [r1, #6]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800a37c:	2316      	movs	r3, #22
 800a37e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 800a382:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = i;
 800a386:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 800a38a:	220b      	movs	r2, #11
 800a38c:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	3301      	adds	r3, #1
 800a392:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800a394:	4620      	mov	r0, r4
 800a396:	f7ff f975 	bl	8009684 <mbedtls_ssl_write_record>
 800a39a:	4605      	mov	r5, r0
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d03c      	beq.n	800a41a <mbedtls_ssl_write_certificate+0x15a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800a3a0:	4b27      	ldr	r3, [pc, #156]	; (800a440 <mbedtls_ssl_write_certificate+0x180>)
 800a3a2:	9001      	str	r0, [sp, #4]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4a22      	ldr	r2, [pc, #136]	; (800a430 <mbedtls_ssl_write_certificate+0x170>)
 800a3a8:	f241 1305 	movw	r3, #4357	; 0x1105
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7fa f938 	bl	8004624 <mbedtls_debug_print_ret>
        return( ret );
 800a3b4:	e7a7      	b.n	800a306 <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 800a3b6:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 800a3b8:	1abb      	subs	r3, r7, r2
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	d910      	bls.n	800a3e0 <mbedtls_ssl_write_certificate+0x120>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 800a3be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3c2:	442a      	add	r2, r5
 800a3c4:	9302      	str	r3, [sp, #8]
 800a3c6:	3203      	adds	r2, #3
 800a3c8:	4b1e      	ldr	r3, [pc, #120]	; (800a444 <mbedtls_ssl_write_certificate+0x184>)
 800a3ca:	9201      	str	r2, [sp, #4]
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	4a18      	ldr	r2, [pc, #96]	; (800a430 <mbedtls_ssl_write_certificate+0x170>)
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 800a3d0:	4d1d      	ldr	r5, [pc, #116]	; (800a448 <mbedtls_ssl_write_certificate+0x188>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 800a3d2:	f241 03e9 	movw	r3, #4329	; 0x10e9
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7fa f8f3 	bl	80045c4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 800a3de:	e792      	b.n	800a306 <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 800a3e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a3e4:	0c29      	lsrs	r1, r5, #16
 800a3e6:	5499      	strb	r1, [r3, r2]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 800a3e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a3ec:	4413      	add	r3, r2
 800a3ee:	0a29      	lsrs	r1, r5, #8
 800a3f0:	7059      	strb	r1, [r3, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 800a3f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a3f6:	4413      	add	r3, r2
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 800a3f8:	f102 0803 	add.w	r8, r2, #3
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 800a3fc:	709d      	strb	r5, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 800a3fe:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800a402:	68b1      	ldr	r1, [r6, #8]
 800a404:	462a      	mov	r2, r5
 800a406:	4440      	add	r0, r8
 800a408:	f004 f809 	bl	800e41e <memcpy>
        i += n; crt = crt->next;
 800a40c:	eb05 0208 	add.w	r2, r5, r8
 800a410:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800a414:	e7a5      	b.n	800a362 <mbedtls_ssl_write_certificate+0xa2>
 800a416:	2207      	movs	r2, #7
 800a418:	e7a4      	b.n	800a364 <mbedtls_ssl_write_certificate+0xa4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 800a41a:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <mbedtls_ssl_write_certificate+0x18c>)
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	4a04      	ldr	r2, [pc, #16]	; (800a430 <mbedtls_ssl_write_certificate+0x170>)
 800a420:	f241 1309 	movw	r3, #4361	; 0x1109
 800a424:	2102      	movs	r1, #2
 800a426:	4620      	mov	r0, r4
 800a428:	f7fa f8cc 	bl	80045c4 <mbedtls_debug_print_msg>
    return( ret );
 800a42c:	e76b      	b.n	800a306 <mbedtls_ssl_write_certificate+0x46>
 800a42e:	bf00      	nop
 800a430:	08014146 	.word	0x08014146
 800a434:	08013df4 	.word	0x08013df4
 800a438:	08013e09 	.word	0x08013e09
 800a43c:	08013e23 	.word	0x08013e23
 800a440:	08012d6a 	.word	0x08012d6a
 800a444:	08013e33 	.word	0x08013e33
 800a448:	ffff8b00 	.word	0xffff8b00
 800a44c:	08013e52 	.word	0x08013e52

0800a450 <mbedtls_ssl_parse_certificate>:
{
 800a450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800a454:	6c03      	ldr	r3, [r0, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800a456:	4a9c      	ldr	r2, [pc, #624]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800a458:	681d      	ldr	r5, [r3, #0]
    int authmode = ssl->conf->authmode;
 800a45a:	6803      	ldr	r3, [r0, #0]
{
 800a45c:	b085      	sub	sp, #20
    int authmode = ssl->conf->authmode;
 800a45e:	f893 6050 	ldrb.w	r6, [r3, #80]	; 0x50
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800a462:	4b9a      	ldr	r3, [pc, #616]	; (800a6cc <mbedtls_ssl_parse_certificate+0x27c>)
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	2102      	movs	r1, #2
 800a468:	f241 1316 	movw	r3, #4374	; 0x1116
{
 800a46c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800a46e:	f7fa f8a9 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800a472:	7aab      	ldrb	r3, [r5, #10]
 800a474:	2b0b      	cmp	r3, #11
    int authmode = ssl->conf->authmode;
 800a476:	f3c6 0681 	ubfx	r6, r6, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800a47a:	d816      	bhi.n	800a4aa <mbedtls_ssl_parse_certificate+0x5a>
 800a47c:	f44f 6516 	mov.w	r5, #2400	; 0x960
 800a480:	40dd      	lsrs	r5, r3
 800a482:	43ed      	mvns	r5, r5
 800a484:	f015 0501 	ands.w	r5, r5, #1
 800a488:	d10f      	bne.n	800a4aa <mbedtls_ssl_parse_certificate+0x5a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 800a48a:	4b91      	ldr	r3, [pc, #580]	; (800a6d0 <mbedtls_ssl_parse_certificate+0x280>)
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	4a8e      	ldr	r2, [pc, #568]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a490:	f241 131d 	movw	r3, #4381	; 0x111d
 800a494:	2102      	movs	r1, #2
 800a496:	4620      	mov	r0, r4
 800a498:	f7fa f894 	bl	80045c4 <mbedtls_debug_print_msg>
        ssl->state++;
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	6063      	str	r3, [r4, #4]
}
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	b005      	add	sp, #20
 800a4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff feb2 	bl	800a214 <mbedtls_ssl_read_record>
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	b158      	cbz	r0, 800a4cc <mbedtls_ssl_parse_certificate+0x7c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800a4b4:	4b87      	ldr	r3, [pc, #540]	; (800a6d4 <mbedtls_ssl_parse_certificate+0x284>)
 800a4b6:	9001      	str	r0, [sp, #4]
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	4a83      	ldr	r2, [pc, #524]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a4bc:	f241 133e 	movw	r3, #4414	; 0x113e
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7fa f8ae 	bl	8004624 <mbedtls_debug_print_ret>
    return( ret );
 800a4c8:	463d      	mov	r5, r7
 800a4ca:	e7ea      	b.n	800a4a2 <mbedtls_ssl_parse_certificate+0x52>
    ssl->state++;
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800a4d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a4d4:	2b16      	cmp	r3, #22
 800a4d6:	d00f      	beq.n	800a4f8 <mbedtls_ssl_parse_certificate+0xa8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a4d8:	4b7f      	ldr	r3, [pc, #508]	; (800a6d8 <mbedtls_ssl_parse_certificate+0x288>)
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	4a7a      	ldr	r2, [pc, #488]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800a4de:	4d7f      	ldr	r5, [pc, #508]	; (800a6dc <mbedtls_ssl_parse_certificate+0x28c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a4e0:	f241 137b 	movw	r3, #4475	; 0x117b
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7fa f86c 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	2102      	movs	r1, #2
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7ff fb59 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800a4f6:	e7d4      	b.n	800a4a2 <mbedtls_ssl_parse_certificate+0x52>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 800a4f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4fa:	7813      	ldrb	r3, [r2, #0]
 800a4fc:	2b0b      	cmp	r3, #11
 800a4fe:	d102      	bne.n	800a506 <mbedtls_ssl_parse_certificate+0xb6>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 800a500:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 800a502:	2909      	cmp	r1, #9
 800a504:	d80f      	bhi.n	800a526 <mbedtls_ssl_parse_certificate+0xd6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a506:	4b74      	ldr	r3, [pc, #464]	; (800a6d8 <mbedtls_ssl_parse_certificate+0x288>)
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	f241 1384 	movw	r3, #4484	; 0x1184
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a50e:	4a6e      	ldr	r2, [pc, #440]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 800a510:	4d73      	ldr	r5, [pc, #460]	; (800a6e0 <mbedtls_ssl_parse_certificate+0x290>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a512:	2101      	movs	r1, #1
 800a514:	4620      	mov	r0, r4
 800a516:	f7fa f855 	bl	80045c4 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a51a:	2232      	movs	r2, #50	; 0x32
 800a51c:	2102      	movs	r1, #2
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff fb42 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 800a524:	e7bd      	b.n	800a4a2 <mbedtls_ssl_parse_certificate+0x52>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 800a526:	7950      	ldrb	r0, [r2, #5]
 800a528:	7993      	ldrb	r3, [r2, #6]
    if( ssl->in_msg[i] != 0 ||
 800a52a:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 800a52c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    if( ssl->in_msg[i] != 0 ||
 800a530:	b912      	cbnz	r2, 800a538 <mbedtls_ssl_parse_certificate+0xe8>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 800a532:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 800a534:	4299      	cmp	r1, r3
 800a536:	d004      	beq.n	800a542 <mbedtls_ssl_parse_certificate+0xf2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a538:	4b67      	ldr	r3, [pc, #412]	; (800a6d8 <mbedtls_ssl_parse_certificate+0x288>)
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	f241 1394 	movw	r3, #4500	; 0x1194
 800a540:	e7e5      	b.n	800a50e <mbedtls_ssl_parse_certificate+0xbe>
    if( ssl->session_negotiate->peer_cert != NULL )
 800a542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a544:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a546:	b128      	cbz	r0, 800a554 <mbedtls_ssl_parse_certificate+0x104>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 800a548:	f002 f96d 	bl	800c826 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 800a54c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a54e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a550:	f003 ff4e 	bl	800e3f0 <free>
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 800a554:	f44f 719a 	mov.w	r1, #308	; 0x134
 800a558:	2001      	movs	r0, #1
 800a55a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800a55c:	f003 ff0e 	bl	800e37c <calloc>
 800a560:	65e8      	str	r0, [r5, #92]	; 0x5c
 800a562:	b990      	cbnz	r0, 800a58a <mbedtls_ssl_parse_certificate+0x13a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 800a564:	f44f 739a 	mov.w	r3, #308	; 0x134
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	4b5e      	ldr	r3, [pc, #376]	; (800a6e4 <mbedtls_ssl_parse_certificate+0x294>)
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	4a56      	ldr	r2, [pc, #344]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800a570:	4d5d      	ldr	r5, [pc, #372]	; (800a6e8 <mbedtls_ssl_parse_certificate+0x298>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 800a572:	f241 13a5 	movw	r3, #4517	; 0x11a5
 800a576:	2101      	movs	r1, #1
 800a578:	4620      	mov	r0, r4
 800a57a:	f7fa f823 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a57e:	2250      	movs	r2, #80	; 0x50
 800a580:	2102      	movs	r1, #2
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff fb10 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800a588:	e78b      	b.n	800a4a2 <mbedtls_ssl_parse_certificate+0x52>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 800a58a:	f002 f947 	bl	800c81c <mbedtls_x509_crt_init>
        switch( ret )
 800a58e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800a700 <mbedtls_ssl_parse_certificate+0x2b0>
    while( i < ssl->in_hslen )
 800a592:	2500      	movs	r5, #0
    i += 3;
 800a594:	f04f 0807 	mov.w	r8, #7
    while( i < ssl->in_hslen )
 800a598:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a59a:	4598      	cmp	r8, r3
 800a59c:	d351      	bcc.n	800a642 <mbedtls_ssl_parse_certificate+0x1f2>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 800a59e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5a0:	4a49      	ldr	r2, [pc, #292]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	4b51      	ldr	r3, [pc, #324]	; (800a6ec <mbedtls_ssl_parse_certificate+0x29c>)
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	2103      	movs	r1, #3
 800a5ac:	f241 13e2 	movw	r3, #4578	; 0x11e2
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f7fa f915 	bl	80047e0 <mbedtls_debug_print_crt>
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	f000 80e2 	beq.w	800a780 <mbedtls_ssl_parse_certificate+0x330>
            ca_chain = ssl->conf->ca_chain;
 800a5bc:	6822      	ldr	r2, [r4, #0]
                                ssl->session_negotiate->peer_cert,
 800a5be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 800a5c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
            ca_chain = ssl->conf->ca_chain;
 800a5c2:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
        ret = mbedtls_x509_crt_verify_with_profile(
 800a5c6:	9303      	str	r3, [sp, #12]
 800a5c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a5da:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800a5dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a5de:	4641      	mov	r1, r8
 800a5e0:	f002 f83e 	bl	800c660 <mbedtls_x509_crt_verify_with_profile>
        if( ret != 0 )
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b148      	cbz	r0, 800a5fc <mbedtls_ssl_parse_certificate+0x1ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 800a5e8:	4b41      	ldr	r3, [pc, #260]	; (800a6f0 <mbedtls_ssl_parse_certificate+0x2a0>)
 800a5ea:	9001      	str	r0, [sp, #4]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4a36      	ldr	r2, [pc, #216]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a5f0:	f241 2321 	movw	r3, #4641	; 0x1221
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7fa f814 	bl	8004624 <mbedtls_debug_print_ret>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 800a5fc:	2e01      	cmp	r6, #1
 800a5fe:	f040 8081 	bne.w	800a704 <mbedtls_ssl_parse_certificate+0x2b4>
 800a602:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 800a606:	d003      	beq.n	800a610 <mbedtls_ssl_parse_certificate+0x1c0>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 800a608:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 800a60c:	f040 80a0 	bne.w	800a750 <mbedtls_ssl_parse_certificate+0x300>
        if( ssl->session_negotiate->verify_result != 0 )
 800a610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 80a9 	beq.w	800a76c <mbedtls_ssl_parse_certificate+0x31c>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	4b35      	ldr	r3, [pc, #212]	; (800a6f4 <mbedtls_ssl_parse_certificate+0x2a4>)
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	4a29      	ldr	r2, [pc, #164]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a622:	f241 2379 	movw	r3, #4729	; 0x1279
 800a626:	2103      	movs	r1, #3
 800a628:	4620      	mov	r0, r4
 800a62a:	f7f9 ffcb 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 800a62e:	4b32      	ldr	r3, [pc, #200]	; (800a6f8 <mbedtls_ssl_parse_certificate+0x2a8>)
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	4a25      	ldr	r2, [pc, #148]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a634:	f241 2382 	movw	r3, #4738	; 0x1282
 800a638:	2102      	movs	r1, #2
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7f9 ffc2 	bl	80045c4 <mbedtls_debug_print_msg>
 800a640:	e742      	b.n	800a4c8 <mbedtls_ssl_parse_certificate+0x78>
        if( ssl->in_msg[i] != 0 )
 800a642:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a644:	f811 2008 	ldrb.w	r2, [r1, r8]
 800a648:	b122      	cbz	r2, 800a654 <mbedtls_ssl_parse_certificate+0x204>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a64a:	4b23      	ldr	r3, [pc, #140]	; (800a6d8 <mbedtls_ssl_parse_certificate+0x288>)
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	f241 13b3 	movw	r3, #4531	; 0x11b3
 800a652:	e75c      	b.n	800a50e <mbedtls_ssl_parse_certificate+0xbe>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 800a654:	eb01 0008 	add.w	r0, r1, r8
 800a658:	7845      	ldrb	r5, [r0, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 800a65a:	7882      	ldrb	r2, [r0, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 800a65c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 800a660:	2a7f      	cmp	r2, #127	; 0x7f
        i += 3;
 800a662:	f108 0003 	add.w	r0, r8, #3
        if( n < 128 || i + n > ssl->in_hslen )
 800a666:	d903      	bls.n	800a670 <mbedtls_ssl_parse_certificate+0x220>
 800a668:	eb02 0800 	add.w	r8, r2, r0
 800a66c:	4543      	cmp	r3, r8
 800a66e:	d204      	bcs.n	800a67a <mbedtls_ssl_parse_certificate+0x22a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800a670:	4b19      	ldr	r3, [pc, #100]	; (800a6d8 <mbedtls_ssl_parse_certificate+0x288>)
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	f241 13bf 	movw	r3, #4543	; 0x11bf
 800a678:	e749      	b.n	800a50e <mbedtls_ssl_parse_certificate+0xbe>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 800a67a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a67c:	4401      	add	r1, r0
 800a67e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a680:	f002 f92c 	bl	800c8dc <mbedtls_x509_crt_parse_der>
        switch( ret )
 800a684:	4548      	cmp	r0, r9
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 800a686:	4605      	mov	r5, r0
        switch( ret )
 800a688:	d086      	beq.n	800a598 <mbedtls_ssl_parse_certificate+0x148>
 800a68a:	dc04      	bgt.n	800a696 <mbedtls_ssl_parse_certificate+0x246>
 800a68c:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 800a690:	d018      	beq.n	800a6c4 <mbedtls_ssl_parse_certificate+0x274>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 800a692:	222a      	movs	r2, #42	; 0x2a
 800a694:	e007      	b.n	800a6a6 <mbedtls_ssl_parse_certificate+0x256>
        switch( ret )
 800a696:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 800a69a:	d003      	beq.n	800a6a4 <mbedtls_ssl_parse_certificate+0x254>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f43f af7b 	beq.w	800a598 <mbedtls_ssl_parse_certificate+0x148>
 800a6a2:	e7f6      	b.n	800a692 <mbedtls_ssl_parse_certificate+0x242>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 800a6a4:	222b      	movs	r2, #43	; 0x2b
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 800a6a6:	2102      	movs	r1, #2
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f7ff fa7d 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <mbedtls_ssl_parse_certificate+0x2ac>)
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	9501      	str	r5, [sp, #4]
 800a6b4:	f241 13db 	movw	r3, #4571	; 0x11db
 800a6b8:	4a03      	ldr	r2, [pc, #12]	; (800a6c8 <mbedtls_ssl_parse_certificate+0x278>)
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7f9 ffb1 	bl	8004624 <mbedtls_debug_print_ret>
            return( ret );
 800a6c2:	e6ee      	b.n	800a4a2 <mbedtls_ssl_parse_certificate+0x52>
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 800a6c4:	2250      	movs	r2, #80	; 0x50
 800a6c6:	e7ee      	b.n	800a6a6 <mbedtls_ssl_parse_certificate+0x256>
 800a6c8:	08014146 	.word	0x08014146
 800a6cc:	080137d2 	.word	0x080137d2
 800a6d0:	080137e7 	.word	0x080137e7
 800a6d4:	08012daf 	.word	0x08012daf
 800a6d8:	08013801 	.word	0x08013801
 800a6dc:	ffff8900 	.word	0xffff8900
 800a6e0:	ffff8600 	.word	0xffff8600
 800a6e4:	08013819 	.word	0x08013819
 800a6e8:	ffff8100 	.word	0xffff8100
 800a6ec:	0801384c 	.word	0x0801384c
 800a6f0:	0801385d 	.word	0x0801385d
 800a6f4:	0801387e 	.word	0x0801387e
 800a6f8:	080138c7 	.word	0x080138c7
 800a6fc:	08013830 	.word	0x08013830
 800a700:	ffffd9d2 	.word	0xffffd9d2
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 800a704:	f1b8 0f00 	cmp.w	r8, #0
 800a708:	d122      	bne.n	800a750 <mbedtls_ssl_parse_certificate+0x300>
 800a70a:	2e02      	cmp	r6, #2
 800a70c:	d120      	bne.n	800a750 <mbedtls_ssl_parse_certificate+0x300>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 800a70e:	4b1d      	ldr	r3, [pc, #116]	; (800a784 <mbedtls_ssl_parse_certificate+0x334>)
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	4a1d      	ldr	r2, [pc, #116]	; (800a788 <mbedtls_ssl_parse_certificate+0x338>)
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 800a714:	4d1d      	ldr	r5, [pc, #116]	; (800a78c <mbedtls_ssl_parse_certificate+0x33c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 800a716:	f241 2352 	movw	r3, #4690	; 0x1252
 800a71a:	2101      	movs	r1, #1
 800a71c:	4620      	mov	r0, r4
 800a71e:	f7f9 ff51 	bl	80045c4 <mbedtls_debug_print_msg>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 800a722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a726:	05df      	lsls	r7, r3, #23
 800a728:	d416      	bmi.n	800a758 <mbedtls_ssl_parse_certificate+0x308>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 800a72a:	075e      	lsls	r6, r3, #29
 800a72c:	d416      	bmi.n	800a75c <mbedtls_ssl_parse_certificate+0x30c>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 800a72e:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 800a732:	d115      	bne.n	800a760 <mbedtls_ssl_parse_certificate+0x310>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 800a734:	07d8      	lsls	r0, r3, #31
 800a736:	d415      	bmi.n	800a764 <mbedtls_ssl_parse_certificate+0x314>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 800a738:	0799      	lsls	r1, r3, #30
 800a73a:	d415      	bmi.n	800a768 <mbedtls_ssl_parse_certificate+0x318>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 800a73c:	f013 0f08 	tst.w	r3, #8
 800a740:	bf14      	ite	ne
 800a742:	2230      	movne	r2, #48	; 0x30
 800a744:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a746:	2102      	movs	r1, #2
 800a748:	4620      	mov	r0, r4
 800a74a:	f7ff fa2d 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 800a74e:	e001      	b.n	800a754 <mbedtls_ssl_parse_certificate+0x304>
        if( ret != 0 )
 800a750:	2d00      	cmp	r5, #0
 800a752:	d1e6      	bne.n	800a722 <mbedtls_ssl_parse_certificate+0x2d2>
 800a754:	462f      	mov	r7, r5
 800a756:	e75b      	b.n	800a610 <mbedtls_ssl_parse_certificate+0x1c0>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 800a758:	2231      	movs	r2, #49	; 0x31
 800a75a:	e7f4      	b.n	800a746 <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 800a75c:	222a      	movs	r2, #42	; 0x2a
 800a75e:	e7f2      	b.n	800a746 <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 800a760:	222b      	movs	r2, #43	; 0x2b
 800a762:	e7f0      	b.n	800a746 <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 800a764:	222d      	movs	r2, #45	; 0x2d
 800a766:	e7ee      	b.n	800a746 <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 800a768:	222c      	movs	r2, #44	; 0x2c
 800a76a:	e7ec      	b.n	800a746 <mbedtls_ssl_parse_certificate+0x2f6>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 800a76c:	4b08      	ldr	r3, [pc, #32]	; (800a790 <mbedtls_ssl_parse_certificate+0x340>)
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	4a05      	ldr	r2, [pc, #20]	; (800a788 <mbedtls_ssl_parse_certificate+0x338>)
 800a772:	f241 237d 	movw	r3, #4733	; 0x127d
 800a776:	2103      	movs	r1, #3
 800a778:	4620      	mov	r0, r4
 800a77a:	f7f9 ff23 	bl	80045c4 <mbedtls_debug_print_msg>
 800a77e:	e756      	b.n	800a62e <mbedtls_ssl_parse_certificate+0x1de>
 800a780:	462f      	mov	r7, r5
 800a782:	e754      	b.n	800a62e <mbedtls_ssl_parse_certificate+0x1de>
 800a784:	0801386e 	.word	0x0801386e
 800a788:	08014146 	.word	0x08014146
 800a78c:	ffff8980 	.word	0xffff8980
 800a790:	080138a2 	.word	0x080138a2

0800a794 <mbedtls_ssl_write_change_cipher_spec>:
{
 800a794:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 800a796:	4b18      	ldr	r3, [pc, #96]	; (800a7f8 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 800a798:	9300      	str	r3, [sp, #0]
{
 800a79a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 800a79c:	f241 2392 	movw	r3, #4754	; 0x1292
 800a7a0:	4a16      	ldr	r2, [pc, #88]	; (800a7fc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800a7a2:	2102      	movs	r1, #2
 800a7a4:	f7f9 ff0e 	bl	80045c4 <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 800a7a8:	2314      	movs	r3, #20
 800a7aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = 1;
 800a7ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = 1;
 800a7b2:	2601      	movs	r6, #1
 800a7b4:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 800a7b8:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	4433      	add	r3, r6
 800a7be:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f7fe ff5f 	bl	8009684 <mbedtls_ssl_write_record>
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	b160      	cbz	r0, 800a7e4 <mbedtls_ssl_write_change_cipher_spec+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	; (800a800 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 800a7cc:	9001      	str	r0, [sp, #4]
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	4a0a      	ldr	r2, [pc, #40]	; (800a7fc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800a7d2:	f241 239c 	movw	r3, #4764	; 0x129c
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f7f9 ff23 	bl	8004624 <mbedtls_debug_print_ret>
}
 800a7de:	4628      	mov	r0, r5
 800a7e0:	b002      	add	sp, #8
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 800a7e4:	4b07      	ldr	r3, [pc, #28]	; (800a804 <mbedtls_ssl_write_change_cipher_spec+0x70>)
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	4a04      	ldr	r2, [pc, #16]	; (800a7fc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800a7ea:	f44f 5395 	mov.w	r3, #4768	; 0x12a0
 800a7ee:	2102      	movs	r1, #2
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7f9 fee7 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800a7f6:	e7f2      	b.n	800a7de <mbedtls_ssl_write_change_cipher_spec+0x4a>
 800a7f8:	08013e67 	.word	0x08013e67
 800a7fc:	08014146 	.word	0x08014146
 800a800:	08012d6a 	.word	0x08012d6a
 800a804:	08013e83 	.word	0x08013e83

0800a808 <mbedtls_ssl_parse_change_cipher_spec>:
{
 800a808:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 800a80a:	4b36      	ldr	r3, [pc, #216]	; (800a8e4 <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 800a80c:	9300      	str	r3, [sp, #0]
{
 800a80e:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 800a810:	f241 23a9 	movw	r3, #4777	; 0x12a9
 800a814:	4a34      	ldr	r2, [pc, #208]	; (800a8e8 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 800a816:	2102      	movs	r1, #2
 800a818:	f7f9 fed4 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800a81c:	4620      	mov	r0, r4
 800a81e:	f7ff fcf9 	bl	800a214 <mbedtls_ssl_read_record>
 800a822:	4605      	mov	r5, r0
 800a824:	b160      	cbz	r0, 800a840 <mbedtls_ssl_parse_change_cipher_spec+0x38>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800a826:	4b31      	ldr	r3, [pc, #196]	; (800a8ec <mbedtls_ssl_parse_change_cipher_spec+0xe4>)
 800a828:	9001      	str	r0, [sp, #4]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4a2e      	ldr	r2, [pc, #184]	; (800a8e8 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 800a82e:	f241 23ad 	movw	r3, #4781	; 0x12ad
 800a832:	2101      	movs	r1, #1
 800a834:	4620      	mov	r0, r4
 800a836:	f7f9 fef5 	bl	8004624 <mbedtls_debug_print_ret>
}
 800a83a:	4628      	mov	r0, r5
 800a83c:	b003      	add	sp, #12
 800a83e:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 800a840:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a842:	2b14      	cmp	r3, #20
 800a844:	d00f      	beq.n	800a866 <mbedtls_ssl_parse_change_cipher_spec+0x5e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800a846:	4b2a      	ldr	r3, [pc, #168]	; (800a8f0 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	4a27      	ldr	r2, [pc, #156]	; (800a8e8 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800a84c:	4d29      	ldr	r5, [pc, #164]	; (800a8f4 <mbedtls_ssl_parse_change_cipher_spec+0xec>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800a84e:	f241 23b3 	movw	r3, #4787	; 0x12b3
 800a852:	2101      	movs	r1, #1
 800a854:	4620      	mov	r0, r4
 800a856:	f7f9 feb5 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a85a:	220a      	movs	r2, #10
 800a85c:	2102      	movs	r1, #2
 800a85e:	4620      	mov	r0, r4
 800a860:	f7ff f9a2 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800a864:	e7e9      	b.n	800a83a <mbedtls_ssl_parse_change_cipher_spec+0x32>
    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 800a866:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d103      	bne.n	800a874 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
 800a86c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d00f      	beq.n	800a894 <mbedtls_ssl_parse_change_cipher_spec+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800a874:	4b1e      	ldr	r3, [pc, #120]	; (800a8f0 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	4a1b      	ldr	r2, [pc, #108]	; (800a8e8 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 800a87a:	4d1f      	ldr	r5, [pc, #124]	; (800a8f8 <mbedtls_ssl_parse_change_cipher_spec+0xf0>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800a87c:	f241 23bb 	movw	r3, #4795	; 0x12bb
 800a880:	2101      	movs	r1, #1
 800a882:	4620      	mov	r0, r4
 800a884:	f7f9 fe9e 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a888:	2232      	movs	r2, #50	; 0x32
 800a88a:	2102      	movs	r1, #2
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7ff f98b 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 800a892:	e7d2      	b.n	800a83a <mbedtls_ssl_parse_change_cipher_spec+0x32>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 800a894:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <mbedtls_ssl_parse_change_cipher_spec+0xf4>)
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4a13      	ldr	r2, [pc, #76]	; (800a8e8 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 800a89a:	f241 23c5 	movw	r3, #4805	; 0x12c5
 800a89e:	2103      	movs	r1, #3
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7f9 fe8f 	bl	80045c4 <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 800a8a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8a8:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 800a8aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8ac:	6223      	str	r3, [r4, #32]
    memset( ssl->in_ctr, 0, 8 );
 800a8ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a8b0:	601d      	str	r5, [r3, #0]
 800a8b2:	605d      	str	r5, [r3, #4]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800a8b4:	68e3      	ldr	r3, [r4, #12]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a8ba:	dd04      	ble.n	800a8c6 <mbedtls_ssl_parse_change_cipher_spec+0xbe>
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 800a8bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a8be:	68ca      	ldr	r2, [r1, #12]
 800a8c0:	6909      	ldr	r1, [r1, #16]
 800a8c2:	1a52      	subs	r2, r2, r1
 800a8c4:	4413      	add	r3, r2
        ssl->in_msg = ssl->in_iv;
 800a8c6:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->state++;
 800a8c8:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 800a8ca:	4a07      	ldr	r2, [pc, #28]	; (800a8e8 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
    ssl->state++;
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <mbedtls_ssl_parse_change_cipher_spec+0xf8>)
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2102      	movs	r1, #2
 800a8d6:	f241 23f7 	movw	r3, #4855	; 0x12f7
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7f9 fe72 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800a8e0:	e7ab      	b.n	800a83a <mbedtls_ssl_parse_change_cipher_spec+0x32>
 800a8e2:	bf00      	nop
 800a8e4:	080138dc 	.word	0x080138dc
 800a8e8:	08014146 	.word	0x08014146
 800a8ec:	08012daf 	.word	0x08012daf
 800a8f0:	080138f8 	.word	0x080138f8
 800a8f4:	ffff8900 	.word	0xffff8900
 800a8f8:	ffff8200 	.word	0xffff8200
 800a8fc:	08013917 	.word	0x08013917
 800a900:	08013948 	.word	0x08013948

0800a904 <mbedtls_ssl_optimize_checksum>:
{
 800a904:	b507      	push	{r0, r1, r2, lr}
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
 800a906:	7a4a      	ldrb	r2, [r1, #9]
 800a908:	2a07      	cmp	r2, #7
 800a90a:	d005      	beq.n	800a918 <mbedtls_ssl_optimize_checksum+0x14>
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 800a90c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a90e:	4a07      	ldr	r2, [pc, #28]	; (800a92c <mbedtls_ssl_optimize_checksum+0x28>)
 800a910:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a912:	b003      	add	sp, #12
 800a914:	f85d fb04 	ldr.w	pc, [sp], #4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <mbedtls_ssl_optimize_checksum+0x2c>)
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	4a05      	ldr	r2, [pc, #20]	; (800a934 <mbedtls_ssl_optimize_checksum+0x30>)
 800a91e:	f241 3314 	movw	r3, #4884	; 0x1314
 800a922:	2101      	movs	r1, #1
 800a924:	f7f9 fe4e 	bl	80045c4 <mbedtls_debug_print_msg>
        return;
 800a928:	e7f3      	b.n	800a912 <mbedtls_ssl_optimize_checksum+0xe>
 800a92a:	bf00      	nop
 800a92c:	08008e65 	.word	0x08008e65
 800a930:	08013108 	.word	0x08013108
 800a934:	08014146 	.word	0x08014146

0800a938 <mbedtls_ssl_write_finished>:
{
 800a938:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 800a93a:	4b35      	ldr	r3, [pc, #212]	; (800aa10 <mbedtls_ssl_write_finished+0xd8>)
 800a93c:	9300      	str	r3, [sp, #0]
{
 800a93e:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 800a940:	f241 43a7 	movw	r3, #5287	; 0x14a7
 800a944:	4a33      	ldr	r2, [pc, #204]	; (800aa14 <mbedtls_ssl_write_finished+0xdc>)
 800a946:	2102      	movs	r1, #2
 800a948:	f7f9 fe3c 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800a94c:	68e3      	ldr	r3, [r4, #12]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a954:	dd04      	ble.n	800a960 <mbedtls_ssl_write_finished+0x28>
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 800a956:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a958:	68ca      	ldr	r2, [r1, #12]
 800a95a:	6909      	ldr	r1, [r1, #16]
 800a95c:	1a52      	subs	r2, r2, r1
 800a95e:	4413      	add	r3, r2
        ssl->out_msg = ssl->out_iv;
 800a960:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a96a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800a96e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a970:	f002 0201 	and.w	r2, r2, #1
 800a974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a976:	3104      	adds	r1, #4
 800a978:	4620      	mov	r0, r4
 800a97a:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 800a97c:	68e3      	ldr	r3, [r4, #12]
 800a97e:	2b00      	cmp	r3, #0
    ssl->out_msglen  = 4 + hash_len;
 800a980:	bf14      	ite	ne
 800a982:	2310      	movne	r3, #16
 800a984:	2328      	moveq	r3, #40	; 0x28
 800a986:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800a98a:	2316      	movs	r3, #22
 800a98c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 800a990:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a994:	2214      	movs	r2, #20
 800a996:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
 800a998:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a99a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800a99e:	b353      	cbz	r3, 800a9f6 <mbedtls_ssl_write_finished+0xbe>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9a6:	07db      	lsls	r3, r3, #31
 800a9a8:	d401      	bmi.n	800a9ae <mbedtls_ssl_write_finished+0x76>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 800a9aa:	230f      	movs	r3, #15
        ssl->state++;
 800a9ac:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 800a9ae:	4b1a      	ldr	r3, [pc, #104]	; (800aa18 <mbedtls_ssl_write_finished+0xe0>)
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4a18      	ldr	r2, [pc, #96]	; (800aa14 <mbedtls_ssl_write_finished+0xdc>)
 800a9b4:	f241 43dd 	movw	r3, #5341	; 0x14dd
 800a9b8:	2103      	movs	r1, #3
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7f9 fe02 	bl	80045c4 <mbedtls_debug_print_msg>
    memset( ssl->out_ctr, 0, 8 );
 800a9c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	605a      	str	r2, [r3, #4]
    ssl->transform_out = ssl->transform_negotiate;
 800a9ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9cc:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 800a9ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9d0:	6263      	str	r3, [r4, #36]	; 0x24
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7fe fe56 	bl	8009684 <mbedtls_ssl_write_record>
 800a9d8:	4605      	mov	r5, r0
 800a9da:	b178      	cbz	r0, 800a9fc <mbedtls_ssl_write_finished+0xc4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <mbedtls_ssl_write_finished+0xe4>)
 800a9de:	9001      	str	r0, [sp, #4]
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	4a0c      	ldr	r2, [pc, #48]	; (800aa14 <mbedtls_ssl_write_finished+0xdc>)
 800a9e4:	f241 5310 	movw	r3, #5392	; 0x1510
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f7f9 fe1a 	bl	8004624 <mbedtls_debug_print_ret>
}
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	b003      	add	sp, #12
 800a9f4:	bd30      	pop	{r4, r5, pc}
        ssl->state++;
 800a9f6:	6863      	ldr	r3, [r4, #4]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	e7d7      	b.n	800a9ac <mbedtls_ssl_write_finished+0x74>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 800a9fc:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <mbedtls_ssl_write_finished+0xe8>)
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	4a04      	ldr	r2, [pc, #16]	; (800aa14 <mbedtls_ssl_write_finished+0xdc>)
 800aa02:	f241 5314 	movw	r3, #5396	; 0x1514
 800aa06:	2102      	movs	r1, #2
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f7f9 fddb 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800aa0e:	e7ef      	b.n	800a9f0 <mbedtls_ssl_write_finished+0xb8>
 800aa10:	08013e9f 	.word	0x08013e9f
 800aa14:	08014146 	.word	0x08014146
 800aa18:	08013eb1 	.word	0x08013eb1
 800aa1c:	08012d6a 	.word	0x08012d6a
 800aa20:	08013ee3 	.word	0x08013ee3

0800aa24 <mbedtls_ssl_parse_finished>:
{
 800aa24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa26:	b087      	sub	sp, #28
 800aa28:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 800aa2a:	4b3f      	ldr	r3, [pc, #252]	; (800ab28 <mbedtls_ssl_parse_finished+0x104>)
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	4a3f      	ldr	r2, [pc, #252]	; (800ab2c <mbedtls_ssl_parse_finished+0x108>)
 800aa30:	f241 5325 	movw	r3, #5413	; 0x1525
 800aa34:	2102      	movs	r1, #2
 800aa36:	f7f9 fdc5 	bl	80045c4 <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800aa40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa42:	43d2      	mvns	r2, r2
 800aa44:	ae03      	add	r6, sp, #12
 800aa46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa48:	f002 0201 	and.w	r2, r2, #1
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7ff fbde 	bl	800a214 <mbedtls_ssl_read_record>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	b160      	cbz	r0, 800aa76 <mbedtls_ssl_parse_finished+0x52>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800aa5c:	4b34      	ldr	r3, [pc, #208]	; (800ab30 <mbedtls_ssl_parse_finished+0x10c>)
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	4a32      	ldr	r2, [pc, #200]	; (800ab2c <mbedtls_ssl_parse_finished+0x108>)
 800aa64:	f241 532b 	movw	r3, #5419	; 0x152b
 800aa68:	2101      	movs	r1, #1
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f7f9 fdda 	bl	8004624 <mbedtls_debug_print_ret>
}
 800aa70:	4628      	mov	r0, r5
 800aa72:	b007      	add	sp, #28
 800aa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800aa76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aa78:	2b16      	cmp	r3, #22
 800aa7a:	d00f      	beq.n	800aa9c <mbedtls_ssl_parse_finished+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800aa7c:	4b2d      	ldr	r3, [pc, #180]	; (800ab34 <mbedtls_ssl_parse_finished+0x110>)
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	4a2a      	ldr	r2, [pc, #168]	; (800ab2c <mbedtls_ssl_parse_finished+0x108>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800aa82:	4d2d      	ldr	r5, [pc, #180]	; (800ab38 <mbedtls_ssl_parse_finished+0x114>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800aa84:	f241 5331 	movw	r3, #5425	; 0x1531
 800aa88:	2101      	movs	r1, #1
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f7f9 fd9a 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800aa90:	220a      	movs	r2, #10
 800aa92:	2102      	movs	r1, #2
 800aa94:	4620      	mov	r0, r4
 800aa96:	f7ff f887 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800aa9a:	e7e9      	b.n	800aa70 <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 800aa9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800aa9e:	780b      	ldrb	r3, [r1, #0]
 800aaa0:	2b14      	cmp	r3, #20
 800aaa2:	d102      	bne.n	800aaaa <mbedtls_ssl_parse_finished+0x86>
 800aaa4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aaa6:	2b10      	cmp	r3, #16
 800aaa8:	d00f      	beq.n	800aaca <mbedtls_ssl_parse_finished+0xa6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800aaaa:	4b22      	ldr	r3, [pc, #136]	; (800ab34 <mbedtls_ssl_parse_finished+0x110>)
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	f241 5342 	movw	r3, #5442	; 0x1542
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800aab2:	4a1e      	ldr	r2, [pc, #120]	; (800ab2c <mbedtls_ssl_parse_finished+0x108>)
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 800aab4:	4d21      	ldr	r5, [pc, #132]	; (800ab3c <mbedtls_ssl_parse_finished+0x118>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800aab6:	2101      	movs	r1, #1
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7f9 fd83 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800aabe:	2232      	movs	r2, #50	; 0x32
 800aac0:	2102      	movs	r1, #2
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff f870 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 800aac8:	e7d2      	b.n	800aa70 <mbedtls_ssl_parse_finished+0x4c>
    volatile unsigned char diff = 0;
 800aaca:	f88d 000b 	strb.w	r0, [sp, #11]
    for( i = 0; i < n; i++ )
 800aace:	4603      	mov	r3, r0
 800aad0:	1d1a      	adds	r2, r3, #4
        diff |= A[i] ^ B[i];
 800aad2:	5c8a      	ldrb	r2, [r1, r2]
 800aad4:	5cf7      	ldrb	r7, [r6, r3]
 800aad6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800aada:	407a      	eors	r2, r7
    for( i = 0; i < n; i++ )
 800aadc:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 800aade:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 800aae0:	2b0c      	cmp	r3, #12
        diff |= A[i] ^ B[i];
 800aae2:	f88d 200b 	strb.w	r2, [sp, #11]
    for( i = 0; i < n; i++ )
 800aae6:	d1f3      	bne.n	800aad0 <mbedtls_ssl_parse_finished+0xac>
    return( diff );
 800aae8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 800aaec:	b123      	cbz	r3, 800aaf8 <mbedtls_ssl_parse_finished+0xd4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800aaee:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <mbedtls_ssl_parse_finished+0x110>)
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	f241 534b 	movw	r3, #5451	; 0x154b
 800aaf6:	e7dc      	b.n	800aab2 <mbedtls_ssl_parse_finished+0x8e>
    if( ssl->handshake->resume != 0 )
 800aaf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aafa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800aafe:	b183      	cbz	r3, 800ab22 <mbedtls_ssl_parse_finished+0xfe>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab06:	07db      	lsls	r3, r3, #31
 800ab08:	d401      	bmi.n	800ab0e <mbedtls_ssl_parse_finished+0xea>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 800ab0a:	230a      	movs	r3, #10
        ssl->state++;
 800ab0c:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 800ab0e:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <mbedtls_ssl_parse_finished+0x11c>)
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4a06      	ldr	r2, [pc, #24]	; (800ab2c <mbedtls_ssl_parse_finished+0x108>)
 800ab14:	f241 5369 	movw	r3, #5481	; 0x1569
 800ab18:	2102      	movs	r1, #2
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f7f9 fd52 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800ab20:	e7a6      	b.n	800aa70 <mbedtls_ssl_parse_finished+0x4c>
        ssl->state++;
 800ab22:	6863      	ldr	r3, [r4, #4]
 800ab24:	3301      	adds	r3, #1
 800ab26:	e7f1      	b.n	800ab0c <mbedtls_ssl_parse_finished+0xe8>
 800ab28:	08013964 	.word	0x08013964
 800ab2c:	08014146 	.word	0x08014146
 800ab30:	08012daf 	.word	0x08012daf
 800ab34:	08013976 	.word	0x08013976
 800ab38:	ffff8900 	.word	0xffff8900
 800ab3c:	ffff8180 	.word	0xffff8180
 800ab40:	0801398b 	.word	0x0801398b

0800ab44 <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 800ab44:	2264      	movs	r2, #100	; 0x64
 800ab46:	2100      	movs	r1, #0
 800ab48:	f003 bc8e 	b.w	800e468 <memset>

0800ab4c <mbedtls_ssl_init>:
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 800ab4c:	22b4      	movs	r2, #180	; 0xb4
 800ab4e:	2100      	movs	r1, #0
 800ab50:	f003 bc8a 	b.w	800e468 <memset>

0800ab54 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 800ab54:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800ab58:	f361 0383 	bfi	r3, r1, #2, #2
 800ab5c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800ab60:	4770      	bx	lr

0800ab62 <mbedtls_ssl_conf_rng>:
    conf->f_rng      = f_rng;
 800ab62:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 800ab64:	61c2      	str	r2, [r0, #28]
 800ab66:	4770      	bx	lr

0800ab68 <mbedtls_ssl_conf_dbg>:
    conf->f_dbg      = f_dbg;
 800ab68:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 800ab6a:	6142      	str	r2, [r0, #20]
 800ab6c:	4770      	bx	lr

0800ab6e <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 800ab6e:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 800ab70:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 800ab72:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 800ab74:	6102      	str	r2, [r0, #16]
    ssl->f_recv_timeout = f_recv_timeout;
 800ab76:	6183      	str	r3, [r0, #24]
 800ab78:	4770      	bx	lr

0800ab7a <mbedtls_ssl_conf_ca_chain>:
    conf->ca_chain   = ca_chain;
 800ab7a:	63c1      	str	r1, [r0, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 800ab7c:	6402      	str	r2, [r0, #64]	; 0x40
 800ab7e:	4770      	bx	lr

0800ab80 <mbedtls_ssl_set_hostname>:
{
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	4606      	mov	r6, r0
    if( hostname != NULL )
 800ab84:	460c      	mov	r4, r1
 800ab86:	b139      	cbz	r1, 800ab98 <mbedtls_ssl_set_hostname+0x18>
        hostname_len = strlen( hostname );
 800ab88:	4608      	mov	r0, r1
 800ab8a:	f7f5 fb29 	bl	80001e0 <strlen>
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 800ab8e:	28ff      	cmp	r0, #255	; 0xff
        hostname_len = strlen( hostname );
 800ab90:	4605      	mov	r5, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 800ab92:	d902      	bls.n	800ab9a <mbedtls_ssl_set_hostname+0x1a>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800ab94:	4813      	ldr	r0, [pc, #76]	; (800abe4 <mbedtls_ssl_set_hostname+0x64>)
 800ab96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t hostname_len = 0;
 800ab98:	460d      	mov	r5, r1
    if( ssl->hostname != NULL )
 800ab9a:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 800ab9e:	b157      	cbz	r7, 800abb6 <mbedtls_ssl_set_hostname+0x36>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 800aba0:	4638      	mov	r0, r7
 800aba2:	f7f5 fb1d 	bl	80001e0 <strlen>
 800aba6:	4601      	mov	r1, r0
 800aba8:	4638      	mov	r0, r7
 800abaa:	f7fe f88f 	bl	8008ccc <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 800abae:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 800abb2:	f003 fc1d 	bl	800e3f0 <free>
    if( hostname == NULL )
 800abb6:	b91c      	cbnz	r4, 800abc0 <mbedtls_ssl_set_hostname+0x40>
        ssl->hostname = NULL;
 800abb8:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
    return( 0 );
 800abbc:	4620      	mov	r0, r4
 800abbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 800abc0:	1c69      	adds	r1, r5, #1
 800abc2:	2001      	movs	r0, #1
 800abc4:	f003 fbda 	bl	800e37c <calloc>
 800abc8:	4607      	mov	r7, r0
 800abca:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 800abce:	b130      	cbz	r0, 800abde <mbedtls_ssl_set_hostname+0x5e>
        memcpy( ssl->hostname, hostname, hostname_len );
 800abd0:	462a      	mov	r2, r5
 800abd2:	4621      	mov	r1, r4
 800abd4:	f003 fc23 	bl	800e41e <memcpy>
        ssl->hostname[hostname_len] = '\0';
 800abd8:	2000      	movs	r0, #0
 800abda:	5578      	strb	r0, [r7, r5]
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800abde:	4802      	ldr	r0, [pc, #8]	; (800abe8 <mbedtls_ssl_set_hostname+0x68>)
}
 800abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe2:	bf00      	nop
 800abe4:	ffff8f00 	.word	0xffff8f00
 800abe8:	ffff8100 	.word	0xffff8100

0800abec <mbedtls_ssl_get_ciphersuite>:
    if( ssl == NULL || ssl->session == NULL )
 800abec:	b120      	cbz	r0, 800abf8 <mbedtls_ssl_get_ciphersuite+0xc>
 800abee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abf0:	b113      	cbz	r3, 800abf8 <mbedtls_ssl_get_ciphersuite+0xc>
    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 800abf2:	6818      	ldr	r0, [r3, #0]
 800abf4:	f7fd b87e 	b.w	8007cf4 <mbedtls_ssl_get_ciphersuite_name>
}
 800abf8:	2000      	movs	r0, #0
 800abfa:	4770      	bx	lr

0800abfc <mbedtls_ssl_handshake_step>:
{
 800abfc:	b508      	push	{r3, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800abfe:	b108      	cbz	r0, 800ac04 <mbedtls_ssl_handshake_step+0x8>
 800ac00:	6803      	ldr	r3, [r0, #0]
 800ac02:	b923      	cbnz	r3, 800ac0e <mbedtls_ssl_handshake_step+0x12>
    	printf("----------------------handshake step bad input --------------------------\r\n");
 800ac04:	4807      	ldr	r0, [pc, #28]	; (800ac24 <mbedtls_ssl_handshake_step+0x28>)
 800ac06:	f003 fd65 	bl	800e6d4 <puts>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800ac0a:	4807      	ldr	r0, [pc, #28]	; (800ac28 <mbedtls_ssl_handshake_step+0x2c>)
 800ac0c:	bd08      	pop	{r3, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800ac0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac12:	07db      	lsls	r3, r3, #31
 800ac14:	d403      	bmi.n	800ac1e <mbedtls_ssl_handshake_step+0x22>
}
 800ac16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ret = mbedtls_ssl_handshake_client_step( ssl );
 800ac1a:	f7fd b881 	b.w	8007d20 <mbedtls_ssl_handshake_client_step>
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 800ac1e:	4803      	ldr	r0, [pc, #12]	; (800ac2c <mbedtls_ssl_handshake_step+0x30>)
}
 800ac20:	bd08      	pop	{r3, pc}
 800ac22:	bf00      	nop
 800ac24:	08013703 	.word	0x08013703
 800ac28:	ffff8f00 	.word	0xffff8f00
 800ac2c:	ffff8f80 	.word	0xffff8f80

0800ac30 <mbedtls_ssl_handshake>:
{
 800ac30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800ac32:	4605      	mov	r5, r0
 800ac34:	b300      	cbz	r0, 800ac78 <mbedtls_ssl_handshake+0x48>
 800ac36:	6803      	ldr	r3, [r0, #0]
 800ac38:	b1f3      	cbz	r3, 800ac78 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 800ac3a:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <mbedtls_ssl_handshake+0x4c>)
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <mbedtls_ssl_handshake+0x50>)
 800ac40:	f641 2306 	movw	r3, #6662	; 0x1a06
 800ac44:	2102      	movs	r1, #2
 800ac46:	f7f9 fcbd 	bl	80045c4 <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800ac4a:	686b      	ldr	r3, [r5, #4]
 800ac4c:	2b10      	cmp	r3, #16
 800ac4e:	d101      	bne.n	800ac54 <mbedtls_ssl_handshake+0x24>
 800ac50:	2400      	movs	r4, #0
 800ac52:	e005      	b.n	800ac60 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 800ac54:	4628      	mov	r0, r5
 800ac56:	f7ff ffd1 	bl	800abfc <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d0f4      	beq.n	800ac4a <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <mbedtls_ssl_handshake+0x54>)
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	4a06      	ldr	r2, [pc, #24]	; (800ac80 <mbedtls_ssl_handshake+0x50>)
 800ac66:	f641 2310 	movw	r3, #6672	; 0x1a10
 800ac6a:	2102      	movs	r1, #2
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7f9 fca9 	bl	80045c4 <mbedtls_debug_print_msg>
}
 800ac72:	4620      	mov	r0, r4
 800ac74:	b003      	add	sp, #12
 800ac76:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800ac78:	4c03      	ldr	r4, [pc, #12]	; (800ac88 <mbedtls_ssl_handshake+0x58>)
 800ac7a:	e7fa      	b.n	800ac72 <mbedtls_ssl_handshake+0x42>
 800ac7c:	080136e9 	.word	0x080136e9
 800ac80:	08014146 	.word	0x08014146
 800ac84:	080136f6 	.word	0x080136f6
 800ac88:	ffff8f00 	.word	0xffff8f00

0800ac8c <mbedtls_ssl_read>:
{
 800ac8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac8e:	460e      	mov	r6, r1
 800ac90:	4617      	mov	r7, r2
    if( ssl == NULL || ssl->conf == NULL )
 800ac92:	4604      	mov	r4, r0
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f000 80d4 	beq.w	800ae42 <mbedtls_ssl_read+0x1b6>
 800ac9a:	6803      	ldr	r3, [r0, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80d0 	beq.w	800ae42 <mbedtls_ssl_read+0x1b6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 800aca2:	4b69      	ldr	r3, [pc, #420]	; (800ae48 <mbedtls_ssl_read+0x1bc>)
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4a69      	ldr	r2, [pc, #420]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
 800aca8:	f44f 53d6 	mov.w	r3, #6848	; 0x1ac0
 800acac:	2102      	movs	r1, #2
 800acae:	f7f9 fc89 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	2b10      	cmp	r3, #16
 800acb6:	d012      	beq.n	800acde <mbedtls_ssl_read+0x52>
        ret = mbedtls_ssl_handshake( ssl );
 800acb8:	4620      	mov	r0, r4
 800acba:	f7ff ffb9 	bl	800ac30 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 800acbe:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 800acc2:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 800acc4:	d00b      	beq.n	800acde <mbedtls_ssl_read+0x52>
 800acc6:	b150      	cbz	r0, 800acde <mbedtls_ssl_read+0x52>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 800acc8:	4b61      	ldr	r3, [pc, #388]	; (800ae50 <mbedtls_ssl_read+0x1c4>)
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	9001      	str	r0, [sp, #4]
 800acce:	f641 23ed 	movw	r3, #6893	; 0x1aed
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800acd2:	4a5e      	ldr	r2, [pc, #376]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
 800acd4:	2101      	movs	r1, #1
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7f9 fca4 	bl	8004624 <mbedtls_debug_print_ret>
            return( ret );
 800acdc:	e017      	b.n	800ad0e <mbedtls_ssl_read+0x82>
    if( ssl->in_offt == NULL )
 800acde:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f040 8090 	bne.w	800ae06 <mbedtls_ssl_read+0x17a>
        if( ssl->f_get_timer != NULL &&
 800ace6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ace8:	b143      	cbz	r3, 800acfc <mbedtls_ssl_read+0x70>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 800acea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800acec:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 800acee:	3001      	adds	r0, #1
 800acf0:	d104      	bne.n	800acfc <mbedtls_ssl_read+0x70>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	4620      	mov	r0, r4
 800acf6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800acf8:	f7fd fff0 	bl	8008cdc <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800acfc:	4620      	mov	r0, r4
 800acfe:	f7ff fa89 	bl	800a214 <mbedtls_ssl_read_record>
 800ad02:	4605      	mov	r5, r0
 800ad04:	b160      	cbz	r0, 800ad20 <mbedtls_ssl_read+0x94>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 800ad06:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 800ad0a:	d103      	bne.n	800ad14 <mbedtls_ssl_read+0x88>
                return( 0 );
 800ad0c:	2500      	movs	r5, #0
}
 800ad0e:	4628      	mov	r0, r5
 800ad10:	b003      	add	sp, #12
 800ad12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800ad14:	4b4f      	ldr	r3, [pc, #316]	; (800ae54 <mbedtls_ssl_read+0x1c8>)
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	9001      	str	r0, [sp, #4]
 800ad1a:	f641 3323 	movw	r3, #6947	; 0x1b23
 800ad1e:	e7d8      	b.n	800acd2 <mbedtls_ssl_read+0x46>
        if( ssl->in_msglen  == 0 &&
 800ad20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ad22:	b983      	cbnz	r3, 800ad46 <mbedtls_ssl_read+0xba>
 800ad24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ad26:	2b17      	cmp	r3, #23
 800ad28:	d10d      	bne.n	800ad46 <mbedtls_ssl_read+0xba>
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7ff fa72 	bl	800a214 <mbedtls_ssl_read_record>
 800ad30:	4605      	mov	r5, r0
 800ad32:	b140      	cbz	r0, 800ad46 <mbedtls_ssl_read+0xba>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 800ad34:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 800ad38:	d0e8      	beq.n	800ad0c <mbedtls_ssl_read+0x80>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800ad3a:	4b46      	ldr	r3, [pc, #280]	; (800ae54 <mbedtls_ssl_read+0x1c8>)
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	9001      	str	r0, [sp, #4]
 800ad40:	f641 3332 	movw	r3, #6962	; 0x1b32
 800ad44:	e7c5      	b.n	800acd2 <mbedtls_ssl_read+0x46>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800ad46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ad48:	2b16      	cmp	r3, #22
 800ad4a:	d13f      	bne.n	800adcc <mbedtls_ssl_read+0x140>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 800ad4c:	4b42      	ldr	r3, [pc, #264]	; (800ae58 <mbedtls_ssl_read+0x1cc>)
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	4a3e      	ldr	r2, [pc, #248]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
 800ad52:	f641 3339 	movw	r3, #6969	; 0x1b39
 800ad56:	2101      	movs	r1, #1
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f7f9 fc33 	bl	80045c4 <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad64:	07db      	lsls	r3, r3, #31
 800ad66:	d410      	bmi.n	800ad8a <mbedtls_ssl_read+0xfe>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 800ad68:	6e63      	ldr	r3, [r4, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	b913      	cbnz	r3, 800ad74 <mbedtls_ssl_read+0xe8>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 800ad6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d00a      	beq.n	800ad8a <mbedtls_ssl_read+0xfe>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 800ad74:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <mbedtls_ssl_read+0x1d0>)
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	f641 3346 	movw	r3, #6982	; 0x1b46
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800ad7c:	4a33      	ldr	r2, [pc, #204]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800ad7e:	4d38      	ldr	r5, [pc, #224]	; (800ae60 <mbedtls_ssl_read+0x1d4>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800ad80:	2101      	movs	r1, #1
 800ad82:	4620      	mov	r0, r4
 800ad84:	f7f9 fc1e 	bl	80045c4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800ad88:	e7c1      	b.n	800ad0e <mbedtls_ssl_read+0x82>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 800ad8a:	4b36      	ldr	r3, [pc, #216]	; (800ae64 <mbedtls_ssl_read+0x1d8>)
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	4a2f      	ldr	r2, [pc, #188]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
 800ad90:	f641 3382 	movw	r3, #7042	; 0x1b82
 800ad94:	2103      	movs	r1, #3
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7f9 fc14 	bl	80045c4 <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800ad9c:	68e3      	ldr	r3, [r4, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dd09      	ble.n	800adb6 <mbedtls_ssl_read+0x12a>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 800ada2:	2264      	movs	r2, #100	; 0x64
 800ada4:	2101      	movs	r1, #1
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7fe fefe 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800adac:	4d2e      	ldr	r5, [pc, #184]	; (800ae68 <mbedtls_ssl_read+0x1dc>)
 800adae:	2800      	cmp	r0, #0
 800adb0:	bf18      	it	ne
 800adb2:	4605      	movne	r5, r0
 800adb4:	e7ab      	b.n	800ad0e <mbedtls_ssl_read+0x82>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800adb6:	4b2d      	ldr	r3, [pc, #180]	; (800ae6c <mbedtls_ssl_read+0x1e0>)
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	4a24      	ldr	r2, [pc, #144]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800adbc:	4d2c      	ldr	r5, [pc, #176]	; (800ae70 <mbedtls_ssl_read+0x1e4>)
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800adbe:	f641 339e 	movw	r3, #7070	; 0x1b9e
 800adc2:	2101      	movs	r1, #1
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7f9 fbfd 	bl	80045c4 <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800adca:	e7a0      	b.n	800ad0e <mbedtls_ssl_read+0x82>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 800adcc:	2b15      	cmp	r3, #21
 800adce:	d10a      	bne.n	800ade6 <mbedtls_ssl_read+0x15a>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 800add0:	4b28      	ldr	r3, [pc, #160]	; (800ae74 <mbedtls_ssl_read+0x1e8>)
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	4a1d      	ldr	r2, [pc, #116]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800add6:	4d24      	ldr	r5, [pc, #144]	; (800ae68 <mbedtls_ssl_read+0x1dc>)
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 800add8:	f641 33b7 	movw	r3, #7095	; 0x1bb7
 800addc:	2102      	movs	r1, #2
 800adde:	4620      	mov	r0, r4
 800ade0:	f7f9 fbf0 	bl	80045c4 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800ade4:	e793      	b.n	800ad0e <mbedtls_ssl_read+0x82>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 800ade6:	2b17      	cmp	r3, #23
 800ade8:	d004      	beq.n	800adf4 <mbedtls_ssl_read+0x168>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800adea:	4b23      	ldr	r3, [pc, #140]	; (800ae78 <mbedtls_ssl_read+0x1ec>)
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	f641 33bd 	movw	r3, #7101	; 0x1bbd
 800adf2:	e7c3      	b.n	800ad7c <mbedtls_ssl_read+0xf0>
        ssl->in_offt = ssl->in_msg;
 800adf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adf6:	66a3      	str	r3, [r4, #104]	; 0x68
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 800adf8:	6863      	ldr	r3, [r4, #4]
 800adfa:	2b10      	cmp	r3, #16
 800adfc:	d103      	bne.n	800ae06 <mbedtls_ssl_read+0x17a>
            ssl_set_timer( ssl, 0 );
 800adfe:	2100      	movs	r1, #0
 800ae00:	4620      	mov	r0, r4
 800ae02:	f7fd ff6b 	bl	8008cdc <ssl_set_timer>
    n = ( len < ssl->in_msglen )
 800ae06:	6f25      	ldr	r5, [r4, #112]	; 0x70
    memcpy( buf, ssl->in_offt, n );
 800ae08:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    n = ( len < ssl->in_msglen )
 800ae0a:	42bd      	cmp	r5, r7
 800ae0c:	bf28      	it	cs
 800ae0e:	463d      	movcs	r5, r7
    memcpy( buf, ssl->in_offt, n );
 800ae10:	462a      	mov	r2, r5
 800ae12:	4630      	mov	r0, r6
 800ae14:	f003 fb03 	bl	800e41e <memcpy>
    ssl->in_msglen -= n;
 800ae18:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae1a:	1b5b      	subs	r3, r3, r5
 800ae1c:	6723      	str	r3, [r4, #112]	; 0x70
    if( ssl->in_msglen == 0 )
 800ae1e:	b963      	cbnz	r3, 800ae3a <mbedtls_ssl_read+0x1ae>
        ssl->in_offt = NULL;
 800ae20:	66a3      	str	r3, [r4, #104]	; 0x68
        ssl->keep_current_message = 0;
 800ae22:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <mbedtls_ssl_read+0x1f0>)
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4a08      	ldr	r2, [pc, #32]	; (800ae4c <mbedtls_ssl_read+0x1c0>)
 800ae2c:	f641 33ec 	movw	r3, #7148	; 0x1bec
 800ae30:	2102      	movs	r1, #2
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7f9 fbc6 	bl	80045c4 <mbedtls_debug_print_msg>
    return( (int) n );
 800ae38:	e769      	b.n	800ad0e <mbedtls_ssl_read+0x82>
        ssl->in_offt += n;
 800ae3a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ae3c:	442b      	add	r3, r5
 800ae3e:	66a3      	str	r3, [r4, #104]	; 0x68
 800ae40:	e7f1      	b.n	800ae26 <mbedtls_ssl_read+0x19a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800ae42:	4d0f      	ldr	r5, [pc, #60]	; (800ae80 <mbedtls_ssl_read+0x1f4>)
 800ae44:	e763      	b.n	800ad0e <mbedtls_ssl_read+0x82>
 800ae46:	bf00      	nop
 800ae48:	08013a1d 	.word	0x08013a1d
 800ae4c:	08014146 	.word	0x08014146
 800ae50:	08013a25 	.word	0x08013a25
 800ae54:	08012daf 	.word	0x08012daf
 800ae58:	08013a3b 	.word	0x08013a3b
 800ae5c:	08013a56 	.word	0x08013a56
 800ae60:	ffff8900 	.word	0xffff8900
 800ae64:	08013a7c 	.word	0x08013a7c
 800ae68:	ffff9700 	.word	0xffff9700
 800ae6c:	08013108 	.word	0x08013108
 800ae70:	ffff9400 	.word	0xffff9400
 800ae74:	08013aa2 	.word	0x08013aa2
 800ae78:	08013ac7 	.word	0x08013ac7
 800ae7c:	08013ae4 	.word	0x08013ae4
 800ae80:	ffff8f00 	.word	0xffff8f00

0800ae84 <mbedtls_ssl_write>:
{
 800ae84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 800ae86:	4b30      	ldr	r3, [pc, #192]	; (800af48 <mbedtls_ssl_write+0xc4>)
 800ae88:	9300      	str	r3, [sp, #0]
{
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	460f      	mov	r7, r1
 800ae8e:	4616      	mov	r6, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 800ae90:	f641 4352 	movw	r3, #7250	; 0x1c52
 800ae94:	4a2d      	ldr	r2, [pc, #180]	; (800af4c <mbedtls_ssl_write+0xc8>)
 800ae96:	2102      	movs	r1, #2
 800ae98:	f7f9 fb94 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 800ae9c:	2c00      	cmp	r4, #0
 800ae9e:	d050      	beq.n	800af42 <mbedtls_ssl_write+0xbe>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d04d      	beq.n	800af42 <mbedtls_ssl_write+0xbe>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800aea6:	6863      	ldr	r3, [r4, #4]
 800aea8:	2b10      	cmp	r3, #16
 800aeaa:	d011      	beq.n	800aed0 <mbedtls_ssl_write+0x4c>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 800aeac:	4620      	mov	r0, r4
 800aeae:	f7ff febf 	bl	800ac30 <mbedtls_ssl_handshake>
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b160      	cbz	r0, 800aed0 <mbedtls_ssl_write+0x4c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 800aeb6:	4b26      	ldr	r3, [pc, #152]	; (800af50 <mbedtls_ssl_write+0xcc>)
 800aeb8:	9001      	str	r0, [sp, #4]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4a23      	ldr	r2, [pc, #140]	; (800af4c <mbedtls_ssl_write+0xc8>)
 800aebe:	f641 4363 	movw	r3, #7267	; 0x1c63
 800aec2:	2101      	movs	r1, #1
 800aec4:	4620      	mov	r0, r4
 800aec6:	f7f9 fbad 	bl	8004624 <mbedtls_debug_print_ret>
}
 800aeca:	4628      	mov	r0, r5
 800aecc:	b003      	add	sp, #12
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->out_left != 0 )
 800aed0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800aed4:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 800aed8:	bf28      	it	cs
 800aeda:	f44f 5680 	movcs.w	r6, #4096	; 0x1000
 800aede:	b1c3      	cbz	r3, 800af12 <mbedtls_ssl_write+0x8e>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7fe fb3f 	bl	8009564 <mbedtls_ssl_flush_output>
 800aee6:	4605      	mov	r5, r0
 800aee8:	b348      	cbz	r0, 800af3e <mbedtls_ssl_write+0xba>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 800aeea:	4b1a      	ldr	r3, [pc, #104]	; (800af54 <mbedtls_ssl_write+0xd0>)
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	9001      	str	r0, [sp, #4]
 800aef0:	f641 4311 	movw	r3, #7185	; 0x1c11
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800aef4:	4a15      	ldr	r2, [pc, #84]	; (800af4c <mbedtls_ssl_write+0xc8>)
 800aef6:	2101      	movs	r1, #1
 800aef8:	4620      	mov	r0, r4
 800aefa:	f7f9 fb93 	bl	8004624 <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 800aefe:	4b16      	ldr	r3, [pc, #88]	; (800af58 <mbedtls_ssl_write+0xd4>)
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	4a12      	ldr	r2, [pc, #72]	; (800af4c <mbedtls_ssl_write+0xc8>)
 800af04:	f641 436e 	movw	r3, #7278	; 0x1c6e
 800af08:	2102      	movs	r1, #2
 800af0a:	4620      	mov	r0, r4
 800af0c:	f7f9 fb5a 	bl	80045c4 <mbedtls_debug_print_msg>
    return( ret );
 800af10:	e7db      	b.n	800aeca <mbedtls_ssl_write+0x46>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 800af12:	2317      	movs	r3, #23
 800af14:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 800af18:	4632      	mov	r2, r6
 800af1a:	4639      	mov	r1, r7
        ssl->out_msglen  = len;
 800af1c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
        memcpy( ssl->out_msg, buf, len );
 800af20:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800af24:	f003 fa7b 	bl	800e41e <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800af28:	4620      	mov	r0, r4
 800af2a:	f7fe fbab 	bl	8009684 <mbedtls_ssl_write_record>
 800af2e:	4605      	mov	r5, r0
 800af30:	b128      	cbz	r0, 800af3e <mbedtls_ssl_write+0xba>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800af32:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <mbedtls_ssl_write+0xd8>)
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	9001      	str	r0, [sp, #4]
 800af38:	f641 431d 	movw	r3, #7197	; 0x1c1d
 800af3c:	e7da      	b.n	800aef4 <mbedtls_ssl_write+0x70>
    return( (int) len );
 800af3e:	4635      	mov	r5, r6
 800af40:	e7dd      	b.n	800aefe <mbedtls_ssl_write+0x7a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800af42:	4d07      	ldr	r5, [pc, #28]	; (800af60 <mbedtls_ssl_write+0xdc>)
 800af44:	e7c1      	b.n	800aeca <mbedtls_ssl_write+0x46>
 800af46:	bf00      	nop
 800af48:	08013de2 	.word	0x08013de2
 800af4c:	08014146 	.word	0x08014146
 800af50:	08013a25 	.word	0x08013a25
 800af54:	08014034 	.word	0x08014034
 800af58:	08013deb 	.word	0x08013deb
 800af5c:	08012d6a 	.word	0x08012d6a
 800af60:	ffff8f00 	.word	0xffff8f00

0800af64 <mbedtls_ssl_close_notify>:
{
 800af64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800af66:	4604      	mov	r4, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	d033      	beq.n	800afd4 <mbedtls_ssl_close_notify+0x70>
 800af6c:	6803      	ldr	r3, [r0, #0]
 800af6e:	b38b      	cbz	r3, 800afd4 <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 800af70:	4b19      	ldr	r3, [pc, #100]	; (800afd8 <mbedtls_ssl_close_notify+0x74>)
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	4a19      	ldr	r2, [pc, #100]	; (800afdc <mbedtls_ssl_close_notify+0x78>)
 800af76:	f641 437d 	movw	r3, #7293	; 0x1c7d
 800af7a:	2102      	movs	r1, #2
 800af7c:	f7f9 fb22 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 800af80:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800af84:	b12a      	cbz	r2, 800af92 <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 800af86:	4620      	mov	r0, r4
}
 800af88:	b003      	add	sp, #12
 800af8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 800af8e:	f7fe bae9 	b.w	8009564 <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 800af92:	6863      	ldr	r3, [r4, #4]
 800af94:	2b10      	cmp	r3, #16
 800af96:	d112      	bne.n	800afbe <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 800af98:	2101      	movs	r1, #1
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7fe fe04 	bl	8009ba8 <mbedtls_ssl_send_alert_message>
 800afa0:	4605      	mov	r5, r0
 800afa2:	b160      	cbz	r0, 800afbe <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 800afa4:	4b0e      	ldr	r3, [pc, #56]	; (800afe0 <mbedtls_ssl_close_notify+0x7c>)
 800afa6:	9001      	str	r0, [sp, #4]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	4a0c      	ldr	r2, [pc, #48]	; (800afdc <mbedtls_ssl_close_notify+0x78>)
 800afac:	f641 4388 	movw	r3, #7304	; 0x1c88
 800afb0:	2101      	movs	r1, #1
 800afb2:	4620      	mov	r0, r4
 800afb4:	f7f9 fb36 	bl	8004624 <mbedtls_debug_print_ret>
}
 800afb8:	4628      	mov	r0, r5
 800afba:	b003      	add	sp, #12
 800afbc:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 800afbe:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <mbedtls_ssl_close_notify+0x80>)
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	4a06      	ldr	r2, [pc, #24]	; (800afdc <mbedtls_ssl_close_notify+0x78>)
 800afc4:	f641 438d 	movw	r3, #7309	; 0x1c8d
 800afc8:	2102      	movs	r1, #2
 800afca:	4620      	mov	r0, r4
 800afcc:	f7f9 fafa 	bl	80045c4 <mbedtls_debug_print_msg>
    return( 0 );
 800afd0:	2500      	movs	r5, #0
 800afd2:	e7f1      	b.n	800afb8 <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800afd4:	4d04      	ldr	r5, [pc, #16]	; (800afe8 <mbedtls_ssl_close_notify+0x84>)
 800afd6:	e7ef      	b.n	800afb8 <mbedtls_ssl_close_notify+0x54>
 800afd8:	080133b1 	.word	0x080133b1
 800afdc:	08014146 	.word	0x08014146
 800afe0:	080133c7 	.word	0x080133c7
 800afe4:	080133e6 	.word	0x080133e6
 800afe8:	ffff8f00 	.word	0xffff8f00

0800afec <mbedtls_ssl_transform_free>:
{
 800afec:	b510      	push	{r4, lr}
    if( transform == NULL )
 800afee:	4604      	mov	r4, r0
 800aff0:	b1a0      	cbz	r0, 800b01c <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 800aff2:	3050      	adds	r0, #80	; 0x50
 800aff4:	f7f9 f82a 	bl	800404c <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 800aff8:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800affc:	f7f9 f826 	bl	800404c <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 800b000:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800b004:	f7fa fb0b 	bl	800561e <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 800b008:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800b00c:	f7fa fb07 	bl	800561e <mbedtls_md_free>
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 800b010:	4620      	mov	r0, r4
 800b012:	21d0      	movs	r1, #208	; 0xd0
}
 800b014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 800b018:	f7fd be58 	b.w	8008ccc <mbedtls_zeroize>
 800b01c:	bd10      	pop	{r4, pc}

0800b01e <mbedtls_ssl_handshake_free>:
{
 800b01e:	b510      	push	{r4, lr}
    if( handshake == NULL )
 800b020:	4604      	mov	r4, r0
 800b022:	b148      	cbz	r0, 800b038 <mbedtls_ssl_handshake_free+0x1a>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 800b024:	3008      	adds	r0, #8
 800b026:	f7fc f9b8 	bl	800739a <mbedtls_sha256_free>
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 800b02a:	4620      	mov	r0, r4
 800b02c:	f44f 7184 	mov.w	r1, #264	; 0x108
}
 800b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 800b034:	f7fd be4a 	b.w	8008ccc <mbedtls_zeroize>
 800b038:	bd10      	pop	{r4, pc}

0800b03a <mbedtls_ssl_session_free>:
{
 800b03a:	b510      	push	{r4, lr}
    if( session == NULL )
 800b03c:	4604      	mov	r4, r0
 800b03e:	b160      	cbz	r0, 800b05a <mbedtls_ssl_session_free+0x20>
    if( session->peer_cert != NULL )
 800b040:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800b042:	b120      	cbz	r0, 800b04e <mbedtls_ssl_session_free+0x14>
        mbedtls_x509_crt_free( session->peer_cert );
 800b044:	f001 fbef 	bl	800c826 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 800b048:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800b04a:	f003 f9d1 	bl	800e3f0 <free>
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 800b04e:	4620      	mov	r0, r4
 800b050:	2164      	movs	r1, #100	; 0x64
}
 800b052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 800b056:	f7fd be39 	b.w	8008ccc <mbedtls_zeroize>
 800b05a:	bd10      	pop	{r4, pc}

0800b05c <mbedtls_ssl_handshake_wrapup>:
{
 800b05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int resume = ssl->handshake->resume;
 800b05e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800b060:	4a2d      	ldr	r2, [pc, #180]	; (800b118 <mbedtls_ssl_handshake_wrapup+0xbc>)
    int resume = ssl->handshake->resume;
 800b062:	f8d3 50f8 	ldr.w	r5, [r3, #248]	; 0xf8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800b066:	4b2d      	ldr	r3, [pc, #180]	; (800b11c <mbedtls_ssl_handshake_wrapup+0xc0>)
 800b068:	9300      	str	r3, [sp, #0]
{
 800b06a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800b06c:	f241 4369 	movw	r3, #5225	; 0x1469
 800b070:	2103      	movs	r1, #3
 800b072:	f7f9 faa7 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->session )
 800b076:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b078:	b120      	cbz	r0, 800b084 <mbedtls_ssl_handshake_wrapup+0x28>
        mbedtls_ssl_session_free( ssl->session );
 800b07a:	f7ff ffde 	bl	800b03a <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 800b07e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b080:	f003 f9b6 	bl	800e3f0 <free>
    if( ssl->conf->f_set_cache != NULL &&
 800b084:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 800b086:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b088:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
 800b08e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b090:	b173      	cbz	r3, 800b0b0 <mbedtls_ssl_handshake_wrapup+0x54>
 800b092:	6888      	ldr	r0, [r1, #8]
 800b094:	b160      	cbz	r0, 800b0b0 <mbedtls_ssl_handshake_wrapup+0x54>
        ssl->session->id_len != 0 &&
 800b096:	b95d      	cbnz	r5, 800b0b0 <mbedtls_ssl_handshake_wrapup+0x54>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 800b098:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800b09a:	4798      	blx	r3
 800b09c:	b140      	cbz	r0, 800b0b0 <mbedtls_ssl_handshake_wrapup+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 800b09e:	4b20      	ldr	r3, [pc, #128]	; (800b120 <mbedtls_ssl_handshake_wrapup+0xc4>)
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800b0a4:	f241 438c 	movw	r3, #5260	; 0x148c
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f7f9 fa8a 	bl	80045c4 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 800b0b0:	4b1c      	ldr	r3, [pc, #112]	; (800b124 <mbedtls_ssl_handshake_wrapup+0xc8>)
 800b0b2:	4a19      	ldr	r2, [pc, #100]	; (800b118 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	2103      	movs	r1, #3
 800b0b8:	f241 434e 	movw	r3, #5198	; 0x144e
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f7f9 fa81 	bl	80045c4 <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl->handshake );
 800b0c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b0c4:	f7ff ffab 	bl	800b01e <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 800b0c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b0ca:	f003 f991 	bl	800e3f0 <free>
    if( ssl->transform )
 800b0ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ssl->handshake = NULL;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	6323      	str	r3, [r4, #48]	; 0x30
    if( ssl->transform )
 800b0d4:	b120      	cbz	r0, 800b0e0 <mbedtls_ssl_handshake_wrapup+0x84>
        mbedtls_ssl_transform_free( ssl->transform );
 800b0d6:	f7ff ff89 	bl	800afec <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 800b0da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b0dc:	f003 f988 	bl	800e3f0 <free>
    ssl->transform = ssl->transform_negotiate;
 800b0e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	6423      	str	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 800b0e8:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <mbedtls_ssl_handshake_wrapup+0xcc>)
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f241 4362 	movw	r3, #5218	; 0x1462
 800b0f2:	4a09      	ldr	r2, [pc, #36]	; (800b118 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800b0f4:	2103      	movs	r1, #3
 800b0f6:	f7f9 fa65 	bl	80045c4 <mbedtls_debug_print_msg>
    ssl->state++;
 800b0fa:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 800b0fc:	4a06      	ldr	r2, [pc, #24]	; (800b118 <mbedtls_ssl_handshake_wrapup+0xbc>)
    ssl->state++;
 800b0fe:	3301      	adds	r3, #1
 800b100:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 800b102:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <mbedtls_ssl_handshake_wrapup+0xd0>)
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	2103      	movs	r1, #3
 800b108:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
 800b10c:	4620      	mov	r0, r4
 800b10e:	f7f9 fa59 	bl	80045c4 <mbedtls_debug_print_msg>
}
 800b112:	b003      	add	sp, #12
 800b114:	bd30      	pop	{r4, r5, pc}
 800b116:	bf00      	nop
 800b118:	08014146 	.word	0x08014146
 800b11c:	0801374e 	.word	0x0801374e
 800b120:	08013762 	.word	0x08013762
 800b124:	0801377e 	.word	0x0801377e
 800b128:	0801379e 	.word	0x0801379e
 800b12c:	080137be 	.word	0x080137be

0800b130 <ssl_handshake_init>:
{
 800b130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b132:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 800b134:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800b136:	b108      	cbz	r0, 800b13c <ssl_handshake_init+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 800b138:	f7ff ff58 	bl	800afec <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 800b13c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b13e:	b108      	cbz	r0, 800b144 <ssl_handshake_init+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 800b140:	f7ff ff7b 	bl	800b03a <mbedtls_ssl_session_free>
    if( ssl->handshake )
 800b144:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b146:	b108      	cbz	r0, 800b14c <ssl_handshake_init+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 800b148:	f7ff ff69 	bl	800b01e <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 800b14c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b14e:	b923      	cbnz	r3, 800b15a <ssl_handshake_init+0x2a>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 800b150:	21d0      	movs	r1, #208	; 0xd0
 800b152:	2001      	movs	r0, #1
 800b154:	f003 f912 	bl	800e37c <calloc>
 800b158:	6420      	str	r0, [r4, #64]	; 0x40
    if( ssl->session_negotiate == NULL )
 800b15a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b15c:	b923      	cbnz	r3, 800b168 <ssl_handshake_init+0x38>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 800b15e:	2164      	movs	r1, #100	; 0x64
 800b160:	2001      	movs	r0, #1
 800b162:	f003 f90b 	bl	800e37c <calloc>
 800b166:	62e0      	str	r0, [r4, #44]	; 0x2c
    if( ssl->handshake == NULL )
 800b168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b16a:	b92b      	cbnz	r3, 800b178 <ssl_handshake_init+0x48>
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 800b16c:	f44f 7184 	mov.w	r1, #264	; 0x108
 800b170:	2001      	movs	r0, #1
 800b172:	f003 f903 	bl	800e37c <calloc>
 800b176:	6320      	str	r0, [r4, #48]	; 0x30
    if( ssl->handshake == NULL ||
 800b178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b17a:	b11b      	cbz	r3, 800b184 <ssl_handshake_init+0x54>
 800b17c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b17e:	b10b      	cbz	r3, 800b184 <ssl_handshake_init+0x54>
        ssl->session_negotiate == NULL )
 800b180:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 800b182:	b9c0      	cbnz	r0, 800b1b6 <ssl_handshake_init+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 800b184:	4b23      	ldr	r3, [pc, #140]	; (800b214 <ssl_handshake_init+0xe4>)
 800b186:	4a24      	ldr	r2, [pc, #144]	; (800b218 <ssl_handshake_init+0xe8>)
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2101      	movs	r1, #1
 800b18c:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800b190:	4620      	mov	r0, r4
 800b192:	f7f9 fa17 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 800b196:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b198:	f003 f92a 	bl	800e3f0 <free>
        mbedtls_free( ssl->transform_negotiate );
 800b19c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b19e:	f003 f927 	bl	800e3f0 <free>
        mbedtls_free( ssl->session_negotiate );
 800b1a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b1a4:	f003 f924 	bl	800e3f0 <free>
        ssl->handshake = NULL;
 800b1a8:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800b1aa:	481c      	ldr	r0, [pc, #112]	; (800b21c <ssl_handshake_init+0xec>)
        ssl->handshake = NULL;
 800b1ac:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 800b1ae:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 800b1b0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800b1b2:	b003      	add	sp, #12
 800b1b4:	bd30      	pop	{r4, r5, pc}
    mbedtls_ssl_session_init( ssl->session_negotiate );
 800b1b6:	f7ff fcc5 	bl	800ab44 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 800b1ba:	6c25      	ldr	r5, [r4, #64]	; 0x40
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 800b1bc:	22d0      	movs	r2, #208	; 0xd0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f003 f951 	bl	800e468 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 800b1c6:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800b1ca:	f7f8 ff3b 	bl	8004044 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 800b1ce:	f105 0090 	add.w	r0, r5, #144	; 0x90
 800b1d2:	f7f8 ff37 	bl	8004044 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 800b1d6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800b1da:	f7fa fa1b 	bl	8005614 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 800b1de:	f105 0044 	add.w	r0, r5, #68	; 0x44
 800b1e2:	f7fa fa17 	bl	8005614 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 800b1e6:	6b24      	ldr	r4, [r4, #48]	; 0x30
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 800b1e8:	f44f 7284 	mov.w	r2, #264	; 0x108
 800b1ec:	2100      	movs	r1, #0
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 800b1ee:	f104 0508 	add.w	r5, r4, #8
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f003 f938 	bl	800e468 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f7fc f8ca 	bl	8007392 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 800b1fe:	2100      	movs	r1, #0
 800b200:	4628      	mov	r0, r5
 800b202:	f7fc f8d9 	bl	80073b8 <mbedtls_sha256_starts_ret>
    set->rsa   = md_alg;
 800b206:	2000      	movs	r0, #0
    handshake->update_checksum = ssl_update_checksum_start;
 800b208:	4b05      	ldr	r3, [pc, #20]	; (800b220 <ssl_handshake_init+0xf0>)
 800b20a:	6763      	str	r3, [r4, #116]	; 0x74
    set->rsa   = md_alg;
 800b20c:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 800b20e:	7060      	strb	r0, [r4, #1]
 800b210:	e7cf      	b.n	800b1b2 <ssl_handshake_init+0x82>
 800b212:	bf00      	nop
 800b214:	08014123 	.word	0x08014123
 800b218:	08014146 	.word	0x08014146
 800b21c:	ffff8100 	.word	0xffff8100
 800b220:	08008e6d 	.word	0x08008e6d

0800b224 <mbedtls_ssl_setup>:
{
 800b224:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ssl->conf = conf;
 800b226:	6001      	str	r1, [r0, #0]
{
 800b228:	4604      	mov	r4, r0
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 800b22a:	f241 113d 	movw	r1, #4413	; 0x113d
 800b22e:	2001      	movs	r0, #1
 800b230:	f003 f8a4 	bl	800e37c <calloc>
 800b234:	4605      	mov	r5, r0
 800b236:	6520      	str	r0, [r4, #80]	; 0x50
 800b238:	b330      	cbz	r0, 800b288 <mbedtls_ssl_setup+0x64>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 800b23a:	f241 113d 	movw	r1, #4413	; 0x113d
 800b23e:	2001      	movs	r0, #1
 800b240:	f003 f89c 	bl	800e37c <calloc>
 800b244:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 800b248:	b1f0      	cbz	r0, 800b288 <mbedtls_ssl_setup+0x64>
        ssl->out_hdr = ssl->out_buf +  8;
 800b24a:	f100 0308 	add.w	r3, r0, #8
 800b24e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 800b252:	f100 030b 	add.w	r3, r0, #11
        ssl->out_ctr = ssl->out_buf;
 800b256:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_len = ssl->out_buf + 11;
 800b25a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
 800b25e:	300d      	adds	r0, #13
        ssl->in_hdr = ssl->in_buf +  8;
 800b260:	f105 0308 	add.w	r3, r5, #8
        ssl->out_iv  = ssl->out_buf + 13;
 800b264:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 800b268:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        ssl->in_ctr = ssl->in_buf;
 800b26c:	6565      	str	r5, [r4, #84]	; 0x54
        ssl->in_hdr = ssl->in_buf +  8;
 800b26e:	65a3      	str	r3, [r4, #88]	; 0x58
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 800b270:	4620      	mov	r0, r4
        ssl->in_len = ssl->in_buf + 11;
 800b272:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 800b276:	350d      	adds	r5, #13
        ssl->in_len = ssl->in_buf + 11;
 800b278:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 800b27a:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 800b27c:	6665      	str	r5, [r4, #100]	; 0x64
}
 800b27e:	b003      	add	sp, #12
 800b280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 800b284:	f7ff bf54 	b.w	800b130 <ssl_handshake_init>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 800b288:	f241 133d 	movw	r3, #4413	; 0x113d
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <mbedtls_ssl_setup+0x8c>)
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4a08      	ldr	r2, [pc, #32]	; (800b2b4 <mbedtls_ssl_setup+0x90>)
 800b294:	f241 6329 	movw	r3, #5673	; 0x1629
 800b298:	2101      	movs	r1, #1
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7f9 f992 	bl	80045c4 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 800b2a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b2a2:	f003 f8a5 	bl	800e3f0 <free>
}
 800b2a6:	4804      	ldr	r0, [pc, #16]	; (800b2b8 <mbedtls_ssl_setup+0x94>)
        ssl->in_buf = NULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	6523      	str	r3, [r4, #80]	; 0x50
}
 800b2ac:	b003      	add	sp, #12
 800b2ae:	bd30      	pop	{r4, r5, pc}
 800b2b0:	08013819 	.word	0x08013819
 800b2b4:	08014146 	.word	0x08014146
 800b2b8:	ffff8100 	.word	0xffff8100

0800b2bc <mbedtls_ssl_free>:
{
 800b2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 800b2be:	4604      	mov	r4, r0
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d05a      	beq.n	800b37a <mbedtls_ssl_free+0xbe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 800b2c4:	4b2e      	ldr	r3, [pc, #184]	; (800b380 <mbedtls_ssl_free+0xc4>)
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4a2e      	ldr	r2, [pc, #184]	; (800b384 <mbedtls_ssl_free+0xc8>)
 800b2ca:	f641 531b 	movw	r3, #7451	; 0x1d1b
 800b2ce:	2102      	movs	r1, #2
 800b2d0:	f7f9 f978 	bl	80045c4 <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 800b2d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b2d8:	b138      	cbz	r0, 800b2ea <mbedtls_ssl_free+0x2e>
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 800b2da:	f241 113d 	movw	r1, #4413	; 0x113d
 800b2de:	f7fd fcf5 	bl	8008ccc <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 800b2e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b2e6:	f003 f883 	bl	800e3f0 <free>
    if( ssl->in_buf != NULL )
 800b2ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b2ec:	b130      	cbz	r0, 800b2fc <mbedtls_ssl_free+0x40>
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 800b2ee:	f241 113d 	movw	r1, #4413	; 0x113d
 800b2f2:	f7fd fceb 	bl	8008ccc <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 800b2f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b2f8:	f003 f87a 	bl	800e3f0 <free>
    if( ssl->transform )
 800b2fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b2fe:	b120      	cbz	r0, 800b30a <mbedtls_ssl_free+0x4e>
        mbedtls_ssl_transform_free( ssl->transform );
 800b300:	f7ff fe74 	bl	800afec <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 800b304:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b306:	f003 f873 	bl	800e3f0 <free>
    if( ssl->handshake )
 800b30a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b30c:	b180      	cbz	r0, 800b330 <mbedtls_ssl_free+0x74>
        mbedtls_ssl_handshake_free( ssl->handshake );
 800b30e:	f7ff fe86 	bl	800b01e <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 800b312:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b314:	f7ff fe6a 	bl	800afec <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 800b318:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b31a:	f7ff fe8e 	bl	800b03a <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 800b31e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b320:	f003 f866 	bl	800e3f0 <free>
        mbedtls_free( ssl->transform_negotiate );
 800b324:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b326:	f003 f863 	bl	800e3f0 <free>
        mbedtls_free( ssl->session_negotiate );
 800b32a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b32c:	f003 f860 	bl	800e3f0 <free>
    if( ssl->session )
 800b330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b332:	b120      	cbz	r0, 800b33e <mbedtls_ssl_free+0x82>
        mbedtls_ssl_session_free( ssl->session );
 800b334:	f7ff fe81 	bl	800b03a <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 800b338:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b33a:	f003 f859 	bl	800e3f0 <free>
    if( ssl->hostname != NULL )
 800b33e:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800b342:	b155      	cbz	r5, 800b35a <mbedtls_ssl_free+0x9e>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 800b344:	4628      	mov	r0, r5
 800b346:	f7f4 ff4b 	bl	80001e0 <strlen>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4628      	mov	r0, r5
 800b34e:	f7fd fcbd 	bl	8008ccc <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 800b352:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800b356:	f003 f84b 	bl	800e3f0 <free>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <mbedtls_ssl_free+0xcc>)
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4620      	mov	r0, r4
 800b360:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800b364:	4a07      	ldr	r2, [pc, #28]	; (800b384 <mbedtls_ssl_free+0xc8>)
 800b366:	2102      	movs	r1, #2
 800b368:	f7f9 f92c 	bl	80045c4 <mbedtls_debug_print_msg>
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 800b36c:	21b4      	movs	r1, #180	; 0xb4
 800b36e:	4620      	mov	r0, r4
}
 800b370:	b003      	add	sp, #12
 800b372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 800b376:	f7fd bca9 	b.w	8008ccc <mbedtls_zeroize>
}
 800b37a:	b003      	add	sp, #12
 800b37c:	bd30      	pop	{r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	08013666 	.word	0x08013666
 800b384:	08014146 	.word	0x08014146
 800b388:	0801366e 	.word	0x0801366e

0800b38c <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 800b38c:	2254      	movs	r2, #84	; 0x54
 800b38e:	2100      	movs	r1, #0
 800b390:	f003 b86a 	b.w	800e468 <memset>

0800b394 <mbedtls_ssl_config_defaults>:
{
 800b394:	b510      	push	{r4, lr}
 800b396:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 800b398:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800b39c:	f361 0000 	bfi	r0, r1, #0, #1
    conf->transport = transport;
 800b3a0:	f362 0041 	bfi	r0, r2, #1, #1
 800b3a4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 800b3a8:	b929      	cbnz	r1, 800b3b6 <mbedtls_ssl_config_defaults+0x22>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 800b3aa:	b2c2      	uxtb	r2, r0
 800b3ac:	2102      	movs	r1, #2
 800b3ae:	f361 0283 	bfi	r2, r1, #2, #2
 800b3b2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    switch( preset )
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	f04f 0303 	mov.w	r3, #3
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 800b3bc:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 800b3c0:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 800b3c4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 800b3c8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    switch( preset )
 800b3cc:	d10a      	bne.n	800b3e4 <mbedtls_ssl_config_defaults+0x50>
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 800b3ce:	4b0a      	ldr	r3, [pc, #40]	; (800b3f8 <mbedtls_ssl_config_defaults+0x64>)
 800b3d0:	60e3      	str	r3, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 800b3d2:	60a3      	str	r3, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 800b3d4:	6063      	str	r3, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 800b3d6:	6023      	str	r3, [r4, #0]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 800b3d8:	4b08      	ldr	r3, [pc, #32]	; (800b3fc <mbedtls_ssl_config_defaults+0x68>)
 800b3da:	6363      	str	r3, [r4, #52]	; 0x34
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 800b3dc:	4b08      	ldr	r3, [pc, #32]	; (800b400 <mbedtls_ssl_config_defaults+0x6c>)
            conf->sig_hashes = ssl_preset_default_hashes;
 800b3de:	6463      	str	r3, [r4, #68]	; 0x44
}
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	bd10      	pop	{r4, pc}
                                   mbedtls_ssl_list_ciphersuites();
 800b3e4:	f7fc fc76 	bl	8007cd4 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <mbedtls_ssl_config_defaults+0x70>)
 800b3ea:	6363      	str	r3, [r4, #52]	; 0x34
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 800b3ec:	60e0      	str	r0, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 800b3ee:	60a0      	str	r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 800b3f0:	6060      	str	r0, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 800b3f2:	6020      	str	r0, [r4, #0]
            conf->sig_hashes = ssl_preset_default_hashes;
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <mbedtls_ssl_config_defaults+0x74>)
 800b3f6:	e7f2      	b.n	800b3de <mbedtls_ssl_config_defaults+0x4a>
 800b3f8:	20000024 	.word	0x20000024
 800b3fc:	080144a4 	.word	0x080144a4
 800b400:	20000030 	.word	0x20000030
 800b404:	08014494 	.word	0x08014494
 800b408:	20000018 	.word	0x20000018

0800b40c <mbedtls_ssl_config_free>:
{
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4604      	mov	r4, r0
    ssl_key_cert_free( conf->key_cert );
 800b410:	6b80      	ldr	r0, [r0, #56]	; 0x38
    while( cur != NULL )
 800b412:	b928      	cbnz	r0, 800b420 <mbedtls_ssl_config_free+0x14>
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 800b414:	4620      	mov	r0, r4
 800b416:	2154      	movs	r1, #84	; 0x54
}
 800b418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 800b41c:	f7fd bc56 	b.w	8008ccc <mbedtls_zeroize>
        next = cur->next;
 800b420:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 800b422:	f002 ffe5 	bl	800e3f0 <free>
        cur = next;
 800b426:	4628      	mov	r0, r5
 800b428:	e7f3      	b.n	800b412 <mbedtls_ssl_config_free+0x6>

0800b42a <mbedtls_ssl_sig_from_pk>:
{
 800b42a:	b508      	push	{r3, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 800b42c:	2101      	movs	r1, #1
 800b42e:	f7fa fbcb 	bl	8005bc8 <mbedtls_pk_can_do>
}
 800b432:	3000      	adds	r0, #0
 800b434:	bf18      	it	ne
 800b436:	2001      	movne	r0, #1
 800b438:	bd08      	pop	{r3, pc}

0800b43a <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
 800b43a:	2805      	cmp	r0, #5
 800b43c:	d004      	beq.n	800b448 <mbedtls_ssl_hash_from_md_alg+0xe>
 800b43e:	2806      	cmp	r0, #6
            return( MBEDTLS_SSL_HASH_NONE );
 800b440:	bf0c      	ite	eq
 800b442:	2004      	moveq	r0, #4
 800b444:	2000      	movne	r0, #0
 800b446:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_SHA224 );
 800b448:	2003      	movs	r0, #3
}
 800b44a:	4770      	bx	lr

0800b44c <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 800b44c:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 800b44e:	7059      	strb	r1, [r3, #1]
 800b450:	4770      	bx	lr

0800b452 <mbedtls_ssl_read_version>:
        *major = ver[0];
 800b452:	781a      	ldrb	r2, [r3, #0]
 800b454:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 800b456:	785b      	ldrb	r3, [r3, #1]
 800b458:	600b      	str	r3, [r1, #0]
 800b45a:	4770      	bx	lr

0800b45c <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 800b45c:	2300      	movs	r3, #0
{
 800b45e:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 800b460:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 800b462:	260a      	movs	r6, #10
    for( ; n > 0; --n )
 800b464:	b909      	cbnz	r1, 800b46a <x509_parse_int+0xe>
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 800b466:	4608      	mov	r0, r1
 800b468:	bd70      	pop	{r4, r5, r6, pc}
        if( ( **p < '0') || ( **p > '9' ) )
 800b46a:	6805      	ldr	r5, [r0, #0]
 800b46c:	782b      	ldrb	r3, [r5, #0]
 800b46e:	3b30      	subs	r3, #48	; 0x30
 800b470:	2b09      	cmp	r3, #9
 800b472:	d80b      	bhi.n	800b48c <x509_parse_int+0x30>
        *res *= 10;
 800b474:	6813      	ldr	r3, [r2, #0]
 800b476:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 800b47a:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 800b47c:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 800b47e:	6003      	str	r3, [r0, #0]
 800b480:	782b      	ldrb	r3, [r5, #0]
 800b482:	3b30      	subs	r3, #48	; 0x30
 800b484:	4423      	add	r3, r4
 800b486:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 800b488:	3901      	subs	r1, #1
 800b48a:	e7eb      	b.n	800b464 <x509_parse_int+0x8>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 800b48c:	4800      	ldr	r0, [pc, #0]	; (800b490 <x509_parse_int+0x34>)
}
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	ffffdc00 	.word	0xffffdc00

0800b494 <mbedtls_x509_get_serial>:
{
 800b494:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 800b496:	6803      	ldr	r3, [r0, #0]
{
 800b498:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 800b49a:	1aca      	subs	r2, r1, r3
 800b49c:	2a00      	cmp	r2, #0
{
 800b49e:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 800b4a0:	dd17      	ble.n	800b4d2 <mbedtls_x509_get_serial+0x3e>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4a8:	2a02      	cmp	r2, #2
 800b4aa:	d114      	bne.n	800b4d6 <mbedtls_x509_get_serial+0x42>
    serial->tag = *(*p)++;
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	6002      	str	r2, [r0, #0]
 800b4b0:	462a      	mov	r2, r5
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 800b4b8:	f7f6 ff5b 	bl	8002372 <mbedtls_asn1_get_len>
 800b4bc:	b110      	cbz	r0, 800b4c4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 800b4be:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	686a      	ldr	r2, [r5, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	6023      	str	r3, [r4, #0]
    return( 0 );
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 800b4d2:	4802      	ldr	r0, [pc, #8]	; (800b4dc <mbedtls_x509_get_serial+0x48>)
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 800b4d6:	4802      	ldr	r0, [pc, #8]	; (800b4e0 <mbedtls_x509_get_serial+0x4c>)
}
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
 800b4da:	bf00      	nop
 800b4dc:	ffffdd20 	.word	0xffffdd20
 800b4e0:	ffffdd1e 	.word	0xffffdd1e

0800b4e4 <mbedtls_x509_get_alg>:
{
 800b4e4:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 800b4e6:	f7f7 f857 	bl	8002598 <mbedtls_asn1_get_alg>
 800b4ea:	b108      	cbz	r0, 800b4f0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 800b4ec:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 800b4f0:	bd08      	pop	{r3, pc}
	...

0800b4f4 <mbedtls_x509_get_name>:
{
 800b4f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 800b4f8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800b5e8 <mbedtls_x509_get_name+0xf4>
{
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	4614      	mov	r4, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 800b502:	2331      	movs	r3, #49	; 0x31
 800b504:	466a      	mov	r2, sp
 800b506:	4639      	mov	r1, r7
 800b508:	4628      	mov	r0, r5
 800b50a:	f7f6 ff80 	bl	800240e <mbedtls_asn1_get_tag>
 800b50e:	b120      	cbz	r0, 800b51a <mbedtls_x509_get_name+0x26>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 800b510:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 800b514:	b002      	add	sp, #8
 800b516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        end_set  = *p + set_len;
 800b51a:	682e      	ldr	r6, [r5, #0]
 800b51c:	9b00      	ldr	r3, [sp, #0]
 800b51e:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800b520:	2330      	movs	r3, #48	; 0x30
 800b522:	aa01      	add	r2, sp, #4
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	f7f6 ff71 	bl	800240e <mbedtls_asn1_get_tag>
 800b52c:	b188      	cbz	r0, 800b552 <mbedtls_x509_get_name+0x5e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 800b52e:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 800b532:	2800      	cmp	r0, #0
 800b534:	d1ee      	bne.n	800b514 <mbedtls_x509_get_name+0x20>
            if( *p == end_set )
 800b536:	682b      	ldr	r3, [r5, #0]
 800b538:	429e      	cmp	r6, r3
 800b53a:	d03d      	beq.n	800b5b8 <mbedtls_x509_get_name+0xc4>
            cur->next_merged = 1;
 800b53c:	2001      	movs	r0, #1
 800b53e:	7720      	strb	r0, [r4, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 800b540:	2120      	movs	r1, #32
 800b542:	f002 ff1b 	bl	800e37c <calloc>
 800b546:	61a0      	str	r0, [r4, #24]
            if( cur->next == NULL )
 800b548:	4604      	mov	r4, r0
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d1e8      	bne.n	800b520 <mbedtls_x509_get_name+0x2c>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 800b54e:	4823      	ldr	r0, [pc, #140]	; (800b5dc <mbedtls_x509_get_name+0xe8>)
 800b550:	e7e0      	b.n	800b514 <mbedtls_x509_get_name+0x20>
    if( ( end - *p ) < 1 )
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	1af2      	subs	r2, r6, r3
 800b556:	2a00      	cmp	r2, #0
 800b558:	dd3b      	ble.n	800b5d2 <mbedtls_x509_get_name+0xde>
    oid->tag = **p;
 800b55a:	4622      	mov	r2, r4
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800b562:	4631      	mov	r1, r6
 800b564:	2306      	movs	r3, #6
 800b566:	4628      	mov	r0, r5
 800b568:	f7f6 ff51 	bl	800240e <mbedtls_asn1_get_tag>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d1de      	bne.n	800b52e <mbedtls_x509_get_name+0x3a>
    oid->p = *p;
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	60a3      	str	r3, [r4, #8]
    *p += oid->len;
 800b574:	6828      	ldr	r0, [r5, #0]
 800b576:	6861      	ldr	r1, [r4, #4]
 800b578:	1843      	adds	r3, r0, r1
    if( ( end - *p ) < 1 )
 800b57a:	1af2      	subs	r2, r6, r3
 800b57c:	2a00      	cmp	r2, #0
    *p += oid->len;
 800b57e:	602b      	str	r3, [r5, #0]
    if( ( end - *p ) < 1 )
 800b580:	dd27      	ble.n	800b5d2 <mbedtls_x509_get_name+0xde>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 800b582:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 800b584:	2a1e      	cmp	r2, #30
 800b586:	d826      	bhi.n	800b5d6 <mbedtls_x509_get_name+0xe2>
 800b588:	fa28 f202 	lsr.w	r2, r8, r2
 800b58c:	07d2      	lsls	r2, r2, #31
 800b58e:	d522      	bpl.n	800b5d6 <mbedtls_x509_get_name+0xe2>
    val->tag = *(*p)++;
 800b590:	3301      	adds	r3, #1
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	5c43      	ldrb	r3, [r0, r1]
 800b596:	60e3      	str	r3, [r4, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 800b598:	f104 0210 	add.w	r2, r4, #16
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f7f6 fee7 	bl	8002372 <mbedtls_asn1_get_len>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d1c2      	bne.n	800b52e <mbedtls_x509_get_name+0x3a>
    val->p = *p;
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	6163      	str	r3, [r4, #20]
    *p += val->len;
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	6922      	ldr	r2, [r4, #16]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	602b      	str	r3, [r5, #0]
    cur->next = NULL;
 800b5b4:	61a0      	str	r0, [r4, #24]
 800b5b6:	e7be      	b.n	800b536 <mbedtls_x509_get_name+0x42>
        if( *p == end )
 800b5b8:	42b7      	cmp	r7, r6
 800b5ba:	d008      	beq.n	800b5ce <mbedtls_x509_get_name+0xda>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 800b5bc:	2120      	movs	r1, #32
 800b5be:	2001      	movs	r0, #1
 800b5c0:	f002 fedc 	bl	800e37c <calloc>
 800b5c4:	61a0      	str	r0, [r4, #24]
        if( cur->next == NULL )
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d19a      	bne.n	800b502 <mbedtls_x509_get_name+0xe>
 800b5cc:	e7bf      	b.n	800b54e <mbedtls_x509_get_name+0x5a>
            return( 0 );
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e7a0      	b.n	800b514 <mbedtls_x509_get_name+0x20>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 800b5d2:	4803      	ldr	r0, [pc, #12]	; (800b5e0 <mbedtls_x509_get_name+0xec>)
 800b5d4:	e79e      	b.n	800b514 <mbedtls_x509_get_name+0x20>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 800b5d6:	4803      	ldr	r0, [pc, #12]	; (800b5e4 <mbedtls_x509_get_name+0xf0>)
 800b5d8:	e79c      	b.n	800b514 <mbedtls_x509_get_name+0x20>
 800b5da:	bf00      	nop
 800b5dc:	ffffd780 	.word	0xffffd780
 800b5e0:	ffffdc20 	.word	0xffffdc20
 800b5e4:	ffffdc1e 	.word	0xffffdc1e
 800b5e8:	50581008 	.word	0x50581008

0800b5ec <mbedtls_x509_get_time>:
{
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 800b5ec:	6803      	ldr	r3, [r0, #0]
{
 800b5ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5f0:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 800b5f2:	1aca      	subs	r2, r1, r3
 800b5f4:	2a00      	cmp	r2, #0
{
 800b5f6:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 800b5f8:	f340 809f 	ble.w	800b73a <mbedtls_x509_get_time+0x14e>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 800b5fc:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 800b5fe:	2a17      	cmp	r2, #23
 800b600:	d00e      	beq.n	800b620 <mbedtls_x509_get_time+0x34>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 800b602:	2a18      	cmp	r2, #24
 800b604:	f040 809b 	bne.w	800b73e <mbedtls_x509_get_time+0x152>
        year_len = 4;
 800b608:	2704      	movs	r7, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800b60a:	3301      	adds	r3, #1
 800b60c:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 800b60e:	aa01      	add	r2, sp, #4
 800b610:	4628      	mov	r0, r5
 800b612:	f7f6 feae 	bl	8002372 <mbedtls_asn1_get_len>

    if( ret != 0 )
 800b616:	b128      	cbz	r0, 800b624 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 800b618:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
 800b61c:	b003      	add	sp, #12
 800b61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 800b620:	2702      	movs	r7, #2
 800b622:	e7f2      	b.n	800b60a <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 800b624:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	429e      	cmp	r6, r3
 800b62c:	d37d      	bcc.n	800b72a <mbedtls_x509_get_time+0x13e>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 800b62e:	4622      	mov	r2, r4
 800b630:	4639      	mov	r1, r7
 800b632:	4628      	mov	r0, r5
 800b634:	f7ff ff12 	bl	800b45c <x509_parse_int>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d1ef      	bne.n	800b61c <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 800b63c:	2f02      	cmp	r7, #2
 800b63e:	d108      	bne.n	800b652 <mbedtls_x509_get_time+0x66>
        if ( tm->year < 50 )
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 800b644:	bfdc      	itt	le
 800b646:	3364      	addle	r3, #100	; 0x64
 800b648:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800b650:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 800b652:	1d22      	adds	r2, r4, #4
 800b654:	2102      	movs	r1, #2
 800b656:	4628      	mov	r0, r5
 800b658:	f7ff ff00 	bl	800b45c <x509_parse_int>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1dd      	bne.n	800b61c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 800b660:	f104 0208 	add.w	r2, r4, #8
 800b664:	2102      	movs	r1, #2
 800b666:	4628      	mov	r0, r5
 800b668:	f7ff fef8 	bl	800b45c <x509_parse_int>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d1d5      	bne.n	800b61c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 800b670:	f104 020c 	add.w	r2, r4, #12
 800b674:	2102      	movs	r1, #2
 800b676:	4628      	mov	r0, r5
 800b678:	f7ff fef0 	bl	800b45c <x509_parse_int>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1cd      	bne.n	800b61c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 800b680:	f104 0210 	add.w	r2, r4, #16
 800b684:	2102      	movs	r1, #2
 800b686:	4628      	mov	r0, r5
 800b688:	f7ff fee8 	bl	800b45c <x509_parse_int>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d1c5      	bne.n	800b61c <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 800b690:	1bf6      	subs	r6, r6, r7
 800b692:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 800b696:	2b01      	cmp	r3, #1
 800b698:	d947      	bls.n	800b72a <mbedtls_x509_get_time+0x13e>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 800b69a:	f104 0214 	add.w	r2, r4, #20
 800b69e:	2102      	movs	r1, #2
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f7ff fedb 	bl	800b45c <x509_parse_int>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1b8      	bne.n	800b61c <mbedtls_x509_get_time+0x30>
        len -= 2;
 800b6aa:	3e0a      	subs	r6, #10
    if ( 1 == len && 'Z' == **p )
 800b6ac:	2e01      	cmp	r6, #1
 800b6ae:	d13a      	bne.n	800b726 <mbedtls_x509_get_time+0x13a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	2a5a      	cmp	r2, #90	; 0x5a
 800b6b6:	d138      	bne.n	800b72a <mbedtls_x509_get_time+0x13e>
        (*p)++;
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	f242 720f 	movw	r2, #9999	; 0x270f
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d831      	bhi.n	800b72a <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 23,   t->hour );
 800b6c6:	68e2      	ldr	r2, [r4, #12]
 800b6c8:	2a17      	cmp	r2, #23
 800b6ca:	d82e      	bhi.n	800b72a <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->min  );
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	2a3b      	cmp	r2, #59	; 0x3b
 800b6d0:	d82b      	bhi.n	800b72a <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->sec  );
 800b6d2:	6962      	ldr	r2, [r4, #20]
 800b6d4:	2a3b      	cmp	r2, #59	; 0x3b
 800b6d6:	d828      	bhi.n	800b72a <mbedtls_x509_get_time+0x13e>
 800b6d8:	6861      	ldr	r1, [r4, #4]
 800b6da:	290c      	cmp	r1, #12
 800b6dc:	d825      	bhi.n	800b72a <mbedtls_x509_get_time+0x13e>
 800b6de:	2201      	movs	r2, #1
 800b6e0:	408a      	lsls	r2, r1
 800b6e2:	f241 51aa 	movw	r1, #5546	; 0x15aa
 800b6e6:	420a      	tst	r2, r1
 800b6e8:	d121      	bne.n	800b72e <mbedtls_x509_get_time+0x142>
 800b6ea:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 800b6ee:	d120      	bne.n	800b732 <mbedtls_x509_get_time+0x146>
 800b6f0:	0751      	lsls	r1, r2, #29
 800b6f2:	d51a      	bpl.n	800b72a <mbedtls_x509_get_time+0x13e>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 800b6f4:	079a      	lsls	r2, r3, #30
 800b6f6:	d105      	bne.n	800b704 <mbedtls_x509_get_time+0x118>
 800b6f8:	2164      	movs	r1, #100	; 0x64
 800b6fa:	fb93 f2f1 	sdiv	r2, r3, r1
 800b6fe:	fb01 3212 	mls	r2, r1, r2, r3
 800b702:	b9c2      	cbnz	r2, 800b736 <mbedtls_x509_get_time+0x14a>
                !( t->year % 400 ) )
 800b704:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b708:	fb93 f2f1 	sdiv	r2, r3, r1
 800b70c:	fb01 3312 	mls	r3, r1, r2, r3
                month_len = 28;
 800b710:	2b00      	cmp	r3, #0
 800b712:	bf0c      	ite	eq
 800b714:	231d      	moveq	r3, #29
 800b716:	231c      	movne	r3, #28
    CHECK_RANGE( 1, month_len, t->day );
 800b718:	68a2      	ldr	r2, [r4, #8]
 800b71a:	2a00      	cmp	r2, #0
 800b71c:	dd05      	ble.n	800b72a <mbedtls_x509_get_time+0x13e>
 800b71e:	429a      	cmp	r2, r3
 800b720:	f77f af7c 	ble.w	800b61c <mbedtls_x509_get_time+0x30>
 800b724:	e001      	b.n	800b72a <mbedtls_x509_get_time+0x13e>
    if ( 0 != len )
 800b726:	2e00      	cmp	r6, #0
 800b728:	d0c8      	beq.n	800b6bc <mbedtls_x509_get_time+0xd0>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800b72a:	4806      	ldr	r0, [pc, #24]	; (800b744 <mbedtls_x509_get_time+0x158>)
 800b72c:	e776      	b.n	800b61c <mbedtls_x509_get_time+0x30>
            month_len = 31;
 800b72e:	231f      	movs	r3, #31
 800b730:	e7f2      	b.n	800b718 <mbedtls_x509_get_time+0x12c>
            month_len = 30;
 800b732:	231e      	movs	r3, #30
 800b734:	e7f0      	b.n	800b718 <mbedtls_x509_get_time+0x12c>
                month_len = 29;
 800b736:	231d      	movs	r3, #29
 800b738:	e7ee      	b.n	800b718 <mbedtls_x509_get_time+0x12c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800b73a:	4803      	ldr	r0, [pc, #12]	; (800b748 <mbedtls_x509_get_time+0x15c>)
 800b73c:	e76e      	b.n	800b61c <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800b73e:	4803      	ldr	r0, [pc, #12]	; (800b74c <mbedtls_x509_get_time+0x160>)
 800b740:	e76c      	b.n	800b61c <mbedtls_x509_get_time+0x30>
 800b742:	bf00      	nop
 800b744:	ffffdc00 	.word	0xffffdc00
 800b748:	ffffdba0 	.word	0xffffdba0
 800b74c:	ffffdb9e 	.word	0xffffdb9e

0800b750 <mbedtls_x509_get_sig>:
{
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 800b750:	6803      	ldr	r3, [r0, #0]
{
 800b752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b754:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 800b756:	1aca      	subs	r2, r1, r3
 800b758:	2a00      	cmp	r2, #0
{
 800b75a:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 800b75c:	dd11      	ble.n	800b782 <mbedtls_x509_get_sig+0x32>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800b75e:	aa01      	add	r2, sp, #4
    tag_type = **p;
 800b760:	781e      	ldrb	r6, [r3, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800b762:	f7f6 fec7 	bl	80024f4 <mbedtls_asn1_get_bitstring_null>
 800b766:	b118      	cbz	r0, 800b770 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 800b768:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
    sig->p = *p;

    *p += len;

    return( 0 );
}
 800b76c:	b002      	add	sp, #8
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 800b774:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 800b776:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 800b778:	602e      	str	r6, [r5, #0]
    *p += len;
 800b77a:	4413      	add	r3, r2
    sig->len = len;
 800b77c:	606a      	str	r2, [r5, #4]
    *p += len;
 800b77e:	6023      	str	r3, [r4, #0]
    return( 0 );
 800b780:	e7f4      	b.n	800b76c <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 800b782:	4801      	ldr	r0, [pc, #4]	; (800b788 <mbedtls_x509_get_sig+0x38>)
 800b784:	e7f2      	b.n	800b76c <mbedtls_x509_get_sig+0x1c>
 800b786:	bf00      	nop
 800b788:	ffffdb20 	.word	0xffffdb20

0800b78c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 800b78c:	b510      	push	{r4, lr}
 800b78e:	460c      	mov	r4, r1
 800b790:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 800b792:	9a02      	ldr	r2, [sp, #8]
 800b794:	6812      	ldr	r2, [r2, #0]
 800b796:	b982      	cbnz	r2, 800b7ba <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 800b798:	461a      	mov	r2, r3
 800b79a:	f7fa f8f9 	bl	8005990 <mbedtls_oid_get_sig_alg>
 800b79e:	b110      	cbz	r0, 800b7a6 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 800b7a0:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 800b7a4:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	2b05      	cmp	r3, #5
 800b7aa:	d000      	beq.n	800b7ae <mbedtls_x509_get_sig_alg+0x22>
 800b7ac:	b93b      	cbnz	r3, 800b7be <mbedtls_x509_get_sig_alg+0x32>
 800b7ae:	6862      	ldr	r2, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 800b7b0:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <mbedtls_x509_get_sig_alg+0x38>)
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	bf18      	it	ne
 800b7b6:	4618      	movne	r0, r3
 800b7b8:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800b7ba:	4803      	ldr	r0, [pc, #12]	; (800b7c8 <mbedtls_x509_get_sig_alg+0x3c>)
 800b7bc:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 800b7be:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 800b7c0:	bd10      	pop	{r4, pc}
 800b7c2:	bf00      	nop
 800b7c4:	ffffdd00 	.word	0xffffdd00
 800b7c8:	ffffd800 	.word	0xffffd800

0800b7cc <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 800b7cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7ce:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 800b7d0:	6802      	ldr	r2, [r0, #0]
 800b7d2:	428a      	cmp	r2, r1
{
 800b7d4:	4604      	mov	r4, r0
    if( *p == end )
 800b7d6:	d01d      	beq.n	800b814 <mbedtls_x509_get_ext+0x48>
        return( 0 );

    ext->tag = **p;
 800b7d8:	7815      	ldrb	r5, [r2, #0]
 800b7da:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 800b7dc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 800b7e0:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 800b7e4:	f7f6 fe13 	bl	800240e <mbedtls_asn1_get_tag>
 800b7e8:	b968      	cbnz	r0, 800b806 <mbedtls_x509_get_ext+0x3a>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 800b7ee:	6825      	ldr	r5, [r4, #0]
 800b7f0:	6873      	ldr	r3, [r6, #4]
 800b7f2:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800b7f4:	aa01      	add	r2, sp, #4
 800b7f6:	2330      	movs	r3, #48	; 0x30
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f7f6 fe07 	bl	800240e <mbedtls_asn1_get_tag>
 800b800:	b118      	cbz	r0, 800b80a <mbedtls_x509_get_ext+0x3e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 800b802:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800b806:	b002      	add	sp, #8
 800b808:	bd70      	pop	{r4, r5, r6, pc}
    if( end != *p + len )
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	9a01      	ldr	r2, [sp, #4]
 800b80e:	4413      	add	r3, r2
 800b810:	429d      	cmp	r5, r3
 800b812:	d101      	bne.n	800b818 <mbedtls_x509_get_ext+0x4c>
    return( 0 );
 800b814:	2000      	movs	r0, #0
 800b816:	e7f6      	b.n	800b806 <mbedtls_x509_get_ext+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800b818:	4800      	ldr	r0, [pc, #0]	; (800b81c <mbedtls_x509_get_ext+0x50>)
 800b81a:	e7f4      	b.n	800b806 <mbedtls_x509_get_ext+0x3a>
 800b81c:	ffffda9a 	.word	0xffffda9a

0800b820 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	b0c3      	sub	sp, #268	; 0x10c
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 800b826:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 800b82a:	f10d 0808 	add.w	r8, sp, #8
{
 800b82e:	460f      	mov	r7, r1
 800b830:	4691      	mov	r9, r2
    memset( s, 0, sizeof( s ) );
 800b832:	4651      	mov	r1, sl
 800b834:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800b838:	4606      	mov	r6, r0
    memset( s, 0, sizeof( s ) );
 800b83a:	4640      	mov	r0, r8
    const char *short_name = NULL;
 800b83c:	f8cd a004 	str.w	sl, [sp, #4]
    memset( s, 0, sizeof( s ) );
 800b840:	f002 fe12 	bl	800e468 <memset>
    unsigned char c, merge = 0;
 800b844:	4652      	mov	r2, sl
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
 800b846:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b920 <mbedtls_x509_dn_gets+0x100>
    name = dn;
 800b84a:	464d      	mov	r5, r9
    n = size;
 800b84c:	463c      	mov	r4, r7
                 s[i] = '?';
 800b84e:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    while( name != NULL )
 800b852:	b90d      	cbnz	r5, 800b858 <mbedtls_x509_dn_gets+0x38>

        merge = name->next_merged;
        name = name->next;
    }

    return( (int) ( size - n ) );
 800b854:	1b38      	subs	r0, r7, r4
 800b856:	e012      	b.n	800b87e <mbedtls_x509_dn_gets+0x5e>
        if( !name->oid.p )
 800b858:	68ab      	ldr	r3, [r5, #8]
 800b85a:	b90b      	cbnz	r3, 800b860 <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 800b85c:	69ad      	ldr	r5, [r5, #24]
 800b85e:	e7f8      	b.n	800b852 <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 800b860:	454d      	cmp	r5, r9
 800b862:	d013      	beq.n	800b88c <mbedtls_x509_dn_gets+0x6c>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 800b864:	4b29      	ldr	r3, [pc, #164]	; (800b90c <mbedtls_x509_dn_gets+0xec>)
 800b866:	492a      	ldr	r1, [pc, #168]	; (800b910 <mbedtls_x509_dn_gets+0xf0>)
 800b868:	4630      	mov	r0, r6
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	bf14      	ite	ne
 800b86e:	460a      	movne	r2, r1
 800b870:	461a      	moveq	r2, r3
 800b872:	4621      	mov	r1, r4
 800b874:	f002 ffa8 	bl	800e7c8 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 800b878:	2800      	cmp	r0, #0
 800b87a:	da03      	bge.n	800b884 <mbedtls_x509_dn_gets+0x64>
 800b87c:	4825      	ldr	r0, [pc, #148]	; (800b914 <mbedtls_x509_dn_gets+0xf4>)
}
 800b87e:	b043      	add	sp, #268	; 0x10c
 800b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 800b884:	4284      	cmp	r4, r0
 800b886:	d9f9      	bls.n	800b87c <mbedtls_x509_dn_gets+0x5c>
 800b888:	1a24      	subs	r4, r4, r0
 800b88a:	4406      	add	r6, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 800b88c:	a901      	add	r1, sp, #4
 800b88e:	4628      	mov	r0, r5
 800b890:	f7fa f824 	bl	80058dc <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 800b894:	bb10      	cbnz	r0, 800b8dc <mbedtls_x509_dn_gets+0xbc>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	4a1f      	ldr	r2, [pc, #124]	; (800b918 <mbedtls_x509_dn_gets+0xf8>)
 800b89a:	4621      	mov	r1, r4
 800b89c:	4630      	mov	r0, r6
 800b89e:	f002 ff93 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	dbea      	blt.n	800b87c <mbedtls_x509_dn_gets+0x5c>
 800b8a6:	4284      	cmp	r4, r0
 800b8a8:	d9e8      	bls.n	800b87c <mbedtls_x509_dn_gets+0x5c>
 800b8aa:	1a24      	subs	r4, r4, r0
 800b8ac:	4406      	add	r6, r0
        for( i = 0; i < name->val.len; i++ )
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	692a      	ldr	r2, [r5, #16]
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d201      	bcs.n	800b8ba <mbedtls_x509_dn_gets+0x9a>
            if( i >= sizeof( s ) - 1 )
 800b8b6:	2bff      	cmp	r3, #255	; 0xff
 800b8b8:	d116      	bne.n	800b8e8 <mbedtls_x509_dn_gets+0xc8>
        s[i] = '\0';
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4643      	mov	r3, r8
 800b8c4:	4652      	mov	r2, sl
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f002 ff7e 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	dbd5      	blt.n	800b87c <mbedtls_x509_dn_gets+0x5c>
 800b8d0:	4284      	cmp	r4, r0
 800b8d2:	d9d3      	bls.n	800b87c <mbedtls_x509_dn_gets+0x5c>
 800b8d4:	1a24      	subs	r4, r4, r0
 800b8d6:	4406      	add	r6, r0
        merge = name->next_merged;
 800b8d8:	7f2a      	ldrb	r2, [r5, #28]
 800b8da:	e7bf      	b.n	800b85c <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 800b8dc:	4a0f      	ldr	r2, [pc, #60]	; (800b91c <mbedtls_x509_dn_gets+0xfc>)
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f002 ff71 	bl	800e7c8 <sniprintf>
 800b8e6:	e7dc      	b.n	800b8a2 <mbedtls_x509_dn_gets+0x82>
            c = name->val.p[i];
 800b8e8:	696a      	ldr	r2, [r5, #20]
 800b8ea:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 800b8ec:	2a1f      	cmp	r2, #31
 800b8ee:	d906      	bls.n	800b8fe <mbedtls_x509_dn_gets+0xde>
 800b8f0:	2a7f      	cmp	r2, #127	; 0x7f
 800b8f2:	d004      	beq.n	800b8fe <mbedtls_x509_dn_gets+0xde>
 800b8f4:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 800b8f8:	b2c9      	uxtb	r1, r1
 800b8fa:	291e      	cmp	r1, #30
 800b8fc:	d803      	bhi.n	800b906 <mbedtls_x509_dn_gets+0xe6>
                 s[i] = '?';
 800b8fe:	f808 b003 	strb.w	fp, [r8, r3]
        for( i = 0; i < name->val.len; i++ )
 800b902:	3301      	adds	r3, #1
 800b904:	e7d4      	b.n	800b8b0 <mbedtls_x509_dn_gets+0x90>
            else s[i] = c;
 800b906:	f808 2003 	strb.w	r2, [r8, r3]
 800b90a:	e7fa      	b.n	800b902 <mbedtls_x509_dn_gets+0xe2>
 800b90c:	08014186 	.word	0x08014186
 800b910:	08014182 	.word	0x08014182
 800b914:	ffffd680 	.word	0xffffd680
 800b918:	08014189 	.word	0x08014189
 800b91c:	0801418d 	.word	0x0801418d
 800b920:	08012f9b 	.word	0x08012f9b

0800b924 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 800b924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
 800b928:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 800b92a:	f8df a084 	ldr.w	sl, [pc, #132]	; 800b9b0 <mbedtls_x509_serial_gets+0x8c>
 800b92e:	f8df b084 	ldr.w	fp, [pc, #132]	; 800b9b4 <mbedtls_x509_serial_gets+0x90>
        ? serial->len  : 28;
 800b932:	2e20      	cmp	r6, #32
{
 800b934:	4680      	mov	r8, r0
 800b936:	460f      	mov	r7, r1
 800b938:	4691      	mov	r9, r2
        ? serial->len  : 28;
 800b93a:	bf88      	it	hi
 800b93c:	261c      	movhi	r6, #28
    n = size;
 800b93e:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
 800b940:	2500      	movs	r5, #0
 800b942:	42b5      	cmp	r5, r6
 800b944:	d10f      	bne.n	800b966 <mbedtls_x509_serial_gets+0x42>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 800b946:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b94a:	429d      	cmp	r5, r3
 800b94c:	d009      	beq.n	800b962 <mbedtls_x509_serial_gets+0x3e>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 800b94e:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <mbedtls_x509_serial_gets+0x80>)
 800b950:	4621      	mov	r1, r4
 800b952:	4640      	mov	r0, r8
 800b954:	f002 ff38 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800b958:	2800      	cmp	r0, #0
 800b95a:	db19      	blt.n	800b990 <mbedtls_x509_serial_gets+0x6c>
 800b95c:	4284      	cmp	r4, r0
 800b95e:	d917      	bls.n	800b990 <mbedtls_x509_serial_gets+0x6c>
 800b960:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 800b962:	1b38      	subs	r0, r7, r4
 800b964:	e015      	b.n	800b992 <mbedtls_x509_serial_gets+0x6e>
 800b966:	f8d9 3008 	ldr.w	r3, [r9, #8]
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 800b96a:	b91d      	cbnz	r5, 800b974 <mbedtls_x509_serial_gets+0x50>
 800b96c:	2e01      	cmp	r6, #1
 800b96e:	d001      	beq.n	800b974 <mbedtls_x509_serial_gets+0x50>
 800b970:	781a      	ldrb	r2, [r3, #0]
 800b972:	b1aa      	cbz	r2, 800b9a0 <mbedtls_x509_serial_gets+0x7c>
        ret = mbedtls_snprintf( p, n, "%02X%s",
 800b974:	490c      	ldr	r1, [pc, #48]	; (800b9a8 <mbedtls_x509_serial_gets+0x84>)
 800b976:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 800b978:	1e72      	subs	r2, r6, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 800b97a:	4295      	cmp	r5, r2
 800b97c:	bf28      	it	cs
 800b97e:	4651      	movcs	r1, sl
 800b980:	9100      	str	r1, [sp, #0]
 800b982:	465a      	mov	r2, fp
 800b984:	4621      	mov	r1, r4
 800b986:	4640      	mov	r0, r8
 800b988:	f002 ff1e 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800b98c:	2800      	cmp	r0, #0
 800b98e:	da03      	bge.n	800b998 <mbedtls_x509_serial_gets+0x74>
 800b990:	4806      	ldr	r0, [pc, #24]	; (800b9ac <mbedtls_x509_serial_gets+0x88>)
}
 800b992:	b003      	add	sp, #12
 800b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 800b998:	4284      	cmp	r4, r0
 800b99a:	d9f9      	bls.n	800b990 <mbedtls_x509_serial_gets+0x6c>
 800b99c:	1a24      	subs	r4, r4, r0
 800b99e:	4480      	add	r8, r0
    for( i = 0; i < nr; i++ )
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	e7ce      	b.n	800b942 <mbedtls_x509_serial_gets+0x1e>
 800b9a4:	080141a6 	.word	0x080141a6
 800b9a8:	0801419d 	.word	0x0801419d
 800b9ac:	ffffd680 	.word	0xffffd680
 800b9b0:	0801236b 	.word	0x0801236b
 800b9b4:	0801419f 	.word	0x0801419f

0800b9b8 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 800b9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ba:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 800b9bc:	a902      	add	r1, sp, #8
 800b9be:	2300      	movs	r3, #0
{
 800b9c0:	4605      	mov	r5, r0
    const char *desc = NULL;
 800b9c2:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	f7f9 ffd6 	bl	8005978 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 800b9cc:	b160      	cbz	r0, 800b9e8 <mbedtls_x509_sig_alg_gets+0x30>
        ret = mbedtls_snprintf( p, n, "???"  );
 800b9ce:	4a0b      	ldr	r2, [pc, #44]	; (800b9fc <mbedtls_x509_sig_alg_gets+0x44>)
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f002 fef8 	bl	800e7c8 <sniprintf>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	db0c      	blt.n	800b9f6 <mbedtls_x509_sig_alg_gets+0x3e>
 800b9dc:	4b08      	ldr	r3, [pc, #32]	; (800ba00 <mbedtls_x509_sig_alg_gets+0x48>)
 800b9de:	4284      	cmp	r4, r0
 800b9e0:	bf98      	it	ls
 800b9e2:	4618      	movls	r0, r3
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 800b9e4:	b003      	add	sp, #12
 800b9e6:	bd30      	pop	{r4, r5, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	4a06      	ldr	r2, [pc, #24]	; (800ba04 <mbedtls_x509_sig_alg_gets+0x4c>)
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f002 feea 	bl	800e7c8 <sniprintf>
 800b9f4:	e7f0      	b.n	800b9d8 <mbedtls_x509_sig_alg_gets+0x20>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800b9f6:	4802      	ldr	r0, [pc, #8]	; (800ba00 <mbedtls_x509_sig_alg_gets+0x48>)
 800b9f8:	e7f4      	b.n	800b9e4 <mbedtls_x509_sig_alg_gets+0x2c>
 800b9fa:	bf00      	nop
 800b9fc:	080141ab 	.word	0x080141ab
 800ba00:	ffffd680 	.word	0xffffd680
 800ba04:	08012f9b 	.word	0x08012f9b

0800ba08 <mbedtls_x509_key_size_helper>:
{
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 800ba08:	4613      	mov	r3, r2
{
 800ba0a:	b510      	push	{r4, lr}
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 800ba0c:	4a05      	ldr	r2, [pc, #20]	; (800ba24 <mbedtls_x509_key_size_helper+0x1c>)
{
 800ba0e:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 800ba10:	f002 feda 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800ba14:	1e03      	subs	r3, r0, #0
 800ba16:	4804      	ldr	r0, [pc, #16]	; (800ba28 <mbedtls_x509_key_size_helper+0x20>)
 800ba18:	db03      	blt.n	800ba22 <mbedtls_x509_key_size_helper+0x1a>

    return( 0 );
 800ba1a:	429c      	cmp	r4, r3
 800ba1c:	bf88      	it	hi
 800ba1e:	2000      	movhi	r0, #0
 800ba20:	bd10      	pop	{r4, pc}
}
 800ba22:	bd10      	pop	{r4, pc}
 800ba24:	08014191 	.word	0x08014191
 800ba28:	ffffd680 	.word	0xffffd680

0800ba2c <mbedtls_x509_time_is_past>:
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	4770      	bx	lr

0800ba30 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 800ba30:	2000      	movs	r0, #0
 800ba32:	4770      	bx	lr

0800ba34 <mbedtls_zeroize>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800ba34:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	4288      	cmp	r0, r1
 800ba3a:	d100      	bne.n	800ba3e <mbedtls_zeroize+0xa>
}
 800ba3c:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800ba3e:	7003      	strb	r3, [r0, #0]
 800ba40:	3001      	adds	r0, #1
 800ba42:	e7f9      	b.n	800ba38 <mbedtls_zeroize+0x4>

0800ba44 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 800ba44:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 800ba46:	2400      	movs	r4, #0
 800ba48:	4294      	cmp	r4, r2
 800ba4a:	d101      	bne.n	800ba50 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	bd30      	pop	{r4, r5, pc}
        diff = n1[i] ^ n2[i];
 800ba50:	5d03      	ldrb	r3, [r0, r4]
 800ba52:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	d007      	beq.n	800ba68 <x509_memcasecmp+0x24>
        if( diff == 32 &&
 800ba58:	405d      	eors	r5, r3
 800ba5a:	2d20      	cmp	r5, #32
 800ba5c:	d106      	bne.n	800ba6c <x509_memcasecmp+0x28>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 800ba5e:	f023 0320 	bic.w	r3, r3, #32
 800ba62:	3b41      	subs	r3, #65	; 0x41
 800ba64:	2b19      	cmp	r3, #25
 800ba66:	d801      	bhi.n	800ba6c <x509_memcasecmp+0x28>
    for( i = 0; i < len; i++ )
 800ba68:	3401      	adds	r4, #1
 800ba6a:	e7ed      	b.n	800ba48 <x509_memcasecmp+0x4>
        return( -1 );
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ba70:	bd30      	pop	{r4, r5, pc}

0800ba72 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 800ba72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	4605      	mov	r5, r0
 800ba78:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 800ba7a:	b92d      	cbnz	r5, 800ba88 <x509_name_cmp+0x16>
 800ba7c:	1c20      	adds	r0, r4, #0
 800ba7e:	bf18      	it	ne
 800ba80:	2001      	movne	r0, #1
 800ba82:	4240      	negs	r0, r0
 800ba84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
        if( a == NULL || b == NULL )
 800ba88:	2c00      	cmp	r4, #0
 800ba8a:	d036      	beq.n	800bafa <x509_name_cmp+0x88>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 800ba8c:	682a      	ldr	r2, [r5, #0]
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d132      	bne.n	800bafa <x509_name_cmp+0x88>
            a->oid.len != b->oid.len ||
 800ba94:	686a      	ldr	r2, [r5, #4]
        if( a->oid.tag != b->oid.tag ||
 800ba96:	6863      	ldr	r3, [r4, #4]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d12e      	bne.n	800bafa <x509_name_cmp+0x88>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 800ba9c:	68a1      	ldr	r1, [r4, #8]
 800ba9e:	68a8      	ldr	r0, [r5, #8]
 800baa0:	f002 fcae 	bl	800e400 <memcmp>
            a->oid.len != b->oid.len ||
 800baa4:	bb48      	cbnz	r0, 800bafa <x509_name_cmp+0x88>
    if( a->tag == b->tag &&
 800baa6:	68ef      	ldr	r7, [r5, #12]
 800baa8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800baac:	4547      	cmp	r7, r8
 800baae:	d110      	bne.n	800bad2 <x509_name_cmp+0x60>
        a->len == b->len &&
 800bab0:	692e      	ldr	r6, [r5, #16]
    if( a->tag == b->tag &&
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	429e      	cmp	r6, r3
 800bab6:	d128      	bne.n	800bb0a <x509_name_cmp+0x98>
        memcmp( a->p, b->p, b->len ) == 0 )
 800bab8:	4632      	mov	r2, r6
 800baba:	6961      	ldr	r1, [r4, #20]
 800babc:	6968      	ldr	r0, [r5, #20]
 800babe:	f002 fc9f 	bl	800e400 <memcmp>
        a->len == b->len &&
 800bac2:	b9f0      	cbnz	r0, 800bb02 <x509_name_cmp+0x90>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 800bac4:	7f2a      	ldrb	r2, [r5, #28]
 800bac6:	7f23      	ldrb	r3, [r4, #28]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d116      	bne.n	800bafa <x509_name_cmp+0x88>
            return( -1 );

        a = a->next;
 800bacc:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 800bace:	69a4      	ldr	r4, [r4, #24]
 800bad0:	e7d3      	b.n	800ba7a <x509_name_cmp+0x8>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800bad2:	2f0c      	cmp	r7, #12
 800bad4:	d001      	beq.n	800bada <x509_name_cmp+0x68>
 800bad6:	2f13      	cmp	r7, #19
 800bad8:	d10f      	bne.n	800bafa <x509_name_cmp+0x88>
 800bada:	f1b8 0f0c 	cmp.w	r8, #12
 800bade:	d002      	beq.n	800bae6 <x509_name_cmp+0x74>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800bae0:	f1b8 0f13 	cmp.w	r8, #19
 800bae4:	d109      	bne.n	800bafa <x509_name_cmp+0x88>
        a->len == b->len &&
 800bae6:	692a      	ldr	r2, [r5, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	429a      	cmp	r2, r3
 800baec:	d105      	bne.n	800bafa <x509_name_cmp+0x88>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 800baee:	6961      	ldr	r1, [r4, #20]
 800baf0:	6968      	ldr	r0, [r5, #20]
 800baf2:	f7ff ffa7 	bl	800ba44 <x509_memcasecmp>
        a->len == b->len &&
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d0e4      	beq.n	800bac4 <x509_name_cmp+0x52>
            return( -1 );
 800bafa:	f04f 30ff 	mov.w	r0, #4294967295
 800bafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800bb02:	2f0c      	cmp	r7, #12
 800bb04:	d103      	bne.n	800bb0e <x509_name_cmp+0x9c>
        a->len == b->len &&
 800bb06:	4632      	mov	r2, r6
 800bb08:	e7f1      	b.n	800baee <x509_name_cmp+0x7c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800bb0a:	2f0c      	cmp	r7, #12
 800bb0c:	d0f5      	beq.n	800bafa <x509_name_cmp+0x88>
 800bb0e:	2f13      	cmp	r7, #19
 800bb10:	d0e6      	beq.n	800bae0 <x509_name_cmp+0x6e>
 800bb12:	e7f2      	b.n	800bafa <x509_name_cmp+0x88>

0800bb14 <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	4605      	mov	r5, r0
 800bb18:	460c      	mov	r4, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 800bb1a:	304c      	adds	r0, #76	; 0x4c
 800bb1c:	316c      	adds	r1, #108	; 0x6c
{
 800bb1e:	4616      	mov	r6, r2
 800bb20:	461f      	mov	r7, r3
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 800bb22:	f7ff ffa6 	bl	800ba72 <x509_name_cmp>
 800bb26:	b9a0      	cbnz	r0, 800bb52 <x509_crt_check_parent+0x3e>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 800bb28:	b166      	cbz	r6, 800bb44 <x509_crt_check_parent+0x30>
 800bb2a:	69a6      	ldr	r6, [r4, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 800bb2c:	b147      	cbz	r7, 800bb40 <x509_crt_check_parent+0x2c>
        child->raw.len == parent->raw.len &&
 800bb2e:	686a      	ldr	r2, [r5, #4]
    if( top && bottom &&
 800bb30:	6863      	ldr	r3, [r4, #4]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d104      	bne.n	800bb40 <x509_crt_check_parent+0x2c>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 800bb36:	68a1      	ldr	r1, [r4, #8]
 800bb38:	68a8      	ldr	r0, [r5, #8]
 800bb3a:	f002 fc61 	bl	800e400 <memcmp>
        child->raw.len == parent->raw.len &&
 800bb3e:	b160      	cbz	r0, 800bb5a <x509_crt_check_parent+0x46>
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 800bb40:	2e02      	cmp	r6, #2
 800bb42:	dd09      	ble.n	800bb58 <x509_crt_check_parent+0x44>
 800bb44:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 800bb48:	fab0 f080 	clz	r0, r0
 800bb4c:	0940      	lsrs	r0, r0, #5
 800bb4e:	4240      	negs	r0, r0
 800bb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( -1 );
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295
 800bb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        return( -1 );
    }
#endif

    return( 0 );
 800bb58:	2000      	movs	r0, #0
}
 800bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb5c <x509_check_wildcard>:
{
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	460e      	mov	r6, r1
 800bb60:	4604      	mov	r4, r0
    size_t cn_idx = 0, cn_len = strlen( cn );
 800bb62:	f7f4 fb3d 	bl	80001e0 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 800bb66:	6875      	ldr	r5, [r6, #4]
 800bb68:	2d02      	cmp	r5, #2
 800bb6a:	d922      	bls.n	800bbb2 <x509_check_wildcard+0x56>
 800bb6c:	68b6      	ldr	r6, [r6, #8]
 800bb6e:	7833      	ldrb	r3, [r6, #0]
 800bb70:	2b2a      	cmp	r3, #42	; 0x2a
 800bb72:	d11e      	bne.n	800bbb2 <x509_check_wildcard+0x56>
 800bb74:	7873      	ldrb	r3, [r6, #1]
 800bb76:	2b2e      	cmp	r3, #46	; 0x2e
 800bb78:	d11b      	bne.n	800bbb2 <x509_check_wildcard+0x56>
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	2200      	movs	r2, #0
    for( i = 0; i < cn_len; ++i )
 800bb7e:	4282      	cmp	r2, r0
 800bb80:	d102      	bne.n	800bb88 <x509_check_wildcard+0x2c>
        return( -1 );
 800bb82:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
        if( cn[i] == '.' )
 800bb88:	4619      	mov	r1, r3
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	780c      	ldrb	r4, [r1, #0]
 800bb8e:	2c2e      	cmp	r4, #46	; 0x2e
 800bb90:	d001      	beq.n	800bb96 <x509_check_wildcard+0x3a>
    for( i = 0; i < cn_len; ++i )
 800bb92:	3201      	adds	r2, #1
 800bb94:	e7f3      	b.n	800bb7e <x509_check_wildcard+0x22>
    if( cn_idx == 0 )
 800bb96:	2a00      	cmp	r2, #0
 800bb98:	d0f3      	beq.n	800bb82 <x509_check_wildcard+0x26>
    if( cn_len - cn_idx == name->len - 1 &&
 800bb9a:	1a82      	subs	r2, r0, r2
 800bb9c:	3d01      	subs	r5, #1
 800bb9e:	42aa      	cmp	r2, r5
 800bba0:	d1ef      	bne.n	800bb82 <x509_check_wildcard+0x26>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 800bba2:	1c70      	adds	r0, r6, #1
 800bba4:	f7ff ff4e 	bl	800ba44 <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 800bba8:	3000      	adds	r0, #0
 800bbaa:	bf18      	it	ne
 800bbac:	2001      	movne	r0, #1
 800bbae:	4240      	negs	r0, r0
 800bbb0:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}

0800bbb6 <x509_get_uid>:
{
 800bbb6:	b570      	push	{r4, r5, r6, lr}
 800bbb8:	4615      	mov	r5, r2
    if( *p == end )
 800bbba:	6802      	ldr	r2, [r0, #0]
 800bbbc:	428a      	cmp	r2, r1
{
 800bbbe:	4604      	mov	r4, r0
    if( *p == end )
 800bbc0:	d00b      	beq.n	800bbda <x509_get_uid+0x24>
    uid->tag = **p;
 800bbc2:	7816      	ldrb	r6, [r2, #0]
 800bbc4:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 800bbc6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
 800bbca:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 800bbce:	f7f6 fc1e 	bl	800240e <mbedtls_asn1_get_tag>
 800bbd2:	b120      	cbz	r0, 800bbde <x509_get_uid+0x28>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800bbd4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800bbd8:	d107      	bne.n	800bbea <x509_get_uid+0x34>
            return( 0 );
 800bbda:	2000      	movs	r0, #0
 800bbdc:	bd70      	pop	{r4, r5, r6, pc}
    uid->p = *p;
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	686a      	ldr	r2, [r5, #4]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	6023      	str	r3, [r4, #0]
}
 800bbea:	bd70      	pop	{r4, r5, r6, pc}

0800bbec <x509_profile_check_key.isra.3>:
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 800bbec:	2901      	cmp	r1, #1
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	4604      	mov	r4, r0
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 800bbf2:	d001      	beq.n	800bbf8 <x509_profile_check_key.isra.3+0xc>
 800bbf4:	2906      	cmp	r1, #6
 800bbf6:	d109      	bne.n	800bc0c <x509_profile_check_key.isra.3+0x20>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f7fa f897 	bl	8005d2c <mbedtls_pk_get_bitlen>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	4298      	cmp	r0, r3
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295
 800bc06:	bf28      	it	cs
 800bc08:	2000      	movcs	r0, #0
 800bc0a:	bd10      	pop	{r4, pc}
    return( -1 );
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bc10:	bd10      	pop	{r4, pc}

0800bc12 <x509_crt_verify_top.isra.4>:

static int x509_crt_verify_top(
 800bc12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc16:	b093      	sub	sp, #76	; 0x4c
 800bc18:	4604      	mov	r4, r0
 800bc1a:	4698      	mov	r8, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 800bc1c:	30a4      	adds	r0, #164	; 0xa4
    uint32_t ca_flags = 0;
 800bc1e:	2300      	movs	r3, #0
static int x509_crt_verify_top(
 800bc20:	460e      	mov	r6, r1
 800bc22:	4692      	mov	sl, r2
 800bc24:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800bc26:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
    uint32_t ca_flags = 0;
 800bc2a:	9309      	str	r3, [sp, #36]	; 0x24
    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 800bc2c:	f7ff fefe 	bl	800ba2c <mbedtls_x509_time_is_past>
 800bc30:	b118      	cbz	r0, 800bc3a <x509_crt_verify_top.isra.4+0x28>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	602b      	str	r3, [r5, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 800bc3a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800bc3e:	f7ff fef7 	bl	800ba30 <mbedtls_x509_time_is_future>
 800bc42:	b118      	cbz	r0, 800bc4c <x509_crt_verify_top.isra.4+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc4a:	602b      	str	r3, [r5, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 800bc4c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 800bc50:	2301      	movs	r3, #1
 800bc52:	1e42      	subs	r2, r0, #1
 800bc54:	4093      	lsls	r3, r2
 800bc56:	f8da 2000 	ldr.w	r2, [sl]
 800bc5a:	4213      	tst	r3, r2
 800bc5c:	f000 80bc 	beq.w	800bdd8 <x509_crt_verify_top.isra.4+0x1c6>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800bc60:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 800bc64:	1e5a      	subs	r2, r3, #1
 800bc66:	2301      	movs	r3, #1
 800bc68:	4093      	lsls	r3, r2
 800bc6a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bc6e:	4213      	tst	r3, r2
 800bc70:	f000 80b7 	beq.w	800bde2 <x509_crt_verify_top.isra.4+0x1d0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	f043 0308 	orr.w	r3, r3, #8
 800bc7a:	602b      	str	r3, [r5, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 800bc7c:	f7f9 fcbc 	bl	80055f8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 800bc80:	9004      	str	r0, [sp, #16]
 800bc82:	b160      	cbz	r0, 800bc9e <x509_crt_verify_top.isra.4+0x8c>
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 800bc84:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800bc88:	465b      	mov	r3, fp
 800bc8a:	6922      	ldr	r2, [r4, #16]
 800bc8c:	6961      	ldr	r1, [r4, #20]
 800bc8e:	f7f9 fd07 	bl	80056a0 <mbedtls_md>
 800bc92:	2700      	movs	r7, #0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800bc94:	f8cd b014 	str.w	fp, [sp, #20]
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 800bc98:	b936      	cbnz	r6, 800bca8 <x509_crt_verify_top.isra.4+0x96>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 800bc9a:	2f00      	cmp	r7, #0
 800bc9c:	d153      	bne.n	800bd46 <x509_crt_verify_top.isra.4+0x134>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 800bc9e:	f1b9 0f00 	cmp.w	r9, #0
 800bca2:	f040 8091 	bne.w	800bdc8 <x509_crt_verify_top.isra.4+0x1b6>
 800bca6:	e07f      	b.n	800bda8 <x509_crt_verify_top.isra.4+0x196>
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 800bca8:	fab8 f388 	clz	r3, r8
 800bcac:	095b      	lsrs	r3, r3, #5
 800bcae:	2201      	movs	r2, #1
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f7ff ff2e 	bl	800bb14 <x509_crt_check_parent>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d13a      	bne.n	800bd32 <x509_crt_verify_top.isra.4+0x120>
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 800bcbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bcbe:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800bcc0:	429a      	cmp	r2, r3
        check_path_cnt = path_cnt + 1;
 800bcc2:	f108 0b01 	add.w	fp, r8, #1
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 800bcc6:	d107      	bne.n	800bcd8 <x509_crt_verify_top.isra.4+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 800bcc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bcca:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800bccc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bcce:	f002 fb97 	bl	800e400 <memcmp>
            check_path_cnt--;
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	bf08      	it	eq
 800bcd6:	46c3      	moveq	fp, r8
        if( trust_ca->max_pathlen > 0 &&
 800bcd8:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd04      	ble.n	800bcea <x509_crt_verify_top.isra.4+0xd8>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 800bce0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bce2:	ebab 0b02 	sub.w	fp, fp, r2
        if( trust_ca->max_pathlen > 0 &&
 800bce6:	455b      	cmp	r3, fp
 800bce8:	db23      	blt.n	800bd32 <x509_crt_verify_top.isra.4+0x120>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800bcea:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800bcee:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800bcf2:	9804      	ldr	r0, [sp, #16]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800bcf4:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 800bcf8:	9107      	str	r1, [sp, #28]
 800bcfa:	9306      	str	r3, [sp, #24]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800bcfc:	f7f9 fdaa 	bl	8005854 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800bd00:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800bd04:	9b05      	ldr	r3, [sp, #20]
 800bd06:	9203      	str	r2, [sp, #12]
 800bd08:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800bd0c:	9202      	str	r2, [sp, #8]
 800bd0e:	9001      	str	r0, [sp, #4]
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 800bd16:	9b06      	ldr	r3, [sp, #24]
 800bd18:	9907      	ldr	r1, [sp, #28]
 800bd1a:	4658      	mov	r0, fp
 800bd1c:	f7f9 ff8a 	bl	8005c34 <mbedtls_pk_verify_ext>
 800bd20:	b938      	cbnz	r0, 800bd32 <x509_crt_verify_top.isra.4+0x120>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 800bd22:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 800bd26:	f7ff fe81 	bl	800ba2c <mbedtls_x509_time_is_past>
 800bd2a:	b128      	cbz	r0, 800bd38 <x509_crt_verify_top.isra.4+0x126>
            if ( future_past_ca == NULL )
 800bd2c:	2f00      	cmp	r7, #0
 800bd2e:	bf08      	it	eq
 800bd30:	4637      	moveq	r7, r6
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 800bd32:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800bd36:	e7af      	b.n	800bc98 <x509_crt_verify_top.isra.4+0x86>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 800bd38:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 800bd3c:	f7ff fe78 	bl	800ba30 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d1f3      	bne.n	800bd2c <x509_crt_verify_top.isra.4+0x11a>
 800bd44:	4637      	mov	r7, r6
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800bd46:	682b      	ldr	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 800bd48:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800bd4c:	f023 0308 	bic.w	r3, r3, #8
 800bd50:	602b      	str	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 800bd52:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800bd56:	f10a 000c 	add.w	r0, sl, #12
 800bd5a:	f7ff ff47 	bl	800bbec <x509_profile_check_key.isra.3>
 800bd5e:	b118      	cbz	r0, 800bd68 <x509_crt_verify_top.isra.4+0x156>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd66:	602b      	str	r3, [r5, #0]
    if( trust_ca != NULL &&
 800bd68:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bd6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d106      	bne.n	800bd7e <x509_crt_verify_top.isra.4+0x16c>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 800bd70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bd72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bd74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bd76:	f002 fb43 	bl	800e400 <memcmp>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d08f      	beq.n	800bc9e <x509_crt_verify_top.isra.4+0x8c>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 800bd7e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800bd82:	f7ff fe53 	bl	800ba2c <mbedtls_x509_time_is_past>
 800bd86:	b118      	cbz	r0, 800bd90 <x509_crt_verify_top.isra.4+0x17e>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 800bd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd8a:	f043 0301 	orr.w	r3, r3, #1
 800bd8e:	9309      	str	r3, [sp, #36]	; 0x24
        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 800bd90:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800bd94:	f7ff fe4c 	bl	800ba30 <mbedtls_x509_time_is_future>
 800bd98:	b118      	cbz	r0, 800bda2 <x509_crt_verify_top.isra.4+0x190>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 800bd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bda0:	9309      	str	r3, [sp, #36]	; 0x24
        if( NULL != f_vrfy )
 800bda2:	f1b9 0f00 	cmp.w	r9, #0
 800bda6:	d107      	bne.n	800bdb8 <x509_crt_verify_top.isra.4+0x1a6>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdac:	4313      	orrs	r3, r2
 800bdae:	602b      	str	r3, [r5, #0]

    return( 0 );
 800bdb0:	2000      	movs	r0, #0
}
 800bdb2:	b013      	add	sp, #76	; 0x4c
 800bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 800bdb8:	ab09      	add	r3, sp, #36	; 0x24
 800bdba:	f108 0201 	add.w	r2, r8, #1
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800bdc2:	47c8      	blx	r9
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d1f4      	bne.n	800bdb2 <x509_crt_verify_top.isra.4+0x1a0>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 800bdc8:	462b      	mov	r3, r5
 800bdca:	4642      	mov	r2, r8
 800bdcc:	4621      	mov	r1, r4
 800bdce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800bdd0:	47c8      	blx	r9
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d0e8      	beq.n	800bda8 <x509_crt_verify_top.isra.4+0x196>
 800bdd6:	e7ec      	b.n	800bdb2 <x509_crt_verify_top.isra.4+0x1a0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdde:	602b      	str	r3, [r5, #0]
 800bde0:	e73e      	b.n	800bc60 <x509_crt_verify_top.isra.4+0x4e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 800bde2:	682b      	ldr	r3, [r5, #0]
 800bde4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bde8:	602b      	str	r3, [r5, #0]
 800bdea:	e743      	b.n	800bc74 <x509_crt_verify_top.isra.4+0x62>

0800bdec <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 800bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	b097      	sub	sp, #92	; 0x5c
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800bdf6:	9309      	str	r3, [sp, #36]	; 0x24
    int ret;
    uint32_t parent_flags = 0;
 800bdf8:	2300      	movs	r3, #0
{
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	9207      	str	r2, [sp, #28]
 800bdfe:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be02:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800be06:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    uint32_t parent_flags = 0;
 800be08:	930d      	str	r3, [sp, #52]	; 0x34
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 800be0a:	b156      	cbz	r6, 800be22 <x509_crt_verify_child+0x36>
 800be0c:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 800be10:	304c      	adds	r0, #76	; 0x4c
 800be12:	f7ff fe2e 	bl	800ba72 <x509_name_cmp>
 800be16:	b908      	cbnz	r0, 800be1c <x509_crt_verify_child+0x30>
        self_cnt++;
 800be18:	f109 0901 	add.w	r9, r9, #1

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 800be1c:	2e07      	cmp	r6, #7
 800be1e:	f300 80a2 	bgt.w	800bf66 <x509_crt_verify_child+0x17a>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 800be22:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 800be26:	f7ff fe01 	bl	800ba2c <mbedtls_x509_time_is_past>
 800be2a:	b118      	cbz	r0, 800be34 <x509_crt_verify_child+0x48>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	f043 0301 	orr.w	r3, r3, #1
 800be32:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 800be34:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 800be38:	f7ff fdfa 	bl	800ba30 <mbedtls_x509_time_is_future>
 800be3c:	b118      	cbz	r0, 800be46 <x509_crt_verify_child+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be44:	6023      	str	r3, [r4, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 800be46:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 800be4a:	2301      	movs	r3, #1
 800be4c:	1e42      	subs	r2, r0, #1
 800be4e:	4093      	lsls	r3, r2
 800be50:	f8d8 2000 	ldr.w	r2, [r8]
 800be54:	4213      	tst	r3, r2
 800be56:	f000 8088 	beq.w	800bf6a <x509_crt_verify_child+0x17e>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800be5a:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 800be5e:	1e5a      	subs	r2, r3, #1
 800be60:	2301      	movs	r3, #1
 800be62:	4093      	lsls	r3, r2
 800be64:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800be68:	4213      	tst	r3, r2
 800be6a:	f000 8083 	beq.w	800bf74 <x509_crt_verify_child+0x188>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 800be6e:	f7f9 fbc3 	bl	80055f8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 800be72:	4683      	mov	fp, r0
 800be74:	b920      	cbnz	r0, 800be80 <x509_crt_verify_child+0x94>

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	f043 0308 	orr.w	r3, r3, #8
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	e02f      	b.n	800bee0 <x509_crt_verify_child+0xf4>
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 800be80:	692a      	ldr	r2, [r5, #16]
 800be82:	6969      	ldr	r1, [r5, #20]
 800be84:	ab0e      	add	r3, sp, #56	; 0x38
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 800be86:	f107 0abc 	add.w	sl, r7, #188	; 0xbc
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 800be8a:	f7f9 fc09 	bl	80056a0 <mbedtls_md>
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 800be8e:	4652      	mov	r2, sl
 800be90:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 800be94:	f108 000c 	add.w	r0, r8, #12
 800be98:	f7ff fea8 	bl	800bbec <x509_profile_check_key.isra.3>
 800be9c:	b118      	cbz	r0, 800bea6 <x509_crt_verify_child+0xba>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bea4:	6023      	str	r3, [r4, #0]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 800bea6:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 800beaa:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 800beae:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800beb0:	4658      	mov	r0, fp
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 800beb2:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 800beb6:	910b      	str	r1, [sp, #44]	; 0x2c
 800beb8:	930a      	str	r3, [sp, #40]	; 0x28
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800beba:	f7f9 fccb 	bl	8005854 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 800bebe:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 800bec2:	9203      	str	r2, [sp, #12]
 800bec4:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 800bec8:	9202      	str	r2, [sp, #8]
 800beca:	aa0e      	add	r2, sp, #56	; 0x38
 800becc:	9001      	str	r0, [sp, #4]
 800bece:	9200      	str	r2, [sp, #0]
 800bed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bed4:	9808      	ldr	r0, [sp, #32]
 800bed6:	4652      	mov	r2, sl
 800bed8:	f7f9 feac 	bl	8005c34 <mbedtls_pk_verify_ext>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d1ca      	bne.n	800be76 <x509_crt_verify_child+0x8a>
{
 800bee0:	f8dd a01c 	ldr.w	sl, [sp, #28]
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 800bee4:	f1ba 0f00 	cmp.w	sl, #0
 800bee8:	d106      	bne.n	800bef8 <x509_crt_verify_child+0x10c>
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 800beea:	f106 0b02 	add.w	fp, r6, #2
        for( grandparent = parent->next;
 800beee:	f8d7 a130 	ldr.w	sl, [r7, #304]	; 0x130
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 800bef2:	ebab 0b09 	sub.w	fp, fp, r9
        for( grandparent = parent->next;
 800bef6:	e01e      	b.n	800bf36 <x509_crt_verify_child+0x14a>
        if( x509_crt_check_parent( parent, grandparent,
 800bef8:	fab6 f386 	clz	r3, r6
 800befc:	095b      	lsrs	r3, r3, #5
 800befe:	2200      	movs	r2, #0
 800bf00:	4651      	mov	r1, sl
 800bf02:	4638      	mov	r0, r7
 800bf04:	f7ff fe06 	bl	800bb14 <x509_crt_check_parent>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d038      	beq.n	800bf7e <x509_crt_verify_child+0x192>
         grandparent = grandparent->next )
 800bf0c:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
 800bf10:	e7e8      	b.n	800bee4 <x509_crt_verify_child+0xf8>
            if( grandparent->max_pathlen > 0 &&
 800bf12:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	dd01      	ble.n	800bf1e <x509_crt_verify_child+0x132>
 800bf1a:	455b      	cmp	r3, fp
 800bf1c:	db09      	blt.n	800bf32 <x509_crt_verify_child+0x146>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 800bf1e:	fab6 f386 	clz	r3, r6
 800bf22:	095b      	lsrs	r3, r3, #5
 800bf24:	2200      	movs	r2, #0
 800bf26:	4651      	mov	r1, sl
 800bf28:	4638      	mov	r0, r7
 800bf2a:	f7ff fdf3 	bl	800bb14 <x509_crt_check_parent>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d034      	beq.n	800bf9c <x509_crt_verify_child+0x1b0>
             grandparent = grandparent->next )
 800bf32:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
        for( grandparent = parent->next;
 800bf36:	f1ba 0f00 	cmp.w	sl, #0
 800bf3a:	d1ea      	bne.n	800bf12 <x509_crt_verify_child+0x126>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 800bf3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf42:	9302      	str	r3, [sp, #8]
 800bf44:	ab0d      	add	r3, sp, #52	; 0x34
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	f8cd 9000 	str.w	r9, [sp]
 800bf4c:	1c73      	adds	r3, r6, #1
 800bf4e:	4642      	mov	r2, r8
 800bf50:	9907      	ldr	r1, [sp, #28]
 800bf52:	e01f      	b.n	800bf94 <x509_crt_verify_child+0x1a8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 800bf54:	4629      	mov	r1, r5
 800bf56:	4623      	mov	r3, r4
 800bf58:	4632      	mov	r2, r6
 800bf5a:	9825      	ldr	r0, [sp, #148]	; 0x94
 800bf5c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800bf5e:	47a8      	blx	r5
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d031      	beq.n	800bfc8 <x509_crt_verify_child+0x1dc>
 800bf64:	e035      	b.n	800bfd2 <x509_crt_verify_child+0x1e6>
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 800bf66:	481c      	ldr	r0, [pc, #112]	; (800bfd8 <x509_crt_verify_child+0x1ec>)
 800bf68:	e033      	b.n	800bfd2 <x509_crt_verify_child+0x1e6>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	e772      	b.n	800be5a <x509_crt_verify_child+0x6e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	e777      	b.n	800be6e <x509_crt_verify_child+0x82>
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 800bf7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bf80:	9303      	str	r3, [sp, #12]
 800bf82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf84:	9302      	str	r3, [sp, #8]
 800bf86:	ab0d      	add	r3, sp, #52	; 0x34
 800bf88:	9301      	str	r3, [sp, #4]
 800bf8a:	f8cd 9000 	str.w	r9, [sp]
 800bf8e:	1c73      	adds	r3, r6, #1
 800bf90:	4642      	mov	r2, r8
 800bf92:	4651      	mov	r1, sl
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 800bf94:	4638      	mov	r0, r7
 800bf96:	f7ff fe3c 	bl	800bc12 <x509_crt_verify_top.isra.4>
 800bf9a:	e011      	b.n	800bfc0 <x509_crt_verify_child+0x1d4>
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 800bf9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bf9e:	9305      	str	r3, [sp, #20]
 800bfa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bfa2:	9304      	str	r3, [sp, #16]
 800bfa4:	ab0d      	add	r3, sp, #52	; 0x34
 800bfa6:	9303      	str	r3, [sp, #12]
 800bfa8:	1c73      	adds	r3, r6, #1
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfb0:	f8cd 8000 	str.w	r8, [sp]
 800bfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb6:	9a07      	ldr	r2, [sp, #28]
 800bfb8:	4651      	mov	r1, sl
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7ff ff16 	bl	800bdec <x509_crt_verify_child>
            if( ret != 0 )
 800bfc0:	b938      	cbnz	r0, 800bfd2 <x509_crt_verify_child+0x1e6>
    if( NULL != f_vrfy )
 800bfc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1c5      	bne.n	800bf54 <x509_crt_verify_child+0x168>
            return( ret );

    *flags |= parent_flags;
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	6023      	str	r3, [r4, #0]

    return( 0 );
 800bfd0:	2000      	movs	r0, #0
}
 800bfd2:	b017      	add	sp, #92	; 0x5c
 800bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd8:	ffffd000 	.word	0xffffd000

0800bfdc <mbedtls_x509_crt_info>:
{
 800bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	b08d      	sub	sp, #52	; 0x34
 800bfe4:	460f      	mov	r7, r1
 800bfe6:	4690      	mov	r8, r2
    if( NULL == crt )
 800bfe8:	461e      	mov	r6, r3
 800bfea:	b95b      	cbnz	r3, 800c004 <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 800bfec:	4a9a      	ldr	r2, [pc, #616]	; (800c258 <mbedtls_x509_crt_info+0x27c>)
 800bfee:	f002 fbeb 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800bff2:	2800      	cmp	r0, #0
 800bff4:	da01      	bge.n	800bffa <mbedtls_x509_crt_info+0x1e>
 800bff6:	4899      	ldr	r0, [pc, #612]	; (800c25c <mbedtls_x509_crt_info+0x280>)
 800bff8:	e001      	b.n	800bffe <mbedtls_x509_crt_info+0x22>
 800bffa:	4287      	cmp	r7, r0
 800bffc:	d9fb      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
}
 800bffe:	b00d      	add	sp, #52	; 0x34
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 800c004:	699b      	ldr	r3, [r3, #24]
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	4613      	mov	r3, r2
 800c00a:	4a95      	ldr	r2, [pc, #596]	; (800c260 <mbedtls_x509_crt_info+0x284>)
 800c00c:	f002 fbdc 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c010:	2800      	cmp	r0, #0
 800c012:	dbf0      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c014:	4287      	cmp	r7, r0
 800c016:	d9ee      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c018:	1a3c      	subs	r4, r7, r0
 800c01a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 800c01c:	4643      	mov	r3, r8
 800c01e:	4a91      	ldr	r2, [pc, #580]	; (800c264 <mbedtls_x509_crt_info+0x288>)
 800c020:	4621      	mov	r1, r4
 800c022:	4628      	mov	r0, r5
 800c024:	f002 fbd0 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c028:	2800      	cmp	r0, #0
 800c02a:	dbe4      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c02c:	4284      	cmp	r4, r0
 800c02e:	d9e2      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c030:	1a24      	subs	r4, r4, r0
 800c032:	4405      	add	r5, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 800c034:	f106 021c 	add.w	r2, r6, #28
 800c038:	4621      	mov	r1, r4
 800c03a:	4628      	mov	r0, r5
 800c03c:	f7ff fc72 	bl	800b924 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c040:	2800      	cmp	r0, #0
 800c042:	dbd8      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c044:	4284      	cmp	r4, r0
 800c046:	d9d6      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c048:	1a24      	subs	r4, r4, r0
 800c04a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 800c04c:	4643      	mov	r3, r8
 800c04e:	4a86      	ldr	r2, [pc, #536]	; (800c268 <mbedtls_x509_crt_info+0x28c>)
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	f002 fbb8 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c058:	2800      	cmp	r0, #0
 800c05a:	dbcc      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c05c:	4284      	cmp	r4, r0
 800c05e:	d9ca      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c060:	1a24      	subs	r4, r4, r0
 800c062:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 800c064:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 800c068:	4621      	mov	r1, r4
 800c06a:	4628      	mov	r0, r5
 800c06c:	f7ff fbd8 	bl	800b820 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c070:	2800      	cmp	r0, #0
 800c072:	dbc0      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c074:	4284      	cmp	r4, r0
 800c076:	d9be      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c078:	1a24      	subs	r4, r4, r0
 800c07a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 800c07c:	4643      	mov	r3, r8
 800c07e:	4a7b      	ldr	r2, [pc, #492]	; (800c26c <mbedtls_x509_crt_info+0x290>)
 800c080:	4621      	mov	r1, r4
 800c082:	4628      	mov	r0, r5
 800c084:	f002 fba0 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c088:	2800      	cmp	r0, #0
 800c08a:	dbb4      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c08c:	4284      	cmp	r4, r0
 800c08e:	d9b2      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c090:	1a24      	subs	r4, r4, r0
 800c092:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 800c094:	f106 026c 	add.w	r2, r6, #108	; 0x6c
 800c098:	4621      	mov	r1, r4
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7ff fbc0 	bl	800b820 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	dba8      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c0a4:	4284      	cmp	r4, r0
 800c0a6:	d9a6      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 800c0a8:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800c0b8:	9303      	str	r3, [sp, #12]
 800c0ba:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800c0be:	9302      	str	r3, [sp, #8]
 800c0c0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800c0ca:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c0cc:	1a24      	subs	r4, r4, r0
 800c0ce:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 800c0d0:	4643      	mov	r3, r8
 800c0d2:	4a67      	ldr	r2, [pc, #412]	; (800c270 <mbedtls_x509_crt_info+0x294>)
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f002 fb76 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	db8a      	blt.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c0e0:	4284      	cmp	r4, r0
 800c0e2:	d988      	bls.n	800bff6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 800c0e4:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800c106:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c108:	1a24      	subs	r4, r4, r0
 800c10a:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 800c10c:	4643      	mov	r3, r8
 800c10e:	4a59      	ldr	r2, [pc, #356]	; (800c274 <mbedtls_x509_crt_info+0x298>)
 800c110:	4621      	mov	r1, r4
 800c112:	4628      	mov	r0, r5
 800c114:	f002 fb58 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c118:	2800      	cmp	r0, #0
 800c11a:	f6ff af6c 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c11e:	4284      	cmp	r4, r0
 800c120:	f67f af69 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c124:	1a24      	subs	r4, r4, r0
 800c126:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 800c128:	4643      	mov	r3, r8
 800c12a:	4a53      	ldr	r2, [pc, #332]	; (800c278 <mbedtls_x509_crt_info+0x29c>)
 800c12c:	4621      	mov	r1, r4
 800c12e:	4628      	mov	r0, r5
 800c130:	f002 fb4a 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c134:	2800      	cmp	r0, #0
 800c136:	f6ff af5e 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c13a:	4284      	cmp	r4, r0
 800c13c:	f67f af5b 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 800c140:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
 800c144:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
 800c148:	9201      	str	r2, [sp, #4]
 800c14a:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
 800c14e:	9200      	str	r2, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c150:	1a24      	subs	r4, r4, r0
 800c152:	4405      	add	r5, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 800c154:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800c158:	4621      	mov	r1, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7ff fc2c 	bl	800b9b8 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c160:	f1b0 0900 	subs.w	r9, r0, #0
 800c164:	f6ff af47 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c168:	454c      	cmp	r4, r9
 800c16a:	f67f af44 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 800c16e:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
 800c172:	4658      	mov	r0, fp
 800c174:	f7f9 fdf4 	bl	8005d60 <mbedtls_pk_get_name>
 800c178:	f10d 0a1c 	add.w	sl, sp, #28
 800c17c:	4602      	mov	r2, r0
 800c17e:	2112      	movs	r1, #18
 800c180:	4650      	mov	r0, sl
 800c182:	f7ff fc41 	bl	800ba08 <mbedtls_x509_key_size_helper>
 800c186:	2800      	cmp	r0, #0
 800c188:	f47f af39 	bne.w	800bffe <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 800c18c:	4658      	mov	r0, fp
 800c18e:	f7f9 fdcd 	bl	8005d2c <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c192:	eba4 0409 	sub.w	r4, r4, r9
 800c196:	444d      	add	r5, r9
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 800c198:	9001      	str	r0, [sp, #4]
 800c19a:	f8cd a000 	str.w	sl, [sp]
 800c19e:	4643      	mov	r3, r8
 800c1a0:	4a36      	ldr	r2, [pc, #216]	; (800c27c <mbedtls_x509_crt_info+0x2a0>)
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f002 fb0f 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f6ff af23 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c1b0:	4284      	cmp	r4, r0
 800c1b2:	f67f af20 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 800c1b6:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800c1ba:	05db      	lsls	r3, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c1bc:	eba4 0400 	sub.w	r4, r4, r0
 800c1c0:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 800c1c2:	d528      	bpl.n	800c216 <mbedtls_x509_crt_info+0x23a>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 800c1c4:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 800c1c8:	4a2d      	ldr	r2, [pc, #180]	; (800c280 <mbedtls_x509_crt_info+0x2a4>)
 800c1ca:	4b2e      	ldr	r3, [pc, #184]	; (800c284 <mbedtls_x509_crt_info+0x2a8>)
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	bf08      	it	eq
 800c1d0:	4613      	moveq	r3, r2
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4a2c      	ldr	r2, [pc, #176]	; (800c288 <mbedtls_x509_crt_info+0x2ac>)
 800c1d6:	4643      	mov	r3, r8
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f002 faf4 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f6ff af08 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c1e6:	4284      	cmp	r4, r0
 800c1e8:	f67f af05 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
 800c1ec:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 800c1f0:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c1f2:	eba4 0400 	sub.w	r4, r4, r0
 800c1f6:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 800c1f8:	dd0d      	ble.n	800c216 <mbedtls_x509_crt_info+0x23a>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	4a23      	ldr	r2, [pc, #140]	; (800c28c <mbedtls_x509_crt_info+0x2b0>)
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	f002 fae1 	bl	800e7c8 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 800c206:	2800      	cmp	r0, #0
 800c208:	f6ff aef5 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c20c:	4284      	cmp	r4, r0
 800c20e:	f67f aef2 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c212:	1a24      	subs	r4, r4, r0
 800c214:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 800c216:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800c21a:	0698      	lsls	r0, r3, #26
 800c21c:	d550      	bpl.n	800c2c0 <mbedtls_x509_crt_info+0x2e4>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 800c21e:	4643      	mov	r3, r8
 800c220:	4a1b      	ldr	r2, [pc, #108]	; (800c290 <mbedtls_x509_crt_info+0x2b4>)
 800c222:	4621      	mov	r1, r4
 800c224:	4628      	mov	r0, r5
 800c226:	f002 facf 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f6ff aee3 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c230:	42a0      	cmp	r0, r4
 800c232:	f4bf aee0 	bcs.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c236:	1a24      	subs	r4, r4, r0
 800c238:	4405      	add	r5, r0
    size_t sep_len = 0;
 800c23a:	2100      	movs	r1, #0
    const char *sep = "";
 800c23c:	4815      	ldr	r0, [pc, #84]	; (800c294 <mbedtls_x509_crt_info+0x2b8>)
        sep = ", ";
 800c23e:	f8df e058 	ldr.w	lr, [pc, #88]	; 800c298 <mbedtls_x509_crt_info+0x2bc>
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 800c242:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
 800c246:	468c      	mov	ip, r1
        if( cur->buf.len + sep_len >= n )
 800c248:	6853      	ldr	r3, [r2, #4]
 800c24a:	440b      	add	r3, r1
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d325      	bcc.n	800c29c <mbedtls_x509_crt_info+0x2c0>
            *p = '\0';
 800c250:	f885 c000 	strb.w	ip, [r5]
 800c254:	e6cf      	b.n	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c256:	bf00      	nop
 800c258:	080141ba 	.word	0x080141ba
 800c25c:	ffffd680 	.word	0xffffd680
 800c260:	080141da 	.word	0x080141da
 800c264:	080141f4 	.word	0x080141f4
 800c268:	0801420b 	.word	0x0801420b
 800c26c:	08014223 	.word	0x08014223
 800c270:	0801423b 	.word	0x0801423b
 800c274:	08014270 	.word	0x08014270
 800c278:	080142a5 	.word	0x080142a5
 800c27c:	080142bd 	.word	0x080142bd
 800c280:	080141b4 	.word	0x080141b4
 800c284:	080141af 	.word	0x080141af
 800c288:	080142cf 	.word	0x080142cf
 800c28c:	080142ec 	.word	0x080142ec
 800c290:	080142fd 	.word	0x080142fd
 800c294:	0801236b 	.word	0x0801236b
 800c298:	08014186 	.word	0x08014186
        n -= cur->buf.len + sep_len;
 800c29c:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 800c29e:	2300      	movs	r3, #0
 800c2a0:	428b      	cmp	r3, r1
 800c2a2:	f040 819f 	bne.w	800c5e4 <mbedtls_x509_crt_info+0x608>
 800c2a6:	441d      	add	r5, r3
 800c2a8:	4628      	mov	r0, r5
        for( i = 0; i < cur->buf.len; i++ )
 800c2aa:	6853      	ldr	r3, [r2, #4]
 800c2ac:	1a29      	subs	r1, r5, r0
 800c2ae:	428b      	cmp	r3, r1
 800c2b0:	f200 819e 	bhi.w	800c5f0 <mbedtls_x509_crt_info+0x614>
        cur = cur->next;
 800c2b4:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 800c2b6:	2102      	movs	r1, #2
        sep = ", ";
 800c2b8:	4670      	mov	r0, lr
    while( cur != NULL )
 800c2ba:	2a00      	cmp	r2, #0
 800c2bc:	d1c4      	bne.n	800c248 <mbedtls_x509_crt_info+0x26c>
    *p = '\0';
 800c2be:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 800c2c0:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800c2c4:	03d9      	lsls	r1, r3, #15
 800c2c6:	f140 8099 	bpl.w	800c3fc <mbedtls_x509_crt_info+0x420>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 800c2ca:	4643      	mov	r3, r8
 800c2cc:	4acb      	ldr	r2, [pc, #812]	; (800c5fc <mbedtls_x509_crt_info+0x620>)
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	f002 fa79 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f6ff ae8d 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	f4bf ae8a 	bcs.w	800bff6 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 800c2e2:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 800c2e6:	4bc6      	ldr	r3, [pc, #792]	; (800c600 <mbedtls_x509_crt_info+0x624>)
 800c2e8:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c2ec:	eba4 0400 	sub.w	r4, r4, r0
 800c2f0:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 800c2f2:	d00d      	beq.n	800c310 <mbedtls_x509_crt_info+0x334>
 800c2f4:	4ac3      	ldr	r2, [pc, #780]	; (800c604 <mbedtls_x509_crt_info+0x628>)
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	f002 fa65 	bl	800e7c8 <sniprintf>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f6ff ae79 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c304:	4284      	cmp	r4, r0
 800c306:	f67f ae76 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c30a:	4bbf      	ldr	r3, [pc, #764]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c30c:	1a24      	subs	r4, r4, r0
 800c30e:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 800c310:	f019 0f40 	tst.w	r9, #64	; 0x40
 800c314:	d00d      	beq.n	800c332 <mbedtls_x509_crt_info+0x356>
 800c316:	4abd      	ldr	r2, [pc, #756]	; (800c60c <mbedtls_x509_crt_info+0x630>)
 800c318:	4621      	mov	r1, r4
 800c31a:	4628      	mov	r0, r5
 800c31c:	f002 fa54 	bl	800e7c8 <sniprintf>
 800c320:	2800      	cmp	r0, #0
 800c322:	f6ff ae68 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c326:	4284      	cmp	r4, r0
 800c328:	f67f ae65 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c32c:	4bb6      	ldr	r3, [pc, #728]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c32e:	1a24      	subs	r4, r4, r0
 800c330:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 800c332:	f019 0f20 	tst.w	r9, #32
 800c336:	d00d      	beq.n	800c354 <mbedtls_x509_crt_info+0x378>
 800c338:	4ab5      	ldr	r2, [pc, #724]	; (800c610 <mbedtls_x509_crt_info+0x634>)
 800c33a:	4621      	mov	r1, r4
 800c33c:	4628      	mov	r0, r5
 800c33e:	f002 fa43 	bl	800e7c8 <sniprintf>
 800c342:	2800      	cmp	r0, #0
 800c344:	f6ff ae57 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c348:	4284      	cmp	r4, r0
 800c34a:	f67f ae54 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c34e:	4bae      	ldr	r3, [pc, #696]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c350:	1a24      	subs	r4, r4, r0
 800c352:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 800c354:	f019 0f10 	tst.w	r9, #16
 800c358:	d00d      	beq.n	800c376 <mbedtls_x509_crt_info+0x39a>
 800c35a:	4aae      	ldr	r2, [pc, #696]	; (800c614 <mbedtls_x509_crt_info+0x638>)
 800c35c:	4621      	mov	r1, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	f002 fa32 	bl	800e7c8 <sniprintf>
 800c364:	2800      	cmp	r0, #0
 800c366:	f6ff ae46 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c36a:	4284      	cmp	r4, r0
 800c36c:	f67f ae43 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c370:	4ba5      	ldr	r3, [pc, #660]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c372:	1a24      	subs	r4, r4, r0
 800c374:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 800c376:	f019 0f08 	tst.w	r9, #8
 800c37a:	d00d      	beq.n	800c398 <mbedtls_x509_crt_info+0x3bc>
 800c37c:	4aa6      	ldr	r2, [pc, #664]	; (800c618 <mbedtls_x509_crt_info+0x63c>)
 800c37e:	4621      	mov	r1, r4
 800c380:	4628      	mov	r0, r5
 800c382:	f002 fa21 	bl	800e7c8 <sniprintf>
 800c386:	2800      	cmp	r0, #0
 800c388:	f6ff ae35 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c38c:	4284      	cmp	r4, r0
 800c38e:	f67f ae32 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c392:	4b9d      	ldr	r3, [pc, #628]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c394:	1a24      	subs	r4, r4, r0
 800c396:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 800c398:	f019 0f04 	tst.w	r9, #4
 800c39c:	d00d      	beq.n	800c3ba <mbedtls_x509_crt_info+0x3de>
 800c39e:	4a9f      	ldr	r2, [pc, #636]	; (800c61c <mbedtls_x509_crt_info+0x640>)
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f002 fa10 	bl	800e7c8 <sniprintf>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	f6ff ae24 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c3ae:	4284      	cmp	r4, r0
 800c3b0:	f67f ae21 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c3b4:	4b94      	ldr	r3, [pc, #592]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c3b6:	1a24      	subs	r4, r4, r0
 800c3b8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 800c3ba:	f019 0f02 	tst.w	r9, #2
 800c3be:	d00d      	beq.n	800c3dc <mbedtls_x509_crt_info+0x400>
 800c3c0:	4a97      	ldr	r2, [pc, #604]	; (800c620 <mbedtls_x509_crt_info+0x644>)
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	f002 f9ff 	bl	800e7c8 <sniprintf>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	f6ff ae13 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c3d0:	4284      	cmp	r4, r0
 800c3d2:	f67f ae10 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c3d6:	4b8c      	ldr	r3, [pc, #560]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c3d8:	1a24      	subs	r4, r4, r0
 800c3da:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 800c3dc:	f019 0f01 	tst.w	r9, #1
 800c3e0:	d00c      	beq.n	800c3fc <mbedtls_x509_crt_info+0x420>
 800c3e2:	4a90      	ldr	r2, [pc, #576]	; (800c624 <mbedtls_x509_crt_info+0x648>)
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f002 f9ee 	bl	800e7c8 <sniprintf>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f6ff ae02 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c3f2:	4284      	cmp	r4, r0
 800c3f4:	f67f adff 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c3f8:	1a24      	subs	r4, r4, r0
 800c3fa:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 800c3fc:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800c400:	075a      	lsls	r2, r3, #29
 800c402:	f140 80aa 	bpl.w	800c55a <mbedtls_x509_crt_info+0x57e>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 800c406:	4643      	mov	r3, r8
 800c408:	4a87      	ldr	r2, [pc, #540]	; (800c628 <mbedtls_x509_crt_info+0x64c>)
 800c40a:	4621      	mov	r1, r4
 800c40c:	4628      	mov	r0, r5
 800c40e:	f002 f9db 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c412:	2800      	cmp	r0, #0
 800c414:	f6ff adef 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c418:	42a0      	cmp	r0, r4
 800c41a:	f4bf adec 	bcs.w	800bff6 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 800c41e:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 800c422:	4b77      	ldr	r3, [pc, #476]	; (800c600 <mbedtls_x509_crt_info+0x624>)
 800c424:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c428:	eba4 0400 	sub.w	r4, r4, r0
 800c42c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 800c42e:	d00d      	beq.n	800c44c <mbedtls_x509_crt_info+0x470>
 800c430:	4a7e      	ldr	r2, [pc, #504]	; (800c62c <mbedtls_x509_crt_info+0x650>)
 800c432:	4621      	mov	r1, r4
 800c434:	4628      	mov	r0, r5
 800c436:	f002 f9c7 	bl	800e7c8 <sniprintf>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	f6ff addb 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c440:	4284      	cmp	r4, r0
 800c442:	f67f add8 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c446:	4b70      	ldr	r3, [pc, #448]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c448:	1a24      	subs	r4, r4, r0
 800c44a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 800c44c:	f019 0f40 	tst.w	r9, #64	; 0x40
 800c450:	d00d      	beq.n	800c46e <mbedtls_x509_crt_info+0x492>
 800c452:	4a77      	ldr	r2, [pc, #476]	; (800c630 <mbedtls_x509_crt_info+0x654>)
 800c454:	4621      	mov	r1, r4
 800c456:	4628      	mov	r0, r5
 800c458:	f002 f9b6 	bl	800e7c8 <sniprintf>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	f6ff adca 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c462:	4284      	cmp	r4, r0
 800c464:	f67f adc7 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c468:	4b67      	ldr	r3, [pc, #412]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c46a:	1a24      	subs	r4, r4, r0
 800c46c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 800c46e:	f019 0f20 	tst.w	r9, #32
 800c472:	d00d      	beq.n	800c490 <mbedtls_x509_crt_info+0x4b4>
 800c474:	4a6f      	ldr	r2, [pc, #444]	; (800c634 <mbedtls_x509_crt_info+0x658>)
 800c476:	4621      	mov	r1, r4
 800c478:	4628      	mov	r0, r5
 800c47a:	f002 f9a5 	bl	800e7c8 <sniprintf>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f6ff adb9 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c484:	4284      	cmp	r4, r0
 800c486:	f67f adb6 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c48a:	4b5f      	ldr	r3, [pc, #380]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c48c:	1a24      	subs	r4, r4, r0
 800c48e:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 800c490:	f019 0f10 	tst.w	r9, #16
 800c494:	d00d      	beq.n	800c4b2 <mbedtls_x509_crt_info+0x4d6>
 800c496:	4a68      	ldr	r2, [pc, #416]	; (800c638 <mbedtls_x509_crt_info+0x65c>)
 800c498:	4621      	mov	r1, r4
 800c49a:	4628      	mov	r0, r5
 800c49c:	f002 f994 	bl	800e7c8 <sniprintf>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f6ff ada8 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c4a6:	4284      	cmp	r4, r0
 800c4a8:	f67f ada5 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c4ac:	4b56      	ldr	r3, [pc, #344]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c4ae:	1a24      	subs	r4, r4, r0
 800c4b0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 800c4b2:	f019 0f08 	tst.w	r9, #8
 800c4b6:	d00d      	beq.n	800c4d4 <mbedtls_x509_crt_info+0x4f8>
 800c4b8:	4a60      	ldr	r2, [pc, #384]	; (800c63c <mbedtls_x509_crt_info+0x660>)
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f002 f983 	bl	800e7c8 <sniprintf>
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	f6ff ad97 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c4c8:	4284      	cmp	r4, r0
 800c4ca:	f67f ad94 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c4ce:	4b4e      	ldr	r3, [pc, #312]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c4d0:	1a24      	subs	r4, r4, r0
 800c4d2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 800c4d4:	f019 0f04 	tst.w	r9, #4
 800c4d8:	d00d      	beq.n	800c4f6 <mbedtls_x509_crt_info+0x51a>
 800c4da:	4a59      	ldr	r2, [pc, #356]	; (800c640 <mbedtls_x509_crt_info+0x664>)
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f002 f972 	bl	800e7c8 <sniprintf>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f6ff ad86 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c4ea:	4284      	cmp	r4, r0
 800c4ec:	f67f ad83 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c4f0:	4b45      	ldr	r3, [pc, #276]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c4f2:	1a24      	subs	r4, r4, r0
 800c4f4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 800c4f6:	f019 0f02 	tst.w	r9, #2
 800c4fa:	d00d      	beq.n	800c518 <mbedtls_x509_crt_info+0x53c>
 800c4fc:	4a51      	ldr	r2, [pc, #324]	; (800c644 <mbedtls_x509_crt_info+0x668>)
 800c4fe:	4621      	mov	r1, r4
 800c500:	4628      	mov	r0, r5
 800c502:	f002 f961 	bl	800e7c8 <sniprintf>
 800c506:	2800      	cmp	r0, #0
 800c508:	f6ff ad75 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c50c:	4284      	cmp	r4, r0
 800c50e:	f67f ad72 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c512:	4b3d      	ldr	r3, [pc, #244]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c514:	1a24      	subs	r4, r4, r0
 800c516:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 800c518:	f019 0f01 	tst.w	r9, #1
 800c51c:	d00d      	beq.n	800c53a <mbedtls_x509_crt_info+0x55e>
 800c51e:	4a4a      	ldr	r2, [pc, #296]	; (800c648 <mbedtls_x509_crt_info+0x66c>)
 800c520:	4621      	mov	r1, r4
 800c522:	4628      	mov	r0, r5
 800c524:	f002 f950 	bl	800e7c8 <sniprintf>
 800c528:	2800      	cmp	r0, #0
 800c52a:	f6ff ad64 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c52e:	4284      	cmp	r4, r0
 800c530:	f67f ad61 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c534:	4b34      	ldr	r3, [pc, #208]	; (800c608 <mbedtls_x509_crt_info+0x62c>)
 800c536:	1a24      	subs	r4, r4, r0
 800c538:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 800c53a:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800c53e:	d00c      	beq.n	800c55a <mbedtls_x509_crt_info+0x57e>
 800c540:	4a42      	ldr	r2, [pc, #264]	; (800c64c <mbedtls_x509_crt_info+0x670>)
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f002 f93f 	bl	800e7c8 <sniprintf>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	f6ff ad53 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c550:	4284      	cmp	r4, r0
 800c552:	f67f ad50 	bls.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c556:	1a24      	subs	r4, r4, r0
 800c558:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 800c55a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800c55e:	051b      	lsls	r3, r3, #20
 800c560:	d532      	bpl.n	800c5c8 <mbedtls_x509_crt_info+0x5ec>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 800c562:	4643      	mov	r3, r8
 800c564:	4a3a      	ldr	r2, [pc, #232]	; (800c650 <mbedtls_x509_crt_info+0x674>)
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	f002 f92d 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c56e:	2800      	cmp	r0, #0
 800c570:	f6ff ad41 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c574:	42a0      	cmp	r0, r4
 800c576:	f4bf ad3e 	bcs.w	800bff6 <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
 800c57a:	f8df b084 	ldr.w	fp, [pc, #132]	; 800c600 <mbedtls_x509_crt_info+0x624>
            desc = "???";
 800c57e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800c658 <mbedtls_x509_crt_info+0x67c>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 800c582:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c65c <mbedtls_x509_crt_info+0x680>
        sep = ", ";
 800c586:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800c608 <mbedtls_x509_crt_info+0x62c>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c58a:	1a24      	subs	r4, r4, r0
 800c58c:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 800c58e:	f506 7684 	add.w	r6, r6, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 800c592:	a906      	add	r1, sp, #24
 800c594:	4630      	mov	r0, r6
 800c596:	f7f9 f9d5 	bl	8005944 <mbedtls_oid_get_extended_key_usage>
 800c59a:	b108      	cbz	r0, 800c5a0 <mbedtls_x509_crt_info+0x5c4>
            desc = "???";
 800c59c:	f8cd 9018 	str.w	r9, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 800c5a0:	9b06      	ldr	r3, [sp, #24]
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	4652      	mov	r2, sl
 800c5a6:	465b      	mov	r3, fp
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f002 f90c 	bl	800e7c8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	f6ff ad20 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c5b6:	42a0      	cmp	r0, r4
 800c5b8:	f4bf ad1d 	bcs.w	800bff6 <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
 800c5bc:	68f6      	ldr	r6, [r6, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 800c5be:	1a24      	subs	r4, r4, r0
 800c5c0:	4405      	add	r5, r0
        sep = ", ";
 800c5c2:	46c3      	mov	fp, r8
    while( cur != NULL )
 800c5c4:	2e00      	cmp	r6, #0
 800c5c6:	d1e4      	bne.n	800c592 <mbedtls_x509_crt_info+0x5b6>
    ret = mbedtls_snprintf( p, n, "\n" );
 800c5c8:	4a22      	ldr	r2, [pc, #136]	; (800c654 <mbedtls_x509_crt_info+0x678>)
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f002 f8fb 	bl	800e7c8 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f6ff ad0f 	blt.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c5d8:	42a0      	cmp	r0, r4
 800c5da:	f4bf ad0c 	bcs.w	800bff6 <mbedtls_x509_crt_info+0x1a>
 800c5de:	1a20      	subs	r0, r4, r0
    return( (int) ( size - n ) );
 800c5e0:	1a38      	subs	r0, r7, r0
 800c5e2:	e50c      	b.n	800bffe <mbedtls_x509_crt_info+0x22>
            *p++ = sep[i];
 800c5e4:	f810 9003 	ldrb.w	r9, [r0, r3]
 800c5e8:	f805 9003 	strb.w	r9, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	e657      	b.n	800c2a0 <mbedtls_x509_crt_info+0x2c4>
            *p++ = cur->buf.p[i];
 800c5f0:	6893      	ldr	r3, [r2, #8]
 800c5f2:	5c5b      	ldrb	r3, [r3, r1]
 800c5f4:	f805 3b01 	strb.w	r3, [r5], #1
 800c5f8:	e657      	b.n	800c2aa <mbedtls_x509_crt_info+0x2ce>
 800c5fa:	bf00      	nop
 800c5fc:	08014315 	.word	0x08014315
 800c600:	0801236b 	.word	0x0801236b
 800c604:	0801432d 	.word	0x0801432d
 800c608:	08014186 	.word	0x08014186
 800c60c:	0801433a 	.word	0x0801433a
 800c610:	08014347 	.word	0x08014347
 800c614:	0801434f 	.word	0x0801434f
 800c618:	08014360 	.word	0x08014360
 800c61c:	0801436b 	.word	0x0801436b
 800c620:	08014374 	.word	0x08014374
 800c624:	0801437f 	.word	0x0801437f
 800c628:	08014393 	.word	0x08014393
 800c62c:	080143ab 	.word	0x080143ab
 800c630:	080143bf 	.word	0x080143bf
 800c634:	080143d1 	.word	0x080143d1
 800c638:	080143e4 	.word	0x080143e4
 800c63c:	080143f8 	.word	0x080143f8
 800c640:	08014408 	.word	0x08014408
 800c644:	08014418 	.word	0x08014418
 800c648:	08014423 	.word	0x08014423
 800c64c:	08014433 	.word	0x08014433
 800c650:	08014443 	.word	0x08014443
 800c654:	08012430 	.word	0x08012430
 800c658:	080141ab 	.word	0x080141ab
 800c65c:	080100f9 	.word	0x080100f9

0800c660 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	b089      	sub	sp, #36	; 0x24
 800c666:	4605      	mov	r5, r0
 800c668:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c66a:	9206      	str	r2, [sp, #24]
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 800c66c:	2200      	movs	r2, #0
{
 800c66e:	468a      	mov	sl, r1
 800c670:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    *flags = 0;
 800c674:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 800c676:	461f      	mov	r7, r3
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 8090 	beq.w	800c79e <mbedtls_x509_crt_verify_with_profile+0x13e>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 800c67e:	f1b8 0f00 	cmp.w	r8, #0
 800c682:	d051      	beq.n	800c728 <mbedtls_x509_crt_verify_with_profile+0xc8>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 800c684:	4640      	mov	r0, r8
 800c686:	f7f3 fdab 	bl	80001e0 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 800c68a:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
 800c68e:	069b      	lsls	r3, r3, #26
        cn_len = strlen( cn );
 800c690:	4681      	mov	r9, r0
        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 800c692:	d428      	bmi.n	800c6e6 <mbedtls_x509_crt_verify_with_profile+0x86>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 800c694:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c818 <mbedtls_x509_crt_verify_with_profile+0x1b8>
        name = &crt->subject;
 800c698:	f105 066c 	add.w	r6, r5, #108	; 0x6c
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 800c69c:	6872      	ldr	r2, [r6, #4]
 800c69e:	2a03      	cmp	r2, #3
 800c6a0:	d11d      	bne.n	800c6de <mbedtls_x509_crt_verify_with_profile+0x7e>
 800c6a2:	68b1      	ldr	r1, [r6, #8]
 800c6a4:	4858      	ldr	r0, [pc, #352]	; (800c808 <mbedtls_x509_crt_verify_with_profile+0x1a8>)
 800c6a6:	f001 feab 	bl	800e400 <memcmp>
 800c6aa:	b9c0      	cbnz	r0, 800c6de <mbedtls_x509_crt_verify_with_profile+0x7e>
                    if( name->val.len == cn_len &&
 800c6ac:	6933      	ldr	r3, [r6, #16]
 800c6ae:	4599      	cmp	r9, r3
 800c6b0:	d107      	bne.n	800c6c2 <mbedtls_x509_crt_verify_with_profile+0x62>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 800c6b2:	464a      	mov	r2, r9
 800c6b4:	4641      	mov	r1, r8
 800c6b6:	6970      	ldr	r0, [r6, #20]
 800c6b8:	9307      	str	r3, [sp, #28]
 800c6ba:	f7ff f9c3 	bl	800ba44 <x509_memcasecmp>
                    if( name->val.len == cn_len &&
 800c6be:	9b07      	ldr	r3, [sp, #28]
 800c6c0:	b390      	cbz	r0, 800c728 <mbedtls_x509_crt_verify_with_profile+0xc8>
                    if( name->val.len > 2 &&
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d90b      	bls.n	800c6de <mbedtls_x509_crt_verify_with_profile+0x7e>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	4659      	mov	r1, fp
 800c6ca:	6970      	ldr	r0, [r6, #20]
 800c6cc:	f001 fe98 	bl	800e400 <memcmp>
                    if( name->val.len > 2 &&
 800c6d0:	b928      	cbnz	r0, 800c6de <mbedtls_x509_crt_verify_with_profile+0x7e>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 800c6d2:	f106 010c 	add.w	r1, r6, #12
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	f7ff fa40 	bl	800bb5c <x509_check_wildcard>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 800c6dc:	b320      	cbz	r0, 800c728 <mbedtls_x509_crt_verify_with_profile+0xc8>
                        break;
                }

                name = name->next;
 800c6de:	69b6      	ldr	r6, [r6, #24]
            while( name != NULL )
 800c6e0:	2e00      	cmp	r6, #0
 800c6e2:	d1db      	bne.n	800c69c <mbedtls_x509_crt_verify_with_profile+0x3c>
 800c6e4:	e01e      	b.n	800c724 <mbedtls_x509_crt_verify_with_profile+0xc4>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 800c6e6:	f8df b130 	ldr.w	fp, [pc, #304]	; 800c818 <mbedtls_x509_crt_verify_with_profile+0x1b8>
            cur = &crt->subject_alt_names;
 800c6ea:	f105 06e8 	add.w	r6, r5, #232	; 0xe8
                if( cur->buf.len == cn_len &&
 800c6ee:	6873      	ldr	r3, [r6, #4]
 800c6f0:	4599      	cmp	r9, r3
 800c6f2:	d107      	bne.n	800c704 <mbedtls_x509_crt_verify_with_profile+0xa4>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 800c6f4:	464a      	mov	r2, r9
 800c6f6:	68b1      	ldr	r1, [r6, #8]
 800c6f8:	9307      	str	r3, [sp, #28]
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f7ff f9a2 	bl	800ba44 <x509_memcasecmp>
                if( cur->buf.len == cn_len &&
 800c700:	9b07      	ldr	r3, [sp, #28]
 800c702:	b188      	cbz	r0, 800c728 <mbedtls_x509_crt_verify_with_profile+0xc8>
                if( cur->buf.len > 2 &&
 800c704:	2b02      	cmp	r3, #2
 800c706:	d90a      	bls.n	800c71e <mbedtls_x509_crt_verify_with_profile+0xbe>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 800c708:	2202      	movs	r2, #2
 800c70a:	4659      	mov	r1, fp
 800c70c:	68b0      	ldr	r0, [r6, #8]
 800c70e:	f001 fe77 	bl	800e400 <memcmp>
                if( cur->buf.len > 2 &&
 800c712:	b920      	cbnz	r0, 800c71e <mbedtls_x509_crt_verify_with_profile+0xbe>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 800c714:	4631      	mov	r1, r6
 800c716:	4640      	mov	r0, r8
 800c718:	f7ff fa20 	bl	800bb5c <x509_check_wildcard>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 800c71c:	b120      	cbz	r0, 800c728 <mbedtls_x509_crt_verify_with_profile+0xc8>
                cur = cur->next;
 800c71e:	68f6      	ldr	r6, [r6, #12]
            while( cur != NULL )
 800c720:	2e00      	cmp	r6, #0
 800c722:	d1e4      	bne.n	800c6ee <mbedtls_x509_crt_verify_with_profile+0x8e>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 800c724:	2304      	movs	r3, #4
 800c726:	6023      	str	r3, [r4, #0]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 800c728:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7f9 fb21 	bl	8005d74 <mbedtls_pk_get_type>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800c732:	2301      	movs	r3, #1
 800c734:	1e42      	subs	r2, r0, #1
 800c736:	4093      	lsls	r3, r2
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	4213      	tst	r3, r2
    pk_type = mbedtls_pk_get_type( &crt->pk );
 800c73c:	4601      	mov	r1, r0
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800c73e:	d038      	beq.n	800c7b2 <mbedtls_x509_crt_verify_with_profile+0x152>

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 800c740:	4632      	mov	r2, r6
 800c742:	f107 000c 	add.w	r0, r7, #12
 800c746:	f7ff fa51 	bl	800bbec <x509_profile_check_key.isra.3>
 800c74a:	b118      	cbz	r0, 800c754 <mbedtls_x509_crt_verify_with_profile+0xf4>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c752:	6023      	str	r3, [r4, #0]
{
 800c754:	4656      	mov	r6, sl

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 800c756:	b916      	cbnz	r6, 800c75e <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 800c758:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 800c75c:	e013      	b.n	800c786 <mbedtls_x509_crt_verify_with_profile+0x126>
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 800c75e:	2301      	movs	r3, #1
 800c760:	2200      	movs	r2, #0
 800c762:	4631      	mov	r1, r6
 800c764:	4628      	mov	r0, r5
 800c766:	f7ff f9d5 	bl	800bb14 <x509_crt_check_parent>
 800c76a:	4603      	mov	r3, r0
 800c76c:	b330      	cbz	r0, 800c7bc <mbedtls_x509_crt_verify_with_profile+0x15c>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 800c76e:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800c772:	e7f0      	b.n	800c756 <mbedtls_x509_crt_verify_with_profile+0xf6>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 800c774:	2301      	movs	r3, #1
 800c776:	2200      	movs	r2, #0
 800c778:	4631      	mov	r1, r6
 800c77a:	4628      	mov	r0, r5
 800c77c:	f7ff f9ca 	bl	800bb14 <x509_crt_check_parent>
 800c780:	b340      	cbz	r0, 800c7d4 <mbedtls_x509_crt_verify_with_profile+0x174>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 800c782:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800c786:	2e00      	cmp	r6, #0
 800c788:	d1f4      	bne.n	800c774 <mbedtls_x509_crt_verify_with_profile+0x114>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 800c78a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c790:	9302      	str	r3, [sp, #8]
 800c792:	9401      	str	r4, [sp, #4]
 800c794:	9600      	str	r6, [sp, #0]
 800c796:	4633      	mov	r3, r6
 800c798:	463a      	mov	r2, r7
 800c79a:	4651      	mov	r1, sl
 800c79c:	e016      	b.n	800c7cc <mbedtls_x509_crt_verify_with_profile+0x16c>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 800c79e:	481b      	ldr	r0, [pc, #108]	; (800c80c <mbedtls_x509_crt_verify_with_profile+0x1ac>)
 800c7a0:	e02b      	b.n	800c7fa <mbedtls_x509_crt_verify_with_profile+0x19a>
exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 800c7a2:	481b      	ldr	r0, [pc, #108]	; (800c810 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 800c7a4:	e029      	b.n	800c7fa <mbedtls_x509_crt_verify_with_profile+0x19a>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 800c7a6:	6822      	ldr	r2, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 800c7a8:	4b1a      	ldr	r3, [pc, #104]	; (800c814 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 800c7aa:	2a00      	cmp	r2, #0
 800c7ac:	bf18      	it	ne
 800c7ae:	4618      	movne	r0, r3
 800c7b0:	e026      	b.n	800c800 <mbedtls_x509_crt_verify_with_profile+0x1a0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	e7c1      	b.n	800c740 <mbedtls_x509_crt_verify_with_profile+0xe0>
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 800c7bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c7be:	9203      	str	r2, [sp, #12]
 800c7c0:	e88d 0018 	stmia.w	sp, {r3, r4}
 800c7c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7c6:	9202      	str	r2, [sp, #8]
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	463a      	mov	r2, r7
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f7ff fa20 	bl	800bc12 <x509_crt_verify_top.isra.4>
 800c7d2:	e00d      	b.n	800c7f0 <mbedtls_x509_crt_verify_with_profile+0x190>
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 800c7d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7d6:	9305      	str	r3, [sp, #20]
 800c7d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	9001      	str	r0, [sp, #4]
 800c7e0:	9403      	str	r4, [sp, #12]
 800c7e2:	9700      	str	r7, [sp, #0]
 800c7e4:	9b06      	ldr	r3, [sp, #24]
 800c7e6:	4652      	mov	r2, sl
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f7ff fafe 	bl	800bdec <x509_crt_verify_child>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 800c7f0:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 800c7f4:	d0d5      	beq.n	800c7a2 <mbedtls_x509_crt_verify_with_profile+0x142>
    if( ret != 0 )
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0d5      	beq.n	800c7a6 <mbedtls_x509_crt_verify_with_profile+0x146>
        *flags = (uint32_t) -1;
 800c7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fe:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800c800:	b009      	add	sp, #36	; 0x24
 800c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c806:	bf00      	nop
 800c808:	08012624 	.word	0x08012624
 800c80c:	ffffd800 	.word	0xffffd800
 800c810:	ffffd000 	.word	0xffffd000
 800c814:	ffffd900 	.word	0xffffd900
 800c818:	080144b4 	.word	0x080144b4

0800c81c <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 800c81c:	f44f 729a 	mov.w	r2, #308	; 0x134
 800c820:	2100      	movs	r1, #0
 800c822:	f001 be21 	b.w	800e468 <memset>

0800c826 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 800c826:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 800c828:	4605      	mov	r5, r0
 800c82a:	b368      	cbz	r0, 800c888 <mbedtls_x509_crt_free+0x62>
 800c82c:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 800c82e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800c832:	f7f9 f99a 	bl	8005b6a <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 800c836:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 800c838:	bb3a      	cbnz	r2, 800c88a <mbedtls_x509_crt_free+0x64>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 800c83a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 800c83e:	bb72      	cbnz	r2, 800c89e <mbedtls_x509_crt_free+0x78>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 800c840:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 800c844:	2a00      	cmp	r2, #0
 800c846:	d134      	bne.n	800c8b2 <mbedtls_x509_crt_free+0x8c>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 800c848:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	d13a      	bne.n	800c8c6 <mbedtls_x509_crt_free+0xa0>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 800c850:	68a0      	ldr	r0, [r4, #8]
 800c852:	b128      	cbz	r0, 800c860 <mbedtls_x509_crt_free+0x3a>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 800c854:	6861      	ldr	r1, [r4, #4]
 800c856:	f7ff f8ed 	bl	800ba34 <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 800c85a:	68a0      	ldr	r0, [r4, #8]
 800c85c:	f001 fdc8 	bl	800e3f0 <free>
        }

        cert_cur = cert_cur->next;
 800c860:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 800c864:	2c00      	cmp	r4, #0
 800c866:	d1e2      	bne.n	800c82e <mbedtls_x509_crt_free+0x8>
 800c868:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 800c86a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800c86e:	4610      	mov	r0, r2
        cert_cur = cert_cur->next;
 800c870:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130
        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 800c874:	f7ff f8de 	bl	800ba34 <mbedtls_zeroize>
        if( cert_prv != crt )
 800c878:	42aa      	cmp	r2, r5
 800c87a:	d002      	beq.n	800c882 <mbedtls_x509_crt_free+0x5c>
            mbedtls_free( cert_prv );
 800c87c:	4610      	mov	r0, r2
 800c87e:	f001 fdb7 	bl	800e3f0 <free>
    }
    while( cert_cur != NULL );
 800c882:	4622      	mov	r2, r4
 800c884:	2c00      	cmp	r4, #0
 800c886:	d1f0      	bne.n	800c86a <mbedtls_x509_crt_free+0x44>
 800c888:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800c88a:	4610      	mov	r0, r2
 800c88c:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 800c88e:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800c890:	f7ff f8d0 	bl	800ba34 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 800c894:	4610      	mov	r0, r2
 800c896:	f001 fdab 	bl	800e3f0 <free>
            name_cur = name_cur->next;
 800c89a:	4632      	mov	r2, r6
 800c89c:	e7cc      	b.n	800c838 <mbedtls_x509_crt_free+0x12>
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800c89e:	4610      	mov	r0, r2
 800c8a0:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 800c8a2:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800c8a4:	f7ff f8c6 	bl	800ba34 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	f001 fda1 	bl	800e3f0 <free>
            name_cur = name_cur->next;
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	e7c5      	b.n	800c83e <mbedtls_x509_crt_free+0x18>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 800c8b6:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800c8b8:	f7ff f8bc 	bl	800ba34 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 800c8bc:	4610      	mov	r0, r2
 800c8be:	f001 fd97 	bl	800e3f0 <free>
            seq_cur = seq_cur->next;
 800c8c2:	4632      	mov	r2, r6
 800c8c4:	e7be      	b.n	800c844 <mbedtls_x509_crt_free+0x1e>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 800c8ca:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800c8cc:	f7ff f8b2 	bl	800ba34 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f001 fd8d 	bl	800e3f0 <free>
            seq_cur = seq_cur->next;
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	e7b8      	b.n	800c84c <mbedtls_x509_crt_free+0x26>
	...

0800c8dc <mbedtls_x509_crt_parse_der>:
{
 800c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	b09b      	sub	sp, #108	; 0x6c
 800c8e4:	4615      	mov	r5, r2
    if( crt == NULL || buf == NULL )
 800c8e6:	4682      	mov	sl, r0
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	f000 82fc 	beq.w	800cee6 <mbedtls_x509_crt_parse_der+0x60a>
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	f000 82f9 	beq.w	800cee6 <mbedtls_x509_crt_parse_der+0x60a>
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	f04f 0900 	mov.w	r9, #0
    while( crt->version != 0 && crt->next != NULL )
 800c8fa:	69a3      	ldr	r3, [r4, #24]
 800c8fc:	b1a3      	cbz	r3, 800c928 <mbedtls_x509_crt_parse_der+0x4c>
 800c8fe:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800c902:	46a1      	mov	r9, r4
 800c904:	b94b      	cbnz	r3, 800c91a <mbedtls_x509_crt_parse_der+0x3e>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 800c906:	f44f 719a 	mov.w	r1, #308	; 0x134
 800c90a:	2001      	movs	r0, #1
 800c90c:	f001 fd36 	bl	800e37c <calloc>
 800c910:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 800c914:	b918      	cbnz	r0, 800c91e <mbedtls_x509_crt_parse_der+0x42>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 800c916:	4dac      	ldr	r5, [pc, #688]	; (800cbc8 <mbedtls_x509_crt_parse_der+0x2ec>)
 800c918:	e2e1      	b.n	800cede <mbedtls_x509_crt_parse_der+0x602>
 800c91a:	461c      	mov	r4, r3
 800c91c:	e7ed      	b.n	800c8fa <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 800c91e:	f7ff ff7d 	bl	800c81c <mbedtls_x509_crt_init>
        crt = crt->next;
 800c922:	46a1      	mov	r9, r4
 800c924:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 800c928:	2300      	movs	r3, #0
 800c92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c92c:	930c      	str	r3, [sp, #48]	; 0x30
 800c92e:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 800c930:	930e      	str	r3, [sp, #56]	; 0x38
 800c932:	930f      	str	r3, [sp, #60]	; 0x3c
 800c934:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 800c936:	9311      	str	r3, [sp, #68]	; 0x44
 800c938:	9312      	str	r3, [sp, #72]	; 0x48
 800c93a:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 800c93c:	2c00      	cmp	r4, #0
 800c93e:	f000 82d6 	beq.w	800ceee <mbedtls_x509_crt_parse_der+0x612>
    len = buflen;
 800c942:	ae1a      	add	r6, sp, #104	; 0x68
    end = p + len;
 800c944:	eb07 0805 	add.w	r8, r7, r5
    len = buflen;
 800c948:	f846 5d54 	str.w	r5, [r6, #-84]!
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800c94c:	2330      	movs	r3, #48	; 0x30
 800c94e:	4632      	mov	r2, r6
 800c950:	4641      	mov	r1, r8
 800c952:	a806      	add	r0, sp, #24
    p = (unsigned char*) buf;
 800c954:	9706      	str	r7, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800c956:	f7f5 fd5a 	bl	800240e <mbedtls_asn1_get_tag>
 800c95a:	b180      	cbz	r0, 800c97e <mbedtls_x509_crt_parse_der+0xa2>
        mbedtls_x509_crt_free( crt );
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff ff62 	bl	800c826 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 800c962:	4d9a      	ldr	r5, [pc, #616]	; (800cbcc <mbedtls_x509_crt_parse_der+0x2f0>)
        if( prev )
 800c964:	f1b9 0f00 	cmp.w	r9, #0
 800c968:	d002      	beq.n	800c970 <mbedtls_x509_crt_parse_der+0x94>
            prev->next = NULL;
 800c96a:	2300      	movs	r3, #0
 800c96c:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130
        if( crt != chain )
 800c970:	4554      	cmp	r4, sl
 800c972:	f000 82b4 	beq.w	800cede <mbedtls_x509_crt_parse_der+0x602>
            mbedtls_free( crt );
 800c976:	4620      	mov	r0, r4
 800c978:	f001 fd3a 	bl	800e3f0 <free>
 800c97c:	e2af      	b.n	800cede <mbedtls_x509_crt_parse_der+0x602>
    if( len > (size_t) ( end - p ) )
 800c97e:	9d06      	ldr	r5, [sp, #24]
 800c980:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c984:	eba8 0805 	sub.w	r8, r8, r5
 800c988:	45d8      	cmp	r8, fp
 800c98a:	d204      	bcs.n	800c996 <mbedtls_x509_crt_parse_der+0xba>
        mbedtls_x509_crt_free( crt );
 800c98c:	4620      	mov	r0, r4
 800c98e:	f7ff ff4a 	bl	800c826 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 800c992:	4d8f      	ldr	r5, [pc, #572]	; (800cbd0 <mbedtls_x509_crt_parse_der+0x2f4>)
 800c994:	e7e6      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
    crt_end = p + len;
 800c996:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
 800c998:	1bed      	subs	r5, r5, r7
 800c99a:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 800c99c:	4629      	mov	r1, r5
 800c99e:	2001      	movs	r0, #1
 800c9a0:	f001 fcec 	bl	800e37c <calloc>
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	9006      	str	r0, [sp, #24]
 800c9a8:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	f000 82b0 	beq.w	800cf10 <mbedtls_x509_crt_parse_der+0x634>
    memcpy( p, buf, crt->raw.len );
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	f001 fd33 	bl	800e41e <memcpy>
    p += crt->raw.len - len;
 800c9b8:	eba5 030b 	sub.w	r3, r5, fp
 800c9bc:	4443      	add	r3, r8
    end = crt_end = p + len;
 800c9be:	eb08 0705 	add.w	r7, r8, r5
    p += crt->raw.len - len;
 800c9c2:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 800c9c4:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	2330      	movs	r3, #48	; 0x30
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	a806      	add	r0, sp, #24
 800c9ce:	f7f5 fd1e 	bl	800240e <mbedtls_asn1_get_tag>
 800c9d2:	4680      	mov	r8, r0
 800c9d4:	b140      	cbz	r0, 800c9e8 <mbedtls_x509_crt_parse_der+0x10c>
        mbedtls_x509_crt_free( crt );
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7ff ff25 	bl	800c826 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 800c9dc:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	f000 827c 	beq.w	800cede <mbedtls_x509_crt_parse_der+0x602>
 800c9e6:	e7bd      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
    end = p + len;
 800c9e8:	9b05      	ldr	r3, [sp, #20]
 800c9ea:	9e06      	ldr	r6, [sp, #24]
 800c9ec:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 800c9ee:	6963      	ldr	r3, [r4, #20]
 800c9f0:	1af3      	subs	r3, r6, r3
 800c9f2:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800c9f4:	aa17      	add	r2, sp, #92	; 0x5c
 800c9f6:	23a0      	movs	r3, #160	; 0xa0
 800c9f8:	4631      	mov	r1, r6
 800c9fa:	a806      	add	r0, sp, #24
 800c9fc:	f7f5 fd07 	bl	800240e <mbedtls_asn1_get_tag>
 800ca00:	4605      	mov	r5, r0
 800ca02:	b1f0      	cbz	r0, 800ca42 <mbedtls_x509_crt_parse_der+0x166>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800ca04:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800ca08:	d129      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
            *ver = 0;
 800ca0a:	f8c4 8018 	str.w	r8, [r4, #24]
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 800ca0e:	f104 021c 	add.w	r2, r4, #28
 800ca12:	4631      	mov	r1, r6
 800ca14:	a806      	add	r0, sp, #24
 800ca16:	f7fe fd3d 	bl	800b494 <mbedtls_x509_get_serial>
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	b9f8      	cbnz	r0, 800ca5e <mbedtls_x509_crt_parse_der+0x182>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 800ca1e:	f104 0828 	add.w	r8, r4, #40	; 0x28
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 800ca22:	ab0b      	add	r3, sp, #44	; 0x2c
 800ca24:	4642      	mov	r2, r8
 800ca26:	4631      	mov	r1, r6
 800ca28:	a806      	add	r0, sp, #24
 800ca2a:	f7fe fd5b 	bl	800b4e4 <mbedtls_x509_get_alg>
 800ca2e:	4605      	mov	r5, r0
 800ca30:	b9a8      	cbnz	r0, 800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version < 0 || crt->version > 2 )
 800ca32:	69a3      	ldr	r3, [r4, #24]
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d91b      	bls.n	800ca70 <mbedtls_x509_crt_parse_der+0x194>
        mbedtls_x509_crt_free( crt );
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7ff fef4 	bl	800c826 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 800ca3e:	4d65      	ldr	r5, [pc, #404]	; (800cbd4 <mbedtls_x509_crt_parse_der+0x2f8>)
 800ca40:	e790      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
    end = *p + len;
 800ca42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca44:	9b06      	ldr	r3, [sp, #24]
 800ca46:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 800ca4a:	4641      	mov	r1, r8
 800ca4c:	f104 0218 	add.w	r2, r4, #24
 800ca50:	a806      	add	r0, sp, #24
 800ca52:	f7f5 fd08 	bl	8002466 <mbedtls_asn1_get_int>
 800ca56:	b130      	cbz	r0, 800ca66 <mbedtls_x509_crt_parse_der+0x18a>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 800ca58:	f5b0 5508 	subs.w	r5, r0, #8704	; 0x2200
 800ca5c:	d0d7      	beq.n	800ca0e <mbedtls_x509_crt_parse_der+0x132>
        mbedtls_x509_crt_free( crt );
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7ff fee1 	bl	800c826 <mbedtls_x509_crt_free>
 800ca64:	e77e      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
    if( *p != end )
 800ca66:	9b06      	ldr	r3, [sp, #24]
 800ca68:	4598      	cmp	r8, r3
 800ca6a:	d0d0      	beq.n	800ca0e <mbedtls_x509_crt_parse_der+0x132>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 800ca6c:	4d5a      	ldr	r5, [pc, #360]	; (800cbd8 <mbedtls_x509_crt_parse_der+0x2fc>)
 800ca6e:	e7f6      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    crt->version++;
 800ca70:	3301      	adds	r3, #1
 800ca72:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 800ca74:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	f504 7294 	add.w	r2, r4, #296	; 0x128
 800ca7e:	f204 1329 	addw	r3, r4, #297	; 0x129
 800ca82:	a90b      	add	r1, sp, #44	; 0x2c
 800ca84:	4640      	mov	r0, r8
 800ca86:	f7fe fe81 	bl	800b78c <mbedtls_x509_get_sig_alg>
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1e6      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    crt->issuer_raw.p = p;
 800ca90:	9b06      	ldr	r3, [sp, #24]
 800ca92:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800ca94:	aa05      	add	r2, sp, #20
 800ca96:	2330      	movs	r3, #48	; 0x30
 800ca98:	4631      	mov	r1, r6
 800ca9a:	a806      	add	r0, sp, #24
 800ca9c:	f7f5 fcb7 	bl	800240e <mbedtls_asn1_get_tag>
 800caa0:	4605      	mov	r5, r0
 800caa2:	b128      	cbz	r0, 800cab0 <mbedtls_x509_crt_parse_der+0x1d4>
        mbedtls_x509_crt_free( crt );
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7ff febe 	bl	800c826 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 800caaa:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 800caae:	e797      	b.n	800c9e0 <mbedtls_x509_crt_parse_der+0x104>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 800cab0:	9b05      	ldr	r3, [sp, #20]
 800cab2:	9906      	ldr	r1, [sp, #24]
 800cab4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800cab8:	4419      	add	r1, r3
 800caba:	a806      	add	r0, sp, #24
 800cabc:	f7fe fd1a 	bl	800b4f4 <mbedtls_x509_get_name>
 800cac0:	4605      	mov	r5, r0
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d1cb      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 800cac6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cac8:	9b06      	ldr	r3, [sp, #24]
 800caca:	1a9b      	subs	r3, r3, r2
 800cacc:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800cace:	aa17      	add	r2, sp, #92	; 0x5c
 800cad0:	2330      	movs	r3, #48	; 0x30
 800cad2:	4631      	mov	r1, r6
 800cad4:	a806      	add	r0, sp, #24
 800cad6:	f7f5 fc9a 	bl	800240e <mbedtls_asn1_get_tag>
 800cada:	2800      	cmp	r0, #0
 800cadc:	d057      	beq.n	800cb8e <mbedtls_x509_crt_parse_der+0x2b2>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 800cade:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 800cae2:	d1bc      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    crt->subject_raw.p = p;
 800cae4:	f10d 0868 	add.w	r8, sp, #104	; 0x68
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800cae8:	aa05      	add	r2, sp, #20
    crt->subject_raw.p = p;
 800caea:	f858 3d50 	ldr.w	r3, [r8, #-80]!
 800caee:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800caf0:	4631      	mov	r1, r6
 800caf2:	2330      	movs	r3, #48	; 0x30
 800caf4:	4640      	mov	r0, r8
 800caf6:	f7f5 fc8a 	bl	800240e <mbedtls_asn1_get_tag>
 800cafa:	4605      	mov	r5, r0
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d1d1      	bne.n	800caa4 <mbedtls_x509_crt_parse_der+0x1c8>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 800cb00:	9b05      	ldr	r3, [sp, #20]
 800cb02:	b14b      	cbz	r3, 800cb18 <mbedtls_x509_crt_parse_der+0x23c>
 800cb04:	9906      	ldr	r1, [sp, #24]
 800cb06:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800cb0a:	4419      	add	r1, r3
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	f7fe fcf1 	bl	800b4f4 <mbedtls_x509_get_name>
 800cb12:	4605      	mov	r5, r0
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d1a2      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    crt->subject_raw.len = p - crt->subject_raw.p;
 800cb18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800cb1a:	9b06      	ldr	r3, [sp, #24]
 800cb1c:	1a9b      	subs	r3, r3, r2
 800cb1e:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 800cb20:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800cb24:	4631      	mov	r1, r6
 800cb26:	4640      	mov	r0, r8
 800cb28:	f7f9 fa7c 	bl	8006024 <mbedtls_pk_parse_subpubkey>
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d195      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 2 || crt->version == 3 )
 800cb32:	69a3      	ldr	r3, [r4, #24]
 800cb34:	3b02      	subs	r3, #2
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d809      	bhi.n	800cb4e <mbedtls_x509_crt_parse_der+0x272>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 800cb40:	4631      	mov	r1, r6
 800cb42:	4640      	mov	r0, r8
 800cb44:	f7ff f837 	bl	800bbb6 <x509_get_uid>
        if( ret != 0 )
 800cb48:	4605      	mov	r5, r0
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d187      	bne.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 2 || crt->version == 3 )
 800cb4e:	69a3      	ldr	r3, [r4, #24]
 800cb50:	3b02      	subs	r3, #2
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d80a      	bhi.n	800cb6c <mbedtls_x509_crt_parse_der+0x290>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 800cb56:	2302      	movs	r3, #2
 800cb58:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	4640      	mov	r0, r8
 800cb60:	f7ff f829 	bl	800bbb6 <x509_get_uid>
        if( ret != 0 )
 800cb64:	4605      	mov	r5, r0
 800cb66:	2800      	cmp	r0, #0
 800cb68:	f47f af79 	bne.w	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 3 )
 800cb6c:	69a3      	ldr	r3, [r4, #24]
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d13a      	bne.n	800cbe8 <mbedtls_x509_crt_parse_der+0x30c>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 800cb72:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 800cb76:	4631      	mov	r1, r6
 800cb78:	4640      	mov	r0, r8
 800cb7a:	f7fe fe27 	bl	800b7cc <mbedtls_x509_get_ext>
 800cb7e:	4605      	mov	r5, r0
 800cb80:	bb70      	cbnz	r0, 800cbe0 <mbedtls_x509_crt_parse_der+0x304>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 800cb82:	4680      	mov	r8, r0
    while( *p < end )
 800cb84:	9b06      	ldr	r3, [sp, #24]
 800cb86:	429e      	cmp	r6, r3
 800cb88:	d858      	bhi.n	800cc3c <mbedtls_x509_crt_parse_der+0x360>
    if( *p != end )
 800cb8a:	d02d      	beq.n	800cbe8 <mbedtls_x509_crt_parse_der+0x30c>
 800cb8c:	e161      	b.n	800ce52 <mbedtls_x509_crt_parse_der+0x576>
    end = *p + len;
 800cb8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb90:	9b06      	ldr	r3, [sp, #24]
 800cb92:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 800cb96:	4641      	mov	r1, r8
 800cb98:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 800cb9c:	a806      	add	r0, sp, #24
 800cb9e:	f7fe fd25 	bl	800b5ec <mbedtls_x509_get_time>
 800cba2:	4605      	mov	r5, r0
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f47f af5a 	bne.w	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 800cbaa:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800cbae:	4641      	mov	r1, r8
 800cbb0:	a806      	add	r0, sp, #24
 800cbb2:	f7fe fd1b 	bl	800b5ec <mbedtls_x509_get_time>
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	f47f af50 	bne.w	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( *p != end )
 800cbbe:	9b06      	ldr	r3, [sp, #24]
 800cbc0:	4598      	cmp	r8, r3
 800cbc2:	d08f      	beq.n	800cae4 <mbedtls_x509_crt_parse_der+0x208>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800cbc4:	4d05      	ldr	r5, [pc, #20]	; (800cbdc <mbedtls_x509_crt_parse_der+0x300>)
 800cbc6:	e74a      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
 800cbc8:	ffffd780 	.word	0xffffd780
 800cbcc:	ffffde80 	.word	0xffffde80
 800cbd0:	ffffde1a 	.word	0xffffde1a
 800cbd4:	ffffda80 	.word	0xffffda80
 800cbd8:	ffffdd9a 	.word	0xffffdd9a
 800cbdc:	ffffdb9a 	.word	0xffffdb9a
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800cbe0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800cbe4:	f47f af3b 	bne.w	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( p != end )
 800cbe8:	9b06      	ldr	r3, [sp, #24]
 800cbea:	429e      	cmp	r6, r3
 800cbec:	f47f aece 	bne.w	800c98c <mbedtls_x509_crt_parse_der+0xb0>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 800cbf0:	ab0e      	add	r3, sp, #56	; 0x38
 800cbf2:	aa11      	add	r2, sp, #68	; 0x44
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	a806      	add	r0, sp, #24
 800cbf8:	f7fe fc74 	bl	800b4e4 <mbedtls_x509_get_alg>
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f47f af2d 	bne.w	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( crt->sig_oid.len != sig_oid2.len ||
 800cc04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cc06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d112      	bne.n	800cc32 <mbedtls_x509_crt_parse_der+0x356>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 800cc0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cc0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cc10:	f001 fbf6 	bl	800e400 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 800cc14:	b968      	cbnz	r0, 800cc32 <mbedtls_x509_crt_parse_der+0x356>
        sig_params1.len != sig_params2.len ||
 800cc16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 800cc18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d109      	bne.n	800cc32 <mbedtls_x509_crt_parse_der+0x356>
        sig_params1.len != sig_params2.len ||
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	f000 814f 	beq.w	800cec2 <mbedtls_x509_crt_parse_der+0x5e6>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 800cc24:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cc26:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc28:	f001 fbea 	bl	800e400 <memcmp>
        ( sig_params1.len != 0 &&
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	f000 8148 	beq.w	800cec2 <mbedtls_x509_crt_parse_der+0x5e6>
        mbedtls_x509_crt_free( crt );
 800cc32:	4620      	mov	r0, r4
 800cc34:	f7ff fdf7 	bl	800c826 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 800cc38:	4dae      	ldr	r5, [pc, #696]	; (800cef4 <mbedtls_x509_crt_parse_der+0x618>)
 800cc3a:	e693      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800cc3c:	2330      	movs	r3, #48	; 0x30
 800cc3e:	aa07      	add	r2, sp, #28
 800cc40:	4631      	mov	r1, r6
 800cc42:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 800cc44:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cc48:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 800cc4c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 800cc50:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 800cc54:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800cc58:	f7f5 fbd9 	bl	800240e <mbedtls_asn1_get_tag>
 800cc5c:	b120      	cbz	r0, 800cc68 <mbedtls_x509_crt_parse_der+0x38c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 800cc5e:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
        if( ret != 0 )
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	d0c0      	beq.n	800cbe8 <mbedtls_x509_crt_parse_der+0x30c>
 800cc66:	e6fa      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
        end_ext_data = *p + len;
 800cc68:	9b06      	ldr	r3, [sp, #24]
 800cc6a:	9d07      	ldr	r5, [sp, #28]
 800cc6c:	441d      	add	r5, r3
        extn_oid.tag = **p;
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	9314      	str	r3, [sp, #80]	; 0x50
        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 800cc72:	aa15      	add	r2, sp, #84	; 0x54
 800cc74:	2306      	movs	r3, #6
 800cc76:	4631      	mov	r1, r6
 800cc78:	a806      	add	r0, sp, #24
 800cc7a:	f7f5 fbc8 	bl	800240e <mbedtls_asn1_get_tag>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d1ed      	bne.n	800cc5e <mbedtls_x509_crt_parse_der+0x382>
        extn_oid.p = *p;
 800cc82:	9b06      	ldr	r3, [sp, #24]
        *p += extn_oid.len;
 800cc84:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.p = *p;
 800cc86:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 800cc88:	4413      	add	r3, r2
 800cc8a:	9306      	str	r3, [sp, #24]
        if( ( end - *p ) < 1 )
 800cc8c:	1af3      	subs	r3, r6, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f340 8140 	ble.w	800cf14 <mbedtls_x509_crt_parse_der+0x638>
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 800cc94:	aa08      	add	r2, sp, #32
 800cc96:	4629      	mov	r1, r5
 800cc98:	a806      	add	r0, sp, #24
 800cc9a:	f7f5 fbcc 	bl	8002436 <mbedtls_asn1_get_bool>
 800cc9e:	b110      	cbz	r0, 800cca6 <mbedtls_x509_crt_parse_der+0x3ca>
 800cca0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800cca4:	d1db      	bne.n	800cc5e <mbedtls_x509_crt_parse_der+0x382>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 800cca6:	2304      	movs	r3, #4
 800cca8:	aa07      	add	r2, sp, #28
 800ccaa:	4629      	mov	r1, r5
 800ccac:	a806      	add	r0, sp, #24
 800ccae:	f7f5 fbae 	bl	800240e <mbedtls_asn1_get_tag>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d1d3      	bne.n	800cc5e <mbedtls_x509_crt_parse_der+0x382>
        end_ext_octet = *p + len;
 800ccb6:	9a07      	ldr	r2, [sp, #28]
 800ccb8:	9b06      	ldr	r3, [sp, #24]
 800ccba:	4413      	add	r3, r2
        if( end_ext_octet != end_ext_data )
 800ccbc:	429d      	cmp	r5, r3
 800ccbe:	f040 80c8 	bne.w	800ce52 <mbedtls_x509_crt_parse_der+0x576>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 800ccc2:	a909      	add	r1, sp, #36	; 0x24
 800ccc4:	a814      	add	r0, sp, #80	; 0x50
 800ccc6:	f7f8 fe23 	bl	8005910 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 800ccca:	b130      	cbz	r0, 800ccda <mbedtls_x509_crt_parse_der+0x3fe>
            if( is_critical )
 800cccc:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 800ccce:	9506      	str	r5, [sp, #24]
            if( is_critical )
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f43f af57 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ccd6:	4d88      	ldr	r5, [pc, #544]	; (800cef8 <mbedtls_x509_crt_parse_der+0x61c>)
 800ccd8:	e6c1      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
        if( ( crt->ext_types & ext_type ) != 0 )
 800ccda:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 800ccde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce0:	ea11 0302 	ands.w	r3, r1, r2
 800cce4:	f040 8118 	bne.w	800cf18 <mbedtls_x509_crt_parse_der+0x63c>
        crt->ext_types |= ext_type;
 800cce8:	4311      	orrs	r1, r2
        switch( ext_type )
 800ccea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 800ccee:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 800ccf2:	d020      	beq.n	800cd36 <mbedtls_x509_crt_parse_der+0x45a>
 800ccf4:	dc06      	bgt.n	800cd04 <mbedtls_x509_crt_parse_der+0x428>
 800ccf6:	2a04      	cmp	r2, #4
 800ccf8:	d061      	beq.n	800cdbe <mbedtls_x509_crt_parse_der+0x4e2>
 800ccfa:	2a20      	cmp	r2, #32
 800ccfc:	f000 8093 	beq.w	800ce26 <mbedtls_x509_crt_parse_der+0x54a>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 800cd00:	4d7e      	ldr	r5, [pc, #504]	; (800cefc <mbedtls_x509_crt_parse_der+0x620>)
 800cd02:	e6ac      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
        switch( ext_type )
 800cd04:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800cd08:	d07d      	beq.n	800ce06 <mbedtls_x509_crt_parse_der+0x52a>
 800cd0a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cd0e:	d1f7      	bne.n	800cd00 <mbedtls_x509_crt_parse_der+0x424>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800cd10:	aa17      	add	r2, sp, #92	; 0x5c
 800cd12:	4629      	mov	r1, r5
 800cd14:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 800cd16:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd18:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800cd1c:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800cd1e:	f7f5 fbc6 	bl	80024ae <mbedtls_asn1_get_bitstring>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d155      	bne.n	800cdd2 <mbedtls_x509_crt_parse_der+0x4f6>
    if( bs.len != 1 )
 800cd26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d17a      	bne.n	800ce22 <mbedtls_x509_crt_parse_der+0x546>
    *ns_cert_type = *bs.p;
 800cd2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 800cd34:	e726      	b.n	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 800cd36:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800cd3a:	9203      	str	r2, [sp, #12]
    *ca_istrue = 0; /* DEFAULT FALSE */
 800cd3c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 800cd40:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800cd44:	aa17      	add	r2, sp, #92	; 0x5c
 800cd46:	2330      	movs	r3, #48	; 0x30
 800cd48:	4629      	mov	r1, r5
 800cd4a:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 800cd4c:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800cd50:	f7f5 fb5d 	bl	800240e <mbedtls_asn1_get_tag>
 800cd54:	b128      	cbz	r0, 800cd62 <mbedtls_x509_crt_parse_der+0x486>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 800cd56:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 800cd5a:	2d00      	cmp	r5, #0
 800cd5c:	f43f af12 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
 800cd60:	e67d      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( *p == end )
 800cd62:	9b06      	ldr	r3, [sp, #24]
 800cd64:	429d      	cmp	r5, r3
 800cd66:	f43f af0d 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 800cd6a:	465a      	mov	r2, fp
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	a806      	add	r0, sp, #24
 800cd70:	f7f5 fb61 	bl	8002436 <mbedtls_asn1_get_bool>
 800cd74:	b178      	cbz	r0, 800cd96 <mbedtls_x509_crt_parse_der+0x4ba>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800cd76:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800cd7a:	d1ec      	bne.n	800cd56 <mbedtls_x509_crt_parse_der+0x47a>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 800cd7c:	465a      	mov	r2, fp
 800cd7e:	4629      	mov	r1, r5
 800cd80:	a806      	add	r0, sp, #24
 800cd82:	f7f5 fb70 	bl	8002466 <mbedtls_asn1_get_int>
        if( ret != 0 )
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d1e5      	bne.n	800cd56 <mbedtls_x509_crt_parse_der+0x47a>
        if( *ca_istrue != 0 )
 800cd8a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800cd8e:	b113      	cbz	r3, 800cd96 <mbedtls_x509_crt_parse_der+0x4ba>
            *ca_istrue = 1;
 800cd90:	2301      	movs	r3, #1
 800cd92:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 800cd96:	9b06      	ldr	r3, [sp, #24]
 800cd98:	429d      	cmp	r5, r3
 800cd9a:	f43f aef3 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 800cd9e:	9a03      	ldr	r2, [sp, #12]
 800cda0:	4629      	mov	r1, r5
 800cda2:	a806      	add	r0, sp, #24
 800cda4:	f7f5 fb5f 	bl	8002466 <mbedtls_asn1_get_int>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d1d4      	bne.n	800cd56 <mbedtls_x509_crt_parse_der+0x47a>
    if( *p != end )
 800cdac:	9b06      	ldr	r3, [sp, #24]
 800cdae:	429d      	cmp	r5, r3
 800cdb0:	d14f      	bne.n	800ce52 <mbedtls_x509_crt_parse_der+0x576>
    (*max_pathlen)++;
 800cdb2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800cdbc:	e6e2      	b.n	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800cdbe:	aa17      	add	r2, sp, #92	; 0x5c
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 800cdc4:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdc6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800cdca:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800cdcc:	f7f5 fb6f 	bl	80024ae <mbedtls_asn1_get_bitstring>
 800cdd0:	b120      	cbz	r0, 800cddc <mbedtls_x509_crt_parse_der+0x500>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 800cdd2:	f5b0 5514 	subs.w	r5, r0, #9472	; 0x2500
 800cdd6:	f43f aed5 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
 800cdda:	e640      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( bs.len < 1 )
 800cddc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800cdde:	b301      	cbz	r1, 800ce22 <mbedtls_x509_crt_parse_der+0x546>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800cde0:	9d19      	ldr	r5, [sp, #100]	; 0x64
    *key_usage = 0;
 800cde2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800cde6:	5c2b      	ldrb	r3, [r5, r0]
 800cde8:	00c2      	lsls	r2, r0, #3
 800cdea:	fa03 f202 	lsl.w	r2, r3, r2
 800cdee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 800cdf2:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800cdf4:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 800cdf6:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800cdf8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 800cdfc:	f43f aec2 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
 800ce00:	2804      	cmp	r0, #4
 800ce02:	d1f0      	bne.n	800cde6 <mbedtls_x509_crt_parse_der+0x50a>
 800ce04:	e6be      	b.n	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 800ce06:	2306      	movs	r3, #6
 800ce08:	f504 7284 	add.w	r2, r4, #264	; 0x108
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	a806      	add	r0, sp, #24
 800ce10:	f7f5 fb84 	bl	800251c <mbedtls_asn1_get_sequence_of>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1dc      	bne.n	800cdd2 <mbedtls_x509_crt_parse_der+0x4f6>
    if( ext_key_usage->buf.p == NULL )
 800ce18:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f47f aeb1 	bne.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ce22:	4d37      	ldr	r5, [pc, #220]	; (800cf00 <mbedtls_x509_crt_parse_der+0x624>)
 800ce24:	e61b      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800ce26:	2330      	movs	r3, #48	; 0x30
 800ce28:	aa0a      	add	r2, sp, #40	; 0x28
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 800ce2e:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800ce32:	f7f5 faec 	bl	800240e <mbedtls_asn1_get_tag>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d18d      	bne.n	800cd56 <mbedtls_x509_crt_parse_der+0x47a>
    if( *p + len != end )
 800ce3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce3c:	9b06      	ldr	r3, [sp, #24]
 800ce3e:	4413      	add	r3, r2
 800ce40:	429d      	cmp	r5, r3
 800ce42:	d106      	bne.n	800ce52 <mbedtls_x509_crt_parse_der+0x576>
    while( *p < end )
 800ce44:	9b06      	ldr	r3, [sp, #24]
 800ce46:	429d      	cmp	r5, r3
 800ce48:	d805      	bhi.n	800ce56 <mbedtls_x509_crt_parse_der+0x57a>
    cur->next = NULL;
 800ce4a:	f8cb 800c 	str.w	r8, [fp, #12]
    if( *p != end )
 800ce4e:	f43f ae99 	beq.w	800cb84 <mbedtls_x509_crt_parse_der+0x2a8>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ce52:	4d2c      	ldr	r5, [pc, #176]	; (800cf04 <mbedtls_x509_crt_parse_der+0x628>)
 800ce54:	e603      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
        if( ( end - *p ) < 1 )
 800ce56:	1aea      	subs	r2, r5, r3
 800ce58:	2a00      	cmp	r2, #0
 800ce5a:	dd5b      	ble.n	800cf14 <mbedtls_x509_crt_parse_der+0x638>
        tag = **p;
 800ce5c:	461a      	mov	r2, r3
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 800ce5e:	4629      	mov	r1, r5
        tag = **p;
 800ce60:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
 800ce64:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 800ce66:	a806      	add	r0, sp, #24
 800ce68:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 800ce6a:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 800ce6c:	f7f5 fa81 	bl	8002372 <mbedtls_asn1_get_len>
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	2800      	cmp	r0, #0
 800ce74:	f47f af6f 	bne.w	800cd56 <mbedtls_x509_crt_parse_der+0x47a>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 800ce78:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800ce7c:	2a80      	cmp	r2, #128	; 0x80
 800ce7e:	f47f af2a 	bne.w	800ccd6 <mbedtls_x509_crt_parse_der+0x3fa>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 800ce82:	2b82      	cmp	r3, #130	; 0x82
 800ce84:	d004      	beq.n	800ce90 <mbedtls_x509_crt_parse_der+0x5b4>
            *p += tag_len;
 800ce86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce88:	9b06      	ldr	r3, [sp, #24]
        *p += buf->len;
 800ce8a:	4413      	add	r3, r2
 800ce8c:	9306      	str	r3, [sp, #24]
 800ce8e:	e7d9      	b.n	800ce44 <mbedtls_x509_crt_parse_der+0x568>
        if( cur->buf.p != NULL )
 800ce90:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ce94:	b15b      	cbz	r3, 800ceae <mbedtls_x509_crt_parse_der+0x5d2>
            if( cur->next != NULL )
 800ce96:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d13c      	bne.n	800cf18 <mbedtls_x509_crt_parse_der+0x63c>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 800ce9e:	2110      	movs	r1, #16
 800cea0:	2001      	movs	r0, #1
 800cea2:	f001 fa6b 	bl	800e37c <calloc>
 800cea6:	f8cb 000c 	str.w	r0, [fp, #12]
            if( cur->next == NULL )
 800ceaa:	b1f0      	cbz	r0, 800ceea <mbedtls_x509_crt_parse_der+0x60e>
 800ceac:	4683      	mov	fp, r0
        buf->tag = tag;
 800ceae:	2382      	movs	r3, #130	; 0x82
 800ceb0:	f8cb 3000 	str.w	r3, [fp]
        buf->len = tag_len;
 800ceb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 800ceb6:	9b06      	ldr	r3, [sp, #24]
 800ceb8:	f8cb 3008 	str.w	r3, [fp, #8]
        buf->len = tag_len;
 800cebc:	f8cb 2004 	str.w	r2, [fp, #4]
 800cec0:	e7e3      	b.n	800ce8a <mbedtls_x509_crt_parse_der+0x5ae>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 800cec2:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800cec6:	4639      	mov	r1, r7
 800cec8:	a806      	add	r0, sp, #24
 800ceca:	f7fe fc41 	bl	800b750 <mbedtls_x509_get_sig>
 800cece:	4605      	mov	r5, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	f47f adc4 	bne.w	800ca5e <mbedtls_x509_crt_parse_der+0x182>
    if( p != end )
 800ced6:	9b06      	ldr	r3, [sp, #24]
 800ced8:	429f      	cmp	r7, r3
 800ceda:	f47f ad57 	bne.w	800c98c <mbedtls_x509_crt_parse_der+0xb0>
}
 800cede:	4628      	mov	r0, r5
 800cee0:	b01b      	add	sp, #108	; 0x6c
 800cee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800cee6:	4d08      	ldr	r5, [pc, #32]	; (800cf08 <mbedtls_x509_crt_parse_der+0x62c>)
 800cee8:	e7f9      	b.n	800cede <mbedtls_x509_crt_parse_der+0x602>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ceea:	4d08      	ldr	r5, [pc, #32]	; (800cf0c <mbedtls_x509_crt_parse_der+0x630>)
 800ceec:	e5b7      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800ceee:	4d06      	ldr	r5, [pc, #24]	; (800cf08 <mbedtls_x509_crt_parse_der+0x62c>)
 800cef0:	e538      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
 800cef2:	bf00      	nop
 800cef4:	ffffd980 	.word	0xffffd980
 800cef8:	ffffda9e 	.word	0xffffda9e
 800cefc:	ffffdf80 	.word	0xffffdf80
 800cf00:	ffffda9c 	.word	0xffffda9c
 800cf04:	ffffda9a 	.word	0xffffda9a
 800cf08:	ffffd800 	.word	0xffffd800
 800cf0c:	ffffda96 	.word	0xffffda96
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 800cf10:	4d02      	ldr	r5, [pc, #8]	; (800cf1c <mbedtls_x509_crt_parse_der+0x640>)
 800cf12:	e527      	b.n	800c964 <mbedtls_x509_crt_parse_der+0x88>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800cf14:	4d02      	ldr	r5, [pc, #8]	; (800cf20 <mbedtls_x509_crt_parse_der+0x644>)
 800cf16:	e5a2      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 800cf18:	4d02      	ldr	r5, [pc, #8]	; (800cf24 <mbedtls_x509_crt_parse_der+0x648>)
 800cf1a:	e5a0      	b.n	800ca5e <mbedtls_x509_crt_parse_der+0x182>
 800cf1c:	ffffd780 	.word	0xffffd780
 800cf20:	ffffdaa0 	.word	0xffffdaa0
 800cf24:	ffffdb00 	.word	0xffffdb00

0800cf28 <mbedtls_x509_crt_parse>:
{
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	b089      	sub	sp, #36	; 0x24
 800cf30:	4616      	mov	r6, r2
    if( chain == NULL || buf == NULL )
 800cf32:	4680      	mov	r8, r0
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d058      	beq.n	800cfea <mbedtls_x509_crt_parse+0xc2>
 800cf38:	2900      	cmp	r1, #0
 800cf3a:	d056      	beq.n	800cfea <mbedtls_x509_crt_parse+0xc2>
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d058      	beq.n	800cff2 <mbedtls_x509_crt_parse+0xca>
 800cf40:	188b      	adds	r3, r1, r2
 800cf42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf46:	2b0a      	cmp	r3, #10
 800cf48:	d153      	bne.n	800cff2 <mbedtls_x509_crt_parse+0xca>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 800cf4a:	492d      	ldr	r1, [pc, #180]	; (800d000 <mbedtls_x509_crt_parse+0xd8>)
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f001 fcc4 	bl	800e8da <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d04d      	beq.n	800cff2 <mbedtls_x509_crt_parse+0xca>
 800cf56:	2700      	movs	r7, #0
            ret = mbedtls_pem_read_buffer( &pem,
 800cf58:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800d000 <mbedtls_x509_crt_parse+0xd8>
 800cf5c:	463c      	mov	r4, r7
 800cf5e:	46b9      	mov	r9, r7
        while( buflen > 1 )
 800cf60:	2e01      	cmp	r6, #1
 800cf62:	d807      	bhi.n	800cf74 <mbedtls_x509_crt_parse+0x4c>
    if( success )
 800cf64:	f1b9 0f00 	cmp.w	r9, #0
 800cf68:	d141      	bne.n	800cfee <mbedtls_x509_crt_parse+0xc6>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 800cf6a:	4b26      	ldr	r3, [pc, #152]	; (800d004 <mbedtls_x509_crt_parse+0xdc>)
 800cf6c:	2c00      	cmp	r4, #0
 800cf6e:	bf08      	it	eq
 800cf70:	461c      	moveq	r4, r3
 800cf72:	e036      	b.n	800cfe2 <mbedtls_x509_crt_parse+0xba>
            mbedtls_pem_init( &pem );
 800cf74:	a805      	add	r0, sp, #20
 800cf76:	f7f8 fd49 	bl	8005a0c <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 800cf7a:	ab04      	add	r3, sp, #16
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	4a20      	ldr	r2, [pc, #128]	; (800d008 <mbedtls_x509_crt_parse+0xe0>)
 800cf86:	462b      	mov	r3, r5
 800cf88:	4659      	mov	r1, fp
 800cf8a:	a805      	add	r0, sp, #20
 800cf8c:	f7f8 fd44 	bl	8005a18 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 800cf90:	4682      	mov	sl, r0
 800cf92:	b988      	cbnz	r0, 800cfb8 <mbedtls_x509_crt_parse+0x90>
                buflen -= use_len;
 800cf94:	9b04      	ldr	r3, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 800cf96:	9a06      	ldr	r2, [sp, #24]
 800cf98:	9905      	ldr	r1, [sp, #20]
 800cf9a:	4640      	mov	r0, r8
                buflen -= use_len;
 800cf9c:	1af6      	subs	r6, r6, r3
                buf += use_len;
 800cf9e:	441d      	add	r5, r3
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 800cfa0:	f7ff fc9c 	bl	800c8dc <mbedtls_x509_crt_parse_der>
 800cfa4:	4682      	mov	sl, r0
            mbedtls_pem_free( &pem );
 800cfa6:	a805      	add	r0, sp, #20
 800cfa8:	f7f8 fdc4 	bl	8005b34 <mbedtls_pem_free>
            if( ret != 0 )
 800cfac:	f1ba 0f00 	cmp.w	sl, #0
 800cfb0:	d113      	bne.n	800cfda <mbedtls_x509_crt_parse+0xb2>
            success = 1;
 800cfb2:	f04f 0901 	mov.w	r9, #1
 800cfb6:	e7d3      	b.n	800cf60 <mbedtls_x509_crt_parse+0x38>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 800cfb8:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 800cfbc:	d010      	beq.n	800cfe0 <mbedtls_x509_crt_parse+0xb8>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 800cfbe:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 800cfc2:	d0cf      	beq.n	800cf64 <mbedtls_x509_crt_parse+0x3c>
                mbedtls_pem_free( &pem );
 800cfc4:	a805      	add	r0, sp, #20
 800cfc6:	f7f8 fdb5 	bl	8005b34 <mbedtls_pem_free>
                buflen -= use_len;
 800cfca:	9a04      	ldr	r2, [sp, #16]
 800cfcc:	1ab6      	subs	r6, r6, r2
                buf += use_len;
 800cfce:	4415      	add	r5, r2
                if( first_error == 0 )
 800cfd0:	2c00      	cmp	r4, #0
 800cfd2:	bf08      	it	eq
 800cfd4:	4654      	moveq	r4, sl
                total_failed++;
 800cfd6:	3701      	adds	r7, #1
                continue;
 800cfd8:	e7c2      	b.n	800cf60 <mbedtls_x509_crt_parse+0x38>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 800cfda:	f51a 5f22 	cmn.w	sl, #10368	; 0x2880
 800cfde:	d1f7      	bne.n	800cfd0 <mbedtls_x509_crt_parse+0xa8>
 800cfe0:	4654      	mov	r4, sl
}
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	b009      	add	sp, #36	; 0x24
 800cfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800cfea:	4c08      	ldr	r4, [pc, #32]	; (800d00c <mbedtls_x509_crt_parse+0xe4>)
 800cfec:	e7f9      	b.n	800cfe2 <mbedtls_x509_crt_parse+0xba>
 800cfee:	463c      	mov	r4, r7
 800cff0:	e7f7      	b.n	800cfe2 <mbedtls_x509_crt_parse+0xba>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 800cff2:	4632      	mov	r2, r6
 800cff4:	4629      	mov	r1, r5
 800cff6:	4640      	mov	r0, r8
 800cff8:	f7ff fc70 	bl	800c8dc <mbedtls_x509_crt_parse_der>
 800cffc:	4604      	mov	r4, r0
 800cffe:	e7f0      	b.n	800cfe2 <mbedtls_x509_crt_parse+0xba>
 800d000:	0801445b 	.word	0x0801445b
 800d004:	ffffd880 	.word	0xffffd880
 800d008:	08014477 	.word	0x08014477
 800d00c:	ffffd800 	.word	0xffffd800

0800d010 <char2hex>:
{
	unsigned char temp_data = 0;
	int i;
	for(i = 0; i < 2; i++)
	{
		temp_data = (data >> (i*4)) & 0x0F;
 800d010:	f000 030f 	and.w	r3, r0, #15
		if(temp_data < 0x0a)
 800d014:	2b09      	cmp	r3, #9
		{
			r_data[i] = '0' + temp_data;
		}
		else
		{
			r_data[i] = 'A' + temp_data - 0x0a;
 800d016:	bf8c      	ite	hi
 800d018:	3337      	addhi	r3, #55	; 0x37
			r_data[i] = '0' + temp_data;
 800d01a:	3330      	addls	r3, #48	; 0x30
		temp_data = (data >> (i*4)) & 0x0F;
 800d01c:	1100      	asrs	r0, r0, #4
		if(temp_data < 0x0a)
 800d01e:	2809      	cmp	r0, #9
			r_data[i] = '0' + temp_data;
 800d020:	700b      	strb	r3, [r1, #0]
		temp_data = (data >> (i*4)) & 0x0F;
 800d022:	b2c3      	uxtb	r3, r0
			r_data[i] = 'A' + temp_data - 0x0a;
 800d024:	bfcc      	ite	gt
 800d026:	3337      	addgt	r3, #55	; 0x37
			r_data[i] = '0' + temp_data;
 800d028:	3330      	addle	r3, #48	; 0x30
 800d02a:	704b      	strb	r3, [r1, #1]
		}
	}
	if((r_data[0] < '0')||(r_data[1] < '0'))
 800d02c:	780b      	ldrb	r3, [r1, #0]
 800d02e:	2b2f      	cmp	r3, #47	; 0x2f
 800d030:	d905      	bls.n	800d03e <char2hex+0x2e>
 800d032:	7848      	ldrb	r0, [r1, #1]
 800d034:	282f      	cmp	r0, #47	; 0x2f
 800d036:	bf8c      	ite	hi
 800d038:	2000      	movhi	r0, #0
 800d03a:	2001      	movls	r0, #1
 800d03c:	4770      	bx	lr
 800d03e:	2001      	movs	r0, #1
		return 1;
	return 0;

}
 800d040:	4770      	bx	lr
	...

0800d044 <string_print_Hex>:

//hex debug print function
char string_print_Hex(unsigned char *buf, unsigned int len)
{
 800d044:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(char2hex(temp_buf, temp_data) != 0)
		{
			printf("trans hex faill len[%d] \r\n", temp_len);
			continue;
		}
		printf("%c%c ",temp_data[1],temp_data[0]);
 800d048:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d0a8 <string_print_Hex+0x64>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
			printf("\r\n");
 800d04c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800d0a4 <string_print_Hex+0x60>
			printf("trans hex faill len[%d] \r\n", temp_len);
 800d050:	f8df a058 	ldr.w	sl, [pc, #88]	; 800d0ac <string_print_Hex+0x68>
{
 800d054:	4607      	mov	r7, r0
 800d056:	460e      	mov	r6, r1
	for(temp_len = 0; temp_len < len; temp_len++)
 800d058:	2400      	movs	r4, #0
 800d05a:	42b4      	cmp	r4, r6
 800d05c:	d106      	bne.n	800d06c <string_print_Hex+0x28>
	}
	printf("\r\n");
 800d05e:	4811      	ldr	r0, [pc, #68]	; (800d0a4 <string_print_Hex+0x60>)
 800d060:	f001 fb38 	bl	800e6d4 <puts>
	return 0;
}
 800d064:	2000      	movs	r0, #0
 800d066:	b002      	add	sp, #8
 800d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(char2hex(temp_buf, temp_data) != 0)
 800d06c:	a901      	add	r1, sp, #4
 800d06e:	5d38      	ldrb	r0, [r7, r4]
 800d070:	f7ff ffce 	bl	800d010 <char2hex>
 800d074:	1c65      	adds	r5, r4, #1
 800d076:	b128      	cbz	r0, 800d084 <string_print_Hex+0x40>
			printf("trans hex faill len[%d] \r\n", temp_len);
 800d078:	4621      	mov	r1, r4
 800d07a:	4650      	mov	r0, sl
 800d07c:	f001 fab6 	bl	800e5ec <iprintf>
	for(temp_len = 0; temp_len < len; temp_len++)
 800d080:	462c      	mov	r4, r5
 800d082:	e7ea      	b.n	800d05a <string_print_Hex+0x16>
		printf("%c%c ",temp_data[1],temp_data[0]);
 800d084:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d088:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d08c:	4640      	mov	r0, r8
 800d08e:	f001 faad 	bl	800e5ec <iprintf>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
 800d092:	072b      	lsls	r3, r5, #28
 800d094:	d1f4      	bne.n	800d080 <string_print_Hex+0x3c>
 800d096:	2c00      	cmp	r4, #0
 800d098:	d0f2      	beq.n	800d080 <string_print_Hex+0x3c>
			printf("\r\n");
 800d09a:	4648      	mov	r0, r9
 800d09c:	f001 fb1a 	bl	800e6d4 <puts>
 800d0a0:	e7ee      	b.n	800d080 <string_print_Hex+0x3c>
 800d0a2:	bf00      	nop
 800d0a4:	0800fe76 	.word	0x0800fe76
 800d0a8:	080144d2 	.word	0x080144d2
 800d0ac:	080144b7 	.word	0x080144b7

0800d0b0 <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=0; i<len; i++)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800d0b2:	4f08      	ldr	r7, [pc, #32]	; (800d0d4 <_write+0x24>)
{
 800d0b4:	460e      	mov	r6, r1
 800d0b6:	4615      	mov	r5, r2
	for(int i=0; i<len; i++)
 800d0b8:	2400      	movs	r4, #0
 800d0ba:	42ac      	cmp	r4, r5
 800d0bc:	db01      	blt.n	800d0c2 <_write+0x12>
	}
	return len;
}
 800d0be:	4628      	mov	r0, r5
 800d0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800d0c2:	1931      	adds	r1, r6, r4
 800d0c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f7f4 f8d4 	bl	8001278 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 800d0d0:	3401      	adds	r4, #1
 800d0d2:	e7f2      	b.n	800d0ba <_write+0xa>
 800d0d4:	200027c0 	.word	0x200027c0

0800d0d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d0d8:	b510      	push	{r4, lr}
 800d0da:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d0dc:	2230      	movs	r2, #48	; 0x30
 800d0de:	2100      	movs	r1, #0
 800d0e0:	a808      	add	r0, sp, #32
 800d0e2:	f001 f9c1 	bl	800e468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	2214      	movs	r2, #20
 800d0ea:	a803      	add	r0, sp, #12
 800d0ec:	f001 f9bc 	bl	800e468 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d0f0:	2400      	movs	r4, #0
 800d0f2:	4b17      	ldr	r3, [pc, #92]	; (800d150 <SystemClock_Config+0x78>)
 800d0f4:	9401      	str	r4, [sp, #4]
 800d0f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d0fc:	641a      	str	r2, [r3, #64]	; 0x40
 800d0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800d100:	4a14      	ldr	r2, [pc, #80]	; (800d154 <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d106:	9301      	str	r3, [sp, #4]
 800d108:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800d10a:	9402      	str	r4, [sp, #8]
 800d10c:	6813      	ldr	r3, [r2, #0]
 800d10e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d116:	6013      	str	r3, [r2, #0]
 800d118:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d11a:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800d11c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d120:	9302      	str	r3, [sp, #8]
 800d122:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d124:	2302      	movs	r3, #2
 800d126:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d128:	2301      	movs	r3, #1
 800d12a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d12c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d12e:	2310      	movs	r3, #16
 800d130:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d132:	f7f3 fbb5 	bl	80008a0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d136:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d138:	4621      	mov	r1, r4
 800d13a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d13c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d13e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d140:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d142:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d144:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d146:	f7f3 fd7f 	bl	8000c48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800d14a:	b014      	add	sp, #80	; 0x50
 800d14c:	bd10      	pop	{r4, pc}
 800d14e:	bf00      	nop
 800d150:	40023800 	.word	0x40023800
 800d154:	40007000 	.word	0x40007000

0800d158 <print_network_information>:

}

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 800d158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	wizchip_getnetinfo(&defaultNetInfo);
 800d15a:	4c19      	ldr	r4, [pc, #100]	; (800d1c0 <print_network_information+0x68>)
 800d15c:	4620      	mov	r0, r4
 800d15e:	f001 f8b9 	bl	800e2d4 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",defaultNetInfo.mac[0],defaultNetInfo.mac[1],defaultNetInfo.mac[2],defaultNetInfo.mac[3],defaultNetInfo.mac[4],defaultNetInfo.mac[5]);
 800d162:	7960      	ldrb	r0, [r4, #5]
 800d164:	9002      	str	r0, [sp, #8]
 800d166:	7920      	ldrb	r0, [r4, #4]
 800d168:	9001      	str	r0, [sp, #4]
 800d16a:	78e0      	ldrb	r0, [r4, #3]
 800d16c:	78a3      	ldrb	r3, [r4, #2]
 800d16e:	7862      	ldrb	r2, [r4, #1]
 800d170:	7821      	ldrb	r1, [r4, #0]
 800d172:	9000      	str	r0, [sp, #0]
 800d174:	4813      	ldr	r0, [pc, #76]	; (800d1c4 <print_network_information+0x6c>)
 800d176:	f001 fa39 	bl	800e5ec <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",defaultNetInfo.ip[0],defaultNetInfo.ip[1],defaultNetInfo.ip[2],defaultNetInfo.ip[3]);
 800d17a:	7a60      	ldrb	r0, [r4, #9]
 800d17c:	7a23      	ldrb	r3, [r4, #8]
 800d17e:	79e2      	ldrb	r2, [r4, #7]
 800d180:	79a1      	ldrb	r1, [r4, #6]
 800d182:	9000      	str	r0, [sp, #0]
 800d184:	4810      	ldr	r0, [pc, #64]	; (800d1c8 <print_network_information+0x70>)
 800d186:	f001 fa31 	bl	800e5ec <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",defaultNetInfo.sn[0],defaultNetInfo.sn[1],defaultNetInfo.sn[2],defaultNetInfo.sn[3]);
 800d18a:	7b60      	ldrb	r0, [r4, #13]
 800d18c:	7b23      	ldrb	r3, [r4, #12]
 800d18e:	7ae2      	ldrb	r2, [r4, #11]
 800d190:	7aa1      	ldrb	r1, [r4, #10]
 800d192:	9000      	str	r0, [sp, #0]
 800d194:	480d      	ldr	r0, [pc, #52]	; (800d1cc <print_network_information+0x74>)
 800d196:	f001 fa29 	bl	800e5ec <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",defaultNetInfo.gw[0],defaultNetInfo.gw[1],defaultNetInfo.gw[2],defaultNetInfo.gw[3]);
 800d19a:	7c60      	ldrb	r0, [r4, #17]
 800d19c:	7c23      	ldrb	r3, [r4, #16]
 800d19e:	7be2      	ldrb	r2, [r4, #15]
 800d1a0:	7ba1      	ldrb	r1, [r4, #14]
 800d1a2:	9000      	str	r0, [sp, #0]
 800d1a4:	480a      	ldr	r0, [pc, #40]	; (800d1d0 <print_network_information+0x78>)
 800d1a6:	f001 fa21 	bl	800e5ec <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",defaultNetInfo.dns[0],defaultNetInfo.dns[1],defaultNetInfo.dns[2],defaultNetInfo.dns[3]);
 800d1aa:	7d60      	ldrb	r0, [r4, #21]
 800d1ac:	9000      	str	r0, [sp, #0]
 800d1ae:	7d23      	ldrb	r3, [r4, #20]
 800d1b0:	7ce2      	ldrb	r2, [r4, #19]
 800d1b2:	7ca1      	ldrb	r1, [r4, #18]
 800d1b4:	4807      	ldr	r0, [pc, #28]	; (800d1d4 <print_network_information+0x7c>)
 800d1b6:	f001 fa19 	bl	800e5ec <iprintf>
}
 800d1ba:	b004      	add	sp, #16
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	bf00      	nop
 800d1c0:	2000003c 	.word	0x2000003c
 800d1c4:	08014530 	.word	0x08014530
 800d1c8:	0801455d 	.word	0x0801455d
 800d1cc:	08014578 	.word	0x08014578
 800d1d0:	08014593 	.word	0x08014593
 800d1d4:	080145ae 	.word	0x080145ae

0800d1d8 <main>:
{
 800d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1da:	b089      	sub	sp, #36	; 0x24
  int len, server_fd = 0;
 800d1dc:	2400      	movs	r4, #0
 800d1de:	9400      	str	r4, [sp, #0]
  HAL_Init();
 800d1e0:	f7f3 fa02 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 800d1e4:	f7ff ff78 	bl	800d0d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	2214      	movs	r2, #20
 800d1ec:	a803      	add	r0, sp, #12
 800d1ee:	f001 f93b 	bl	800e468 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1f2:	4b4a      	ldr	r3, [pc, #296]	; (800d31c <main+0x144>)
 800d1f4:	9401      	str	r4, [sp, #4]
 800d1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800d1f8:	4849      	ldr	r0, [pc, #292]	; (800d320 <main+0x148>)
		printf("%s : %d \r\n",ethBuf0, len);
 800d1fa:	4e4a      	ldr	r6, [pc, #296]	; (800d324 <main+0x14c>)
	if(strncmp((char *)ethBuf0,"end",3)==0)
 800d1fc:	4f4a      	ldr	r7, [pc, #296]	; (800d328 <main+0x150>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1fe:	f042 0201 	orr.w	r2, r2, #1
 800d202:	631a      	str	r2, [r3, #48]	; 0x30
 800d204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d206:	f002 0201 	and.w	r2, r2, #1
 800d20a:	9201      	str	r2, [sp, #4]
 800d20c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d20e:	9402      	str	r4, [sp, #8]
 800d210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d212:	f042 0202 	orr.w	r2, r2, #2
 800d216:	631a      	str	r2, [r3, #48]	; 0x30
 800d218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800d21e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d220:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800d222:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d224:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800d226:	f7f3 fb35 	bl	8000894 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d22a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d22c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d22e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d230:	483b      	ldr	r0, [pc, #236]	; (800d320 <main+0x148>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d232:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d234:	2301      	movs	r3, #1
 800d236:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d238:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d23a:	f7f3 fa5d 	bl	80006f8 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d23e:	4a3b      	ldr	r2, [pc, #236]	; (800d32c <main+0x154>)
  hspi1.Instance = SPI1;
 800d240:	483b      	ldr	r0, [pc, #236]	; (800d330 <main+0x158>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d242:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d246:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d24a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d24e:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800d250:	230a      	movs	r3, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d252:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d254:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d256:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d258:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d25a:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d25c:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d25e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d260:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d262:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d264:	f7f3 fe16 	bl	8000e94 <HAL_SPI_Init>
  huart2.Instance = USART2;
 800d268:	4832      	ldr	r0, [pc, #200]	; (800d334 <main+0x15c>)
  huart2.Init.BaudRate = 115200;
 800d26a:	4933      	ldr	r1, [pc, #204]	; (800d338 <main+0x160>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d26c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800d26e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800d272:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d276:	230c      	movs	r3, #12
 800d278:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d27a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d27c:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d27e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d280:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d282:	f7f3 ffcb 	bl	800121c <HAL_UART_Init>
  printf("Hello! MBED TLS System \r\n");
 800d286:	482d      	ldr	r0, [pc, #180]	; (800d33c <main+0x164>)
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 800d288:	4c2d      	ldr	r4, [pc, #180]	; (800d340 <main+0x168>)
  printf("Hello! MBED TLS System \r\n");
 800d28a:	f001 fa23 	bl	800e6d4 <puts>
  WIZCHIPInitialize();
 800d28e:	f000 f98d 	bl	800d5ac <WIZCHIPInitialize>
  printf("version:%.2x\r\n", getVER());
 800d292:	2080      	movs	r0, #128	; 0x80
 800d294:	f000 f9e4 	bl	800d660 <WIZCHIP_READ>
 800d298:	4601      	mov	r1, r0
 800d29a:	482a      	ldr	r0, [pc, #168]	; (800d344 <main+0x16c>)
 800d29c:	f001 f9a6 	bl	800e5ec <iprintf>
  printf("TMSR:%.2x\r\n", getTMSR());
 800d2a0:	201b      	movs	r0, #27
 800d2a2:	f000 f9dd 	bl	800d660 <WIZCHIP_READ>
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	4827      	ldr	r0, [pc, #156]	; (800d348 <main+0x170>)
 800d2aa:	f001 f99f 	bl	800e5ec <iprintf>
  wizchip_setnetinfo(&defaultNetInfo);
 800d2ae:	4827      	ldr	r0, [pc, #156]	; (800d34c <main+0x174>)
 800d2b0:	f000 ffe6 	bl	800e280 <wizchip_setnetinfo>
  print_network_information();
 800d2b4:	f7ff ff50 	bl	800d158 <print_network_information>
  ret = wiz_tls_init(&tlsContext,&server_fd);
 800d2b8:	4669      	mov	r1, sp
 800d2ba:	a803      	add	r0, sp, #12
 800d2bc:	f7f4 f874 	bl	80013a8 <wiz_tls_init>
  printf("init [%d] \r\n", ret);
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	4823      	ldr	r0, [pc, #140]	; (800d350 <main+0x178>)
 800d2c4:	f001 f992 	bl	800e5ec <iprintf>
  wiz_tls_connect(&tlsContext, SERVER_PORT, gServer_IP);
 800d2c8:	4a22      	ldr	r2, [pc, #136]	; (800d354 <main+0x17c>)
 800d2ca:	f242 21b3 	movw	r1, #8883	; 0x22b3
 800d2ce:	a803      	add	r0, sp, #12
 800d2d0:	f7f4 f908 	bl	80014e4 <wiz_tls_connect>
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 800d2d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2d8:	4621      	mov	r1, r4
 800d2da:	a803      	add	r0, sp, #12
 800d2dc:	f7f4 f970 	bl	80015c0 <wiz_tls_read>
	if(len > 0)
 800d2e0:	1e05      	subs	r5, r0, #0
 800d2e2:	dd09      	ble.n	800d2f8 <main+0x120>
		printf("%s : %d \r\n",ethBuf0, len);
 800d2e4:	462a      	mov	r2, r5
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f001 f97f 	bl	800e5ec <iprintf>
		wiz_tls_write(&tlsContext, ethBuf0, len);
 800d2ee:	462a      	mov	r2, r5
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	a803      	add	r0, sp, #12
 800d2f4:	f7f4 f967 	bl	80015c6 <wiz_tls_write>
	if(strncmp((char *)ethBuf0,"end",3)==0)
 800d2f8:	2203      	movs	r2, #3
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f001 fada 	bl	800e8b6 <strncmp>
 800d302:	2800      	cmp	r0, #0
 800d304:	d1e6      	bne.n	800d2d4 <main+0xfc>
		if(wiz_tls_close_notify(&tlsContext) == 0)
 800d306:	a803      	add	r0, sp, #12
 800d308:	f7f4 f960 	bl	80015cc <wiz_tls_close_notify>
 800d30c:	b910      	cbnz	r0, 800d314 <main+0x13c>
			printf("SSL closed\r\n");
 800d30e:	4812      	ldr	r0, [pc, #72]	; (800d358 <main+0x180>)
 800d310:	f001 f9e0 	bl	800e6d4 <puts>
		wiz_tls_deinit(&tlsContext);
 800d314:	a803      	add	r0, sp, #12
 800d316:	f7f4 f8c9 	bl	80014ac <wiz_tls_deinit>
 800d31a:	e7db      	b.n	800d2d4 <main+0xfc>
 800d31c:	40023800 	.word	0x40023800
 800d320:	40020400 	.word	0x40020400
 800d324:	08014519 	.word	0x08014519
 800d328:	0801362e 	.word	0x0801362e
 800d32c:	40013000 	.word	0x40013000
 800d330:	20002768 	.word	0x20002768
 800d334:	200027c0 	.word	0x200027c0
 800d338:	40004400 	.word	0x40004400
 800d33c:	080144d8 	.word	0x080144d8
 800d340:	20002800 	.word	0x20002800
 800d344:	080144f1 	.word	0x080144f1
 800d348:	08014500 	.word	0x08014500
 800d34c:	2000003c 	.word	0x2000003c
 800d350:	0801450c 	.word	0x0801450c
 800d354:	20000053 	.word	0x20000053
 800d358:	08014524 	.word	0x08014524

0800d35c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d35c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d35e:	4b0c      	ldr	r3, [pc, #48]	; (800d390 <HAL_MspInit+0x34>)
 800d360:	2100      	movs	r1, #0
 800d362:	9100      	str	r1, [sp, #0]
 800d364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d36a:	645a      	str	r2, [r3, #68]	; 0x44
 800d36c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d36e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800d372:	9200      	str	r2, [sp, #0]
 800d374:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d376:	9101      	str	r1, [sp, #4]
 800d378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d37a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d37e:	641a      	str	r2, [r3, #64]	; 0x40
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d38a:	b002      	add	sp, #8
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	40023800 	.word	0x40023800

0800d394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d394:	b510      	push	{r4, lr}
 800d396:	4604      	mov	r4, r0
 800d398:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d39a:	2214      	movs	r2, #20
 800d39c:	2100      	movs	r1, #0
 800d39e:	a803      	add	r0, sp, #12
 800d3a0:	f001 f862 	bl	800e468 <memset>
  if(hspi->Instance==SPI1)
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <HAL_SPI_MspInit+0x64>)
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d122      	bne.n	800d3f2 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d3ac:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	9101      	str	r1, [sp, #4]
 800d3b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3b6:	4811      	ldr	r0, [pc, #68]	; (800d3fc <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d3b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d3bc:	645a      	str	r2, [r3, #68]	; 0x44
 800d3be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d3c4:	9201      	str	r2, [sp, #4]
 800d3c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3c8:	9102      	str	r1, [sp, #8]
 800d3ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3cc:	f042 0201 	orr.w	r2, r2, #1
 800d3d0:	631a      	str	r2, [r3, #48]	; 0x30
 800d3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	9302      	str	r3, [sp, #8]
 800d3da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d3dc:	23e0      	movs	r3, #224	; 0xe0
 800d3de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d3ea:	2305      	movs	r3, #5
 800d3ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3ee:	f7f3 f983 	bl	80006f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d3f2:	b008      	add	sp, #32
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	bf00      	nop
 800d3f8:	40013000 	.word	0x40013000
 800d3fc:	40020000 	.word	0x40020000

0800d400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d400:	b510      	push	{r4, lr}
 800d402:	4604      	mov	r4, r0
 800d404:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d406:	2214      	movs	r2, #20
 800d408:	2100      	movs	r1, #0
 800d40a:	a803      	add	r0, sp, #12
 800d40c:	f001 f82c 	bl	800e468 <memset>
  if(huart->Instance==USART2)
 800d410:	6822      	ldr	r2, [r4, #0]
 800d412:	4b15      	ldr	r3, [pc, #84]	; (800d468 <HAL_UART_MspInit+0x68>)
 800d414:	429a      	cmp	r2, r3
 800d416:	d124      	bne.n	800d462 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800d418:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800d41c:	2100      	movs	r1, #0
 800d41e:	9101      	str	r1, [sp, #4]
 800d420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d422:	4812      	ldr	r0, [pc, #72]	; (800d46c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800d424:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d428:	641a      	str	r2, [r3, #64]	; 0x40
 800d42a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d42c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800d430:	9201      	str	r2, [sp, #4]
 800d432:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d434:	9102      	str	r1, [sp, #8]
 800d436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d438:	f042 0201 	orr.w	r2, r2, #1
 800d43c:	631a      	str	r2, [r3, #48]	; 0x30
 800d43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d440:	f003 0301 	and.w	r3, r3, #1
 800d444:	9302      	str	r3, [sp, #8]
 800d446:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d448:	230c      	movs	r3, #12
 800d44a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d44c:	2302      	movs	r3, #2
 800d44e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d450:	2301      	movs	r3, #1
 800d452:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d454:	2303      	movs	r3, #3
 800d456:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d458:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d45a:	2307      	movs	r3, #7
 800d45c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d45e:	f7f3 f94b 	bl	80006f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d462:	b008      	add	sp, #32
 800d464:	bd10      	pop	{r4, pc}
 800d466:	bf00      	nop
 800d468:	40004400 	.word	0x40004400
 800d46c:	40020000 	.word	0x40020000

0800d470 <NMI_Handler>:
 800d470:	4770      	bx	lr

0800d472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d472:	e7fe      	b.n	800d472 <HardFault_Handler>

0800d474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d474:	e7fe      	b.n	800d474 <MemManage_Handler>

0800d476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d476:	e7fe      	b.n	800d476 <BusFault_Handler>

0800d478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d478:	e7fe      	b.n	800d478 <UsageFault_Handler>

0800d47a <SVC_Handler>:
 800d47a:	4770      	bx	lr

0800d47c <DebugMon_Handler>:
 800d47c:	4770      	bx	lr

0800d47e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d47e:	4770      	bx	lr

0800d480 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d480:	f7f3 b8cc 	b.w	800061c <HAL_IncTick>

0800d484 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	460e      	mov	r6, r1
 800d488:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d48a:	460c      	mov	r4, r1
 800d48c:	1ba3      	subs	r3, r4, r6
 800d48e:	429d      	cmp	r5, r3
 800d490:	dc01      	bgt.n	800d496 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800d492:	4628      	mov	r0, r5
 800d494:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800d496:	f3af 8000 	nop.w
 800d49a:	f804 0b01 	strb.w	r0, [r4], #1
 800d49e:	e7f5      	b.n	800d48c <_read+0x8>

0800d4a0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800d4a0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d4a2:	4b0a      	ldr	r3, [pc, #40]	; (800d4cc <_sbrk+0x2c>)
 800d4a4:	6819      	ldr	r1, [r3, #0]
{
 800d4a6:	4602      	mov	r2, r0
	if (heap_end == 0)
 800d4a8:	b909      	cbnz	r1, 800d4ae <_sbrk+0xe>
		heap_end = &end;
 800d4aa:	4909      	ldr	r1, [pc, #36]	; (800d4d0 <_sbrk+0x30>)
 800d4ac:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800d4ae:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800d4b0:	4669      	mov	r1, sp
 800d4b2:	4402      	add	r2, r0
 800d4b4:	428a      	cmp	r2, r1
 800d4b6:	d906      	bls.n	800d4c6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800d4b8:	f000 ff68 	bl	800e38c <__errno>
 800d4bc:	230c      	movs	r3, #12
 800d4be:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800d4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800d4c6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800d4c8:	bd08      	pop	{r3, pc}
 800d4ca:	bf00      	nop
 800d4cc:	2000273c 	.word	0x2000273c
 800d4d0:	20003004 	.word	0x20003004

0800d4d4 <_close>:

int _close(int file)
{
	return -1;
}
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	4770      	bx	lr

0800d4da <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800d4da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4de:	604b      	str	r3, [r1, #4]
	return 0;
}
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	4770      	bx	lr

0800d4e4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800d4e4:	2001      	movs	r0, #1
 800d4e6:	4770      	bx	lr

0800d4e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	4770      	bx	lr

0800d4ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d4ec:	490f      	ldr	r1, [pc, #60]	; (800d52c <SystemInit+0x40>)
 800d4ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800d4f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d4fa:	4b0d      	ldr	r3, [pc, #52]	; (800d530 <SystemInit+0x44>)
 800d4fc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d4fe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800d500:	f042 0201 	orr.w	r2, r2, #1
 800d504:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800d506:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800d50e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d512:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d514:	4a07      	ldr	r2, [pc, #28]	; (800d534 <SystemInit+0x48>)
 800d516:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d51e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d520:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d522:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d526:	608b      	str	r3, [r1, #8]
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	e000ed00 	.word	0xe000ed00
 800d530:	40023800 	.word	0x40023800
 800d534:	24003010 	.word	0x24003010

0800d538 <csEnable>:



void csEnable(void)
{
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 800d538:	2200      	movs	r2, #0
 800d53a:	2140      	movs	r1, #64	; 0x40
 800d53c:	4801      	ldr	r0, [pc, #4]	; (800d544 <csEnable+0xc>)
 800d53e:	f7f3 b9a9 	b.w	8000894 <HAL_GPIO_WritePin>
 800d542:	bf00      	nop
 800d544:	40020400 	.word	0x40020400

0800d548 <csDisable>:
}

void csDisable(void)
{
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 800d548:	2201      	movs	r2, #1
 800d54a:	2140      	movs	r1, #64	; 0x40
 800d54c:	4801      	ldr	r0, [pc, #4]	; (800d554 <csDisable+0xc>)
 800d54e:	f7f3 b9a1 	b.w	8000894 <HAL_GPIO_WritePin>
 800d552:	bf00      	nop
 800d554:	40020400 	.word	0x40020400

0800d558 <spiWriteByte>:
}

void spiWriteByte(uint8_t tx)
{
 800d558:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t rx;
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 800d55a:	230a      	movs	r3, #10
{
 800d55c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	f10d 0217 	add.w	r2, sp, #23
 800d566:	2301      	movs	r3, #1
 800d568:	f10d 010f 	add.w	r1, sp, #15
 800d56c:	4802      	ldr	r0, [pc, #8]	; (800d578 <spiWriteByte+0x20>)
 800d56e:	f7f3 fcce 	bl	8000f0e <HAL_SPI_TransmitReceive>
}
 800d572:	b007      	add	sp, #28
 800d574:	f85d fb04 	ldr.w	pc, [sp], #4
 800d578:	20002768 	.word	0x20002768

0800d57c <spiReadByte>:

uint8_t spiReadByte(void)
{
 800d57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t rx = 0, tx = 0xFF;
 800d57e:	2300      	movs	r3, #0
 800d580:	f88d 300e 	strb.w	r3, [sp, #14]
 800d584:	23ff      	movs	r3, #255	; 0xff
 800d586:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 800d58a:	230a      	movs	r3, #10
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	f10d 020e 	add.w	r2, sp, #14
 800d592:	2301      	movs	r3, #1
 800d594:	f10d 010f 	add.w	r1, sp, #15
 800d598:	4803      	ldr	r0, [pc, #12]	; (800d5a8 <spiReadByte+0x2c>)
 800d59a:	f7f3 fcb8 	bl	8000f0e <HAL_SPI_TransmitReceive>
	return rx;
}
 800d59e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800d5a2:	b005      	add	sp, #20
 800d5a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5a8:	20002768 	.word	0x20002768

0800d5ac <WIZCHIPInitialize>:
void WIZCHIPInitialize(){
 800d5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	csDisable();
 800d5ae:	f7ff ffcb 	bl	800d548 <csDisable>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 800d5b2:	4915      	ldr	r1, [pc, #84]	; (800d608 <WIZCHIPInitialize+0x5c>)
 800d5b4:	4815      	ldr	r0, [pc, #84]	; (800d60c <WIZCHIPInitialize+0x60>)
 800d5b6:	f000 fcc9 	bl	800df4c <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 800d5ba:	4915      	ldr	r1, [pc, #84]	; (800d610 <WIZCHIPInitialize+0x64>)
 800d5bc:	4815      	ldr	r0, [pc, #84]	; (800d614 <WIZCHIPInitialize+0x68>)
 800d5be:	f000 fcb3 	bl	800df28 <reg_wizchip_cs_cbfunc>
	uint8_t memsize[2][4] = { {2,2,2,2},{2,2,2,2}};
 800d5c2:	4a15      	ldr	r2, [pc, #84]	; (800d618 <WIZCHIPInitialize+0x6c>)
 800d5c4:	6810      	ldr	r0, [r2, #0]
 800d5c6:	6851      	ldr	r1, [r2, #4]
 800d5c8:	ab02      	add	r3, sp, #8
 800d5ca:	c303      	stmia	r3!, {r0, r1}
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 800d5cc:	a902      	add	r1, sp, #8
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	f000 fe02 	bl	800e1d8 <ctlwizchip>
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d10b      	bne.n	800d5f0 <WIZCHIPInitialize+0x44>
		printf("WIZCHIP Initialized fail.\r\n", 1, 10);
 800d5d8:	4810      	ldr	r0, [pc, #64]	; (800d61c <WIZCHIPInitialize+0x70>)
 800d5da:	220a      	movs	r2, #10
 800d5dc:	2101      	movs	r1, #1
			printf("Unknown PHY Link status.\r\n", 1, 10);
 800d5de:	f001 f805 	bl	800e5ec <iprintf>
}
 800d5e2:	b005      	add	sp, #20
 800d5e4:	f85d fb04 	ldr.w	pc, [sp], #4
	} while (tmp == PHY_LINK_OFF);
 800d5e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1f8      	bne.n	800d5e2 <WIZCHIPInitialize+0x36>
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 800d5f0:	f10d 0107 	add.w	r1, sp, #7
 800d5f4:	200f      	movs	r0, #15
 800d5f6:	f000 fdef 	bl	800e1d8 <ctlwizchip>
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	d1f4      	bne.n	800d5e8 <WIZCHIPInitialize+0x3c>
			printf("Unknown PHY Link status.\r\n", 1, 10);
 800d5fe:	220a      	movs	r2, #10
 800d600:	2101      	movs	r1, #1
 800d602:	4807      	ldr	r0, [pc, #28]	; (800d620 <WIZCHIPInitialize+0x74>)
 800d604:	e7eb      	b.n	800d5de <WIZCHIPInitialize+0x32>
 800d606:	bf00      	nop
 800d608:	0800d559 	.word	0x0800d559
 800d60c:	0800d57d 	.word	0x0800d57d
 800d610:	0800d549 	.word	0x0800d549
 800d614:	0800d539 	.word	0x0800d539
 800d618:	0800f892 	.word	0x0800f892
 800d61c:	080145e1 	.word	0x080145e1
 800d620:	080145fd 	.word	0x080145fd

0800d624 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == W5100S)
/**
@brief  This function writes the data into W5100S registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800d624:	b570      	push	{r4, r5, r6, lr}
	int i;
   WIZCHIP_CRITICAL_ENTER();
 800d626:	4c0d      	ldr	r4, [pc, #52]	; (800d65c <WIZCHIP_WRITE+0x38>)
 800d628:	68e3      	ldr	r3, [r4, #12]
{
 800d62a:	460e      	mov	r6, r1
 800d62c:	4605      	mov	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 800d62e:	4798      	blx	r3
   WIZCHIP.CS._select();
 800d630:	6963      	ldr	r3, [r4, #20]
 800d632:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 800d634:	6a23      	ldr	r3, [r4, #32]
 800d636:	20f0      	movs	r0, #240	; 0xf0
 800d638:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 800d63a:	6a23      	ldr	r3, [r4, #32]
 800d63c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800d640:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 800d642:	6a23      	ldr	r3, [r4, #32]
 800d644:	b2e8      	uxtb	r0, r5
 800d646:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 800d648:	6a23      	ldr	r3, [r4, #32]
 800d64a:	4630      	mov	r0, r6
 800d64c:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 800d64e:	69a3      	ldr	r3, [r4, #24]
 800d650:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d652:	6923      	ldr	r3, [r4, #16]
}
 800d654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   WIZCHIP_CRITICAL_EXIT();
 800d658:	4718      	bx	r3
 800d65a:	bf00      	nop
 800d65c:	20000060 	.word	0x20000060

0800d660 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100S registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800d660:	b538      	push	{r3, r4, r5, lr}
   uint8_t ret;
   int i;
   WIZCHIP_CRITICAL_ENTER();
 800d662:	4c0c      	ldr	r4, [pc, #48]	; (800d694 <WIZCHIP_READ+0x34>)
 800d664:	68e3      	ldr	r3, [r4, #12]
{
 800d666:	4605      	mov	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 800d668:	4798      	blx	r3
   WIZCHIP.CS._select();
 800d66a:	6963      	ldr	r3, [r4, #20]
 800d66c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 800d66e:	6a23      	ldr	r3, [r4, #32]
 800d670:	200f      	movs	r0, #15
 800d672:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 800d674:	6a23      	ldr	r3, [r4, #32]
 800d676:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800d67a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 800d67c:	6a23      	ldr	r3, [r4, #32]
 800d67e:	b2e8      	uxtb	r0, r5
 800d680:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800d682:	69e3      	ldr	r3, [r4, #28]
 800d684:	4798      	blx	r3

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!"   
#endif

   WIZCHIP.CS._deselect();
 800d686:	69a3      	ldr	r3, [r4, #24]
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800d688:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 800d68a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d68c:	6923      	ldr	r3, [r4, #16]
 800d68e:	4798      	blx	r3
   return ret;
}
 800d690:	4628      	mov	r0, r5
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20000060 	.word	0x20000060

0800d698 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100S memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint16_t i = 0;
   int j,k,l;
   WIZCHIP_CRITICAL_ENTER();
 800d69c:	4c10      	ldr	r4, [pc, #64]	; (800d6e0 <WIZCHIP_WRITE_BUF+0x48>)
 800d69e:	68e3      	ldr	r3, [r4, #12]
{
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 800d6a6:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 800d6a8:	6963      	ldr	r3, [r4, #20]
 800d6aa:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_))

   WIZCHIP.IF.SPI._write_byte(0xF0);
 800d6ac:	6a23      	ldr	r3, [r4, #32]
 800d6ae:	20f0      	movs	r0, #240	; 0xf0
 800d6b0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 800d6b2:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800d6b6:	6a23      	ldr	r3, [r4, #32]
 800d6b8:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800d6ba:	b2f0      	uxtb	r0, r6
 800d6bc:	6a23      	ldr	r3, [r4, #32]
 800d6be:	4798      	blx	r3
 800d6c0:	3f01      	subs	r7, #1
 800d6c2:	1e6e      	subs	r6, r5, #1
 800d6c4:	443d      	add	r5, r7

   for(i = 0; i < len; i++)
 800d6c6:	42ae      	cmp	r6, r5
 800d6c8:	d105      	bne.n	800d6d6 <WIZCHIP_WRITE_BUF+0x3e>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 800d6ca:	69a3      	ldr	r3, [r4, #24]
 800d6cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d6ce:	6923      	ldr	r3, [r4, #16]
}
 800d6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   WIZCHIP_CRITICAL_EXIT();
 800d6d4:	4718      	bx	r3
	   WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 800d6d6:	6a23      	ldr	r3, [r4, #32]
 800d6d8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800d6dc:	4798      	blx	r3
 800d6de:	e7f2      	b.n	800d6c6 <WIZCHIP_WRITE_BUF+0x2e>
 800d6e0:	20000060 	.word	0x20000060

0800d6e4 <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100S memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint16_t i = 0;
   WIZCHIP_CRITICAL_ENTER();
 800d6e8:	4c10      	ldr	r4, [pc, #64]	; (800d72c <WIZCHIP_READ_BUF+0x48>)
 800d6ea:	68e3      	ldr	r3, [r4, #12]
{
 800d6ec:	460d      	mov	r5, r1
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 800d6f2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 800d6f4:	6963      	ldr	r3, [r4, #20]
 800d6f6:	4798      	blx	r3
   
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_) )

   WIZCHIP.IF.SPI._write_byte(0x0F);
 800d6f8:	6a23      	ldr	r3, [r4, #32]
 800d6fa:	200f      	movs	r0, #15
 800d6fc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 800d6fe:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800d702:	6a23      	ldr	r3, [r4, #32]
 800d704:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 800d706:	b2f0      	uxtb	r0, r6
 800d708:	6a23      	ldr	r3, [r4, #32]
 800d70a:	4798      	blx	r3
 800d70c:	3f01      	subs	r7, #1
 800d70e:	1e6e      	subs	r6, r5, #1
 800d710:	443d      	add	r5, r7

   for(i = 0; i < len; i++)
 800d712:	42ae      	cmp	r6, r5
 800d714:	d105      	bne.n	800d722 <WIZCHIP_READ_BUF+0x3e>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 800d716:	69a3      	ldr	r3, [r4, #24]
 800d718:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d71a:	6923      	ldr	r3, [r4, #16]
}
 800d71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   WIZCHIP_CRITICAL_EXIT();
 800d720:	4718      	bx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 800d722:	69e3      	ldr	r3, [r4, #28]
 800d724:	4798      	blx	r3
 800d726:	f806 0f01 	strb.w	r0, [r6, #1]!
 800d72a:	e7f2      	b.n	800d712 <WIZCHIP_READ_BUF+0x2e>
 800d72c:	20000060 	.word	0x20000060

0800d730 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800d732:	1d06      	adds	r6, r0, #4
 800d734:	0236      	lsls	r6, r6, #8
 800d736:	f106 0720 	add.w	r7, r6, #32
   uint16_t val=0,val1=0;
 800d73a:	2400      	movs	r4, #0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800d73c:	3621      	adds	r6, #33	; 0x21
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800d73e:	4638      	mov	r0, r7
 800d740:	f7ff ff8e 	bl	800d660 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800d744:	0200      	lsls	r0, r0, #8
 800d746:	b285      	uxth	r5, r0
 800d748:	4630      	mov	r0, r6
 800d74a:	f7ff ff89 	bl	800d660 <WIZCHIP_READ>
 800d74e:	4405      	add	r5, r0
 800d750:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 800d752:	b14d      	cbz	r5, 800d768 <getSn_TX_FSR+0x38>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800d754:	4638      	mov	r0, r7
 800d756:	f7ff ff83 	bl	800d660 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800d75a:	0200      	lsls	r0, r0, #8
 800d75c:	b284      	uxth	r4, r0
 800d75e:	4630      	mov	r0, r6
 800d760:	f7ff ff7e 	bl	800d660 <WIZCHIP_READ>
 800d764:	4404      	add	r4, r0
 800d766:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 800d768:	42ac      	cmp	r4, r5
 800d76a:	d1e8      	bne.n	800d73e <getSn_TX_FSR+0xe>
   return val;
}
 800d76c:	4620      	mov	r0, r4
 800d76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d770 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800d770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800d772:	1d06      	adds	r6, r0, #4
 800d774:	0236      	lsls	r6, r6, #8
 800d776:	f106 0726 	add.w	r7, r6, #38	; 0x26
   uint16_t val=0,val1=0;
 800d77a:	2400      	movs	r4, #0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800d77c:	3627      	adds	r6, #39	; 0x27
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800d77e:	4638      	mov	r0, r7
 800d780:	f7ff ff6e 	bl	800d660 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800d784:	0200      	lsls	r0, r0, #8
 800d786:	b285      	uxth	r5, r0
 800d788:	4630      	mov	r0, r6
 800d78a:	f7ff ff69 	bl	800d660 <WIZCHIP_READ>
 800d78e:	4405      	add	r5, r0
 800d790:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 800d792:	b14d      	cbz	r5, 800d7a8 <getSn_RX_RSR+0x38>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800d794:	4638      	mov	r0, r7
 800d796:	f7ff ff63 	bl	800d660 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800d79a:	0200      	lsls	r0, r0, #8
 800d79c:	b284      	uxth	r4, r0
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f7ff ff5e 	bl	800d660 <WIZCHIP_READ>
 800d7a4:	4404      	add	r4, r0
 800d7a6:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 800d7a8:	42ac      	cmp	r4, r5
 800d7aa:	d1e8      	bne.n	800d77e <getSn_RX_RSR+0xe>
   return val;
}
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7b0 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 800d7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   uint32_t rxbase = _W5100S_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
#endif   
   for(i = 0; i < sn; i++)
      rxbase += getSn_RxMAX(i);
 800d7b4:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800d7f4 <getSn_RxBASE+0x44>
{
 800d7b8:	4607      	mov	r7, r0
   for(i = 0; i < sn; i++)
 800d7ba:	2600      	movs	r6, #0
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 800d7bc:	f44f 45c0 	mov.w	r5, #24576	; 0x6000
      rxbase += getSn_RxMAX(i);
 800d7c0:	f04f 0803 	mov.w	r8, #3
 800d7c4:	b274      	sxtb	r4, r6
   for(i = 0; i < sn; i++)
 800d7c6:	42bc      	cmp	r4, r7
 800d7c8:	f106 0601 	add.w	r6, r6, #1
 800d7cc:	db02      	blt.n	800d7d4 <getSn_RxBASE+0x24>

   return rxbase;
}
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      rxbase += getSn_RxMAX(i);
 800d7d4:	201a      	movs	r0, #26
 800d7d6:	f7ff ff43 	bl	800d660 <WIZCHIP_READ>
 800d7da:	0064      	lsls	r4, r4, #1
 800d7dc:	fa08 f304 	lsl.w	r3, r8, r4
 800d7e0:	4018      	ands	r0, r3
 800d7e2:	4120      	asrs	r0, r4
 800d7e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d7e8:	4084      	lsls	r4, r0
 800d7ea:	ea04 0409 	and.w	r4, r4, r9
 800d7ee:	4425      	add	r5, r4
 800d7f0:	e7e8      	b.n	800d7c4 <getSn_RxBASE+0x14>
 800d7f2:	bf00      	nop
 800d7f4:	03fffc00 	.word	0x03fffc00

0800d7f8 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 800d7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   uint32_t txbase = _W5100S_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
#endif   
   for(i = 0; i < sn; i++)
      txbase += getSn_TxMAX(i);
 800d7fc:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800d83c <getSn_TxBASE+0x44>
{
 800d800:	4607      	mov	r7, r0
   for(i = 0; i < sn; i++)
 800d802:	2600      	movs	r6, #0
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 800d804:	f44f 4580 	mov.w	r5, #16384	; 0x4000
      txbase += getSn_TxMAX(i);
 800d808:	f04f 0803 	mov.w	r8, #3
 800d80c:	b274      	sxtb	r4, r6
   for(i = 0; i < sn; i++)
 800d80e:	42bc      	cmp	r4, r7
 800d810:	f106 0601 	add.w	r6, r6, #1
 800d814:	db02      	blt.n	800d81c <getSn_TxBASE+0x24>
   return txbase;
}
 800d816:	4628      	mov	r0, r5
 800d818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      txbase += getSn_TxMAX(i);
 800d81c:	201b      	movs	r0, #27
 800d81e:	f7ff ff1f 	bl	800d660 <WIZCHIP_READ>
 800d822:	0064      	lsls	r4, r4, #1
 800d824:	fa08 f304 	lsl.w	r3, r8, r4
 800d828:	4018      	ands	r0, r3
 800d82a:	4120      	asrs	r0, r4
 800d82c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d830:	4084      	lsls	r4, r0
 800d832:	ea04 0409 	and.w	r4, r4, r9
 800d836:	4425      	add	r5, r4
 800d838:	e7e8      	b.n	800d80c <getSn_TxBASE+0x14>
 800d83a:	bf00      	nop
 800d83c:	03fffc00 	.word	0x03fffc00

0800d840 <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800d844:	1d06      	adds	r6, r0, #4
 800d846:	0236      	lsls	r6, r6, #8
{
 800d848:	b085      	sub	sp, #20
  ptr = getSn_TX_WR(sn);
 800d84a:	f106 0324 	add.w	r3, r6, #36	; 0x24
{
 800d84e:	4682      	mov	sl, r0
  ptr = getSn_TX_WR(sn);
 800d850:	4618      	mov	r0, r3
{
 800d852:	4690      	mov	r8, r2
 800d854:	460f      	mov	r7, r1
  ptr = getSn_TX_WR(sn);
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	f7ff ff02 	bl	800d660 <WIZCHIP_READ>
 800d85c:	f106 0325 	add.w	r3, r6, #37	; 0x25
 800d860:	4605      	mov	r5, r0
 800d862:	4618      	mov	r0, r3
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	f7ff fefb 	bl	800d660 <WIZCHIP_READ>
 800d86a:	eb00 2505 	add.w	r5, r0, r5, lsl #8

  dst_mask = ptr & getSn_TxMASK(sn);
 800d86e:	201b      	movs	r0, #27
 800d870:	f7ff fef6 	bl	800d660 <WIZCHIP_READ>
 800d874:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800d878:	2303      	movs	r3, #3
 800d87a:	fa03 f60b 	lsl.w	r6, r3, fp
 800d87e:	ea00 0406 	and.w	r4, r0, r6
 800d882:	f04f 0901 	mov.w	r9, #1
 800d886:	fa44 f40b 	asr.w	r4, r4, fp
 800d88a:	fa09 f404 	lsl.w	r4, r9, r4
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 800d88e:	4650      	mov	r0, sl
 800d890:	f7ff ffb2 	bl	800d7f8 <getSn_TxBASE>
  dst_mask = ptr & getSn_TxMASK(sn);
 800d894:	02a4      	lsls	r4, r4, #10
  ptr = getSn_TX_WR(sn);
 800d896:	b2ad      	uxth	r5, r5
  dst_mask = ptr & getSn_TxMASK(sn);
 800d898:	3c01      	subs	r4, #1
 800d89a:	402c      	ands	r4, r5
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 800d89c:	4420      	add	r0, r4
 800d89e:	b283      	uxth	r3, r0
 800d8a0:	9302      	str	r3, [sp, #8]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 800d8a2:	201b      	movs	r0, #27
 800d8a4:	eb04 0308 	add.w	r3, r4, r8
 800d8a8:	9303      	str	r3, [sp, #12]
 800d8aa:	f7ff fed9 	bl	800d660 <WIZCHIP_READ>
 800d8ae:	4030      	ands	r0, r6
 800d8b0:	4b1b      	ldr	r3, [pc, #108]	; (800d920 <wiz_send_data+0xe0>)
 800d8b2:	fa40 f00b 	asr.w	r0, r0, fp
 800d8b6:	fa09 f000 	lsl.w	r0, r9, r0
 800d8ba:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	4283      	cmp	r3, r0
 800d8c2:	dd28      	ble.n	800d916 <wiz_send_data+0xd6>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 800d8c4:	201b      	movs	r0, #27
 800d8c6:	f7ff fecb 	bl	800d660 <WIZCHIP_READ>
 800d8ca:	4030      	ands	r0, r6
 800d8cc:	fa40 f10b 	asr.w	r1, r0, fp
 800d8d0:	fa09 f101 	lsl.w	r1, r9, r1
 800d8d4:	ebc4 2481 	rsb	r4, r4, r1, lsl #10
 800d8d8:	b2a4      	uxth	r4, r4
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 800d8da:	4622      	mov	r2, r4
 800d8dc:	4639      	mov	r1, r7
 800d8de:	9802      	ldr	r0, [sp, #8]
 800d8e0:	f7ff feda 	bl	800d698 <WIZCHIP_WRITE_BUF>
    wizdata += size;
    size = len - size;
    dst_ptr = getSn_TxBASE(sn);
 800d8e4:	4650      	mov	r0, sl
 800d8e6:	f7ff ff87 	bl	800d7f8 <getSn_TxBASE>
    wizdata += size;
 800d8ea:	4427      	add	r7, r4
    size = len - size;
 800d8ec:	eba8 0404 	sub.w	r4, r8, r4
 800d8f0:	b2a4      	uxth	r4, r4
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 800d8f2:	4622      	mov	r2, r4
 800d8f4:	4639      	mov	r1, r7
 800d8f6:	b280      	uxth	r0, r0
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
  }

  ptr += len;
 800d8f8:	4445      	add	r5, r8
 800d8fa:	b2ad      	uxth	r5, r5
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 800d8fc:	f7ff fecc 	bl	800d698 <WIZCHIP_WRITE_BUF>

  setSn_TX_WR(sn, ptr);  
 800d900:	0a29      	lsrs	r1, r5, #8
 800d902:	9800      	ldr	r0, [sp, #0]
 800d904:	f7ff fe8e 	bl	800d624 <WIZCHIP_WRITE>
 800d908:	9801      	ldr	r0, [sp, #4]
 800d90a:	b2e9      	uxtb	r1, r5
}
 800d90c:	b005      	add	sp, #20
 800d90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSn_TX_WR(sn, ptr);  
 800d912:	f7ff be87 	b.w	800d624 <WIZCHIP_WRITE>
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 800d916:	4642      	mov	r2, r8
 800d918:	4639      	mov	r1, r7
 800d91a:	9802      	ldr	r0, [sp, #8]
 800d91c:	e7ec      	b.n	800d8f8 <wiz_send_data+0xb8>
 800d91e:	bf00      	nop
 800d920:	03fffc00 	.word	0x03fffc00

0800d924 <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 800d928:	1d06      	adds	r6, r0, #4
 800d92a:	0236      	lsls	r6, r6, #8
{
 800d92c:	b085      	sub	sp, #20
  ptr = getSn_RX_RD(sn);
 800d92e:	f106 0328 	add.w	r3, r6, #40	; 0x28
{
 800d932:	4682      	mov	sl, r0
  ptr = getSn_RX_RD(sn);
 800d934:	4618      	mov	r0, r3
{
 800d936:	4690      	mov	r8, r2
 800d938:	460f      	mov	r7, r1
  ptr = getSn_RX_RD(sn);
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	f7ff fe90 	bl	800d660 <WIZCHIP_READ>
 800d940:	f106 0329 	add.w	r3, r6, #41	; 0x29
 800d944:	4605      	mov	r5, r0
 800d946:	4618      	mov	r0, r3
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	f7ff fe89 	bl	800d660 <WIZCHIP_READ>
 800d94e:	eb00 2505 	add.w	r5, r0, r5, lsl #8
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800d952:	201a      	movs	r0, #26
 800d954:	f7ff fe84 	bl	800d660 <WIZCHIP_READ>
 800d958:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800d95c:	2303      	movs	r3, #3
 800d95e:	fa03 f60b 	lsl.w	r6, r3, fp
 800d962:	ea00 0406 	and.w	r4, r0, r6
 800d966:	f04f 0901 	mov.w	r9, #1
 800d96a:	fa44 f40b 	asr.w	r4, r4, fp
 800d96e:	fa09 f404 	lsl.w	r4, r9, r4
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 800d972:	4650      	mov	r0, sl
 800d974:	f7ff ff1c 	bl	800d7b0 <getSn_RxBASE>
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800d978:	02a4      	lsls	r4, r4, #10
  ptr = getSn_RX_RD(sn);
 800d97a:	b2ad      	uxth	r5, r5
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800d97c:	3c01      	subs	r4, #1
 800d97e:	402c      	ands	r4, r5
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 800d980:	4420      	add	r0, r4
 800d982:	b283      	uxth	r3, r0
 800d984:	9302      	str	r3, [sp, #8]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 800d986:	201a      	movs	r0, #26
 800d988:	eb04 0308 	add.w	r3, r4, r8
 800d98c:	9303      	str	r3, [sp, #12]
 800d98e:	f7ff fe67 	bl	800d660 <WIZCHIP_READ>
 800d992:	4030      	ands	r0, r6
 800d994:	4b1b      	ldr	r3, [pc, #108]	; (800da04 <wiz_recv_data+0xe0>)
 800d996:	fa40 f00b 	asr.w	r0, r0, fp
 800d99a:	fa09 f000 	lsl.w	r0, r9, r0
 800d99e:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	4283      	cmp	r3, r0
 800d9a6:	dd28      	ble.n	800d9fa <wiz_recv_data+0xd6>
  {
    size = getSn_RxMAX(sn) - src_mask;
 800d9a8:	201a      	movs	r0, #26
 800d9aa:	f7ff fe59 	bl	800d660 <WIZCHIP_READ>
 800d9ae:	4030      	ands	r0, r6
 800d9b0:	fa40 f10b 	asr.w	r1, r0, fp
 800d9b4:	fa09 f101 	lsl.w	r1, r9, r1
 800d9b8:	ebc4 2481 	rsb	r4, r4, r1, lsl #10
 800d9bc:	b2a4      	uxth	r4, r4
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4639      	mov	r1, r7
 800d9c2:	9802      	ldr	r0, [sp, #8]
 800d9c4:	f7ff fe8e 	bl	800d6e4 <WIZCHIP_READ_BUF>
    wizdata += size;
    size = len - size;
	src_ptr = getSn_RxBASE(sn);
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	f7ff fef1 	bl	800d7b0 <getSn_RxBASE>
    wizdata += size;
 800d9ce:	4427      	add	r7, r4
    size = len - size;
 800d9d0:	eba8 0404 	sub.w	r4, r8, r4
 800d9d4:	b2a4      	uxth	r4, r4
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	4639      	mov	r1, r7
 800d9da:	b280      	uxth	r0, r0
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
  }
    
  ptr += len;
 800d9dc:	4445      	add	r5, r8
 800d9de:	b2ad      	uxth	r5, r5
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 800d9e0:	f7ff fe80 	bl	800d6e4 <WIZCHIP_READ_BUF>
  
  setSn_RX_RD(sn, ptr);
 800d9e4:	0a29      	lsrs	r1, r5, #8
 800d9e6:	9800      	ldr	r0, [sp, #0]
 800d9e8:	f7ff fe1c 	bl	800d624 <WIZCHIP_WRITE>
 800d9ec:	9801      	ldr	r0, [sp, #4]
 800d9ee:	b2e9      	uxtb	r1, r5
}
 800d9f0:	b005      	add	sp, #20
 800d9f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSn_RX_RD(sn, ptr);
 800d9f6:	f7ff be15 	b.w	800d624 <WIZCHIP_WRITE>
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 800d9fa:	4642      	mov	r2, r8
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	9802      	ldr	r0, [sp, #8]
 800da00:	e7ec      	b.n	800d9dc <wiz_recv_data+0xb8>
 800da02:	bf00      	nop
 800da04:	03fffc00 	.word	0x03fffc00

0800da08 <wiz_mdio_write>:
  ptr += len;
  setSn_RX_RD(sn,ptr);
}

void wiz_mdio_write(uint8_t PHYMDIO_regadr, uint16_t var)
{
 800da08:	b510      	push	{r4, lr}
 800da0a:	460c      	mov	r4, r1
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 800da0c:	4601      	mov	r1, r0
 800da0e:	203f      	movs	r0, #63	; 0x3f
 800da10:	f7ff fe08 	bl	800d624 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYDIR, (uint8_t)(var >> 8));
 800da14:	0a21      	lsrs	r1, r4, #8
 800da16:	2040      	movs	r0, #64	; 0x40
 800da18:	f7ff fe04 	bl	800d624 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYDIR+1, (uint8_t)(var));
 800da1c:	b2e1      	uxtb	r1, r4
 800da1e:	2041      	movs	r0, #65	; 0x41
 800da20:	f7ff fe00 	bl	800d624 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYACR, PHYACR_WRITE);
 800da24:	2101      	movs	r1, #1
 800da26:	2044      	movs	r0, #68	; 0x44
 800da28:	f7ff fdfc 	bl	800d624 <WIZCHIP_WRITE>
    while(WIZCHIP_READ(PHYACR));  //wait for command complete
 800da2c:	2044      	movs	r0, #68	; 0x44
 800da2e:	f7ff fe17 	bl	800d660 <WIZCHIP_READ>
 800da32:	2800      	cmp	r0, #0
 800da34:	d1fa      	bne.n	800da2c <wiz_mdio_write+0x24>
}
 800da36:	bd10      	pop	{r4, pc}

0800da38 <wiz_mdio_read>:

uint16_t wiz_mdio_read(uint8_t PHYMDIO_regadr)
{
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 800da38:	4601      	mov	r1, r0
{
 800da3a:	b510      	push	{r4, lr}
    WIZCHIP_WRITE(PHYRAR,PHYMDIO_regadr);
 800da3c:	203f      	movs	r0, #63	; 0x3f
 800da3e:	f7ff fdf1 	bl	800d624 <WIZCHIP_WRITE>
    WIZCHIP_WRITE(PHYACR, PHYACR_READ);
 800da42:	2102      	movs	r1, #2
 800da44:	2044      	movs	r0, #68	; 0x44
 800da46:	f7ff fded 	bl	800d624 <WIZCHIP_WRITE>
    while(WIZCHIP_READ(PHYACR));  //wait for command complete
 800da4a:	2044      	movs	r0, #68	; 0x44
 800da4c:	f7ff fe08 	bl	800d660 <WIZCHIP_READ>
 800da50:	2800      	cmp	r0, #0
 800da52:	d1fa      	bne.n	800da4a <wiz_mdio_read+0x12>
    return ((uint16_t)WIZCHIP_READ(PHYDOR) << 8) | WIZCHIP_READ(PHYDOR+1);
 800da54:	2042      	movs	r0, #66	; 0x42
 800da56:	f7ff fe03 	bl	800d660 <WIZCHIP_READ>
 800da5a:	4604      	mov	r4, r0
 800da5c:	2043      	movs	r0, #67	; 0x43
 800da5e:	f7ff fdff 	bl	800d660 <WIZCHIP_READ>
 800da62:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 800da66:	b280      	uxth	r0, r0
 800da68:	bd10      	pop	{r4, pc}
	...

0800da6c <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 800da6c:	2804      	cmp	r0, #4
{
 800da6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da70:	4605      	mov	r5, r0
	CHECK_SOCKNUM();
 800da72:	d829      	bhi.n	800dac8 <close+0x5c>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800da74:	1d04      	adds	r4, r0, #4
 800da76:	0224      	lsls	r4, r4, #8
 800da78:	1c67      	adds	r7, r4, #1
 800da7a:	2110      	movs	r1, #16
 800da7c:	4638      	mov	r0, r7
 800da7e:	f7ff fdd1 	bl	800d624 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800da82:	4638      	mov	r0, r7
 800da84:	f7ff fdec 	bl	800d660 <WIZCHIP_READ>
 800da88:	4606      	mov	r6, r0
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d1f9      	bne.n	800da82 <close+0x16>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800da8e:	21ff      	movs	r1, #255	; 0xff
 800da90:	1ca0      	adds	r0, r4, #2
 800da92:	f7ff fdc7 	bl	800d624 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800da96:	490e      	ldr	r1, [pc, #56]	; (800dad0 <close+0x64>)
 800da98:	2301      	movs	r3, #1
 800da9a:	40ab      	lsls	r3, r5
 800da9c:	880a      	ldrh	r2, [r1, #0]
 800da9e:	43db      	mvns	r3, r3
 800daa0:	b21b      	sxth	r3, r3
 800daa2:	401a      	ands	r2, r3
 800daa4:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800daa6:	4a0b      	ldr	r2, [pc, #44]	; (800dad4 <close+0x68>)
 800daa8:	8811      	ldrh	r1, [r2, #0]
 800daaa:	400b      	ands	r3, r1
 800daac:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 800daae:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <close+0x6c>)
 800dab0:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
	sock_pack_info[sn] = 0;
 800dab4:	4b09      	ldr	r3, [pc, #36]	; (800dadc <close+0x70>)
 800dab6:	555e      	strb	r6, [r3, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800dab8:	3403      	adds	r4, #3
 800daba:	4620      	mov	r0, r4
 800dabc:	f7ff fdd0 	bl	800d660 <WIZCHIP_READ>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d1fa      	bne.n	800daba <close+0x4e>
	return SOCK_OK;
 800dac4:	2001      	movs	r0, #1
 800dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dace:	bf00      	nop
 800dad0:	20002740 	.word	0x20002740
 800dad4:	20002742 	.word	0x20002742
 800dad8:	20002748 	.word	0x20002748
 800dadc:	20002744 	.word	0x20002744

0800dae0 <socket>:
	CHECK_SOCKNUM();
 800dae0:	2804      	cmp	r0, #4
{
 800dae2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dae6:	4604      	mov	r4, r0
 800dae8:	4688      	mov	r8, r1
 800daea:	4617      	mov	r7, r2
 800daec:	461d      	mov	r5, r3
	CHECK_SOCKNUM();
 800daee:	d872      	bhi.n	800dbd6 <socket+0xf6>
	switch(protocol)
 800daf0:	2901      	cmp	r1, #1
 800daf2:	d005      	beq.n	800db00 <socket+0x20>
 800daf4:	d301      	bcc.n	800dafa <socket+0x1a>
 800daf6:	2905      	cmp	r1, #5
 800daf8:	d90f      	bls.n	800db1a <socket+0x3a>
         return SOCKERR_SOCKMODE;
 800dafa:	f06f 0004 	mvn.w	r0, #4
 800dafe:	e009      	b.n	800db14 <socket+0x34>
            getSIPR((uint8_t*)&taddr);
 800db00:	2204      	movs	r2, #4
 800db02:	eb0d 0102 	add.w	r1, sp, r2
 800db06:	200f      	movs	r0, #15
 800db08:	f7ff fdec 	bl	800d6e4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800db0c:	9b01      	ldr	r3, [sp, #4]
 800db0e:	b923      	cbnz	r3, 800db1a <socket+0x3a>
 800db10:	f06f 0002 	mvn.w	r0, #2
}	   
 800db14:	b002      	add	sp, #8
 800db16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800db1a:	076a      	lsls	r2, r5, #29
 800db1c:	d453      	bmi.n	800dbc6 <socket+0xe6>
	if(flag != 0)
 800db1e:	b12d      	cbz	r5, 800db2c <socket+0x4c>
   	switch(protocol)
 800db20:	f1b8 0f01 	cmp.w	r8, #1
 800db24:	d04c      	beq.n	800dbc0 <socket+0xe0>
 800db26:	f1b8 0f02 	cmp.w	r8, #2
 800db2a:	d04f      	beq.n	800dbcc <socket+0xec>
	close(sn);
 800db2c:	4620      	mov	r0, r4
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800db2e:	1d26      	adds	r6, r4, #4
	close(sn);
 800db30:	f7ff ff9c 	bl	800da6c <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800db34:	0236      	lsls	r6, r6, #8
 800db36:	f025 010f 	bic.w	r1, r5, #15
 800db3a:	ea41 0108 	orr.w	r1, r1, r8
 800db3e:	4630      	mov	r0, r6
 800db40:	f7ff fd70 	bl	800d624 <WIZCHIP_WRITE>
	if(!port)
 800db44:	b96f      	cbnz	r7, 800db62 <socket+0x82>
	   port = sock_any_port++;
 800db46:	4a25      	ldr	r2, [pc, #148]	; (800dbdc <socket+0xfc>)
 800db48:	8817      	ldrh	r7, [r2, #0]
 800db4a:	1c7b      	adds	r3, r7, #1
 800db4c:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800db4e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800db52:	428b      	cmp	r3, r1
 800db54:	bf09      	itett	eq
 800db56:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 800db5a:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800db5c:	8013      	strheq	r3, [r2, #0]
 800db5e:	f64f 77ef 	movweq	r7, #65519	; 0xffef
   setSn_PORT(sn,port);	
 800db62:	0a39      	lsrs	r1, r7, #8
 800db64:	1d30      	adds	r0, r6, #4
 800db66:	f7ff fd5d 	bl	800d624 <WIZCHIP_WRITE>
 800db6a:	b2f9      	uxtb	r1, r7
 800db6c:	1d70      	adds	r0, r6, #5
   setSn_CR(sn,Sn_CR_OPEN);
 800db6e:	1c77      	adds	r7, r6, #1
   setSn_PORT(sn,port);	
 800db70:	f7ff fd58 	bl	800d624 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800db74:	2101      	movs	r1, #1
 800db76:	4638      	mov	r0, r7
 800db78:	f7ff fd54 	bl	800d624 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800db7c:	4638      	mov	r0, r7
 800db7e:	f7ff fd6f 	bl	800d660 <WIZCHIP_READ>
 800db82:	2800      	cmp	r0, #0
 800db84:	d1fa      	bne.n	800db7c <socket+0x9c>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800db86:	4916      	ldr	r1, [pc, #88]	; (800dbe0 <socket+0x100>)
   sock_io_mode &= ~(1 <<sn);
 800db88:	2301      	movs	r3, #1
 800db8a:	40a3      	lsls	r3, r4
 800db8c:	880a      	ldrh	r2, [r1, #0]
 800db8e:	43db      	mvns	r3, r3
 800db90:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800db92:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 800db96:	401a      	ands	r2, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800db98:	40a5      	lsls	r5, r4
 800db9a:	4315      	orrs	r5, r2
   sock_is_sending &= ~(1<<sn);
 800db9c:	4a11      	ldr	r2, [pc, #68]	; (800dbe4 <socket+0x104>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800db9e:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 800dba0:	8811      	ldrh	r1, [r2, #0]
 800dba2:	400b      	ands	r3, r1
 800dba4:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 800dba6:	4b10      	ldr	r3, [pc, #64]	; (800dbe8 <socket+0x108>)
 800dba8:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 800dbac:	4b0f      	ldr	r3, [pc, #60]	; (800dbec <socket+0x10c>)
 800dbae:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 800dbb0:	3603      	adds	r6, #3
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f7ff fd54 	bl	800d660 <WIZCHIP_READ>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d0fa      	beq.n	800dbb2 <socket+0xd2>
   return (int8_t)sn;
 800dbbc:	b260      	sxtb	r0, r4
 800dbbe:	e7a9      	b.n	800db14 <socket+0x34>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800dbc0:	f015 0f21 	tst.w	r5, #33	; 0x21
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800dbc4:	d1b2      	bne.n	800db2c <socket+0x4c>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800dbc6:	f06f 0005 	mvn.w	r0, #5
 800dbca:	e7a3      	b.n	800db14 <socket+0x34>
   	      if(flag & SF_IGMP_VER2)
 800dbcc:	06ab      	lsls	r3, r5, #26
 800dbce:	d5ad      	bpl.n	800db2c <socket+0x4c>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800dbd0:	f015 0f80 	tst.w	r5, #128	; 0x80
 800dbd4:	e7f6      	b.n	800dbc4 <socket+0xe4>
	CHECK_SOCKNUM();
 800dbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbda:	e79b      	b.n	800db14 <socket+0x34>
 800dbdc:	2000005c 	.word	0x2000005c
 800dbe0:	20002740 	.word	0x20002740
 800dbe4:	20002742 	.word	0x20002742
 800dbe8:	20002748 	.word	0x20002748
 800dbec:	20002744 	.word	0x20002744

0800dbf0 <connect>:
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
 800dbf0:	2804      	cmp	r0, #4
{
 800dbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf6:	4607      	mov	r7, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	4690      	mov	r8, r2
   CHECK_SOCKNUM();
 800dbfc:	d85e      	bhi.n	800dcbc <connect+0xcc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800dbfe:	1d04      	adds	r4, r0, #4
 800dc00:	0224      	lsls	r4, r4, #8
 800dc02:	4620      	mov	r0, r4
 800dc04:	f7ff fd2c 	bl	800d660 <WIZCHIP_READ>
 800dc08:	f000 000f 	and.w	r0, r0, #15
 800dc0c:	2801      	cmp	r0, #1
 800dc0e:	d159      	bne.n	800dcc4 <connect+0xd4>
   CHECK_SOCKINIT();
 800dc10:	1ce6      	adds	r6, r4, #3
 800dc12:	4630      	mov	r0, r6
 800dc14:	f7ff fd24 	bl	800d660 <WIZCHIP_READ>
 800dc18:	2813      	cmp	r0, #19
 800dc1a:	d157      	bne.n	800dccc <connect+0xdc>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800dc1c:	782b      	ldrb	r3, [r5, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800dc1e:	786a      	ldrb	r2, [r5, #1]
 800dc20:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800dc24:	78ab      	ldrb	r3, [r5, #2]
 800dc26:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800dc2a:	78eb      	ldrb	r3, [r5, #3]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dc32:	3303      	adds	r3, #3
 800dc34:	d84e      	bhi.n	800dcd4 <connect+0xe4>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800dc36:	f1b8 0f00 	cmp.w	r8, #0
 800dc3a:	d04f      	beq.n	800dcdc <connect+0xec>
	setSn_DIPR(sn,addr);
 800dc3c:	2204      	movs	r2, #4
 800dc3e:	4629      	mov	r1, r5
 800dc40:	f104 000c 	add.w	r0, r4, #12
 800dc44:	f7ff fd28 	bl	800d698 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800dc48:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800dc4c:	f104 0010 	add.w	r0, r4, #16
 800dc50:	f7ff fce8 	bl	800d624 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800dc54:	1c65      	adds	r5, r4, #1
	setSn_DPORT(sn,port);
 800dc56:	fa5f f188 	uxtb.w	r1, r8
 800dc5a:	f104 0011 	add.w	r0, r4, #17
 800dc5e:	f7ff fce1 	bl	800d624 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800dc62:	2104      	movs	r1, #4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7ff fcdd 	bl	800d624 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f7ff fcf8 	bl	800d660 <WIZCHIP_READ>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d1fa      	bne.n	800dc6a <connect+0x7a>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800dc74:	4b1b      	ldr	r3, [pc, #108]	; (800dce4 <connect+0xf4>)
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	413b      	asrs	r3, r7
 800dc7a:	07da      	lsls	r2, r3, #31
 800dc7c:	d41c      	bmi.n	800dcb8 <connect+0xc8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800dc7e:	3402      	adds	r4, #2
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800dc80:	4630      	mov	r0, r6
 800dc82:	f7ff fced 	bl	800d660 <WIZCHIP_READ>
 800dc86:	2817      	cmp	r0, #23
 800dc88:	d102      	bne.n	800dc90 <connect+0xa0>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
 800dc8a:	2001      	movs	r0, #1
 800dc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff fce5 	bl	800d660 <WIZCHIP_READ>
 800dc96:	0703      	lsls	r3, r0, #28
 800dc98:	d507      	bpl.n	800dcaa <connect+0xba>
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	2108      	movs	r1, #8
 800dc9e:	f7ff fcc1 	bl	800d624 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800dca2:	f06f 000c 	mvn.w	r0, #12
 800dca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (getSn_SR(sn) == SOCK_CLOSED)
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7ff fcd8 	bl	800d660 <WIZCHIP_READ>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d1e5      	bne.n	800dc80 <connect+0x90>
			return SOCKERR_SOCKCLOSED;
 800dcb4:	f06f 0003 	mvn.w	r0, #3
}
 800dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   CHECK_SOCKNUM();
 800dcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 800dcc4:	f06f 0004 	mvn.w	r0, #4
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   CHECK_SOCKINIT();
 800dccc:	f06f 0002 	mvn.w	r0, #2
 800dcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800dcd4:	f06f 000b 	mvn.w	r0, #11
 800dcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(port == 0) return SOCKERR_PORTZERO;
 800dcdc:	f06f 000a 	mvn.w	r0, #10
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce4:	20002740 	.word	0x20002740

0800dce8 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 800dce8:	2804      	cmp	r0, #4
{
 800dcea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcee:	4605      	mov	r5, r0
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	4614      	mov	r4, r2
   CHECK_SOCKNUM();
 800dcf4:	d87c      	bhi.n	800ddf0 <send+0x108>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800dcf6:	1d06      	adds	r6, r0, #4
 800dcf8:	0236      	lsls	r6, r6, #8
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f7ff fcb0 	bl	800d660 <WIZCHIP_READ>
 800dd00:	f000 000f 	and.w	r0, r0, #15
 800dd04:	2801      	cmp	r0, #1
 800dd06:	d176      	bne.n	800ddf6 <send+0x10e>
   CHECK_SOCKDATA();
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	d077      	beq.n	800ddfc <send+0x114>
   tmp = getSn_SR(sn);
 800dd0c:	f106 0803 	add.w	r8, r6, #3
 800dd10:	4640      	mov	r0, r8
 800dd12:	f7ff fca5 	bl	800d660 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800dd16:	2817      	cmp	r0, #23
 800dd18:	d001      	beq.n	800dd1e <send+0x36>
 800dd1a:	281c      	cmp	r0, #28
 800dd1c:	d13a      	bne.n	800dd94 <send+0xac>
   if( sock_is_sending & (1<<sn) )
 800dd1e:	4f39      	ldr	r7, [pc, #228]	; (800de04 <send+0x11c>)
 800dd20:	883b      	ldrh	r3, [r7, #0]
 800dd22:	412b      	asrs	r3, r5
 800dd24:	07d9      	lsls	r1, r3, #31
 800dd26:	d511      	bpl.n	800dd4c <send+0x64>
   {
      tmp = getSn_IR(sn);
 800dd28:	f106 0a02 	add.w	sl, r6, #2
 800dd2c:	4650      	mov	r0, sl
 800dd2e:	f7ff fc97 	bl	800d660 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 800dd32:	06c2      	lsls	r2, r0, #27
 800dd34:	d531      	bpl.n	800dd9a <send+0xb2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800dd36:	2110      	movs	r1, #16
 800dd38:	4650      	mov	r0, sl
 800dd3a:	f7ff fc73 	bl	800d624 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800dd3e:	2301      	movs	r3, #1
 800dd40:	fa03 f205 	lsl.w	r2, r3, r5
 800dd44:	883b      	ldrh	r3, [r7, #0]
 800dd46:	ea23 0302 	bic.w	r3, r3, r2
 800dd4a:	803b      	strh	r3, [r7, #0]
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
 800dd4c:	201b      	movs	r0, #27
 800dd4e:	f7ff fc87 	bl	800d660 <WIZCHIP_READ>
 800dd52:	006a      	lsls	r2, r5, #1
 800dd54:	2303      	movs	r3, #3
 800dd56:	4093      	lsls	r3, r2
 800dd58:	4018      	ands	r0, r3
 800dd5a:	f04f 0a01 	mov.w	sl, #1
 800dd5e:	4110      	asrs	r0, r2
 800dd60:	fa0a f000 	lsl.w	r0, sl, r0
 800dd64:	0280      	lsls	r0, r0, #10
 800dd66:	b280      	uxth	r0, r0
 800dd68:	4284      	cmp	r4, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800dd6a:	4b27      	ldr	r3, [pc, #156]	; (800de08 <send+0x120>)
 800dd6c:	bf28      	it	cs
 800dd6e:	4604      	movcs	r4, r0
 800dd70:	fa0a fa05 	lsl.w	sl, sl, r5
      freesize = getSn_TX_FSR(sn);
 800dd74:	4628      	mov	r0, r5
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	f7ff fcda 	bl	800d730 <getSn_TX_FSR>
 800dd7c:	4683      	mov	fp, r0
      tmp = getSn_SR(sn);
 800dd7e:	4640      	mov	r0, r8
 800dd80:	f7ff fc6e 	bl	800d660 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800dd84:	2817      	cmp	r0, #23
 800dd86:	9b01      	ldr	r3, [sp, #4]
 800dd88:	d013      	beq.n	800ddb2 <send+0xca>
 800dd8a:	281c      	cmp	r0, #28
 800dd8c:	d011      	beq.n	800ddb2 <send+0xca>
         close(sn);
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f7ff fe6c 	bl	800da6c <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800dd94:	f06f 0006 	mvn.w	r0, #6
 800dd98:	e002      	b.n	800dda0 <send+0xb8>
      else if(tmp & Sn_IR_TIMEOUT)
 800dd9a:	0703      	lsls	r3, r0, #28
 800dd9c:	d403      	bmi.n	800dda6 <send+0xbe>
      else return SOCK_BUSY;
 800dd9e:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 800dda0:	b003      	add	sp, #12
 800dda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 800dda6:	4628      	mov	r0, r5
 800dda8:	f7ff fe60 	bl	800da6c <close>
         return SOCKERR_TIMEOUT;
 800ddac:	f06f 000c 	mvn.w	r0, #12
 800ddb0:	e7f6      	b.n	800dda0 <send+0xb8>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800ddb2:	881a      	ldrh	r2, [r3, #0]
 800ddb4:	ea12 0f0a 	tst.w	r2, sl
 800ddb8:	d017      	beq.n	800ddea <send+0x102>
 800ddba:	45a3      	cmp	fp, r4
 800ddbc:	d3ef      	bcc.n	800dd9e <send+0xb6>
   wiz_send_data(sn, buf, len);
 800ddbe:	4649      	mov	r1, r9
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_SEND);
 800ddc4:	3601      	adds	r6, #1
   wiz_send_data(sn, buf, len);
 800ddc6:	f7ff fd3b 	bl	800d840 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 800ddca:	2120      	movs	r1, #32
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f7ff fc29 	bl	800d624 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f7ff fc44 	bl	800d660 <WIZCHIP_READ>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d1fa      	bne.n	800ddd2 <send+0xea>
   sock_is_sending |= (1 << sn);
 800dddc:	883b      	ldrh	r3, [r7, #0]
 800ddde:	ea4a 0a03 	orr.w	sl, sl, r3
 800dde2:	f8a7 a000 	strh.w	sl, [r7]
   return (int32_t)len;
 800dde6:	4620      	mov	r0, r4
 800dde8:	e7da      	b.n	800dda0 <send+0xb8>
      if(len <= freesize) break;
 800ddea:	45a3      	cmp	fp, r4
 800ddec:	d3c2      	bcc.n	800dd74 <send+0x8c>
 800ddee:	e7e6      	b.n	800ddbe <send+0xd6>
   CHECK_SOCKNUM();
 800ddf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf4:	e7d4      	b.n	800dda0 <send+0xb8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ddf6:	f06f 0004 	mvn.w	r0, #4
 800ddfa:	e7d1      	b.n	800dda0 <send+0xb8>
   CHECK_SOCKDATA();
 800ddfc:	f06f 000d 	mvn.w	r0, #13
 800de00:	e7ce      	b.n	800dda0 <send+0xb8>
 800de02:	bf00      	nop
 800de04:	20002742 	.word	0x20002742
 800de08:	20002740 	.word	0x20002740

0800de0c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800de0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de10:	b085      	sub	sp, #20
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800de12:	2804      	cmp	r0, #4
{
 800de14:	4683      	mov	fp, r0
 800de16:	9102      	str	r1, [sp, #8]
 800de18:	4617      	mov	r7, r2
   CHECK_SOCKNUM();
 800de1a:	d86e      	bhi.n	800defa <recv+0xee>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800de1c:	1d05      	adds	r5, r0, #4
 800de1e:	022d      	lsls	r5, r5, #8
 800de20:	4628      	mov	r0, r5
 800de22:	f7ff fc1d 	bl	800d660 <WIZCHIP_READ>
 800de26:	f000 040f 	and.w	r4, r0, #15
 800de2a:	2c01      	cmp	r4, #1
 800de2c:	d168      	bne.n	800df00 <recv+0xf4>
   CHECK_SOCKDATA();
 800de2e:	2f00      	cmp	r7, #0
 800de30:	d069      	beq.n	800df06 <recv+0xfa>
   
   recvsize = getSn_RxMAX(sn);
 800de32:	201a      	movs	r0, #26
 800de34:	f7ff fc14 	bl	800d660 <WIZCHIP_READ>
 800de38:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 800de3c:	2603      	movs	r6, #3
 800de3e:	fa04 f30b 	lsl.w	r3, r4, fp
 800de42:	4680      	mov	r8, r0
 800de44:	fa06 f60a 	lsl.w	r6, r6, sl
 800de48:	9301      	str	r3, [sp, #4]
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
         tmp = getSn_SR(sn);
 800de4a:	f105 0903 	add.w	r9, r5, #3
         recvsize = getSn_RX_RSR(sn);
 800de4e:	4658      	mov	r0, fp
 800de50:	f7ff fc8e 	bl	800d770 <getSn_RX_RSR>
 800de54:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 800de56:	4648      	mov	r0, r9
 800de58:	f7ff fc02 	bl	800d660 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 800de5c:	2817      	cmp	r0, #23
 800de5e:	d040      	beq.n	800dee2 <recv+0xd6>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800de60:	281c      	cmp	r0, #28
 800de62:	d136      	bne.n	800ded2 <recv+0xc6>
            {
               if(recvsize != 0) break;
 800de64:	b1f4      	cbz	r4, 800dea4 <recv+0x98>
   recvsize = getSn_RxMAX(sn);
 800de66:	ea08 0006 	and.w	r0, r8, r6
 800de6a:	fa40 f20a 	asr.w	r2, r0, sl
 800de6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800de72:	4090      	lsls	r0, r2
 800de74:	b280      	uxth	r0, r0
 800de76:	4287      	cmp	r7, r0
 800de78:	bf28      	it	cs
 800de7a:	4607      	movcs	r7, r0
 800de7c:	42bc      	cmp	r4, r7
 800de7e:	bf28      	it	cs
 800de80:	463c      	movcs	r4, r7
 800de82:	b2a4      	uxth	r4, r4
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
 800de84:	9902      	ldr	r1, [sp, #8]
 800de86:	4658      	mov	r0, fp
 800de88:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_RECV);
 800de8a:	3501      	adds	r5, #1
   wiz_recv_data(sn, buf, len);
 800de8c:	f7ff fd4a 	bl	800d924 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800de90:	2140      	movs	r1, #64	; 0x40
 800de92:	4628      	mov	r0, r5
 800de94:	f7ff fbc6 	bl	800d624 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800de98:	4628      	mov	r0, r5
 800de9a:	f7ff fbe1 	bl	800d660 <WIZCHIP_READ>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d1fa      	bne.n	800de98 <recv+0x8c>
 800dea2:	e025      	b.n	800def0 <recv+0xe4>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800dea4:	4658      	mov	r0, fp
 800dea6:	f7ff fc43 	bl	800d730 <getSn_TX_FSR>
 800deaa:	9003      	str	r0, [sp, #12]
 800deac:	201b      	movs	r0, #27
 800deae:	f7ff fbd7 	bl	800d660 <WIZCHIP_READ>
 800deb2:	4030      	ands	r0, r6
 800deb4:	fa40 fe0a 	asr.w	lr, r0, sl
 800deb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800debc:	fa00 f00e 	lsl.w	r0, r0, lr
 800dec0:	f020 407c 	bic.w	r0, r0, #4227858432	; 0xfc000000
 800dec4:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800dec8:	9903      	ldr	r1, [sp, #12]
 800deca:	f020 0003 	bic.w	r0, r0, #3
 800dece:	4281      	cmp	r1, r0
 800ded0:	d107      	bne.n	800dee2 <recv+0xd6>
                  close(sn);
 800ded2:	4658      	mov	r0, fp
 800ded4:	f7ff fdca 	bl	800da6c <close>
                  return SOCKERR_SOCKSTATUS;
 800ded8:	f06f 0006 	mvn.w	r0, #6
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 800dedc:	b005      	add	sp, #20
 800dede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800dee2:	4b0a      	ldr	r3, [pc, #40]	; (800df0c <recv+0x100>)
 800dee4:	8819      	ldrh	r1, [r3, #0]
 800dee6:	9b01      	ldr	r3, [sp, #4]
 800dee8:	4219      	tst	r1, r3
 800deea:	d003      	beq.n	800def4 <recv+0xe8>
 800deec:	2c00      	cmp	r4, #0
 800deee:	d1ba      	bne.n	800de66 <recv+0x5a>
 800def0:	4620      	mov	r0, r4
 800def2:	e7f3      	b.n	800dedc <recv+0xd0>
         if(recvsize != 0) break;
 800def4:	2c00      	cmp	r4, #0
 800def6:	d0aa      	beq.n	800de4e <recv+0x42>
 800def8:	e7b5      	b.n	800de66 <recv+0x5a>
   CHECK_SOCKNUM();
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	e7ed      	b.n	800dedc <recv+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800df00:	f06f 0004 	mvn.w	r0, #4
 800df04:	e7ea      	b.n	800dedc <recv+0xd0>
   CHECK_SOCKDATA();
 800df06:	f06f 000d 	mvn.w	r0, #13
 800df0a:	e7e7      	b.n	800dedc <recv+0xd0>
 800df0c:	20002740 	.word	0x20002740

0800df10 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800df10:	4770      	bx	lr

0800df12 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800df12:	7800      	ldrb	r0, [r0, #0]
 800df14:	4770      	bx	lr

0800df16 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800df16:	7001      	strb	r1, [r0, #0]
 800df18:	4770      	bx	lr

0800df1a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800df1a:	2000      	movs	r0, #0
 800df1c:	4770      	bx	lr

0800df1e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800df1e:	4770      	bx	lr

0800df20 <wizchip_cris_enter>:
 800df20:	4770      	bx	lr

0800df22 <wizchip_cris_exit>:
 800df22:	4770      	bx	lr

0800df24 <wizchip_cs_select>:
 800df24:	4770      	bx	lr
	...

0800df28 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800df28:	4b05      	ldr	r3, [pc, #20]	; (800df40 <reg_wizchip_cs_cbfunc+0x18>)
   if(!cs_sel || !cs_desel)
 800df2a:	b100      	cbz	r0, 800df2e <reg_wizchip_cs_cbfunc+0x6>
 800df2c:	b921      	cbnz	r1, 800df38 <reg_wizchip_cs_cbfunc+0x10>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800df2e:	4a05      	ldr	r2, [pc, #20]	; (800df44 <reg_wizchip_cs_cbfunc+0x1c>)
 800df30:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800df32:	4a05      	ldr	r2, [pc, #20]	; (800df48 <reg_wizchip_cs_cbfunc+0x20>)
 800df34:	619a      	str	r2, [r3, #24]
 800df36:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800df38:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800df3a:	6199      	str	r1, [r3, #24]
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	20000060 	.word	0x20000060
 800df44:	0800df25 	.word	0x0800df25
 800df48:	0800df11 	.word	0x0800df11

0800df4c <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800df4c:	4b08      	ldr	r3, [pc, #32]	; (800df70 <reg_wizchip_spi_cbfunc+0x24>)
{
 800df4e:	b510      	push	{r4, lr}
 800df50:	881c      	ldrh	r4, [r3, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800df52:	05a4      	lsls	r4, r4, #22
 800df54:	461a      	mov	r2, r3
 800df56:	d400      	bmi.n	800df5a <reg_wizchip_spi_cbfunc+0xe>
 800df58:	e7fe      	b.n	800df58 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800df5a:	b100      	cbz	r0, 800df5e <reg_wizchip_spi_cbfunc+0x12>
 800df5c:	b921      	cbnz	r1, 800df68 <reg_wizchip_spi_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800df5e:	4b05      	ldr	r3, [pc, #20]	; (800df74 <reg_wizchip_spi_cbfunc+0x28>)
 800df60:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800df62:	4b05      	ldr	r3, [pc, #20]	; (800df78 <reg_wizchip_spi_cbfunc+0x2c>)
 800df64:	6213      	str	r3, [r2, #32]
 800df66:	bd10      	pop	{r4, pc}
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800df68:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800df6a:	6219      	str	r1, [r3, #32]
 800df6c:	bd10      	pop	{r4, pc}
 800df6e:	bf00      	nop
 800df70:	20000060 	.word	0x20000060
 800df74:	0800df1b 	.word	0x0800df1b
 800df78:	0800df1f 	.word	0x0800df1f

0800df7c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800df7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800df7e:	2206      	movs	r2, #6
 800df80:	a904      	add	r1, sp, #16
 800df82:	2009      	movs	r0, #9
 800df84:	f7ff fbae 	bl	800d6e4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800df88:	2204      	movs	r2, #4
 800df8a:	eb0d 0102 	add.w	r1, sp, r2
 800df8e:	2001      	movs	r0, #1
 800df90:	f7ff fba8 	bl	800d6e4 <WIZCHIP_READ_BUF>
 800df94:	a902      	add	r1, sp, #8
 800df96:	2204      	movs	r2, #4
 800df98:	2005      	movs	r0, #5
 800df9a:	f7ff fba3 	bl	800d6e4 <WIZCHIP_READ_BUF>
 800df9e:	2204      	movs	r2, #4
 800dfa0:	a903      	add	r1, sp, #12
 800dfa2:	200f      	movs	r0, #15
 800dfa4:	f7ff fb9e 	bl	800d6e4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800dfa8:	2180      	movs	r1, #128	; 0x80
 800dfaa:	2000      	movs	r0, #0
 800dfac:	f7ff fb3a 	bl	800d624 <WIZCHIP_WRITE>
   getMR(); // for delay
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	f7ff fb55 	bl	800d660 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800dfb6:	a904      	add	r1, sp, #16
 800dfb8:	2206      	movs	r2, #6
 800dfba:	2009      	movs	r0, #9
 800dfbc:	f7ff fb6c 	bl	800d698 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800dfc0:	2204      	movs	r2, #4
 800dfc2:	eb0d 0102 	add.w	r1, sp, r2
 800dfc6:	2001      	movs	r0, #1
 800dfc8:	f7ff fb66 	bl	800d698 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800dfcc:	a902      	add	r1, sp, #8
 800dfce:	2204      	movs	r2, #4
 800dfd0:	2005      	movs	r0, #5
 800dfd2:	f7ff fb61 	bl	800d698 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800dfd6:	2204      	movs	r2, #4
 800dfd8:	a903      	add	r1, sp, #12
 800dfda:	200f      	movs	r0, #15
 800dfdc:	f7ff fb5c 	bl	800d698 <WIZCHIP_WRITE_BUF>
}
 800dfe0:	b007      	add	sp, #28
 800dfe2:	f85d fb04 	ldr.w	pc, [sp], #4

0800dfe6 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800dfe6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfea:	4606      	mov	r6, r0
 800dfec:	460d      	mov	r5, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 800dfee:	f7ff ffc5 	bl	800df7c <wizchip_sw_reset>
   if(txsize)
 800dff2:	b366      	cbz	r6, 800e04e <wizchip_init+0x68>
 800dff4:	1e77      	subs	r7, r6, #1
 800dff6:	1cf1      	adds	r1, r6, #3
 800dff8:	463a      	mov	r2, r7
 800dffa:	2300      	movs	r3, #0
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 800dffc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e000:	4403      	add	r3, r0
 800e002:	b25b      	sxtb	r3, r3

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 800e004:	2b08      	cmp	r3, #8
 800e006:	dc52      	bgt.n	800e0ae <wizchip_init+0xc8>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800e008:	428a      	cmp	r2, r1
 800e00a:	d1f7      	bne.n	800dffc <wizchip_init+0x16>
 800e00c:	2400      	movs	r4, #0
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
 800e00e:	f04f 0803 	mov.w	r8, #3
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 800e012:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800e016:	2300      	movs	r3, #0
 800e018:	e001      	b.n	800e01e <wizchip_init+0x38>
 800e01a:	3301      	adds	r3, #1
 800e01c:	b12a      	cbz	r2, 800e02a <wizchip_init+0x44>
 800e01e:	fa4f f983 	sxtb.w	r9, r3
 800e022:	fa42 f109 	asr.w	r1, r2, r9
 800e026:	2901      	cmp	r1, #1
 800e028:	d1f7      	bne.n	800e01a <wizchip_init+0x34>
			setSn_TXBUF_SIZE(i, j);
 800e02a:	201b      	movs	r0, #27
 800e02c:	f7ff fb18 	bl	800d660 <WIZCHIP_READ>
 800e030:	fa08 f104 	lsl.w	r1, r8, r4
 800e034:	ea20 0101 	bic.w	r1, r0, r1
 800e038:	fa09 f904 	lsl.w	r9, r9, r4
 800e03c:	ea41 0109 	orr.w	r1, r1, r9
 800e040:	b2c9      	uxtb	r1, r1
 800e042:	201b      	movs	r0, #27
 800e044:	3402      	adds	r4, #2
 800e046:	f7ff faed 	bl	800d624 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800e04a:	2c08      	cmp	r4, #8
 800e04c:	d1e1      	bne.n	800e012 <wizchip_init+0x2c>
		}

	#endif
   }

   if(rxsize)
 800e04e:	b915      	cbnz	r5, 800e056 <wizchip_init+0x70>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 800e050:	2000      	movs	r0, #0
 800e052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e056:	1e6a      	subs	r2, r5, #1
 800e058:	1ce9      	adds	r1, r5, #3
   if(rxsize)
 800e05a:	2300      	movs	r3, #0
			tmp += rxsize[i];
 800e05c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e060:	4403      	add	r3, r0
 800e062:	b25b      	sxtb	r3, r3
			if(tmp > 8) return -1;
 800e064:	2b08      	cmp	r3, #8
 800e066:	dc22      	bgt.n	800e0ae <wizchip_init+0xc8>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800e068:	4291      	cmp	r1, r2
 800e06a:	d1f7      	bne.n	800e05c <wizchip_init+0x76>
 800e06c:	2400      	movs	r4, #0
			setSn_RXBUF_SIZE(i, j);
 800e06e:	2703      	movs	r7, #3
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 800e070:	5d2b      	ldrb	r3, [r5, r4]
 800e072:	2200      	movs	r2, #0
 800e074:	e002      	b.n	800e07c <wizchip_init+0x96>
 800e076:	5d31      	ldrb	r1, [r6, r4]
 800e078:	3201      	adds	r2, #1
 800e07a:	b129      	cbz	r1, 800e088 <wizchip_init+0xa2>
 800e07c:	fa4f f882 	sxtb.w	r8, r2
 800e080:	fa43 f108 	asr.w	r1, r3, r8
 800e084:	2901      	cmp	r1, #1
 800e086:	d1f6      	bne.n	800e076 <wizchip_init+0x90>
			setSn_RXBUF_SIZE(i, j);
 800e088:	201a      	movs	r0, #26
 800e08a:	f7ff fae9 	bl	800d660 <WIZCHIP_READ>
 800e08e:	0063      	lsls	r3, r4, #1
 800e090:	fa07 f103 	lsl.w	r1, r7, r3
 800e094:	ea20 0101 	bic.w	r1, r0, r1
 800e098:	fa08 f303 	lsl.w	r3, r8, r3
 800e09c:	4319      	orrs	r1, r3
 800e09e:	b2c9      	uxtb	r1, r1
 800e0a0:	201a      	movs	r0, #26
 800e0a2:	3401      	adds	r4, #1
 800e0a4:	f7ff fabe 	bl	800d624 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800e0a8:	2c04      	cmp	r4, #4
 800e0aa:	d1e1      	bne.n	800e070 <wizchip_init+0x8a>
 800e0ac:	e7d0      	b.n	800e050 <wizchip_init+0x6a>
			if(tmp > 8) return -1;
 800e0ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e0b6 <wizchip_clrinterrupt>:
   sir &= 0x0F;
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
 800e0b6:	f000 01e0 	and.w	r1, r0, #224	; 0xe0
 800e0ba:	2015      	movs	r0, #21
 800e0bc:	f7ff bab2 	b.w	800d624 <WIZCHIP_WRITE>

0800e0c0 <wizchip_getinterrupt>:
   setSIR(sir);
#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 800e0c0:	b508      	push	{r3, lr}
   uint8_t ir  = 0;
   uint8_t sir = 0;
   uint16_t ret = 0;
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 800e0c2:	2015      	movs	r0, #21
 800e0c4:	f7ff facc 	bl	800d660 <WIZCHIP_READ>
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
  return (intr_kind)ret;
}
 800e0c8:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 800e0cc:	bd08      	pop	{r3, pc}

0800e0ce <wizchip_setinterruptmask>:
void wizchip_setinterruptmask(intr_kind intr)
{
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800e0ce:	f000 01ef 	and.w	r1, r0, #239	; 0xef
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 800e0d2:	f3c0 2003 	ubfx	r0, r0, #8, #4
   imr |= simr;
   setIMR(imr);
 800e0d6:	4301      	orrs	r1, r0
 800e0d8:	2016      	movs	r0, #22
 800e0da:	f7ff baa3 	b.w	800d624 <WIZCHIP_WRITE>

0800e0de <wizchip_getinterruptmask>:
   setSIMR(simr);
#endif   
}

intr_kind wizchip_getinterruptmask(void)
{
 800e0de:	b508      	push	{r3, lr}
   uint8_t imr  = 0;
   uint8_t simr = 0;
   uint16_t ret = 0;
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 800e0e0:	2016      	movs	r0, #22
 800e0e2:	f7ff fabd 	bl	800d660 <WIZCHIP_READ>
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800e0e6:	f000 030f 	and.w	r3, r0, #15
  ret = (ret << 8) + imr;
 800e0ea:	f000 00ef 	and.w	r0, r0, #239	; 0xef
  return (intr_kind)ret;
}
 800e0ee:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e0f2:	bd08      	pop	{r3, pc}

0800e0f4 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800e0f4:	b508      	push	{r3, lr}
   int8_t tmp = PHY_LINK_OFF;
#if _WIZCHIP_ == W5100S
   if(getPHYSR() & PHYSR_LNK)
 800e0f6:	203c      	movs	r0, #60	; 0x3c
 800e0f8:	f7ff fab2 	bl	800d660 <WIZCHIP_READ>

#else
   tmp = -1;
#endif
   return tmp;
}
 800e0fc:	f000 0001 	and.w	r0, r0, #1
 800e100:	bd08      	pop	{r3, pc}

0800e102 <wizphy_reset>:
}
#endif

#if _WIZCHIP_ == W5100S
void wizphy_reset(void)
{
 800e102:	b508      	push	{r3, lr}
	uint16_t tmp = wiz_mdio_read(PHYMDIO_BMCR);
 800e104:	2000      	movs	r0, #0
 800e106:	f7ff fc97 	bl	800da38 <wiz_mdio_read>
	tmp |= BMCR_RESET;
 800e10a:	ea6f 4140 	mvn.w	r1, r0, lsl #17
 800e10e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
	wiz_mdio_write(PHYMDIO_BMCR, tmp);
 800e112:	b289      	uxth	r1, r1
 800e114:	2000      	movs	r0, #0
 800e116:	f7ff fc77 	bl	800da08 <wiz_mdio_write>
	while(wiz_mdio_read(PHYMDIO_BMCR)&BMCR_RESET){}
 800e11a:	2000      	movs	r0, #0
 800e11c:	f7ff fc8c 	bl	800da38 <wiz_mdio_read>
 800e120:	0403      	lsls	r3, r0, #16
 800e122:	d4fa      	bmi.n	800e11a <wizphy_reset+0x18>
}
 800e124:	bd08      	pop	{r3, pc}

0800e126 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800e126:	b510      	push	{r4, lr}
 800e128:	4604      	mov	r4, r0
   uint16_t tmp = wiz_mdio_read(PHYMDIO_BMCR);
 800e12a:	2000      	movs	r0, #0
 800e12c:	f7ff fc84 	bl	800da38 <wiz_mdio_read>
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800e130:	7863      	ldrb	r3, [r4, #1]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d103      	bne.n	800e13e <wizphy_setphyconf+0x18>
      tmp |= BMCR_AUTONEGO;
 800e136:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
      {
    	  tmp |= BMCR_SPEED;
      }
      else
      {
    	  tmp &= ~BMCR_SPEED;
 800e13a:	b289      	uxth	r1, r1
 800e13c:	e010      	b.n	800e160 <wizphy_setphyconf+0x3a>
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800e13e:	78e3      	ldrb	r3, [r4, #3]
 800e140:	2b01      	cmp	r3, #1
	  tmp &= ~BMCR_AUTONEGO;
 800e142:	bf08      	it	eq
 800e144:	f420 5180 	biceq.w	r1, r0, #4096	; 0x1000
      if(phyconf->speed == PHY_SPEED_100)
 800e148:	78a3      	ldrb	r3, [r4, #2]
	  tmp &= ~BMCR_AUTONEGO;
 800e14a:	bf0b      	itete	eq
 800e14c:	b289      	uxtheq	r1, r1
    	  tmp &= ~BMCR_DUP;
 800e14e:	f420 5188 	bicne.w	r1, r0, #4352	; 0x1100
    	  tmp |= BMCR_DUP;
 800e152:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
    	  tmp &= ~BMCR_DUP;
 800e156:	b289      	uxthne	r1, r1
      if(phyconf->speed == PHY_SPEED_100)
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d106      	bne.n	800e16a <wizphy_setphyconf+0x44>
    	  tmp |= BMCR_SPEED;
 800e15c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
      }
   }
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 800e160:	2000      	movs	r0, #0
}
 800e162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 800e166:	f7ff bc4f 	b.w	800da08 <wiz_mdio_write>
    	  tmp &= ~BMCR_SPEED;
 800e16a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800e16e:	e7e4      	b.n	800e13a <wizphy_setphyconf+0x14>

0800e170 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800e170:	b510      	push	{r4, lr}
 800e172:	4604      	mov	r4, r0
   uint16_t tmp = 0;
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 800e174:	2000      	movs	r0, #0
 800e176:	f7ff fc5f 	bl	800da38 <wiz_mdio_read>
   phyconf->by   = PHY_CONFBY_SW;
 800e17a:	2301      	movs	r3, #1
   if(tmp & BMCR_AUTONEGO)
 800e17c:	f410 5280 	ands.w	r2, r0, #4096	; 0x1000
   phyconf->by   = PHY_CONFBY_SW;
 800e180:	7023      	strb	r3, [r4, #0]
   if(tmp & BMCR_AUTONEGO)
 800e182:	d001      	beq.n	800e188 <wizphy_getphyconf+0x18>
   {
	   phyconf->mode = PHY_MODE_AUTONEGO;
 800e184:	7063      	strb	r3, [r4, #1]
 800e186:	bd10      	pop	{r4, pc}
   }
   else
   {
	   phyconf->mode = PHY_MODE_MANUAL;
 800e188:	7062      	strb	r2, [r4, #1]
	   if(tmp&BMCR_DUP) phyconf->duplex = PHY_DUPLEX_FULL;
 800e18a:	f410 7280 	ands.w	r2, r0, #256	; 0x100
 800e18e:	bf18      	it	ne
 800e190:	461a      	movne	r2, r3
	   else phyconf->duplex = PHY_DUPLEX_HALF;
	   if(tmp&BMCR_SPEED) phyconf->speed = PHY_SPEED_100;
 800e192:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
	   if(tmp&BMCR_DUP) phyconf->duplex = PHY_DUPLEX_FULL;
 800e196:	70e2      	strb	r2, [r4, #3]
	   if(tmp&BMCR_SPEED) phyconf->speed = PHY_SPEED_100;
 800e198:	bf14      	ite	ne
 800e19a:	70a3      	strbne	r3, [r4, #2]
	   else phyconf->speed = PHY_SPEED_10;
 800e19c:	70a0      	strbeq	r0, [r4, #2]
 800e19e:	bd10      	pop	{r4, pc}

0800e1a0 <wizphy_setphypmode>:
   }
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	4604      	mov	r4, r0
   uint16_t tmp = 0;
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f7ff fc47 	bl	800da38 <wiz_mdio_read>
   if( pmode == PHY_POWER_DOWN)
 800e1aa:	2c01      	cmp	r4, #1
   {
      tmp |= BMCR_PWDN;
 800e1ac:	bf0c      	ite	eq
 800e1ae:	f440 6100 	orreq.w	r1, r0, #2048	; 0x800
   }
   else
   {
	   tmp &= ~BMCR_PWDN;
 800e1b2:	f420 6100 	bicne.w	r1, r0, #2048	; 0x800
 800e1b6:	b289      	uxth	r1, r1
   }
   wiz_mdio_write(PHYMDIO_BMCR, tmp);
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	f7ff fc25 	bl	800da08 <wiz_mdio_write>
   tmp = wiz_mdio_read(PHYMDIO_BMCR);
 800e1be:	2000      	movs	r0, #0
 800e1c0:	f7ff fc3a 	bl	800da38 <wiz_mdio_read>
   if( pmode == PHY_POWER_DOWN)
 800e1c4:	2c01      	cmp	r4, #1
 800e1c6:	ea4f 20d0 	mov.w	r0, r0, lsr #11
   {
      if(tmp & BMCR_PWDN) return 0;
 800e1ca:	bf08      	it	eq
 800e1cc:	f080 0001 	eoreq.w	r0, r0, #1
   }
   else
   {
      if((tmp & BMCR_PWDN) != BMCR_PWDN) return 0;
 800e1d0:	f340 0000 	sbfx	r0, r0, #0, #1
   }
   return -1;
}
 800e1d4:	bd10      	pop	{r4, pc}
	...

0800e1d8 <ctlwizchip>:
{
 800e1d8:	b510      	push	{r4, lr}
 800e1da:	460c      	mov	r4, r1
   switch(cwtype)
 800e1dc:	280f      	cmp	r0, #15
 800e1de:	d849      	bhi.n	800e274 <ctlwizchip+0x9c>
 800e1e0:	e8df f000 	tbb	[pc, r0]
 800e1e4:	14180c08 	.word	0x14180c08
 800e1e8:	4848201c 	.word	0x4848201c
 800e1ec:	38343123 	.word	0x38343123
 800e1f0:	41483c0a 	.word	0x41483c0a
         wizchip_sw_reset();
 800e1f4:	f7ff fec2 	bl	800df7c <wizchip_sw_reset>
   return 0;
 800e1f8:	2000      	movs	r0, #0
         break;
 800e1fa:	bd10      	pop	{r4, pc}
         if(arg != 0) 
 800e1fc:	b129      	cbz	r1, 800e20a <ctlwizchip+0x32>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800e1fe:	3104      	adds	r1, #4
         return wizchip_init(ptmp[0], ptmp[1]);
 800e200:	4620      	mov	r0, r4
}
 800e202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 800e206:	f7ff beee 	b.w	800dfe6 <wizchip_init>
 800e20a:	e7f9      	b.n	800e200 <ctlwizchip+0x28>
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800e20c:	8808      	ldrh	r0, [r1, #0]
 800e20e:	f7ff ff52 	bl	800e0b6 <wizchip_clrinterrupt>
 800e212:	e7f1      	b.n	800e1f8 <ctlwizchip+0x20>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800e214:	f7ff ff54 	bl	800e0c0 <wizchip_getinterrupt>
 800e218:	8020      	strh	r0, [r4, #0]
 800e21a:	e7ed      	b.n	800e1f8 <ctlwizchip+0x20>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800e21c:	8808      	ldrh	r0, [r1, #0]
 800e21e:	f7ff ff56 	bl	800e0ce <wizchip_setinterruptmask>
 800e222:	e7e9      	b.n	800e1f8 <ctlwizchip+0x20>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800e224:	f7ff ff5b 	bl	800e0de <wizchip_getinterruptmask>
 800e228:	e7f6      	b.n	800e218 <ctlwizchip+0x40>
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800e22a:	4b14      	ldr	r3, [pc, #80]	; (800e27c <ctlwizchip+0xa4>)
 800e22c:	789a      	ldrb	r2, [r3, #2]
 800e22e:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800e230:	78da      	ldrb	r2, [r3, #3]
 800e232:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800e234:	791a      	ldrb	r2, [r3, #4]
 800e236:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800e238:	795a      	ldrb	r2, [r3, #5]
 800e23a:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800e23c:	799b      	ldrb	r3, [r3, #6]
 800e23e:	710b      	strb	r3, [r1, #4]
         ((uint8_t*)arg)[5] = 0;
 800e240:	2000      	movs	r0, #0
 800e242:	7148      	strb	r0, [r1, #5]
         break;
 800e244:	bd10      	pop	{r4, pc}
         wizphy_reset();
 800e246:	f7ff ff5c 	bl	800e102 <wizphy_reset>
 800e24a:	e7d5      	b.n	800e1f8 <ctlwizchip+0x20>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800e24c:	4608      	mov	r0, r1
 800e24e:	f7ff ff6a 	bl	800e126 <wizphy_setphyconf>
 800e252:	e7d1      	b.n	800e1f8 <ctlwizchip+0x20>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800e254:	4608      	mov	r0, r1
 800e256:	f7ff ff8b 	bl	800e170 <wizphy_getphyconf>
 800e25a:	e7cd      	b.n	800e1f8 <ctlwizchip+0x20>
         return wizphy_setphypmode(*(uint8_t*)arg);
 800e25c:	7808      	ldrb	r0, [r1, #0]
}
 800e25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizphy_setphypmode(*(uint8_t*)arg);
 800e262:	f7ff bf9d 	b.w	800e1a0 <wizphy_setphypmode>
         tmp = wizphy_getphylink();
 800e266:	f7ff ff45 	bl	800e0f4 <wizphy_getphylink>
 800e26a:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 800e26c:	28ff      	cmp	r0, #255	; 0xff
 800e26e:	d001      	beq.n	800e274 <ctlwizchip+0x9c>
         *(uint8_t*)arg = tmp;
 800e270:	7020      	strb	r0, [r4, #0]
 800e272:	e7c1      	b.n	800e1f8 <ctlwizchip+0x20>
         if((int8_t)tmp == -1) return -1;
 800e274:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e278:	bd10      	pop	{r4, pc}
 800e27a:	bf00      	nop
 800e27c:	20000060 	.word	0x20000060

0800e280 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800e280:	b510      	push	{r4, lr}
   setSHAR(pnetinfo->mac);
 800e282:	4601      	mov	r1, r0
{
 800e284:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 800e286:	2206      	movs	r2, #6
 800e288:	2009      	movs	r0, #9
 800e28a:	f7ff fa05 	bl	800d698 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800e28e:	2204      	movs	r2, #4
 800e290:	f104 010e 	add.w	r1, r4, #14
 800e294:	2001      	movs	r0, #1
 800e296:	f7ff f9ff 	bl	800d698 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800e29a:	2204      	movs	r2, #4
 800e29c:	f104 010a 	add.w	r1, r4, #10
 800e2a0:	2005      	movs	r0, #5
 800e2a2:	f7ff f9f9 	bl	800d698 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800e2a6:	2204      	movs	r2, #4
 800e2a8:	1da1      	adds	r1, r4, #6
 800e2aa:	200f      	movs	r0, #15
 800e2ac:	f7ff f9f4 	bl	800d698 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800e2b0:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <wizchip_setnetinfo+0x4c>)
 800e2b2:	7ca2      	ldrb	r2, [r4, #18]
 800e2b4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800e2b6:	7ce2      	ldrb	r2, [r4, #19]
 800e2b8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800e2ba:	7d22      	ldrb	r2, [r4, #20]
 800e2bc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800e2be:	7d62      	ldrb	r2, [r4, #21]
 800e2c0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800e2c2:	4b03      	ldr	r3, [pc, #12]	; (800e2d0 <wizchip_setnetinfo+0x50>)
 800e2c4:	7da2      	ldrb	r2, [r4, #22]
 800e2c6:	701a      	strb	r2, [r3, #0]
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20002751 	.word	0x20002751
 800e2d0:	20002750 	.word	0x20002750

0800e2d4 <wizchip_getnetinfo>:
}

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800e2d4:	b510      	push	{r4, lr}
   getSHAR(pnetinfo->mac);
 800e2d6:	4601      	mov	r1, r0
{
 800e2d8:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 800e2da:	2206      	movs	r2, #6
 800e2dc:	2009      	movs	r0, #9
 800e2de:	f7ff fa01 	bl	800d6e4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800e2e2:	2204      	movs	r2, #4
 800e2e4:	f104 010e 	add.w	r1, r4, #14
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	f7ff f9fb 	bl	800d6e4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800e2ee:	2204      	movs	r2, #4
 800e2f0:	f104 010a 	add.w	r1, r4, #10
 800e2f4:	2005      	movs	r0, #5
 800e2f6:	f7ff f9f5 	bl	800d6e4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800e2fa:	2204      	movs	r2, #4
 800e2fc:	1da1      	adds	r1, r4, #6
 800e2fe:	200f      	movs	r0, #15
 800e300:	f7ff f9f0 	bl	800d6e4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800e304:	4b06      	ldr	r3, [pc, #24]	; (800e320 <wizchip_getnetinfo+0x4c>)
 800e306:	781a      	ldrb	r2, [r3, #0]
 800e308:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800e30a:	785a      	ldrb	r2, [r3, #1]
 800e30c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800e30e:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 800e310:	78db      	ldrb	r3, [r3, #3]
 800e312:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 800e314:	4b03      	ldr	r3, [pc, #12]	; (800e324 <wizchip_getnetinfo+0x50>)
   pnetinfo->dns[2]= _DNS_[2];
 800e316:	7522      	strb	r2, [r4, #20]
   pnetinfo->dhcp  = _DHCP_;
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	75a3      	strb	r3, [r4, #22]
 800e31c:	bd10      	pop	{r4, pc}
 800e31e:	bf00      	nop
 800e320:	20002751 	.word	0x20002751
 800e324:	20002750 	.word	0x20002750

0800e328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e328:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e32c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e32e:	e003      	b.n	800e338 <LoopCopyDataInit>

0800e330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e330:	4b0c      	ldr	r3, [pc, #48]	; (800e364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e336:	3104      	adds	r1, #4

0800e338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e338:	480b      	ldr	r0, [pc, #44]	; (800e368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e33a:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e33c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e33e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e340:	d3f6      	bcc.n	800e330 <CopyDataInit>
  ldr  r2, =_sbss
 800e342:	4a0b      	ldr	r2, [pc, #44]	; (800e370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e344:	e002      	b.n	800e34c <LoopFillZerobss>

0800e346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e348:	f842 3b04 	str.w	r3, [r2], #4

0800e34c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e34c:	4b09      	ldr	r3, [pc, #36]	; (800e374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e34e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e350:	d3f9      	bcc.n	800e346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e352:	f7ff f8cb 	bl	800d4ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e356:	f000 f81f 	bl	800e398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e35a:	f7fe ff3d 	bl	800d1d8 <main>
  bx  lr    
 800e35e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800e360:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800e364:	080146c0 	.word	0x080146c0
  ldr  r0, =_sdata
 800e368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e36c:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 800e370:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 800e374:	20003004 	.word	0x20003004

0800e378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e378:	e7fe      	b.n	800e378 <ADC_IRQHandler>
	...

0800e37c <calloc>:
 800e37c:	4b02      	ldr	r3, [pc, #8]	; (800e388 <calloc+0xc>)
 800e37e:	460a      	mov	r2, r1
 800e380:	4601      	mov	r1, r0
 800e382:	6818      	ldr	r0, [r3, #0]
 800e384:	f000 b878 	b.w	800e478 <_calloc_r>
 800e388:	2000008c 	.word	0x2000008c

0800e38c <__errno>:
 800e38c:	4b01      	ldr	r3, [pc, #4]	; (800e394 <__errno+0x8>)
 800e38e:	6818      	ldr	r0, [r3, #0]
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	2000008c 	.word	0x2000008c

0800e398 <__libc_init_array>:
 800e398:	b570      	push	{r4, r5, r6, lr}
 800e39a:	4e0d      	ldr	r6, [pc, #52]	; (800e3d0 <__libc_init_array+0x38>)
 800e39c:	4c0d      	ldr	r4, [pc, #52]	; (800e3d4 <__libc_init_array+0x3c>)
 800e39e:	1ba4      	subs	r4, r4, r6
 800e3a0:	10a4      	asrs	r4, r4, #2
 800e3a2:	2500      	movs	r5, #0
 800e3a4:	42a5      	cmp	r5, r4
 800e3a6:	d109      	bne.n	800e3bc <__libc_init_array+0x24>
 800e3a8:	4e0b      	ldr	r6, [pc, #44]	; (800e3d8 <__libc_init_array+0x40>)
 800e3aa:	4c0c      	ldr	r4, [pc, #48]	; (800e3dc <__libc_init_array+0x44>)
 800e3ac:	f001 fa4a 	bl	800f844 <_init>
 800e3b0:	1ba4      	subs	r4, r4, r6
 800e3b2:	10a4      	asrs	r4, r4, #2
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	42a5      	cmp	r5, r4
 800e3b8:	d105      	bne.n	800e3c6 <__libc_init_array+0x2e>
 800e3ba:	bd70      	pop	{r4, r5, r6, pc}
 800e3bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3c0:	4798      	blx	r3
 800e3c2:	3501      	adds	r5, #1
 800e3c4:	e7ee      	b.n	800e3a4 <__libc_init_array+0xc>
 800e3c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3ca:	4798      	blx	r3
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	e7f2      	b.n	800e3b6 <__libc_init_array+0x1e>
 800e3d0:	080146b8 	.word	0x080146b8
 800e3d4:	080146b8 	.word	0x080146b8
 800e3d8:	080146b8 	.word	0x080146b8
 800e3dc:	080146bc 	.word	0x080146bc

0800e3e0 <malloc>:
 800e3e0:	4b02      	ldr	r3, [pc, #8]	; (800e3ec <malloc+0xc>)
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	6818      	ldr	r0, [r3, #0]
 800e3e6:	f000 b8a3 	b.w	800e530 <_malloc_r>
 800e3ea:	bf00      	nop
 800e3ec:	2000008c 	.word	0x2000008c

0800e3f0 <free>:
 800e3f0:	4b02      	ldr	r3, [pc, #8]	; (800e3fc <free+0xc>)
 800e3f2:	4601      	mov	r1, r0
 800e3f4:	6818      	ldr	r0, [r3, #0]
 800e3f6:	f000 b84d 	b.w	800e494 <_free_r>
 800e3fa:	bf00      	nop
 800e3fc:	2000008c 	.word	0x2000008c

0800e400 <memcmp>:
 800e400:	b510      	push	{r4, lr}
 800e402:	3901      	subs	r1, #1
 800e404:	4402      	add	r2, r0
 800e406:	4290      	cmp	r0, r2
 800e408:	d101      	bne.n	800e40e <memcmp+0xe>
 800e40a:	2000      	movs	r0, #0
 800e40c:	bd10      	pop	{r4, pc}
 800e40e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e412:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e416:	42a3      	cmp	r3, r4
 800e418:	d0f5      	beq.n	800e406 <memcmp+0x6>
 800e41a:	1b18      	subs	r0, r3, r4
 800e41c:	bd10      	pop	{r4, pc}

0800e41e <memcpy>:
 800e41e:	b510      	push	{r4, lr}
 800e420:	1e43      	subs	r3, r0, #1
 800e422:	440a      	add	r2, r1
 800e424:	4291      	cmp	r1, r2
 800e426:	d100      	bne.n	800e42a <memcpy+0xc>
 800e428:	bd10      	pop	{r4, pc}
 800e42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e42e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e432:	e7f7      	b.n	800e424 <memcpy+0x6>

0800e434 <memmove>:
 800e434:	4288      	cmp	r0, r1
 800e436:	b510      	push	{r4, lr}
 800e438:	eb01 0302 	add.w	r3, r1, r2
 800e43c:	d803      	bhi.n	800e446 <memmove+0x12>
 800e43e:	1e42      	subs	r2, r0, #1
 800e440:	4299      	cmp	r1, r3
 800e442:	d10c      	bne.n	800e45e <memmove+0x2a>
 800e444:	bd10      	pop	{r4, pc}
 800e446:	4298      	cmp	r0, r3
 800e448:	d2f9      	bcs.n	800e43e <memmove+0xa>
 800e44a:	1881      	adds	r1, r0, r2
 800e44c:	1ad2      	subs	r2, r2, r3
 800e44e:	42d3      	cmn	r3, r2
 800e450:	d100      	bne.n	800e454 <memmove+0x20>
 800e452:	bd10      	pop	{r4, pc}
 800e454:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e458:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e45c:	e7f7      	b.n	800e44e <memmove+0x1a>
 800e45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e462:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e466:	e7eb      	b.n	800e440 <memmove+0xc>

0800e468 <memset>:
 800e468:	4402      	add	r2, r0
 800e46a:	4603      	mov	r3, r0
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d100      	bne.n	800e472 <memset+0xa>
 800e470:	4770      	bx	lr
 800e472:	f803 1b01 	strb.w	r1, [r3], #1
 800e476:	e7f9      	b.n	800e46c <memset+0x4>

0800e478 <_calloc_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	fb02 f401 	mul.w	r4, r2, r1
 800e47e:	4621      	mov	r1, r4
 800e480:	f000 f856 	bl	800e530 <_malloc_r>
 800e484:	4605      	mov	r5, r0
 800e486:	b118      	cbz	r0, 800e490 <_calloc_r+0x18>
 800e488:	4622      	mov	r2, r4
 800e48a:	2100      	movs	r1, #0
 800e48c:	f7ff ffec 	bl	800e468 <memset>
 800e490:	4628      	mov	r0, r5
 800e492:	bd38      	pop	{r3, r4, r5, pc}

0800e494 <_free_r>:
 800e494:	b538      	push	{r3, r4, r5, lr}
 800e496:	4605      	mov	r5, r0
 800e498:	2900      	cmp	r1, #0
 800e49a:	d045      	beq.n	800e528 <_free_r+0x94>
 800e49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a0:	1f0c      	subs	r4, r1, #4
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	bfb8      	it	lt
 800e4a6:	18e4      	addlt	r4, r4, r3
 800e4a8:	f000 fd40 	bl	800ef2c <__malloc_lock>
 800e4ac:	4a1f      	ldr	r2, [pc, #124]	; (800e52c <_free_r+0x98>)
 800e4ae:	6813      	ldr	r3, [r2, #0]
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	b933      	cbnz	r3, 800e4c2 <_free_r+0x2e>
 800e4b4:	6063      	str	r3, [r4, #4]
 800e4b6:	6014      	str	r4, [r2, #0]
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4be:	f000 bd36 	b.w	800ef2e <__malloc_unlock>
 800e4c2:	42a3      	cmp	r3, r4
 800e4c4:	d90c      	bls.n	800e4e0 <_free_r+0x4c>
 800e4c6:	6821      	ldr	r1, [r4, #0]
 800e4c8:	1862      	adds	r2, r4, r1
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	bf04      	itt	eq
 800e4ce:	681a      	ldreq	r2, [r3, #0]
 800e4d0:	685b      	ldreq	r3, [r3, #4]
 800e4d2:	6063      	str	r3, [r4, #4]
 800e4d4:	bf04      	itt	eq
 800e4d6:	1852      	addeq	r2, r2, r1
 800e4d8:	6022      	streq	r2, [r4, #0]
 800e4da:	6004      	str	r4, [r0, #0]
 800e4dc:	e7ec      	b.n	800e4b8 <_free_r+0x24>
 800e4de:	4613      	mov	r3, r2
 800e4e0:	685a      	ldr	r2, [r3, #4]
 800e4e2:	b10a      	cbz	r2, 800e4e8 <_free_r+0x54>
 800e4e4:	42a2      	cmp	r2, r4
 800e4e6:	d9fa      	bls.n	800e4de <_free_r+0x4a>
 800e4e8:	6819      	ldr	r1, [r3, #0]
 800e4ea:	1858      	adds	r0, r3, r1
 800e4ec:	42a0      	cmp	r0, r4
 800e4ee:	d10b      	bne.n	800e508 <_free_r+0x74>
 800e4f0:	6820      	ldr	r0, [r4, #0]
 800e4f2:	4401      	add	r1, r0
 800e4f4:	1858      	adds	r0, r3, r1
 800e4f6:	4282      	cmp	r2, r0
 800e4f8:	6019      	str	r1, [r3, #0]
 800e4fa:	d1dd      	bne.n	800e4b8 <_free_r+0x24>
 800e4fc:	6810      	ldr	r0, [r2, #0]
 800e4fe:	6852      	ldr	r2, [r2, #4]
 800e500:	605a      	str	r2, [r3, #4]
 800e502:	4401      	add	r1, r0
 800e504:	6019      	str	r1, [r3, #0]
 800e506:	e7d7      	b.n	800e4b8 <_free_r+0x24>
 800e508:	d902      	bls.n	800e510 <_free_r+0x7c>
 800e50a:	230c      	movs	r3, #12
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	e7d3      	b.n	800e4b8 <_free_r+0x24>
 800e510:	6820      	ldr	r0, [r4, #0]
 800e512:	1821      	adds	r1, r4, r0
 800e514:	428a      	cmp	r2, r1
 800e516:	bf04      	itt	eq
 800e518:	6811      	ldreq	r1, [r2, #0]
 800e51a:	6852      	ldreq	r2, [r2, #4]
 800e51c:	6062      	str	r2, [r4, #4]
 800e51e:	bf04      	itt	eq
 800e520:	1809      	addeq	r1, r1, r0
 800e522:	6021      	streq	r1, [r4, #0]
 800e524:	605c      	str	r4, [r3, #4]
 800e526:	e7c7      	b.n	800e4b8 <_free_r+0x24>
 800e528:	bd38      	pop	{r3, r4, r5, pc}
 800e52a:	bf00      	nop
 800e52c:	20002758 	.word	0x20002758

0800e530 <_malloc_r>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	1ccd      	adds	r5, r1, #3
 800e534:	f025 0503 	bic.w	r5, r5, #3
 800e538:	3508      	adds	r5, #8
 800e53a:	2d0c      	cmp	r5, #12
 800e53c:	bf38      	it	cc
 800e53e:	250c      	movcc	r5, #12
 800e540:	2d00      	cmp	r5, #0
 800e542:	4606      	mov	r6, r0
 800e544:	db01      	blt.n	800e54a <_malloc_r+0x1a>
 800e546:	42a9      	cmp	r1, r5
 800e548:	d903      	bls.n	800e552 <_malloc_r+0x22>
 800e54a:	230c      	movs	r3, #12
 800e54c:	6033      	str	r3, [r6, #0]
 800e54e:	2000      	movs	r0, #0
 800e550:	bd70      	pop	{r4, r5, r6, pc}
 800e552:	f000 fceb 	bl	800ef2c <__malloc_lock>
 800e556:	4a23      	ldr	r2, [pc, #140]	; (800e5e4 <_malloc_r+0xb4>)
 800e558:	6814      	ldr	r4, [r2, #0]
 800e55a:	4621      	mov	r1, r4
 800e55c:	b991      	cbnz	r1, 800e584 <_malloc_r+0x54>
 800e55e:	4c22      	ldr	r4, [pc, #136]	; (800e5e8 <_malloc_r+0xb8>)
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	b91b      	cbnz	r3, 800e56c <_malloc_r+0x3c>
 800e564:	4630      	mov	r0, r6
 800e566:	f000 f91f 	bl	800e7a8 <_sbrk_r>
 800e56a:	6020      	str	r0, [r4, #0]
 800e56c:	4629      	mov	r1, r5
 800e56e:	4630      	mov	r0, r6
 800e570:	f000 f91a 	bl	800e7a8 <_sbrk_r>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d126      	bne.n	800e5c6 <_malloc_r+0x96>
 800e578:	230c      	movs	r3, #12
 800e57a:	6033      	str	r3, [r6, #0]
 800e57c:	4630      	mov	r0, r6
 800e57e:	f000 fcd6 	bl	800ef2e <__malloc_unlock>
 800e582:	e7e4      	b.n	800e54e <_malloc_r+0x1e>
 800e584:	680b      	ldr	r3, [r1, #0]
 800e586:	1b5b      	subs	r3, r3, r5
 800e588:	d41a      	bmi.n	800e5c0 <_malloc_r+0x90>
 800e58a:	2b0b      	cmp	r3, #11
 800e58c:	d90f      	bls.n	800e5ae <_malloc_r+0x7e>
 800e58e:	600b      	str	r3, [r1, #0]
 800e590:	50cd      	str	r5, [r1, r3]
 800e592:	18cc      	adds	r4, r1, r3
 800e594:	4630      	mov	r0, r6
 800e596:	f000 fcca 	bl	800ef2e <__malloc_unlock>
 800e59a:	f104 000b 	add.w	r0, r4, #11
 800e59e:	1d23      	adds	r3, r4, #4
 800e5a0:	f020 0007 	bic.w	r0, r0, #7
 800e5a4:	1ac3      	subs	r3, r0, r3
 800e5a6:	d01b      	beq.n	800e5e0 <_malloc_r+0xb0>
 800e5a8:	425a      	negs	r2, r3
 800e5aa:	50e2      	str	r2, [r4, r3]
 800e5ac:	bd70      	pop	{r4, r5, r6, pc}
 800e5ae:	428c      	cmp	r4, r1
 800e5b0:	bf0d      	iteet	eq
 800e5b2:	6863      	ldreq	r3, [r4, #4]
 800e5b4:	684b      	ldrne	r3, [r1, #4]
 800e5b6:	6063      	strne	r3, [r4, #4]
 800e5b8:	6013      	streq	r3, [r2, #0]
 800e5ba:	bf18      	it	ne
 800e5bc:	460c      	movne	r4, r1
 800e5be:	e7e9      	b.n	800e594 <_malloc_r+0x64>
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	6849      	ldr	r1, [r1, #4]
 800e5c4:	e7ca      	b.n	800e55c <_malloc_r+0x2c>
 800e5c6:	1cc4      	adds	r4, r0, #3
 800e5c8:	f024 0403 	bic.w	r4, r4, #3
 800e5cc:	42a0      	cmp	r0, r4
 800e5ce:	d005      	beq.n	800e5dc <_malloc_r+0xac>
 800e5d0:	1a21      	subs	r1, r4, r0
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f000 f8e8 	bl	800e7a8 <_sbrk_r>
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d0cd      	beq.n	800e578 <_malloc_r+0x48>
 800e5dc:	6025      	str	r5, [r4, #0]
 800e5de:	e7d9      	b.n	800e594 <_malloc_r+0x64>
 800e5e0:	bd70      	pop	{r4, r5, r6, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20002758 	.word	0x20002758
 800e5e8:	2000275c 	.word	0x2000275c

0800e5ec <iprintf>:
 800e5ec:	b40f      	push	{r0, r1, r2, r3}
 800e5ee:	4b0a      	ldr	r3, [pc, #40]	; (800e618 <iprintf+0x2c>)
 800e5f0:	b513      	push	{r0, r1, r4, lr}
 800e5f2:	681c      	ldr	r4, [r3, #0]
 800e5f4:	b124      	cbz	r4, 800e600 <iprintf+0x14>
 800e5f6:	69a3      	ldr	r3, [r4, #24]
 800e5f8:	b913      	cbnz	r3, 800e600 <iprintf+0x14>
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f000 fb96 	bl	800ed2c <__sinit>
 800e600:	ab05      	add	r3, sp, #20
 800e602:	9a04      	ldr	r2, [sp, #16]
 800e604:	68a1      	ldr	r1, [r4, #8]
 800e606:	9301      	str	r3, [sp, #4]
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 fe0b 	bl	800f224 <_vfiprintf_r>
 800e60e:	b002      	add	sp, #8
 800e610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e614:	b004      	add	sp, #16
 800e616:	4770      	bx	lr
 800e618:	2000008c 	.word	0x2000008c

0800e61c <_puts_r>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	460e      	mov	r6, r1
 800e620:	4605      	mov	r5, r0
 800e622:	b118      	cbz	r0, 800e62c <_puts_r+0x10>
 800e624:	6983      	ldr	r3, [r0, #24]
 800e626:	b90b      	cbnz	r3, 800e62c <_puts_r+0x10>
 800e628:	f000 fb80 	bl	800ed2c <__sinit>
 800e62c:	69ab      	ldr	r3, [r5, #24]
 800e62e:	68ac      	ldr	r4, [r5, #8]
 800e630:	b913      	cbnz	r3, 800e638 <_puts_r+0x1c>
 800e632:	4628      	mov	r0, r5
 800e634:	f000 fb7a 	bl	800ed2c <__sinit>
 800e638:	4b23      	ldr	r3, [pc, #140]	; (800e6c8 <_puts_r+0xac>)
 800e63a:	429c      	cmp	r4, r3
 800e63c:	d117      	bne.n	800e66e <_puts_r+0x52>
 800e63e:	686c      	ldr	r4, [r5, #4]
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	071b      	lsls	r3, r3, #28
 800e644:	d51d      	bpl.n	800e682 <_puts_r+0x66>
 800e646:	6923      	ldr	r3, [r4, #16]
 800e648:	b1db      	cbz	r3, 800e682 <_puts_r+0x66>
 800e64a:	3e01      	subs	r6, #1
 800e64c:	68a3      	ldr	r3, [r4, #8]
 800e64e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e652:	3b01      	subs	r3, #1
 800e654:	60a3      	str	r3, [r4, #8]
 800e656:	b9e9      	cbnz	r1, 800e694 <_puts_r+0x78>
 800e658:	2b00      	cmp	r3, #0
 800e65a:	da2e      	bge.n	800e6ba <_puts_r+0x9e>
 800e65c:	4622      	mov	r2, r4
 800e65e:	210a      	movs	r1, #10
 800e660:	4628      	mov	r0, r5
 800e662:	f000 f98f 	bl	800e984 <__swbuf_r>
 800e666:	3001      	adds	r0, #1
 800e668:	d011      	beq.n	800e68e <_puts_r+0x72>
 800e66a:	200a      	movs	r0, #10
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	4b17      	ldr	r3, [pc, #92]	; (800e6cc <_puts_r+0xb0>)
 800e670:	429c      	cmp	r4, r3
 800e672:	d101      	bne.n	800e678 <_puts_r+0x5c>
 800e674:	68ac      	ldr	r4, [r5, #8]
 800e676:	e7e3      	b.n	800e640 <_puts_r+0x24>
 800e678:	4b15      	ldr	r3, [pc, #84]	; (800e6d0 <_puts_r+0xb4>)
 800e67a:	429c      	cmp	r4, r3
 800e67c:	bf08      	it	eq
 800e67e:	68ec      	ldreq	r4, [r5, #12]
 800e680:	e7de      	b.n	800e640 <_puts_r+0x24>
 800e682:	4621      	mov	r1, r4
 800e684:	4628      	mov	r0, r5
 800e686:	f000 f9e1 	bl	800ea4c <__swsetup_r>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d0dd      	beq.n	800e64a <_puts_r+0x2e>
 800e68e:	f04f 30ff 	mov.w	r0, #4294967295
 800e692:	bd70      	pop	{r4, r5, r6, pc}
 800e694:	2b00      	cmp	r3, #0
 800e696:	da04      	bge.n	800e6a2 <_puts_r+0x86>
 800e698:	69a2      	ldr	r2, [r4, #24]
 800e69a:	4293      	cmp	r3, r2
 800e69c:	db06      	blt.n	800e6ac <_puts_r+0x90>
 800e69e:	290a      	cmp	r1, #10
 800e6a0:	d004      	beq.n	800e6ac <_puts_r+0x90>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	6022      	str	r2, [r4, #0]
 800e6a8:	7019      	strb	r1, [r3, #0]
 800e6aa:	e7cf      	b.n	800e64c <_puts_r+0x30>
 800e6ac:	4622      	mov	r2, r4
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f000 f968 	bl	800e984 <__swbuf_r>
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d1c9      	bne.n	800e64c <_puts_r+0x30>
 800e6b8:	e7e9      	b.n	800e68e <_puts_r+0x72>
 800e6ba:	6823      	ldr	r3, [r4, #0]
 800e6bc:	200a      	movs	r0, #10
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	6022      	str	r2, [r4, #0]
 800e6c2:	7018      	strb	r0, [r3, #0]
 800e6c4:	bd70      	pop	{r4, r5, r6, pc}
 800e6c6:	bf00      	nop
 800e6c8:	0801463c 	.word	0x0801463c
 800e6cc:	0801465c 	.word	0x0801465c
 800e6d0:	0801461c 	.word	0x0801461c

0800e6d4 <puts>:
 800e6d4:	4b02      	ldr	r3, [pc, #8]	; (800e6e0 <puts+0xc>)
 800e6d6:	4601      	mov	r1, r0
 800e6d8:	6818      	ldr	r0, [r3, #0]
 800e6da:	f7ff bf9f 	b.w	800e61c <_puts_r>
 800e6de:	bf00      	nop
 800e6e0:	2000008c 	.word	0x2000008c

0800e6e4 <srand>:
 800e6e4:	b538      	push	{r3, r4, r5, lr}
 800e6e6:	4b12      	ldr	r3, [pc, #72]	; (800e730 <srand+0x4c>)
 800e6e8:	681c      	ldr	r4, [r3, #0]
 800e6ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	b9d3      	cbnz	r3, 800e726 <srand+0x42>
 800e6f0:	2018      	movs	r0, #24
 800e6f2:	f7ff fe75 	bl	800e3e0 <malloc>
 800e6f6:	f243 330e 	movw	r3, #13070	; 0x330e
 800e6fa:	63a0      	str	r0, [r4, #56]	; 0x38
 800e6fc:	8003      	strh	r3, [r0, #0]
 800e6fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800e702:	8043      	strh	r3, [r0, #2]
 800e704:	f241 2334 	movw	r3, #4660	; 0x1234
 800e708:	8083      	strh	r3, [r0, #4]
 800e70a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800e70e:	80c3      	strh	r3, [r0, #6]
 800e710:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800e714:	8103      	strh	r3, [r0, #8]
 800e716:	2305      	movs	r3, #5
 800e718:	8143      	strh	r3, [r0, #10]
 800e71a:	230b      	movs	r3, #11
 800e71c:	8183      	strh	r3, [r0, #12]
 800e71e:	2201      	movs	r2, #1
 800e720:	2300      	movs	r3, #0
 800e722:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e728:	2200      	movs	r2, #0
 800e72a:	611d      	str	r5, [r3, #16]
 800e72c:	615a      	str	r2, [r3, #20]
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	2000008c 	.word	0x2000008c

0800e734 <rand>:
 800e734:	4b19      	ldr	r3, [pc, #100]	; (800e79c <rand+0x68>)
 800e736:	b510      	push	{r4, lr}
 800e738:	681c      	ldr	r4, [r3, #0]
 800e73a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e73c:	b9d3      	cbnz	r3, 800e774 <rand+0x40>
 800e73e:	2018      	movs	r0, #24
 800e740:	f7ff fe4e 	bl	800e3e0 <malloc>
 800e744:	f243 330e 	movw	r3, #13070	; 0x330e
 800e748:	63a0      	str	r0, [r4, #56]	; 0x38
 800e74a:	8003      	strh	r3, [r0, #0]
 800e74c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800e750:	8043      	strh	r3, [r0, #2]
 800e752:	f241 2334 	movw	r3, #4660	; 0x1234
 800e756:	8083      	strh	r3, [r0, #4]
 800e758:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800e75c:	80c3      	strh	r3, [r0, #6]
 800e75e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800e762:	8103      	strh	r3, [r0, #8]
 800e764:	2305      	movs	r3, #5
 800e766:	8143      	strh	r3, [r0, #10]
 800e768:	230b      	movs	r3, #11
 800e76a:	8183      	strh	r3, [r0, #12]
 800e76c:	2201      	movs	r2, #1
 800e76e:	2300      	movs	r3, #0
 800e770:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e774:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e776:	480a      	ldr	r0, [pc, #40]	; (800e7a0 <rand+0x6c>)
 800e778:	690a      	ldr	r2, [r1, #16]
 800e77a:	694b      	ldr	r3, [r1, #20]
 800e77c:	4c09      	ldr	r4, [pc, #36]	; (800e7a4 <rand+0x70>)
 800e77e:	4350      	muls	r0, r2
 800e780:	fb04 0003 	mla	r0, r4, r3, r0
 800e784:	fba2 2304 	umull	r2, r3, r2, r4
 800e788:	3201      	adds	r2, #1
 800e78a:	4403      	add	r3, r0
 800e78c:	f143 0300 	adc.w	r3, r3, #0
 800e790:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e794:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e798:	bd10      	pop	{r4, pc}
 800e79a:	bf00      	nop
 800e79c:	2000008c 	.word	0x2000008c
 800e7a0:	5851f42d 	.word	0x5851f42d
 800e7a4:	4c957f2d 	.word	0x4c957f2d

0800e7a8 <_sbrk_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4c06      	ldr	r4, [pc, #24]	; (800e7c4 <_sbrk_r+0x1c>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	6023      	str	r3, [r4, #0]
 800e7b4:	f7fe fe74 	bl	800d4a0 <_sbrk>
 800e7b8:	1c43      	adds	r3, r0, #1
 800e7ba:	d102      	bne.n	800e7c2 <_sbrk_r+0x1a>
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	b103      	cbz	r3, 800e7c2 <_sbrk_r+0x1a>
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	bd38      	pop	{r3, r4, r5, pc}
 800e7c4:	20003000 	.word	0x20003000

0800e7c8 <sniprintf>:
 800e7c8:	b40c      	push	{r2, r3}
 800e7ca:	b530      	push	{r4, r5, lr}
 800e7cc:	4b17      	ldr	r3, [pc, #92]	; (800e82c <sniprintf+0x64>)
 800e7ce:	1e0c      	subs	r4, r1, #0
 800e7d0:	b09d      	sub	sp, #116	; 0x74
 800e7d2:	681d      	ldr	r5, [r3, #0]
 800e7d4:	da08      	bge.n	800e7e8 <sniprintf+0x20>
 800e7d6:	238b      	movs	r3, #139	; 0x8b
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	f04f 30ff 	mov.w	r0, #4294967295
 800e7de:	b01d      	add	sp, #116	; 0x74
 800e7e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7e4:	b002      	add	sp, #8
 800e7e6:	4770      	bx	lr
 800e7e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e7ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7f0:	bf14      	ite	ne
 800e7f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e7f6:	4623      	moveq	r3, r4
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	9307      	str	r3, [sp, #28]
 800e7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e800:	9002      	str	r0, [sp, #8]
 800e802:	9006      	str	r0, [sp, #24]
 800e804:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e808:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e80a:	ab21      	add	r3, sp, #132	; 0x84
 800e80c:	a902      	add	r1, sp, #8
 800e80e:	4628      	mov	r0, r5
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	f000 fbe9 	bl	800efe8 <_svfiprintf_r>
 800e816:	1c43      	adds	r3, r0, #1
 800e818:	bfbc      	itt	lt
 800e81a:	238b      	movlt	r3, #139	; 0x8b
 800e81c:	602b      	strlt	r3, [r5, #0]
 800e81e:	2c00      	cmp	r4, #0
 800e820:	d0dd      	beq.n	800e7de <sniprintf+0x16>
 800e822:	9b02      	ldr	r3, [sp, #8]
 800e824:	2200      	movs	r2, #0
 800e826:	701a      	strb	r2, [r3, #0]
 800e828:	e7d9      	b.n	800e7de <sniprintf+0x16>
 800e82a:	bf00      	nop
 800e82c:	2000008c 	.word	0x2000008c

0800e830 <__sread>:
 800e830:	b510      	push	{r4, lr}
 800e832:	460c      	mov	r4, r1
 800e834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e838:	f000 ffa0 	bl	800f77c <_read_r>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	bfab      	itete	ge
 800e840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e842:	89a3      	ldrhlt	r3, [r4, #12]
 800e844:	181b      	addge	r3, r3, r0
 800e846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e84a:	bfac      	ite	ge
 800e84c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e84e:	81a3      	strhlt	r3, [r4, #12]
 800e850:	bd10      	pop	{r4, pc}

0800e852 <__swrite>:
 800e852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e856:	461f      	mov	r7, r3
 800e858:	898b      	ldrh	r3, [r1, #12]
 800e85a:	05db      	lsls	r3, r3, #23
 800e85c:	4605      	mov	r5, r0
 800e85e:	460c      	mov	r4, r1
 800e860:	4616      	mov	r6, r2
 800e862:	d505      	bpl.n	800e870 <__swrite+0x1e>
 800e864:	2302      	movs	r3, #2
 800e866:	2200      	movs	r2, #0
 800e868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e86c:	f000 fae8 	bl	800ee40 <_lseek_r>
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e87a:	81a3      	strh	r3, [r4, #12]
 800e87c:	4632      	mov	r2, r6
 800e87e:	463b      	mov	r3, r7
 800e880:	4628      	mov	r0, r5
 800e882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e886:	f000 b8cf 	b.w	800ea28 <_write_r>

0800e88a <__sseek>:
 800e88a:	b510      	push	{r4, lr}
 800e88c:	460c      	mov	r4, r1
 800e88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e892:	f000 fad5 	bl	800ee40 <_lseek_r>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	bf15      	itete	ne
 800e89c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e89e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8a6:	81a3      	strheq	r3, [r4, #12]
 800e8a8:	bf18      	it	ne
 800e8aa:	81a3      	strhne	r3, [r4, #12]
 800e8ac:	bd10      	pop	{r4, pc}

0800e8ae <__sclose>:
 800e8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8b2:	f000 b939 	b.w	800eb28 <_close_r>

0800e8b6 <strncmp>:
 800e8b6:	b510      	push	{r4, lr}
 800e8b8:	b16a      	cbz	r2, 800e8d6 <strncmp+0x20>
 800e8ba:	3901      	subs	r1, #1
 800e8bc:	1884      	adds	r4, r0, r2
 800e8be:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e8c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d103      	bne.n	800e8d2 <strncmp+0x1c>
 800e8ca:	42a0      	cmp	r0, r4
 800e8cc:	d001      	beq.n	800e8d2 <strncmp+0x1c>
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1f5      	bne.n	800e8be <strncmp+0x8>
 800e8d2:	1a98      	subs	r0, r3, r2
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	bd10      	pop	{r4, pc}

0800e8da <strstr>:
 800e8da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8dc:	7803      	ldrb	r3, [r0, #0]
 800e8de:	b133      	cbz	r3, 800e8ee <strstr+0x14>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	1c5e      	adds	r6, r3, #1
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	b933      	cbnz	r3, 800e8f8 <strstr+0x1e>
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ee:	780b      	ldrb	r3, [r1, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bf18      	it	ne
 800e8f4:	2000      	movne	r0, #0
 800e8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f8:	1e4d      	subs	r5, r1, #1
 800e8fa:	1e44      	subs	r4, r0, #1
 800e8fc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e900:	2a00      	cmp	r2, #0
 800e902:	d0f3      	beq.n	800e8ec <strstr+0x12>
 800e904:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800e908:	4297      	cmp	r7, r2
 800e90a:	4633      	mov	r3, r6
 800e90c:	d0f6      	beq.n	800e8fc <strstr+0x22>
 800e90e:	e7e8      	b.n	800e8e2 <strstr+0x8>

0800e910 <_vsniprintf_r>:
 800e910:	b530      	push	{r4, r5, lr}
 800e912:	1e14      	subs	r4, r2, #0
 800e914:	4605      	mov	r5, r0
 800e916:	b09b      	sub	sp, #108	; 0x6c
 800e918:	4618      	mov	r0, r3
 800e91a:	da05      	bge.n	800e928 <_vsniprintf_r+0x18>
 800e91c:	238b      	movs	r3, #139	; 0x8b
 800e91e:	602b      	str	r3, [r5, #0]
 800e920:	f04f 30ff 	mov.w	r0, #4294967295
 800e924:	b01b      	add	sp, #108	; 0x6c
 800e926:	bd30      	pop	{r4, r5, pc}
 800e928:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e92c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e930:	bf14      	ite	ne
 800e932:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e936:	4623      	moveq	r3, r4
 800e938:	9302      	str	r3, [sp, #8]
 800e93a:	9305      	str	r3, [sp, #20]
 800e93c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e940:	9100      	str	r1, [sp, #0]
 800e942:	9104      	str	r1, [sp, #16]
 800e944:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e948:	4602      	mov	r2, r0
 800e94a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e94c:	4669      	mov	r1, sp
 800e94e:	4628      	mov	r0, r5
 800e950:	f000 fb4a 	bl	800efe8 <_svfiprintf_r>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	bfbc      	itt	lt
 800e958:	238b      	movlt	r3, #139	; 0x8b
 800e95a:	602b      	strlt	r3, [r5, #0]
 800e95c:	2c00      	cmp	r4, #0
 800e95e:	d0e1      	beq.n	800e924 <_vsniprintf_r+0x14>
 800e960:	9b00      	ldr	r3, [sp, #0]
 800e962:	2200      	movs	r2, #0
 800e964:	701a      	strb	r2, [r3, #0]
 800e966:	e7dd      	b.n	800e924 <_vsniprintf_r+0x14>

0800e968 <vsniprintf>:
 800e968:	b507      	push	{r0, r1, r2, lr}
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	4613      	mov	r3, r2
 800e96e:	460a      	mov	r2, r1
 800e970:	4601      	mov	r1, r0
 800e972:	4803      	ldr	r0, [pc, #12]	; (800e980 <vsniprintf+0x18>)
 800e974:	6800      	ldr	r0, [r0, #0]
 800e976:	f7ff ffcb 	bl	800e910 <_vsniprintf_r>
 800e97a:	b003      	add	sp, #12
 800e97c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e980:	2000008c 	.word	0x2000008c

0800e984 <__swbuf_r>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	460e      	mov	r6, r1
 800e988:	4614      	mov	r4, r2
 800e98a:	4605      	mov	r5, r0
 800e98c:	b118      	cbz	r0, 800e996 <__swbuf_r+0x12>
 800e98e:	6983      	ldr	r3, [r0, #24]
 800e990:	b90b      	cbnz	r3, 800e996 <__swbuf_r+0x12>
 800e992:	f000 f9cb 	bl	800ed2c <__sinit>
 800e996:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <__swbuf_r+0x98>)
 800e998:	429c      	cmp	r4, r3
 800e99a:	d12a      	bne.n	800e9f2 <__swbuf_r+0x6e>
 800e99c:	686c      	ldr	r4, [r5, #4]
 800e99e:	69a3      	ldr	r3, [r4, #24]
 800e9a0:	60a3      	str	r3, [r4, #8]
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	071a      	lsls	r2, r3, #28
 800e9a6:	d52e      	bpl.n	800ea06 <__swbuf_r+0x82>
 800e9a8:	6923      	ldr	r3, [r4, #16]
 800e9aa:	b363      	cbz	r3, 800ea06 <__swbuf_r+0x82>
 800e9ac:	6923      	ldr	r3, [r4, #16]
 800e9ae:	6820      	ldr	r0, [r4, #0]
 800e9b0:	1ac0      	subs	r0, r0, r3
 800e9b2:	6963      	ldr	r3, [r4, #20]
 800e9b4:	b2f6      	uxtb	r6, r6
 800e9b6:	4298      	cmp	r0, r3
 800e9b8:	4637      	mov	r7, r6
 800e9ba:	db04      	blt.n	800e9c6 <__swbuf_r+0x42>
 800e9bc:	4621      	mov	r1, r4
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 f94a 	bl	800ec58 <_fflush_r>
 800e9c4:	bb28      	cbnz	r0, 800ea12 <__swbuf_r+0x8e>
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	60a3      	str	r3, [r4, #8]
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	6022      	str	r2, [r4, #0]
 800e9d2:	701e      	strb	r6, [r3, #0]
 800e9d4:	6963      	ldr	r3, [r4, #20]
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	4298      	cmp	r0, r3
 800e9da:	d004      	beq.n	800e9e6 <__swbuf_r+0x62>
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	07db      	lsls	r3, r3, #31
 800e9e0:	d519      	bpl.n	800ea16 <__swbuf_r+0x92>
 800e9e2:	2e0a      	cmp	r6, #10
 800e9e4:	d117      	bne.n	800ea16 <__swbuf_r+0x92>
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f000 f935 	bl	800ec58 <_fflush_r>
 800e9ee:	b190      	cbz	r0, 800ea16 <__swbuf_r+0x92>
 800e9f0:	e00f      	b.n	800ea12 <__swbuf_r+0x8e>
 800e9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ea20 <__swbuf_r+0x9c>)
 800e9f4:	429c      	cmp	r4, r3
 800e9f6:	d101      	bne.n	800e9fc <__swbuf_r+0x78>
 800e9f8:	68ac      	ldr	r4, [r5, #8]
 800e9fa:	e7d0      	b.n	800e99e <__swbuf_r+0x1a>
 800e9fc:	4b09      	ldr	r3, [pc, #36]	; (800ea24 <__swbuf_r+0xa0>)
 800e9fe:	429c      	cmp	r4, r3
 800ea00:	bf08      	it	eq
 800ea02:	68ec      	ldreq	r4, [r5, #12]
 800ea04:	e7cb      	b.n	800e99e <__swbuf_r+0x1a>
 800ea06:	4621      	mov	r1, r4
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f000 f81f 	bl	800ea4c <__swsetup_r>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d0cc      	beq.n	800e9ac <__swbuf_r+0x28>
 800ea12:	f04f 37ff 	mov.w	r7, #4294967295
 800ea16:	4638      	mov	r0, r7
 800ea18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	0801463c 	.word	0x0801463c
 800ea20:	0801465c 	.word	0x0801465c
 800ea24:	0801461c 	.word	0x0801461c

0800ea28 <_write_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4c07      	ldr	r4, [pc, #28]	; (800ea48 <_write_r+0x20>)
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	4608      	mov	r0, r1
 800ea30:	4611      	mov	r1, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	6022      	str	r2, [r4, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	f7fe fb3a 	bl	800d0b0 <_write>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d102      	bne.n	800ea46 <_write_r+0x1e>
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	b103      	cbz	r3, 800ea46 <_write_r+0x1e>
 800ea44:	602b      	str	r3, [r5, #0]
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	20003000 	.word	0x20003000

0800ea4c <__swsetup_r>:
 800ea4c:	4b32      	ldr	r3, [pc, #200]	; (800eb18 <__swsetup_r+0xcc>)
 800ea4e:	b570      	push	{r4, r5, r6, lr}
 800ea50:	681d      	ldr	r5, [r3, #0]
 800ea52:	4606      	mov	r6, r0
 800ea54:	460c      	mov	r4, r1
 800ea56:	b125      	cbz	r5, 800ea62 <__swsetup_r+0x16>
 800ea58:	69ab      	ldr	r3, [r5, #24]
 800ea5a:	b913      	cbnz	r3, 800ea62 <__swsetup_r+0x16>
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f000 f965 	bl	800ed2c <__sinit>
 800ea62:	4b2e      	ldr	r3, [pc, #184]	; (800eb1c <__swsetup_r+0xd0>)
 800ea64:	429c      	cmp	r4, r3
 800ea66:	d10f      	bne.n	800ea88 <__swsetup_r+0x3c>
 800ea68:	686c      	ldr	r4, [r5, #4]
 800ea6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	0715      	lsls	r5, r2, #28
 800ea72:	d42c      	bmi.n	800eace <__swsetup_r+0x82>
 800ea74:	06d0      	lsls	r0, r2, #27
 800ea76:	d411      	bmi.n	800ea9c <__swsetup_r+0x50>
 800ea78:	2209      	movs	r2, #9
 800ea7a:	6032      	str	r2, [r6, #0]
 800ea7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea80:	81a3      	strh	r3, [r4, #12]
 800ea82:	f04f 30ff 	mov.w	r0, #4294967295
 800ea86:	bd70      	pop	{r4, r5, r6, pc}
 800ea88:	4b25      	ldr	r3, [pc, #148]	; (800eb20 <__swsetup_r+0xd4>)
 800ea8a:	429c      	cmp	r4, r3
 800ea8c:	d101      	bne.n	800ea92 <__swsetup_r+0x46>
 800ea8e:	68ac      	ldr	r4, [r5, #8]
 800ea90:	e7eb      	b.n	800ea6a <__swsetup_r+0x1e>
 800ea92:	4b24      	ldr	r3, [pc, #144]	; (800eb24 <__swsetup_r+0xd8>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	bf08      	it	eq
 800ea98:	68ec      	ldreq	r4, [r5, #12]
 800ea9a:	e7e6      	b.n	800ea6a <__swsetup_r+0x1e>
 800ea9c:	0751      	lsls	r1, r2, #29
 800ea9e:	d512      	bpl.n	800eac6 <__swsetup_r+0x7a>
 800eaa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaa2:	b141      	cbz	r1, 800eab6 <__swsetup_r+0x6a>
 800eaa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaa8:	4299      	cmp	r1, r3
 800eaaa:	d002      	beq.n	800eab2 <__swsetup_r+0x66>
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7ff fcf1 	bl	800e494 <_free_r>
 800eab2:	2300      	movs	r3, #0
 800eab4:	6363      	str	r3, [r4, #52]	; 0x34
 800eab6:	89a3      	ldrh	r3, [r4, #12]
 800eab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eabc:	81a3      	strh	r3, [r4, #12]
 800eabe:	2300      	movs	r3, #0
 800eac0:	6063      	str	r3, [r4, #4]
 800eac2:	6923      	ldr	r3, [r4, #16]
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	f043 0308 	orr.w	r3, r3, #8
 800eacc:	81a3      	strh	r3, [r4, #12]
 800eace:	6923      	ldr	r3, [r4, #16]
 800ead0:	b94b      	cbnz	r3, 800eae6 <__swsetup_r+0x9a>
 800ead2:	89a3      	ldrh	r3, [r4, #12]
 800ead4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ead8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eadc:	d003      	beq.n	800eae6 <__swsetup_r+0x9a>
 800eade:	4621      	mov	r1, r4
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 f9e3 	bl	800eeac <__smakebuf_r>
 800eae6:	89a2      	ldrh	r2, [r4, #12]
 800eae8:	f012 0301 	ands.w	r3, r2, #1
 800eaec:	d00c      	beq.n	800eb08 <__swsetup_r+0xbc>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	60a3      	str	r3, [r4, #8]
 800eaf2:	6963      	ldr	r3, [r4, #20]
 800eaf4:	425b      	negs	r3, r3
 800eaf6:	61a3      	str	r3, [r4, #24]
 800eaf8:	6923      	ldr	r3, [r4, #16]
 800eafa:	b953      	cbnz	r3, 800eb12 <__swsetup_r+0xc6>
 800eafc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800eb04:	d1ba      	bne.n	800ea7c <__swsetup_r+0x30>
 800eb06:	bd70      	pop	{r4, r5, r6, pc}
 800eb08:	0792      	lsls	r2, r2, #30
 800eb0a:	bf58      	it	pl
 800eb0c:	6963      	ldrpl	r3, [r4, #20]
 800eb0e:	60a3      	str	r3, [r4, #8]
 800eb10:	e7f2      	b.n	800eaf8 <__swsetup_r+0xac>
 800eb12:	2000      	movs	r0, #0
 800eb14:	e7f7      	b.n	800eb06 <__swsetup_r+0xba>
 800eb16:	bf00      	nop
 800eb18:	2000008c 	.word	0x2000008c
 800eb1c:	0801463c 	.word	0x0801463c
 800eb20:	0801465c 	.word	0x0801465c
 800eb24:	0801461c 	.word	0x0801461c

0800eb28 <_close_r>:
 800eb28:	b538      	push	{r3, r4, r5, lr}
 800eb2a:	4c06      	ldr	r4, [pc, #24]	; (800eb44 <_close_r+0x1c>)
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	4605      	mov	r5, r0
 800eb30:	4608      	mov	r0, r1
 800eb32:	6023      	str	r3, [r4, #0]
 800eb34:	f7fe fcce 	bl	800d4d4 <_close>
 800eb38:	1c43      	adds	r3, r0, #1
 800eb3a:	d102      	bne.n	800eb42 <_close_r+0x1a>
 800eb3c:	6823      	ldr	r3, [r4, #0]
 800eb3e:	b103      	cbz	r3, 800eb42 <_close_r+0x1a>
 800eb40:	602b      	str	r3, [r5, #0]
 800eb42:	bd38      	pop	{r3, r4, r5, pc}
 800eb44:	20003000 	.word	0x20003000

0800eb48 <__sflush_r>:
 800eb48:	898a      	ldrh	r2, [r1, #12]
 800eb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4e:	4605      	mov	r5, r0
 800eb50:	0710      	lsls	r0, r2, #28
 800eb52:	460c      	mov	r4, r1
 800eb54:	d45a      	bmi.n	800ec0c <__sflush_r+0xc4>
 800eb56:	684b      	ldr	r3, [r1, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dc05      	bgt.n	800eb68 <__sflush_r+0x20>
 800eb5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	dc02      	bgt.n	800eb68 <__sflush_r+0x20>
 800eb62:	2000      	movs	r0, #0
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb6a:	2e00      	cmp	r6, #0
 800eb6c:	d0f9      	beq.n	800eb62 <__sflush_r+0x1a>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb74:	682f      	ldr	r7, [r5, #0]
 800eb76:	602b      	str	r3, [r5, #0]
 800eb78:	d033      	beq.n	800ebe2 <__sflush_r+0x9a>
 800eb7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb7c:	89a3      	ldrh	r3, [r4, #12]
 800eb7e:	075a      	lsls	r2, r3, #29
 800eb80:	d505      	bpl.n	800eb8e <__sflush_r+0x46>
 800eb82:	6863      	ldr	r3, [r4, #4]
 800eb84:	1ac0      	subs	r0, r0, r3
 800eb86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb88:	b10b      	cbz	r3, 800eb8e <__sflush_r+0x46>
 800eb8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb8c:	1ac0      	subs	r0, r0, r3
 800eb8e:	2300      	movs	r3, #0
 800eb90:	4602      	mov	r2, r0
 800eb92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb94:	6a21      	ldr	r1, [r4, #32]
 800eb96:	4628      	mov	r0, r5
 800eb98:	47b0      	blx	r6
 800eb9a:	1c43      	adds	r3, r0, #1
 800eb9c:	89a3      	ldrh	r3, [r4, #12]
 800eb9e:	d106      	bne.n	800ebae <__sflush_r+0x66>
 800eba0:	6829      	ldr	r1, [r5, #0]
 800eba2:	291d      	cmp	r1, #29
 800eba4:	d84b      	bhi.n	800ec3e <__sflush_r+0xf6>
 800eba6:	4a2b      	ldr	r2, [pc, #172]	; (800ec54 <__sflush_r+0x10c>)
 800eba8:	40ca      	lsrs	r2, r1
 800ebaa:	07d6      	lsls	r6, r2, #31
 800ebac:	d547      	bpl.n	800ec3e <__sflush_r+0xf6>
 800ebae:	2200      	movs	r2, #0
 800ebb0:	6062      	str	r2, [r4, #4]
 800ebb2:	04d9      	lsls	r1, r3, #19
 800ebb4:	6922      	ldr	r2, [r4, #16]
 800ebb6:	6022      	str	r2, [r4, #0]
 800ebb8:	d504      	bpl.n	800ebc4 <__sflush_r+0x7c>
 800ebba:	1c42      	adds	r2, r0, #1
 800ebbc:	d101      	bne.n	800ebc2 <__sflush_r+0x7a>
 800ebbe:	682b      	ldr	r3, [r5, #0]
 800ebc0:	b903      	cbnz	r3, 800ebc4 <__sflush_r+0x7c>
 800ebc2:	6560      	str	r0, [r4, #84]	; 0x54
 800ebc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebc6:	602f      	str	r7, [r5, #0]
 800ebc8:	2900      	cmp	r1, #0
 800ebca:	d0ca      	beq.n	800eb62 <__sflush_r+0x1a>
 800ebcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd0:	4299      	cmp	r1, r3
 800ebd2:	d002      	beq.n	800ebda <__sflush_r+0x92>
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	f7ff fc5d 	bl	800e494 <_free_r>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	6360      	str	r0, [r4, #52]	; 0x34
 800ebde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe2:	6a21      	ldr	r1, [r4, #32]
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	47b0      	blx	r6
 800ebea:	1c41      	adds	r1, r0, #1
 800ebec:	d1c6      	bne.n	800eb7c <__sflush_r+0x34>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d0c3      	beq.n	800eb7c <__sflush_r+0x34>
 800ebf4:	2b1d      	cmp	r3, #29
 800ebf6:	d001      	beq.n	800ebfc <__sflush_r+0xb4>
 800ebf8:	2b16      	cmp	r3, #22
 800ebfa:	d101      	bne.n	800ec00 <__sflush_r+0xb8>
 800ebfc:	602f      	str	r7, [r5, #0]
 800ebfe:	e7b0      	b.n	800eb62 <__sflush_r+0x1a>
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec06:	81a3      	strh	r3, [r4, #12]
 800ec08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0c:	690f      	ldr	r7, [r1, #16]
 800ec0e:	2f00      	cmp	r7, #0
 800ec10:	d0a7      	beq.n	800eb62 <__sflush_r+0x1a>
 800ec12:	0793      	lsls	r3, r2, #30
 800ec14:	680e      	ldr	r6, [r1, #0]
 800ec16:	bf08      	it	eq
 800ec18:	694b      	ldreq	r3, [r1, #20]
 800ec1a:	600f      	str	r7, [r1, #0]
 800ec1c:	bf18      	it	ne
 800ec1e:	2300      	movne	r3, #0
 800ec20:	eba6 0807 	sub.w	r8, r6, r7
 800ec24:	608b      	str	r3, [r1, #8]
 800ec26:	f1b8 0f00 	cmp.w	r8, #0
 800ec2a:	dd9a      	ble.n	800eb62 <__sflush_r+0x1a>
 800ec2c:	4643      	mov	r3, r8
 800ec2e:	463a      	mov	r2, r7
 800ec30:	6a21      	ldr	r1, [r4, #32]
 800ec32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec34:	4628      	mov	r0, r5
 800ec36:	47b0      	blx	r6
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	dc07      	bgt.n	800ec4c <__sflush_r+0x104>
 800ec3c:	89a3      	ldrh	r3, [r4, #12]
 800ec3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295
 800ec48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec4c:	4407      	add	r7, r0
 800ec4e:	eba8 0800 	sub.w	r8, r8, r0
 800ec52:	e7e8      	b.n	800ec26 <__sflush_r+0xde>
 800ec54:	20400001 	.word	0x20400001

0800ec58 <_fflush_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	690b      	ldr	r3, [r1, #16]
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	b1db      	cbz	r3, 800ec9a <_fflush_r+0x42>
 800ec62:	b118      	cbz	r0, 800ec6c <_fflush_r+0x14>
 800ec64:	6983      	ldr	r3, [r0, #24]
 800ec66:	b90b      	cbnz	r3, 800ec6c <_fflush_r+0x14>
 800ec68:	f000 f860 	bl	800ed2c <__sinit>
 800ec6c:	4b0c      	ldr	r3, [pc, #48]	; (800eca0 <_fflush_r+0x48>)
 800ec6e:	429c      	cmp	r4, r3
 800ec70:	d109      	bne.n	800ec86 <_fflush_r+0x2e>
 800ec72:	686c      	ldr	r4, [r5, #4]
 800ec74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec78:	b17b      	cbz	r3, 800ec9a <_fflush_r+0x42>
 800ec7a:	4621      	mov	r1, r4
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec82:	f7ff bf61 	b.w	800eb48 <__sflush_r>
 800ec86:	4b07      	ldr	r3, [pc, #28]	; (800eca4 <_fflush_r+0x4c>)
 800ec88:	429c      	cmp	r4, r3
 800ec8a:	d101      	bne.n	800ec90 <_fflush_r+0x38>
 800ec8c:	68ac      	ldr	r4, [r5, #8]
 800ec8e:	e7f1      	b.n	800ec74 <_fflush_r+0x1c>
 800ec90:	4b05      	ldr	r3, [pc, #20]	; (800eca8 <_fflush_r+0x50>)
 800ec92:	429c      	cmp	r4, r3
 800ec94:	bf08      	it	eq
 800ec96:	68ec      	ldreq	r4, [r5, #12]
 800ec98:	e7ec      	b.n	800ec74 <_fflush_r+0x1c>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
 800ec9e:	bf00      	nop
 800eca0:	0801463c 	.word	0x0801463c
 800eca4:	0801465c 	.word	0x0801465c
 800eca8:	0801461c 	.word	0x0801461c

0800ecac <_cleanup_r>:
 800ecac:	4901      	ldr	r1, [pc, #4]	; (800ecb4 <_cleanup_r+0x8>)
 800ecae:	f000 b8a9 	b.w	800ee04 <_fwalk_reent>
 800ecb2:	bf00      	nop
 800ecb4:	0800ec59 	.word	0x0800ec59

0800ecb8 <std.isra.0>:
 800ecb8:	2300      	movs	r3, #0
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	6003      	str	r3, [r0, #0]
 800ecc0:	6043      	str	r3, [r0, #4]
 800ecc2:	6083      	str	r3, [r0, #8]
 800ecc4:	8181      	strh	r1, [r0, #12]
 800ecc6:	6643      	str	r3, [r0, #100]	; 0x64
 800ecc8:	81c2      	strh	r2, [r0, #14]
 800ecca:	6103      	str	r3, [r0, #16]
 800eccc:	6143      	str	r3, [r0, #20]
 800ecce:	6183      	str	r3, [r0, #24]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	2208      	movs	r2, #8
 800ecd4:	305c      	adds	r0, #92	; 0x5c
 800ecd6:	f7ff fbc7 	bl	800e468 <memset>
 800ecda:	4b05      	ldr	r3, [pc, #20]	; (800ecf0 <std.isra.0+0x38>)
 800ecdc:	6263      	str	r3, [r4, #36]	; 0x24
 800ecde:	4b05      	ldr	r3, [pc, #20]	; (800ecf4 <std.isra.0+0x3c>)
 800ece0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ece2:	4b05      	ldr	r3, [pc, #20]	; (800ecf8 <std.isra.0+0x40>)
 800ece4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ece6:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <std.isra.0+0x44>)
 800ece8:	6224      	str	r4, [r4, #32]
 800ecea:	6323      	str	r3, [r4, #48]	; 0x30
 800ecec:	bd10      	pop	{r4, pc}
 800ecee:	bf00      	nop
 800ecf0:	0800e831 	.word	0x0800e831
 800ecf4:	0800e853 	.word	0x0800e853
 800ecf8:	0800e88b 	.word	0x0800e88b
 800ecfc:	0800e8af 	.word	0x0800e8af

0800ed00 <__sfmoreglue>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	1e4a      	subs	r2, r1, #1
 800ed04:	2568      	movs	r5, #104	; 0x68
 800ed06:	4355      	muls	r5, r2
 800ed08:	460e      	mov	r6, r1
 800ed0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed0e:	f7ff fc0f 	bl	800e530 <_malloc_r>
 800ed12:	4604      	mov	r4, r0
 800ed14:	b140      	cbz	r0, 800ed28 <__sfmoreglue+0x28>
 800ed16:	2100      	movs	r1, #0
 800ed18:	e880 0042 	stmia.w	r0, {r1, r6}
 800ed1c:	300c      	adds	r0, #12
 800ed1e:	60a0      	str	r0, [r4, #8]
 800ed20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed24:	f7ff fba0 	bl	800e468 <memset>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}

0800ed2c <__sinit>:
 800ed2c:	6983      	ldr	r3, [r0, #24]
 800ed2e:	b510      	push	{r4, lr}
 800ed30:	4604      	mov	r4, r0
 800ed32:	bb33      	cbnz	r3, 800ed82 <__sinit+0x56>
 800ed34:	6483      	str	r3, [r0, #72]	; 0x48
 800ed36:	64c3      	str	r3, [r0, #76]	; 0x4c
 800ed38:	6503      	str	r3, [r0, #80]	; 0x50
 800ed3a:	4b12      	ldr	r3, [pc, #72]	; (800ed84 <__sinit+0x58>)
 800ed3c:	4a12      	ldr	r2, [pc, #72]	; (800ed88 <__sinit+0x5c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6282      	str	r2, [r0, #40]	; 0x28
 800ed42:	4298      	cmp	r0, r3
 800ed44:	bf04      	itt	eq
 800ed46:	2301      	moveq	r3, #1
 800ed48:	6183      	streq	r3, [r0, #24]
 800ed4a:	f000 f81f 	bl	800ed8c <__sfp>
 800ed4e:	6060      	str	r0, [r4, #4]
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 f81b 	bl	800ed8c <__sfp>
 800ed56:	60a0      	str	r0, [r4, #8]
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 f817 	bl	800ed8c <__sfp>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	60e0      	str	r0, [r4, #12]
 800ed62:	2104      	movs	r1, #4
 800ed64:	6860      	ldr	r0, [r4, #4]
 800ed66:	f7ff ffa7 	bl	800ecb8 <std.isra.0>
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	2109      	movs	r1, #9
 800ed6e:	68a0      	ldr	r0, [r4, #8]
 800ed70:	f7ff ffa2 	bl	800ecb8 <std.isra.0>
 800ed74:	2202      	movs	r2, #2
 800ed76:	2112      	movs	r1, #18
 800ed78:	68e0      	ldr	r0, [r4, #12]
 800ed7a:	f7ff ff9d 	bl	800ecb8 <std.isra.0>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	61a3      	str	r3, [r4, #24]
 800ed82:	bd10      	pop	{r4, pc}
 800ed84:	08014618 	.word	0x08014618
 800ed88:	0800ecad 	.word	0x0800ecad

0800ed8c <__sfp>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	4b1c      	ldr	r3, [pc, #112]	; (800ee00 <__sfp+0x74>)
 800ed90:	681e      	ldr	r6, [r3, #0]
 800ed92:	69b3      	ldr	r3, [r6, #24]
 800ed94:	4607      	mov	r7, r0
 800ed96:	b913      	cbnz	r3, 800ed9e <__sfp+0x12>
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7ff ffc7 	bl	800ed2c <__sinit>
 800ed9e:	3648      	adds	r6, #72	; 0x48
 800eda0:	68b4      	ldr	r4, [r6, #8]
 800eda2:	6873      	ldr	r3, [r6, #4]
 800eda4:	3b01      	subs	r3, #1
 800eda6:	d503      	bpl.n	800edb0 <__sfp+0x24>
 800eda8:	6833      	ldr	r3, [r6, #0]
 800edaa:	b133      	cbz	r3, 800edba <__sfp+0x2e>
 800edac:	6836      	ldr	r6, [r6, #0]
 800edae:	e7f7      	b.n	800eda0 <__sfp+0x14>
 800edb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edb4:	b16d      	cbz	r5, 800edd2 <__sfp+0x46>
 800edb6:	3468      	adds	r4, #104	; 0x68
 800edb8:	e7f4      	b.n	800eda4 <__sfp+0x18>
 800edba:	2104      	movs	r1, #4
 800edbc:	4638      	mov	r0, r7
 800edbe:	f7ff ff9f 	bl	800ed00 <__sfmoreglue>
 800edc2:	6030      	str	r0, [r6, #0]
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d1f1      	bne.n	800edac <__sfp+0x20>
 800edc8:	230c      	movs	r3, #12
 800edca:	603b      	str	r3, [r7, #0]
 800edcc:	4604      	mov	r4, r0
 800edce:	4620      	mov	r0, r4
 800edd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edd6:	81e3      	strh	r3, [r4, #14]
 800edd8:	2301      	movs	r3, #1
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	6665      	str	r5, [r4, #100]	; 0x64
 800edde:	6025      	str	r5, [r4, #0]
 800ede0:	60a5      	str	r5, [r4, #8]
 800ede2:	6065      	str	r5, [r4, #4]
 800ede4:	6125      	str	r5, [r4, #16]
 800ede6:	6165      	str	r5, [r4, #20]
 800ede8:	61a5      	str	r5, [r4, #24]
 800edea:	2208      	movs	r2, #8
 800edec:	4629      	mov	r1, r5
 800edee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800edf2:	f7ff fb39 	bl	800e468 <memset>
 800edf6:	6365      	str	r5, [r4, #52]	; 0x34
 800edf8:	63a5      	str	r5, [r4, #56]	; 0x38
 800edfa:	64a5      	str	r5, [r4, #72]	; 0x48
 800edfc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800edfe:	e7e6      	b.n	800edce <__sfp+0x42>
 800ee00:	08014618 	.word	0x08014618

0800ee04 <_fwalk_reent>:
 800ee04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee08:	4680      	mov	r8, r0
 800ee0a:	4689      	mov	r9, r1
 800ee0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee10:	2600      	movs	r6, #0
 800ee12:	b914      	cbnz	r4, 800ee1a <_fwalk_reent+0x16>
 800ee14:	4630      	mov	r0, r6
 800ee16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1a:	68a5      	ldr	r5, [r4, #8]
 800ee1c:	6867      	ldr	r7, [r4, #4]
 800ee1e:	3f01      	subs	r7, #1
 800ee20:	d501      	bpl.n	800ee26 <_fwalk_reent+0x22>
 800ee22:	6824      	ldr	r4, [r4, #0]
 800ee24:	e7f5      	b.n	800ee12 <_fwalk_reent+0xe>
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d907      	bls.n	800ee3c <_fwalk_reent+0x38>
 800ee2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee30:	3301      	adds	r3, #1
 800ee32:	d003      	beq.n	800ee3c <_fwalk_reent+0x38>
 800ee34:	4629      	mov	r1, r5
 800ee36:	4640      	mov	r0, r8
 800ee38:	47c8      	blx	r9
 800ee3a:	4306      	orrs	r6, r0
 800ee3c:	3568      	adds	r5, #104	; 0x68
 800ee3e:	e7ee      	b.n	800ee1e <_fwalk_reent+0x1a>

0800ee40 <_lseek_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4c07      	ldr	r4, [pc, #28]	; (800ee60 <_lseek_r+0x20>)
 800ee44:	4605      	mov	r5, r0
 800ee46:	4608      	mov	r0, r1
 800ee48:	4611      	mov	r1, r2
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	6022      	str	r2, [r4, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7fe fb4a 	bl	800d4e8 <_lseek>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_lseek_r+0x1e>
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_lseek_r+0x1e>
 800ee5c:	602b      	str	r3, [r5, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	20003000 	.word	0x20003000

0800ee64 <__swhatbuf_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	b090      	sub	sp, #64	; 0x40
 800ee70:	4614      	mov	r4, r2
 800ee72:	461d      	mov	r5, r3
 800ee74:	da07      	bge.n	800ee86 <__swhatbuf_r+0x22>
 800ee76:	2300      	movs	r3, #0
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	89b3      	ldrh	r3, [r6, #12]
 800ee7c:	061a      	lsls	r2, r3, #24
 800ee7e:	d410      	bmi.n	800eea2 <__swhatbuf_r+0x3e>
 800ee80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee84:	e00e      	b.n	800eea4 <__swhatbuf_r+0x40>
 800ee86:	aa01      	add	r2, sp, #4
 800ee88:	f000 fc8a 	bl	800f7a0 <_fstat_r>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	dbf2      	blt.n	800ee76 <__swhatbuf_r+0x12>
 800ee90:	9a02      	ldr	r2, [sp, #8]
 800ee92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee9a:	425a      	negs	r2, r3
 800ee9c:	415a      	adcs	r2, r3
 800ee9e:	602a      	str	r2, [r5, #0]
 800eea0:	e7ee      	b.n	800ee80 <__swhatbuf_r+0x1c>
 800eea2:	2340      	movs	r3, #64	; 0x40
 800eea4:	2000      	movs	r0, #0
 800eea6:	6023      	str	r3, [r4, #0]
 800eea8:	b010      	add	sp, #64	; 0x40
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}

0800eeac <__smakebuf_r>:
 800eeac:	898b      	ldrh	r3, [r1, #12]
 800eeae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeb0:	079d      	lsls	r5, r3, #30
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	d507      	bpl.n	800eec8 <__smakebuf_r+0x1c>
 800eeb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	6123      	str	r3, [r4, #16]
 800eec0:	2301      	movs	r3, #1
 800eec2:	6163      	str	r3, [r4, #20]
 800eec4:	b002      	add	sp, #8
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	ab01      	add	r3, sp, #4
 800eeca:	466a      	mov	r2, sp
 800eecc:	f7ff ffca 	bl	800ee64 <__swhatbuf_r>
 800eed0:	9900      	ldr	r1, [sp, #0]
 800eed2:	4605      	mov	r5, r0
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7ff fb2b 	bl	800e530 <_malloc_r>
 800eeda:	b948      	cbnz	r0, 800eef0 <__smakebuf_r+0x44>
 800eedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee0:	059a      	lsls	r2, r3, #22
 800eee2:	d4ef      	bmi.n	800eec4 <__smakebuf_r+0x18>
 800eee4:	f023 0303 	bic.w	r3, r3, #3
 800eee8:	f043 0302 	orr.w	r3, r3, #2
 800eeec:	81a3      	strh	r3, [r4, #12]
 800eeee:	e7e3      	b.n	800eeb8 <__smakebuf_r+0xc>
 800eef0:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <__smakebuf_r+0x7c>)
 800eef2:	62b3      	str	r3, [r6, #40]	; 0x28
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	6020      	str	r0, [r4, #0]
 800eef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefc:	81a3      	strh	r3, [r4, #12]
 800eefe:	9b00      	ldr	r3, [sp, #0]
 800ef00:	6163      	str	r3, [r4, #20]
 800ef02:	9b01      	ldr	r3, [sp, #4]
 800ef04:	6120      	str	r0, [r4, #16]
 800ef06:	b15b      	cbz	r3, 800ef20 <__smakebuf_r+0x74>
 800ef08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f000 fc59 	bl	800f7c4 <_isatty_r>
 800ef12:	b128      	cbz	r0, 800ef20 <__smakebuf_r+0x74>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	f023 0303 	bic.w	r3, r3, #3
 800ef1a:	f043 0301 	orr.w	r3, r3, #1
 800ef1e:	81a3      	strh	r3, [r4, #12]
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	431d      	orrs	r5, r3
 800ef24:	81a5      	strh	r5, [r4, #12]
 800ef26:	e7cd      	b.n	800eec4 <__smakebuf_r+0x18>
 800ef28:	0800ecad 	.word	0x0800ecad

0800ef2c <__malloc_lock>:
 800ef2c:	4770      	bx	lr

0800ef2e <__malloc_unlock>:
 800ef2e:	4770      	bx	lr

0800ef30 <__ssputs_r>:
 800ef30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef34:	688e      	ldr	r6, [r1, #8]
 800ef36:	429e      	cmp	r6, r3
 800ef38:	4682      	mov	sl, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	4691      	mov	r9, r2
 800ef3e:	4698      	mov	r8, r3
 800ef40:	d835      	bhi.n	800efae <__ssputs_r+0x7e>
 800ef42:	898a      	ldrh	r2, [r1, #12]
 800ef44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef48:	d031      	beq.n	800efae <__ssputs_r+0x7e>
 800ef4a:	6825      	ldr	r5, [r4, #0]
 800ef4c:	6909      	ldr	r1, [r1, #16]
 800ef4e:	1a6f      	subs	r7, r5, r1
 800ef50:	6965      	ldr	r5, [r4, #20]
 800ef52:	2302      	movs	r3, #2
 800ef54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef58:	fb95 f5f3 	sdiv	r5, r5, r3
 800ef5c:	f108 0301 	add.w	r3, r8, #1
 800ef60:	443b      	add	r3, r7
 800ef62:	429d      	cmp	r5, r3
 800ef64:	bf38      	it	cc
 800ef66:	461d      	movcc	r5, r3
 800ef68:	0553      	lsls	r3, r2, #21
 800ef6a:	d531      	bpl.n	800efd0 <__ssputs_r+0xa0>
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	f7ff fadf 	bl	800e530 <_malloc_r>
 800ef72:	4606      	mov	r6, r0
 800ef74:	b950      	cbnz	r0, 800ef8c <__ssputs_r+0x5c>
 800ef76:	230c      	movs	r3, #12
 800ef78:	f8ca 3000 	str.w	r3, [sl]
 800ef7c:	89a3      	ldrh	r3, [r4, #12]
 800ef7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef82:	81a3      	strh	r3, [r4, #12]
 800ef84:	f04f 30ff 	mov.w	r0, #4294967295
 800ef88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8c:	463a      	mov	r2, r7
 800ef8e:	6921      	ldr	r1, [r4, #16]
 800ef90:	f7ff fa45 	bl	800e41e <memcpy>
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef9e:	81a3      	strh	r3, [r4, #12]
 800efa0:	6126      	str	r6, [r4, #16]
 800efa2:	6165      	str	r5, [r4, #20]
 800efa4:	443e      	add	r6, r7
 800efa6:	1bed      	subs	r5, r5, r7
 800efa8:	6026      	str	r6, [r4, #0]
 800efaa:	60a5      	str	r5, [r4, #8]
 800efac:	4646      	mov	r6, r8
 800efae:	4546      	cmp	r6, r8
 800efb0:	bf28      	it	cs
 800efb2:	4646      	movcs	r6, r8
 800efb4:	4632      	mov	r2, r6
 800efb6:	4649      	mov	r1, r9
 800efb8:	6820      	ldr	r0, [r4, #0]
 800efba:	f7ff fa3b 	bl	800e434 <memmove>
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	1b9b      	subs	r3, r3, r6
 800efc2:	60a3      	str	r3, [r4, #8]
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	441e      	add	r6, r3
 800efc8:	6026      	str	r6, [r4, #0]
 800efca:	2000      	movs	r0, #0
 800efcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd0:	462a      	mov	r2, r5
 800efd2:	f000 fc07 	bl	800f7e4 <_realloc_r>
 800efd6:	4606      	mov	r6, r0
 800efd8:	2800      	cmp	r0, #0
 800efda:	d1e1      	bne.n	800efa0 <__ssputs_r+0x70>
 800efdc:	6921      	ldr	r1, [r4, #16]
 800efde:	4650      	mov	r0, sl
 800efe0:	f7ff fa58 	bl	800e494 <_free_r>
 800efe4:	e7c7      	b.n	800ef76 <__ssputs_r+0x46>
	...

0800efe8 <_svfiprintf_r>:
 800efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	b09d      	sub	sp, #116	; 0x74
 800efee:	4680      	mov	r8, r0
 800eff0:	9303      	str	r3, [sp, #12]
 800eff2:	898b      	ldrh	r3, [r1, #12]
 800eff4:	061c      	lsls	r4, r3, #24
 800eff6:	460d      	mov	r5, r1
 800eff8:	4616      	mov	r6, r2
 800effa:	d50f      	bpl.n	800f01c <_svfiprintf_r+0x34>
 800effc:	690b      	ldr	r3, [r1, #16]
 800effe:	b96b      	cbnz	r3, 800f01c <_svfiprintf_r+0x34>
 800f000:	2140      	movs	r1, #64	; 0x40
 800f002:	f7ff fa95 	bl	800e530 <_malloc_r>
 800f006:	6028      	str	r0, [r5, #0]
 800f008:	6128      	str	r0, [r5, #16]
 800f00a:	b928      	cbnz	r0, 800f018 <_svfiprintf_r+0x30>
 800f00c:	230c      	movs	r3, #12
 800f00e:	f8c8 3000 	str.w	r3, [r8]
 800f012:	f04f 30ff 	mov.w	r0, #4294967295
 800f016:	e0c5      	b.n	800f1a4 <_svfiprintf_r+0x1bc>
 800f018:	2340      	movs	r3, #64	; 0x40
 800f01a:	616b      	str	r3, [r5, #20]
 800f01c:	2300      	movs	r3, #0
 800f01e:	9309      	str	r3, [sp, #36]	; 0x24
 800f020:	2320      	movs	r3, #32
 800f022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f026:	2330      	movs	r3, #48	; 0x30
 800f028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f02c:	f04f 0b01 	mov.w	fp, #1
 800f030:	4637      	mov	r7, r6
 800f032:	463c      	mov	r4, r7
 800f034:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d13c      	bne.n	800f0b6 <_svfiprintf_r+0xce>
 800f03c:	ebb7 0a06 	subs.w	sl, r7, r6
 800f040:	d00b      	beq.n	800f05a <_svfiprintf_r+0x72>
 800f042:	4653      	mov	r3, sl
 800f044:	4632      	mov	r2, r6
 800f046:	4629      	mov	r1, r5
 800f048:	4640      	mov	r0, r8
 800f04a:	f7ff ff71 	bl	800ef30 <__ssputs_r>
 800f04e:	3001      	adds	r0, #1
 800f050:	f000 80a3 	beq.w	800f19a <_svfiprintf_r+0x1b2>
 800f054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f056:	4453      	add	r3, sl
 800f058:	9309      	str	r3, [sp, #36]	; 0x24
 800f05a:	783b      	ldrb	r3, [r7, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f000 809c 	beq.w	800f19a <_svfiprintf_r+0x1b2>
 800f062:	2300      	movs	r3, #0
 800f064:	f04f 32ff 	mov.w	r2, #4294967295
 800f068:	9304      	str	r3, [sp, #16]
 800f06a:	9307      	str	r3, [sp, #28]
 800f06c:	9205      	str	r2, [sp, #20]
 800f06e:	9306      	str	r3, [sp, #24]
 800f070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f074:	931a      	str	r3, [sp, #104]	; 0x68
 800f076:	2205      	movs	r2, #5
 800f078:	7821      	ldrb	r1, [r4, #0]
 800f07a:	4850      	ldr	r0, [pc, #320]	; (800f1bc <_svfiprintf_r+0x1d4>)
 800f07c:	f7f1 f8b8 	bl	80001f0 <memchr>
 800f080:	1c67      	adds	r7, r4, #1
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	b9d8      	cbnz	r0, 800f0be <_svfiprintf_r+0xd6>
 800f086:	06d9      	lsls	r1, r3, #27
 800f088:	bf44      	itt	mi
 800f08a:	2220      	movmi	r2, #32
 800f08c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f090:	071a      	lsls	r2, r3, #28
 800f092:	bf44      	itt	mi
 800f094:	222b      	movmi	r2, #43	; 0x2b
 800f096:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f09a:	7822      	ldrb	r2, [r4, #0]
 800f09c:	2a2a      	cmp	r2, #42	; 0x2a
 800f09e:	d016      	beq.n	800f0ce <_svfiprintf_r+0xe6>
 800f0a0:	9a07      	ldr	r2, [sp, #28]
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	200a      	movs	r0, #10
 800f0a6:	4627      	mov	r7, r4
 800f0a8:	3401      	adds	r4, #1
 800f0aa:	783b      	ldrb	r3, [r7, #0]
 800f0ac:	3b30      	subs	r3, #48	; 0x30
 800f0ae:	2b09      	cmp	r3, #9
 800f0b0:	d951      	bls.n	800f156 <_svfiprintf_r+0x16e>
 800f0b2:	b1c9      	cbz	r1, 800f0e8 <_svfiprintf_r+0x100>
 800f0b4:	e011      	b.n	800f0da <_svfiprintf_r+0xf2>
 800f0b6:	2b25      	cmp	r3, #37	; 0x25
 800f0b8:	d0c0      	beq.n	800f03c <_svfiprintf_r+0x54>
 800f0ba:	4627      	mov	r7, r4
 800f0bc:	e7b9      	b.n	800f032 <_svfiprintf_r+0x4a>
 800f0be:	4a3f      	ldr	r2, [pc, #252]	; (800f1bc <_svfiprintf_r+0x1d4>)
 800f0c0:	1a80      	subs	r0, r0, r2
 800f0c2:	fa0b f000 	lsl.w	r0, fp, r0
 800f0c6:	4318      	orrs	r0, r3
 800f0c8:	9004      	str	r0, [sp, #16]
 800f0ca:	463c      	mov	r4, r7
 800f0cc:	e7d3      	b.n	800f076 <_svfiprintf_r+0x8e>
 800f0ce:	9a03      	ldr	r2, [sp, #12]
 800f0d0:	1d11      	adds	r1, r2, #4
 800f0d2:	6812      	ldr	r2, [r2, #0]
 800f0d4:	9103      	str	r1, [sp, #12]
 800f0d6:	2a00      	cmp	r2, #0
 800f0d8:	db01      	blt.n	800f0de <_svfiprintf_r+0xf6>
 800f0da:	9207      	str	r2, [sp, #28]
 800f0dc:	e004      	b.n	800f0e8 <_svfiprintf_r+0x100>
 800f0de:	4252      	negs	r2, r2
 800f0e0:	f043 0302 	orr.w	r3, r3, #2
 800f0e4:	9207      	str	r2, [sp, #28]
 800f0e6:	9304      	str	r3, [sp, #16]
 800f0e8:	783b      	ldrb	r3, [r7, #0]
 800f0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f0ec:	d10e      	bne.n	800f10c <_svfiprintf_r+0x124>
 800f0ee:	787b      	ldrb	r3, [r7, #1]
 800f0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f0f2:	f107 0101 	add.w	r1, r7, #1
 800f0f6:	d132      	bne.n	800f15e <_svfiprintf_r+0x176>
 800f0f8:	9b03      	ldr	r3, [sp, #12]
 800f0fa:	1d1a      	adds	r2, r3, #4
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	9203      	str	r2, [sp, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	bfb8      	it	lt
 800f104:	f04f 33ff 	movlt.w	r3, #4294967295
 800f108:	3702      	adds	r7, #2
 800f10a:	9305      	str	r3, [sp, #20]
 800f10c:	4c2c      	ldr	r4, [pc, #176]	; (800f1c0 <_svfiprintf_r+0x1d8>)
 800f10e:	7839      	ldrb	r1, [r7, #0]
 800f110:	2203      	movs	r2, #3
 800f112:	4620      	mov	r0, r4
 800f114:	f7f1 f86c 	bl	80001f0 <memchr>
 800f118:	b138      	cbz	r0, 800f12a <_svfiprintf_r+0x142>
 800f11a:	2340      	movs	r3, #64	; 0x40
 800f11c:	1b00      	subs	r0, r0, r4
 800f11e:	fa03 f000 	lsl.w	r0, r3, r0
 800f122:	9b04      	ldr	r3, [sp, #16]
 800f124:	4303      	orrs	r3, r0
 800f126:	9304      	str	r3, [sp, #16]
 800f128:	3701      	adds	r7, #1
 800f12a:	7839      	ldrb	r1, [r7, #0]
 800f12c:	4825      	ldr	r0, [pc, #148]	; (800f1c4 <_svfiprintf_r+0x1dc>)
 800f12e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f132:	2206      	movs	r2, #6
 800f134:	1c7e      	adds	r6, r7, #1
 800f136:	f7f1 f85b 	bl	80001f0 <memchr>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d035      	beq.n	800f1aa <_svfiprintf_r+0x1c2>
 800f13e:	4b22      	ldr	r3, [pc, #136]	; (800f1c8 <_svfiprintf_r+0x1e0>)
 800f140:	b9fb      	cbnz	r3, 800f182 <_svfiprintf_r+0x19a>
 800f142:	9b03      	ldr	r3, [sp, #12]
 800f144:	3307      	adds	r3, #7
 800f146:	f023 0307 	bic.w	r3, r3, #7
 800f14a:	3308      	adds	r3, #8
 800f14c:	9303      	str	r3, [sp, #12]
 800f14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f150:	444b      	add	r3, r9
 800f152:	9309      	str	r3, [sp, #36]	; 0x24
 800f154:	e76c      	b.n	800f030 <_svfiprintf_r+0x48>
 800f156:	fb00 3202 	mla	r2, r0, r2, r3
 800f15a:	2101      	movs	r1, #1
 800f15c:	e7a3      	b.n	800f0a6 <_svfiprintf_r+0xbe>
 800f15e:	2300      	movs	r3, #0
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	4618      	mov	r0, r3
 800f164:	240a      	movs	r4, #10
 800f166:	460f      	mov	r7, r1
 800f168:	3101      	adds	r1, #1
 800f16a:	783a      	ldrb	r2, [r7, #0]
 800f16c:	3a30      	subs	r2, #48	; 0x30
 800f16e:	2a09      	cmp	r2, #9
 800f170:	d903      	bls.n	800f17a <_svfiprintf_r+0x192>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0ca      	beq.n	800f10c <_svfiprintf_r+0x124>
 800f176:	9005      	str	r0, [sp, #20]
 800f178:	e7c8      	b.n	800f10c <_svfiprintf_r+0x124>
 800f17a:	fb04 2000 	mla	r0, r4, r0, r2
 800f17e:	2301      	movs	r3, #1
 800f180:	e7f1      	b.n	800f166 <_svfiprintf_r+0x17e>
 800f182:	ab03      	add	r3, sp, #12
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	462a      	mov	r2, r5
 800f188:	4b10      	ldr	r3, [pc, #64]	; (800f1cc <_svfiprintf_r+0x1e4>)
 800f18a:	a904      	add	r1, sp, #16
 800f18c:	4640      	mov	r0, r8
 800f18e:	f3af 8000 	nop.w
 800f192:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f196:	4681      	mov	r9, r0
 800f198:	d1d9      	bne.n	800f14e <_svfiprintf_r+0x166>
 800f19a:	89ab      	ldrh	r3, [r5, #12]
 800f19c:	065b      	lsls	r3, r3, #25
 800f19e:	f53f af38 	bmi.w	800f012 <_svfiprintf_r+0x2a>
 800f1a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1a4:	b01d      	add	sp, #116	; 0x74
 800f1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1aa:	ab03      	add	r3, sp, #12
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	462a      	mov	r2, r5
 800f1b0:	4b06      	ldr	r3, [pc, #24]	; (800f1cc <_svfiprintf_r+0x1e4>)
 800f1b2:	a904      	add	r1, sp, #16
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	f000 f9c1 	bl	800f53c <_printf_i>
 800f1ba:	e7ea      	b.n	800f192 <_svfiprintf_r+0x1aa>
 800f1bc:	0801467c 	.word	0x0801467c
 800f1c0:	08014682 	.word	0x08014682
 800f1c4:	08014686 	.word	0x08014686
 800f1c8:	00000000 	.word	0x00000000
 800f1cc:	0800ef31 	.word	0x0800ef31

0800f1d0 <__sfputc_r>:
 800f1d0:	6893      	ldr	r3, [r2, #8]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	b410      	push	{r4}
 800f1d8:	6093      	str	r3, [r2, #8]
 800f1da:	da09      	bge.n	800f1f0 <__sfputc_r+0x20>
 800f1dc:	6994      	ldr	r4, [r2, #24]
 800f1de:	42a3      	cmp	r3, r4
 800f1e0:	db02      	blt.n	800f1e8 <__sfputc_r+0x18>
 800f1e2:	b2cb      	uxtb	r3, r1
 800f1e4:	2b0a      	cmp	r3, #10
 800f1e6:	d103      	bne.n	800f1f0 <__sfputc_r+0x20>
 800f1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ec:	f7ff bbca 	b.w	800e984 <__swbuf_r>
 800f1f0:	6813      	ldr	r3, [r2, #0]
 800f1f2:	1c58      	adds	r0, r3, #1
 800f1f4:	6010      	str	r0, [r2, #0]
 800f1f6:	7019      	strb	r1, [r3, #0]
 800f1f8:	b2c8      	uxtb	r0, r1
 800f1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <__sfputs_r>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	4606      	mov	r6, r0
 800f204:	460f      	mov	r7, r1
 800f206:	4614      	mov	r4, r2
 800f208:	18d5      	adds	r5, r2, r3
 800f20a:	42ac      	cmp	r4, r5
 800f20c:	d101      	bne.n	800f212 <__sfputs_r+0x12>
 800f20e:	2000      	movs	r0, #0
 800f210:	e007      	b.n	800f222 <__sfputs_r+0x22>
 800f212:	463a      	mov	r2, r7
 800f214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff ffd9 	bl	800f1d0 <__sfputc_r>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	d1f3      	bne.n	800f20a <__sfputs_r+0xa>
 800f222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f224 <_vfiprintf_r>:
 800f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	b09d      	sub	sp, #116	; 0x74
 800f22a:	460c      	mov	r4, r1
 800f22c:	4617      	mov	r7, r2
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	4606      	mov	r6, r0
 800f232:	b118      	cbz	r0, 800f23c <_vfiprintf_r+0x18>
 800f234:	6983      	ldr	r3, [r0, #24]
 800f236:	b90b      	cbnz	r3, 800f23c <_vfiprintf_r+0x18>
 800f238:	f7ff fd78 	bl	800ed2c <__sinit>
 800f23c:	4b7c      	ldr	r3, [pc, #496]	; (800f430 <_vfiprintf_r+0x20c>)
 800f23e:	429c      	cmp	r4, r3
 800f240:	d157      	bne.n	800f2f2 <_vfiprintf_r+0xce>
 800f242:	6874      	ldr	r4, [r6, #4]
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	0718      	lsls	r0, r3, #28
 800f248:	d55d      	bpl.n	800f306 <_vfiprintf_r+0xe2>
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d05a      	beq.n	800f306 <_vfiprintf_r+0xe2>
 800f250:	2300      	movs	r3, #0
 800f252:	9309      	str	r3, [sp, #36]	; 0x24
 800f254:	2320      	movs	r3, #32
 800f256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f25a:	2330      	movs	r3, #48	; 0x30
 800f25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f260:	f04f 0b01 	mov.w	fp, #1
 800f264:	46b8      	mov	r8, r7
 800f266:	4645      	mov	r5, r8
 800f268:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d155      	bne.n	800f31c <_vfiprintf_r+0xf8>
 800f270:	ebb8 0a07 	subs.w	sl, r8, r7
 800f274:	d00b      	beq.n	800f28e <_vfiprintf_r+0x6a>
 800f276:	4653      	mov	r3, sl
 800f278:	463a      	mov	r2, r7
 800f27a:	4621      	mov	r1, r4
 800f27c:	4630      	mov	r0, r6
 800f27e:	f7ff ffbf 	bl	800f200 <__sfputs_r>
 800f282:	3001      	adds	r0, #1
 800f284:	f000 80c4 	beq.w	800f410 <_vfiprintf_r+0x1ec>
 800f288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f28a:	4453      	add	r3, sl
 800f28c:	9309      	str	r3, [sp, #36]	; 0x24
 800f28e:	f898 3000 	ldrb.w	r3, [r8]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 80bc 	beq.w	800f410 <_vfiprintf_r+0x1ec>
 800f298:	2300      	movs	r3, #0
 800f29a:	f04f 32ff 	mov.w	r2, #4294967295
 800f29e:	9304      	str	r3, [sp, #16]
 800f2a0:	9307      	str	r3, [sp, #28]
 800f2a2:	9205      	str	r2, [sp, #20]
 800f2a4:	9306      	str	r3, [sp, #24]
 800f2a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2aa:	931a      	str	r3, [sp, #104]	; 0x68
 800f2ac:	2205      	movs	r2, #5
 800f2ae:	7829      	ldrb	r1, [r5, #0]
 800f2b0:	4860      	ldr	r0, [pc, #384]	; (800f434 <_vfiprintf_r+0x210>)
 800f2b2:	f7f0 ff9d 	bl	80001f0 <memchr>
 800f2b6:	f105 0801 	add.w	r8, r5, #1
 800f2ba:	9b04      	ldr	r3, [sp, #16]
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d131      	bne.n	800f324 <_vfiprintf_r+0x100>
 800f2c0:	06d9      	lsls	r1, r3, #27
 800f2c2:	bf44      	itt	mi
 800f2c4:	2220      	movmi	r2, #32
 800f2c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f2ca:	071a      	lsls	r2, r3, #28
 800f2cc:	bf44      	itt	mi
 800f2ce:	222b      	movmi	r2, #43	; 0x2b
 800f2d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f2d4:	782a      	ldrb	r2, [r5, #0]
 800f2d6:	2a2a      	cmp	r2, #42	; 0x2a
 800f2d8:	d02c      	beq.n	800f334 <_vfiprintf_r+0x110>
 800f2da:	9a07      	ldr	r2, [sp, #28]
 800f2dc:	2100      	movs	r1, #0
 800f2de:	200a      	movs	r0, #10
 800f2e0:	46a8      	mov	r8, r5
 800f2e2:	3501      	adds	r5, #1
 800f2e4:	f898 3000 	ldrb.w	r3, [r8]
 800f2e8:	3b30      	subs	r3, #48	; 0x30
 800f2ea:	2b09      	cmp	r3, #9
 800f2ec:	d96d      	bls.n	800f3ca <_vfiprintf_r+0x1a6>
 800f2ee:	b371      	cbz	r1, 800f34e <_vfiprintf_r+0x12a>
 800f2f0:	e026      	b.n	800f340 <_vfiprintf_r+0x11c>
 800f2f2:	4b51      	ldr	r3, [pc, #324]	; (800f438 <_vfiprintf_r+0x214>)
 800f2f4:	429c      	cmp	r4, r3
 800f2f6:	d101      	bne.n	800f2fc <_vfiprintf_r+0xd8>
 800f2f8:	68b4      	ldr	r4, [r6, #8]
 800f2fa:	e7a3      	b.n	800f244 <_vfiprintf_r+0x20>
 800f2fc:	4b4f      	ldr	r3, [pc, #316]	; (800f43c <_vfiprintf_r+0x218>)
 800f2fe:	429c      	cmp	r4, r3
 800f300:	bf08      	it	eq
 800f302:	68f4      	ldreq	r4, [r6, #12]
 800f304:	e79e      	b.n	800f244 <_vfiprintf_r+0x20>
 800f306:	4621      	mov	r1, r4
 800f308:	4630      	mov	r0, r6
 800f30a:	f7ff fb9f 	bl	800ea4c <__swsetup_r>
 800f30e:	2800      	cmp	r0, #0
 800f310:	d09e      	beq.n	800f250 <_vfiprintf_r+0x2c>
 800f312:	f04f 30ff 	mov.w	r0, #4294967295
 800f316:	b01d      	add	sp, #116	; 0x74
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	2b25      	cmp	r3, #37	; 0x25
 800f31e:	d0a7      	beq.n	800f270 <_vfiprintf_r+0x4c>
 800f320:	46a8      	mov	r8, r5
 800f322:	e7a0      	b.n	800f266 <_vfiprintf_r+0x42>
 800f324:	4a43      	ldr	r2, [pc, #268]	; (800f434 <_vfiprintf_r+0x210>)
 800f326:	1a80      	subs	r0, r0, r2
 800f328:	fa0b f000 	lsl.w	r0, fp, r0
 800f32c:	4318      	orrs	r0, r3
 800f32e:	9004      	str	r0, [sp, #16]
 800f330:	4645      	mov	r5, r8
 800f332:	e7bb      	b.n	800f2ac <_vfiprintf_r+0x88>
 800f334:	9a03      	ldr	r2, [sp, #12]
 800f336:	1d11      	adds	r1, r2, #4
 800f338:	6812      	ldr	r2, [r2, #0]
 800f33a:	9103      	str	r1, [sp, #12]
 800f33c:	2a00      	cmp	r2, #0
 800f33e:	db01      	blt.n	800f344 <_vfiprintf_r+0x120>
 800f340:	9207      	str	r2, [sp, #28]
 800f342:	e004      	b.n	800f34e <_vfiprintf_r+0x12a>
 800f344:	4252      	negs	r2, r2
 800f346:	f043 0302 	orr.w	r3, r3, #2
 800f34a:	9207      	str	r2, [sp, #28]
 800f34c:	9304      	str	r3, [sp, #16]
 800f34e:	f898 3000 	ldrb.w	r3, [r8]
 800f352:	2b2e      	cmp	r3, #46	; 0x2e
 800f354:	d110      	bne.n	800f378 <_vfiprintf_r+0x154>
 800f356:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f35a:	2b2a      	cmp	r3, #42	; 0x2a
 800f35c:	f108 0101 	add.w	r1, r8, #1
 800f360:	d137      	bne.n	800f3d2 <_vfiprintf_r+0x1ae>
 800f362:	9b03      	ldr	r3, [sp, #12]
 800f364:	1d1a      	adds	r2, r3, #4
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	9203      	str	r2, [sp, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	bfb8      	it	lt
 800f36e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f372:	f108 0802 	add.w	r8, r8, #2
 800f376:	9305      	str	r3, [sp, #20]
 800f378:	4d31      	ldr	r5, [pc, #196]	; (800f440 <_vfiprintf_r+0x21c>)
 800f37a:	f898 1000 	ldrb.w	r1, [r8]
 800f37e:	2203      	movs	r2, #3
 800f380:	4628      	mov	r0, r5
 800f382:	f7f0 ff35 	bl	80001f0 <memchr>
 800f386:	b140      	cbz	r0, 800f39a <_vfiprintf_r+0x176>
 800f388:	2340      	movs	r3, #64	; 0x40
 800f38a:	1b40      	subs	r0, r0, r5
 800f38c:	fa03 f000 	lsl.w	r0, r3, r0
 800f390:	9b04      	ldr	r3, [sp, #16]
 800f392:	4303      	orrs	r3, r0
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	f108 0801 	add.w	r8, r8, #1
 800f39a:	f898 1000 	ldrb.w	r1, [r8]
 800f39e:	4829      	ldr	r0, [pc, #164]	; (800f444 <_vfiprintf_r+0x220>)
 800f3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3a4:	2206      	movs	r2, #6
 800f3a6:	f108 0701 	add.w	r7, r8, #1
 800f3aa:	f7f0 ff21 	bl	80001f0 <memchr>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d034      	beq.n	800f41c <_vfiprintf_r+0x1f8>
 800f3b2:	4b25      	ldr	r3, [pc, #148]	; (800f448 <_vfiprintf_r+0x224>)
 800f3b4:	bb03      	cbnz	r3, 800f3f8 <_vfiprintf_r+0x1d4>
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	3307      	adds	r3, #7
 800f3ba:	f023 0307 	bic.w	r3, r3, #7
 800f3be:	3308      	adds	r3, #8
 800f3c0:	9303      	str	r3, [sp, #12]
 800f3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c4:	444b      	add	r3, r9
 800f3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c8:	e74c      	b.n	800f264 <_vfiprintf_r+0x40>
 800f3ca:	fb00 3202 	mla	r2, r0, r2, r3
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	e786      	b.n	800f2e0 <_vfiprintf_r+0xbc>
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	9305      	str	r3, [sp, #20]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	250a      	movs	r5, #10
 800f3da:	4688      	mov	r8, r1
 800f3dc:	3101      	adds	r1, #1
 800f3de:	f898 2000 	ldrb.w	r2, [r8]
 800f3e2:	3a30      	subs	r2, #48	; 0x30
 800f3e4:	2a09      	cmp	r2, #9
 800f3e6:	d903      	bls.n	800f3f0 <_vfiprintf_r+0x1cc>
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d0c5      	beq.n	800f378 <_vfiprintf_r+0x154>
 800f3ec:	9005      	str	r0, [sp, #20]
 800f3ee:	e7c3      	b.n	800f378 <_vfiprintf_r+0x154>
 800f3f0:	fb05 2000 	mla	r0, r5, r0, r2
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e7f0      	b.n	800f3da <_vfiprintf_r+0x1b6>
 800f3f8:	ab03      	add	r3, sp, #12
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	4622      	mov	r2, r4
 800f3fe:	4b13      	ldr	r3, [pc, #76]	; (800f44c <_vfiprintf_r+0x228>)
 800f400:	a904      	add	r1, sp, #16
 800f402:	4630      	mov	r0, r6
 800f404:	f3af 8000 	nop.w
 800f408:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f40c:	4681      	mov	r9, r0
 800f40e:	d1d8      	bne.n	800f3c2 <_vfiprintf_r+0x19e>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	065b      	lsls	r3, r3, #25
 800f414:	f53f af7d 	bmi.w	800f312 <_vfiprintf_r+0xee>
 800f418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f41a:	e77c      	b.n	800f316 <_vfiprintf_r+0xf2>
 800f41c:	ab03      	add	r3, sp, #12
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4622      	mov	r2, r4
 800f422:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <_vfiprintf_r+0x228>)
 800f424:	a904      	add	r1, sp, #16
 800f426:	4630      	mov	r0, r6
 800f428:	f000 f888 	bl	800f53c <_printf_i>
 800f42c:	e7ec      	b.n	800f408 <_vfiprintf_r+0x1e4>
 800f42e:	bf00      	nop
 800f430:	0801463c 	.word	0x0801463c
 800f434:	0801467c 	.word	0x0801467c
 800f438:	0801465c 	.word	0x0801465c
 800f43c:	0801461c 	.word	0x0801461c
 800f440:	08014682 	.word	0x08014682
 800f444:	08014686 	.word	0x08014686
 800f448:	00000000 	.word	0x00000000
 800f44c:	0800f201 	.word	0x0800f201

0800f450 <_printf_common>:
 800f450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	4691      	mov	r9, r2
 800f456:	461f      	mov	r7, r3
 800f458:	688a      	ldr	r2, [r1, #8]
 800f45a:	690b      	ldr	r3, [r1, #16]
 800f45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f460:	4293      	cmp	r3, r2
 800f462:	bfb8      	it	lt
 800f464:	4613      	movlt	r3, r2
 800f466:	f8c9 3000 	str.w	r3, [r9]
 800f46a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f46e:	4606      	mov	r6, r0
 800f470:	460c      	mov	r4, r1
 800f472:	b112      	cbz	r2, 800f47a <_printf_common+0x2a>
 800f474:	3301      	adds	r3, #1
 800f476:	f8c9 3000 	str.w	r3, [r9]
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	0699      	lsls	r1, r3, #26
 800f47e:	bf42      	ittt	mi
 800f480:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f484:	3302      	addmi	r3, #2
 800f486:	f8c9 3000 	strmi.w	r3, [r9]
 800f48a:	6825      	ldr	r5, [r4, #0]
 800f48c:	f015 0506 	ands.w	r5, r5, #6
 800f490:	d107      	bne.n	800f4a2 <_printf_common+0x52>
 800f492:	f104 0a19 	add.w	sl, r4, #25
 800f496:	68e3      	ldr	r3, [r4, #12]
 800f498:	f8d9 2000 	ldr.w	r2, [r9]
 800f49c:	1a9b      	subs	r3, r3, r2
 800f49e:	429d      	cmp	r5, r3
 800f4a0:	db29      	blt.n	800f4f6 <_printf_common+0xa6>
 800f4a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f4a6:	6822      	ldr	r2, [r4, #0]
 800f4a8:	3300      	adds	r3, #0
 800f4aa:	bf18      	it	ne
 800f4ac:	2301      	movne	r3, #1
 800f4ae:	0692      	lsls	r2, r2, #26
 800f4b0:	d42e      	bmi.n	800f510 <_printf_common+0xc0>
 800f4b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	47c0      	blx	r8
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d021      	beq.n	800f504 <_printf_common+0xb4>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	68e5      	ldr	r5, [r4, #12]
 800f4c4:	f8d9 2000 	ldr.w	r2, [r9]
 800f4c8:	f003 0306 	and.w	r3, r3, #6
 800f4cc:	2b04      	cmp	r3, #4
 800f4ce:	bf08      	it	eq
 800f4d0:	1aad      	subeq	r5, r5, r2
 800f4d2:	68a3      	ldr	r3, [r4, #8]
 800f4d4:	6922      	ldr	r2, [r4, #16]
 800f4d6:	bf0c      	ite	eq
 800f4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4dc:	2500      	movne	r5, #0
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	bfc4      	itt	gt
 800f4e2:	1a9b      	subgt	r3, r3, r2
 800f4e4:	18ed      	addgt	r5, r5, r3
 800f4e6:	f04f 0900 	mov.w	r9, #0
 800f4ea:	341a      	adds	r4, #26
 800f4ec:	454d      	cmp	r5, r9
 800f4ee:	d11b      	bne.n	800f528 <_printf_common+0xd8>
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	4652      	mov	r2, sl
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	47c0      	blx	r8
 800f500:	3001      	adds	r0, #1
 800f502:	d103      	bne.n	800f50c <_printf_common+0xbc>
 800f504:	f04f 30ff 	mov.w	r0, #4294967295
 800f508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f50c:	3501      	adds	r5, #1
 800f50e:	e7c2      	b.n	800f496 <_printf_common+0x46>
 800f510:	18e1      	adds	r1, r4, r3
 800f512:	1c5a      	adds	r2, r3, #1
 800f514:	2030      	movs	r0, #48	; 0x30
 800f516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f51a:	4422      	add	r2, r4
 800f51c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f524:	3302      	adds	r3, #2
 800f526:	e7c4      	b.n	800f4b2 <_printf_common+0x62>
 800f528:	2301      	movs	r3, #1
 800f52a:	4622      	mov	r2, r4
 800f52c:	4639      	mov	r1, r7
 800f52e:	4630      	mov	r0, r6
 800f530:	47c0      	blx	r8
 800f532:	3001      	adds	r0, #1
 800f534:	d0e6      	beq.n	800f504 <_printf_common+0xb4>
 800f536:	f109 0901 	add.w	r9, r9, #1
 800f53a:	e7d7      	b.n	800f4ec <_printf_common+0x9c>

0800f53c <_printf_i>:
 800f53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f540:	4617      	mov	r7, r2
 800f542:	7e0a      	ldrb	r2, [r1, #24]
 800f544:	b085      	sub	sp, #20
 800f546:	2a6e      	cmp	r2, #110	; 0x6e
 800f548:	4698      	mov	r8, r3
 800f54a:	4606      	mov	r6, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f550:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800f554:	f000 80bc 	beq.w	800f6d0 <_printf_i+0x194>
 800f558:	d81a      	bhi.n	800f590 <_printf_i+0x54>
 800f55a:	2a63      	cmp	r2, #99	; 0x63
 800f55c:	d02e      	beq.n	800f5bc <_printf_i+0x80>
 800f55e:	d80a      	bhi.n	800f576 <_printf_i+0x3a>
 800f560:	2a00      	cmp	r2, #0
 800f562:	f000 80c8 	beq.w	800f6f6 <_printf_i+0x1ba>
 800f566:	2a58      	cmp	r2, #88	; 0x58
 800f568:	f000 808a 	beq.w	800f680 <_printf_i+0x144>
 800f56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f570:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800f574:	e02a      	b.n	800f5cc <_printf_i+0x90>
 800f576:	2a64      	cmp	r2, #100	; 0x64
 800f578:	d001      	beq.n	800f57e <_printf_i+0x42>
 800f57a:	2a69      	cmp	r2, #105	; 0x69
 800f57c:	d1f6      	bne.n	800f56c <_printf_i+0x30>
 800f57e:	6821      	ldr	r1, [r4, #0]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f586:	d023      	beq.n	800f5d0 <_printf_i+0x94>
 800f588:	1d11      	adds	r1, r2, #4
 800f58a:	6019      	str	r1, [r3, #0]
 800f58c:	6813      	ldr	r3, [r2, #0]
 800f58e:	e027      	b.n	800f5e0 <_printf_i+0xa4>
 800f590:	2a73      	cmp	r2, #115	; 0x73
 800f592:	f000 80b4 	beq.w	800f6fe <_printf_i+0x1c2>
 800f596:	d808      	bhi.n	800f5aa <_printf_i+0x6e>
 800f598:	2a6f      	cmp	r2, #111	; 0x6f
 800f59a:	d02a      	beq.n	800f5f2 <_printf_i+0xb6>
 800f59c:	2a70      	cmp	r2, #112	; 0x70
 800f59e:	d1e5      	bne.n	800f56c <_printf_i+0x30>
 800f5a0:	680a      	ldr	r2, [r1, #0]
 800f5a2:	f042 0220 	orr.w	r2, r2, #32
 800f5a6:	600a      	str	r2, [r1, #0]
 800f5a8:	e003      	b.n	800f5b2 <_printf_i+0x76>
 800f5aa:	2a75      	cmp	r2, #117	; 0x75
 800f5ac:	d021      	beq.n	800f5f2 <_printf_i+0xb6>
 800f5ae:	2a78      	cmp	r2, #120	; 0x78
 800f5b0:	d1dc      	bne.n	800f56c <_printf_i+0x30>
 800f5b2:	2278      	movs	r2, #120	; 0x78
 800f5b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800f5b8:	496e      	ldr	r1, [pc, #440]	; (800f774 <_printf_i+0x238>)
 800f5ba:	e064      	b.n	800f686 <_printf_i+0x14a>
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800f5c2:	1d11      	adds	r1, r2, #4
 800f5c4:	6019      	str	r1, [r3, #0]
 800f5c6:	6813      	ldr	r3, [r2, #0]
 800f5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e0a3      	b.n	800f718 <_printf_i+0x1dc>
 800f5d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800f5d4:	f102 0104 	add.w	r1, r2, #4
 800f5d8:	6019      	str	r1, [r3, #0]
 800f5da:	d0d7      	beq.n	800f58c <_printf_i+0x50>
 800f5dc:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	da03      	bge.n	800f5ec <_printf_i+0xb0>
 800f5e4:	222d      	movs	r2, #45	; 0x2d
 800f5e6:	425b      	negs	r3, r3
 800f5e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f5ec:	4962      	ldr	r1, [pc, #392]	; (800f778 <_printf_i+0x23c>)
 800f5ee:	220a      	movs	r2, #10
 800f5f0:	e017      	b.n	800f622 <_printf_i+0xe6>
 800f5f2:	6820      	ldr	r0, [r4, #0]
 800f5f4:	6819      	ldr	r1, [r3, #0]
 800f5f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f5fa:	d003      	beq.n	800f604 <_printf_i+0xc8>
 800f5fc:	1d08      	adds	r0, r1, #4
 800f5fe:	6018      	str	r0, [r3, #0]
 800f600:	680b      	ldr	r3, [r1, #0]
 800f602:	e006      	b.n	800f612 <_printf_i+0xd6>
 800f604:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f608:	f101 0004 	add.w	r0, r1, #4
 800f60c:	6018      	str	r0, [r3, #0]
 800f60e:	d0f7      	beq.n	800f600 <_printf_i+0xc4>
 800f610:	880b      	ldrh	r3, [r1, #0]
 800f612:	4959      	ldr	r1, [pc, #356]	; (800f778 <_printf_i+0x23c>)
 800f614:	2a6f      	cmp	r2, #111	; 0x6f
 800f616:	bf14      	ite	ne
 800f618:	220a      	movne	r2, #10
 800f61a:	2208      	moveq	r2, #8
 800f61c:	2000      	movs	r0, #0
 800f61e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800f622:	6865      	ldr	r5, [r4, #4]
 800f624:	60a5      	str	r5, [r4, #8]
 800f626:	2d00      	cmp	r5, #0
 800f628:	f2c0 809c 	blt.w	800f764 <_printf_i+0x228>
 800f62c:	6820      	ldr	r0, [r4, #0]
 800f62e:	f020 0004 	bic.w	r0, r0, #4
 800f632:	6020      	str	r0, [r4, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d13f      	bne.n	800f6b8 <_printf_i+0x17c>
 800f638:	2d00      	cmp	r5, #0
 800f63a:	f040 8095 	bne.w	800f768 <_printf_i+0x22c>
 800f63e:	4675      	mov	r5, lr
 800f640:	2a08      	cmp	r2, #8
 800f642:	d10b      	bne.n	800f65c <_printf_i+0x120>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	07da      	lsls	r2, r3, #31
 800f648:	d508      	bpl.n	800f65c <_printf_i+0x120>
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	6862      	ldr	r2, [r4, #4]
 800f64e:	429a      	cmp	r2, r3
 800f650:	bfde      	ittt	le
 800f652:	2330      	movle	r3, #48	; 0x30
 800f654:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f65c:	ebae 0305 	sub.w	r3, lr, r5
 800f660:	6123      	str	r3, [r4, #16]
 800f662:	f8cd 8000 	str.w	r8, [sp]
 800f666:	463b      	mov	r3, r7
 800f668:	aa03      	add	r2, sp, #12
 800f66a:	4621      	mov	r1, r4
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7ff feef 	bl	800f450 <_printf_common>
 800f672:	3001      	adds	r0, #1
 800f674:	d155      	bne.n	800f722 <_printf_i+0x1e6>
 800f676:	f04f 30ff 	mov.w	r0, #4294967295
 800f67a:	b005      	add	sp, #20
 800f67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f680:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800f684:	493c      	ldr	r1, [pc, #240]	; (800f778 <_printf_i+0x23c>)
 800f686:	6822      	ldr	r2, [r4, #0]
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f68e:	f100 0504 	add.w	r5, r0, #4
 800f692:	601d      	str	r5, [r3, #0]
 800f694:	d001      	beq.n	800f69a <_printf_i+0x15e>
 800f696:	6803      	ldr	r3, [r0, #0]
 800f698:	e002      	b.n	800f6a0 <_printf_i+0x164>
 800f69a:	0655      	lsls	r5, r2, #25
 800f69c:	d5fb      	bpl.n	800f696 <_printf_i+0x15a>
 800f69e:	8803      	ldrh	r3, [r0, #0]
 800f6a0:	07d0      	lsls	r0, r2, #31
 800f6a2:	bf44      	itt	mi
 800f6a4:	f042 0220 	orrmi.w	r2, r2, #32
 800f6a8:	6022      	strmi	r2, [r4, #0]
 800f6aa:	b91b      	cbnz	r3, 800f6b4 <_printf_i+0x178>
 800f6ac:	6822      	ldr	r2, [r4, #0]
 800f6ae:	f022 0220 	bic.w	r2, r2, #32
 800f6b2:	6022      	str	r2, [r4, #0]
 800f6b4:	2210      	movs	r2, #16
 800f6b6:	e7b1      	b.n	800f61c <_printf_i+0xe0>
 800f6b8:	4675      	mov	r5, lr
 800f6ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6be:	fb02 3310 	mls	r3, r2, r0, r3
 800f6c2:	5ccb      	ldrb	r3, [r1, r3]
 800f6c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d1f5      	bne.n	800f6ba <_printf_i+0x17e>
 800f6ce:	e7b7      	b.n	800f640 <_printf_i+0x104>
 800f6d0:	6808      	ldr	r0, [r1, #0]
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	6949      	ldr	r1, [r1, #20]
 800f6d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f6da:	d004      	beq.n	800f6e6 <_printf_i+0x1aa>
 800f6dc:	1d10      	adds	r0, r2, #4
 800f6de:	6018      	str	r0, [r3, #0]
 800f6e0:	6813      	ldr	r3, [r2, #0]
 800f6e2:	6019      	str	r1, [r3, #0]
 800f6e4:	e007      	b.n	800f6f6 <_printf_i+0x1ba>
 800f6e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6ea:	f102 0004 	add.w	r0, r2, #4
 800f6ee:	6018      	str	r0, [r3, #0]
 800f6f0:	6813      	ldr	r3, [r2, #0]
 800f6f2:	d0f6      	beq.n	800f6e2 <_printf_i+0x1a6>
 800f6f4:	8019      	strh	r1, [r3, #0]
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	6123      	str	r3, [r4, #16]
 800f6fa:	4675      	mov	r5, lr
 800f6fc:	e7b1      	b.n	800f662 <_printf_i+0x126>
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	1d11      	adds	r1, r2, #4
 800f702:	6019      	str	r1, [r3, #0]
 800f704:	6815      	ldr	r5, [r2, #0]
 800f706:	6862      	ldr	r2, [r4, #4]
 800f708:	2100      	movs	r1, #0
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7f0 fd70 	bl	80001f0 <memchr>
 800f710:	b108      	cbz	r0, 800f716 <_printf_i+0x1da>
 800f712:	1b40      	subs	r0, r0, r5
 800f714:	6060      	str	r0, [r4, #4]
 800f716:	6863      	ldr	r3, [r4, #4]
 800f718:	6123      	str	r3, [r4, #16]
 800f71a:	2300      	movs	r3, #0
 800f71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f720:	e79f      	b.n	800f662 <_printf_i+0x126>
 800f722:	6923      	ldr	r3, [r4, #16]
 800f724:	462a      	mov	r2, r5
 800f726:	4639      	mov	r1, r7
 800f728:	4630      	mov	r0, r6
 800f72a:	47c0      	blx	r8
 800f72c:	3001      	adds	r0, #1
 800f72e:	d0a2      	beq.n	800f676 <_printf_i+0x13a>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	079b      	lsls	r3, r3, #30
 800f734:	d507      	bpl.n	800f746 <_printf_i+0x20a>
 800f736:	2500      	movs	r5, #0
 800f738:	f104 0919 	add.w	r9, r4, #25
 800f73c:	68e3      	ldr	r3, [r4, #12]
 800f73e:	9a03      	ldr	r2, [sp, #12]
 800f740:	1a9b      	subs	r3, r3, r2
 800f742:	429d      	cmp	r5, r3
 800f744:	db05      	blt.n	800f752 <_printf_i+0x216>
 800f746:	68e0      	ldr	r0, [r4, #12]
 800f748:	9b03      	ldr	r3, [sp, #12]
 800f74a:	4298      	cmp	r0, r3
 800f74c:	bfb8      	it	lt
 800f74e:	4618      	movlt	r0, r3
 800f750:	e793      	b.n	800f67a <_printf_i+0x13e>
 800f752:	2301      	movs	r3, #1
 800f754:	464a      	mov	r2, r9
 800f756:	4639      	mov	r1, r7
 800f758:	4630      	mov	r0, r6
 800f75a:	47c0      	blx	r8
 800f75c:	3001      	adds	r0, #1
 800f75e:	d08a      	beq.n	800f676 <_printf_i+0x13a>
 800f760:	3501      	adds	r5, #1
 800f762:	e7eb      	b.n	800f73c <_printf_i+0x200>
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1a7      	bne.n	800f6b8 <_printf_i+0x17c>
 800f768:	780b      	ldrb	r3, [r1, #0]
 800f76a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f76e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f772:	e765      	b.n	800f640 <_printf_i+0x104>
 800f774:	0801469e 	.word	0x0801469e
 800f778:	0801468d 	.word	0x0801468d

0800f77c <_read_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4c07      	ldr	r4, [pc, #28]	; (800f79c <_read_r+0x20>)
 800f780:	4605      	mov	r5, r0
 800f782:	4608      	mov	r0, r1
 800f784:	4611      	mov	r1, r2
 800f786:	2200      	movs	r2, #0
 800f788:	6022      	str	r2, [r4, #0]
 800f78a:	461a      	mov	r2, r3
 800f78c:	f7fd fe7a 	bl	800d484 <_read>
 800f790:	1c43      	adds	r3, r0, #1
 800f792:	d102      	bne.n	800f79a <_read_r+0x1e>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	b103      	cbz	r3, 800f79a <_read_r+0x1e>
 800f798:	602b      	str	r3, [r5, #0]
 800f79a:	bd38      	pop	{r3, r4, r5, pc}
 800f79c:	20003000 	.word	0x20003000

0800f7a0 <_fstat_r>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	4c07      	ldr	r4, [pc, #28]	; (800f7c0 <_fstat_r+0x20>)
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	4608      	mov	r0, r1
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	f7fd fe94 	bl	800d4da <_fstat>
 800f7b2:	1c43      	adds	r3, r0, #1
 800f7b4:	d102      	bne.n	800f7bc <_fstat_r+0x1c>
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	b103      	cbz	r3, 800f7bc <_fstat_r+0x1c>
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	bd38      	pop	{r3, r4, r5, pc}
 800f7be:	bf00      	nop
 800f7c0:	20003000 	.word	0x20003000

0800f7c4 <_isatty_r>:
 800f7c4:	b538      	push	{r3, r4, r5, lr}
 800f7c6:	4c06      	ldr	r4, [pc, #24]	; (800f7e0 <_isatty_r+0x1c>)
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	4608      	mov	r0, r1
 800f7ce:	6023      	str	r3, [r4, #0]
 800f7d0:	f7fd fe88 	bl	800d4e4 <_isatty>
 800f7d4:	1c43      	adds	r3, r0, #1
 800f7d6:	d102      	bne.n	800f7de <_isatty_r+0x1a>
 800f7d8:	6823      	ldr	r3, [r4, #0]
 800f7da:	b103      	cbz	r3, 800f7de <_isatty_r+0x1a>
 800f7dc:	602b      	str	r3, [r5, #0]
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	20003000 	.word	0x20003000

0800f7e4 <_realloc_r>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	4607      	mov	r7, r0
 800f7e8:	4614      	mov	r4, r2
 800f7ea:	460e      	mov	r6, r1
 800f7ec:	b921      	cbnz	r1, 800f7f8 <_realloc_r+0x14>
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7f4:	f7fe be9c 	b.w	800e530 <_malloc_r>
 800f7f8:	b922      	cbnz	r2, 800f804 <_realloc_r+0x20>
 800f7fa:	f7fe fe4b 	bl	800e494 <_free_r>
 800f7fe:	4625      	mov	r5, r4
 800f800:	4628      	mov	r0, r5
 800f802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f804:	f000 f814 	bl	800f830 <_malloc_usable_size_r>
 800f808:	4284      	cmp	r4, r0
 800f80a:	d90f      	bls.n	800f82c <_realloc_r+0x48>
 800f80c:	4621      	mov	r1, r4
 800f80e:	4638      	mov	r0, r7
 800f810:	f7fe fe8e 	bl	800e530 <_malloc_r>
 800f814:	4605      	mov	r5, r0
 800f816:	2800      	cmp	r0, #0
 800f818:	d0f2      	beq.n	800f800 <_realloc_r+0x1c>
 800f81a:	4631      	mov	r1, r6
 800f81c:	4622      	mov	r2, r4
 800f81e:	f7fe fdfe 	bl	800e41e <memcpy>
 800f822:	4631      	mov	r1, r6
 800f824:	4638      	mov	r0, r7
 800f826:	f7fe fe35 	bl	800e494 <_free_r>
 800f82a:	e7e9      	b.n	800f800 <_realloc_r+0x1c>
 800f82c:	4635      	mov	r5, r6
 800f82e:	e7e7      	b.n	800f800 <_realloc_r+0x1c>

0800f830 <_malloc_usable_size_r>:
 800f830:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800f834:	2800      	cmp	r0, #0
 800f836:	f1a0 0004 	sub.w	r0, r0, #4
 800f83a:	bfbc      	itt	lt
 800f83c:	580b      	ldrlt	r3, [r1, r0]
 800f83e:	18c0      	addlt	r0, r0, r3
 800f840:	4770      	bx	lr
	...

0800f844 <_init>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	bf00      	nop
 800f848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84a:	bc08      	pop	{r3}
 800f84c:	469e      	mov	lr, r3
 800f84e:	4770      	bx	lr

0800f850 <_fini>:
 800f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f852:	bf00      	nop
 800f854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f856:	bc08      	pop	{r3}
 800f858:	469e      	mov	lr, r3
 800f85a:	4770      	bx	lr
