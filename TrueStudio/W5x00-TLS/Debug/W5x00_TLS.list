
W5x00-TLS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005148  08010278  08010278  00020278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080153c0  080153c0  000253c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080153c8  080153c8  000253c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080153cc  080153cc  000253cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f0  20000000  080153d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300f0  2**0
                  CONTENTS
  8 .bss          00002f20  200000f0  200000f0  000300f0  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20003010  20003010  000300f0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003f289  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008025  00000000  00000000  0006f3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0002119a  00000000  00000000  000773ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001860  00000000  00000000  00098568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002418  00000000  00000000  00099dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f0aa  00000000  00000000  0009c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008845  00000000  00000000  000ab28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000b3acf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000558c  00000000  00000000  000b3b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010260 	.word	0x08010260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08010260 	.word	0x08010260

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f888 	bl	80006cc <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000024 	.word	0x20000024
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 f826 	bl	8001660 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000276c 	.word	0x2000276c
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000276c 	.word	0x2000276c

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d2:	d20a      	bcs.n	80006ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	21f0      	movs	r1, #240	; 0xf0
 80006dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006fc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000890 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000704:	4a60      	ldr	r2, [pc, #384]	; (8000888 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000706:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000708:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800070c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070e:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000710:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000714:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000716:	42ac      	cmp	r4, r5
 8000718:	f040 80a6 	bne.w	8000868 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071c:	684c      	ldr	r4, [r1, #4]
 800071e:	f024 0c10 	bic.w	ip, r4, #16
 8000722:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000726:	2e01      	cmp	r6, #1
 8000728:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800072c:	d812      	bhi.n	8000754 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800072e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000730:	2603      	movs	r6, #3
 8000732:	fa06 f60e 	lsl.w	r6, r6, lr
 8000736:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073a:	68ce      	ldr	r6, [r1, #12]
 800073c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000740:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000742:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000744:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000746:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800074a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074e:	409e      	lsls	r6, r3
 8000750:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000752:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000754:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000756:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000758:	fa06 f60e 	lsl.w	r6, r6, lr
 800075c:	43f6      	mvns	r6, r6
 800075e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000762:	688f      	ldr	r7, [r1, #8]
 8000764:	fa07 f70e 	lsl.w	r7, r7, lr
 8000768:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000770:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000772:	d116      	bne.n	80007a2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000774:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000778:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800077c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000780:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000784:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000788:	f04f 0c0f 	mov.w	ip, #15
 800078c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000790:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000794:	690f      	ldr	r7, [r1, #16]
 8000796:	fa07 f70b 	lsl.w	r7, r7, fp
 800079a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800079e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007a2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a6:	f004 0703 	and.w	r7, r4, #3
 80007aa:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007ae:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007b2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007b4:	00e6      	lsls	r6, r4, #3
 80007b6:	d557      	bpl.n	8000868 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b8:	f04f 0b00 	mov.w	fp, #0
 80007bc:	f8cd b00c 	str.w	fp, [sp, #12]
 80007c0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c4:	4e31      	ldr	r6, [pc, #196]	; (800088c <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007ca:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007d2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007d6:	9703      	str	r7, [sp, #12]
 80007d8:	9f03      	ldr	r7, [sp, #12]
 80007da:	f023 0703 	bic.w	r7, r3, #3
 80007de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007e6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ea:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007f2:	f04f 0e0f 	mov.w	lr, #15
 80007f6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fa:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007fc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000800:	d039      	beq.n	8000876 <HAL_GPIO_Init+0x17e>
 8000802:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000806:	42b0      	cmp	r0, r6
 8000808:	d037      	beq.n	800087a <HAL_GPIO_Init+0x182>
 800080a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800080e:	42b0      	cmp	r0, r6
 8000810:	d035      	beq.n	800087e <HAL_GPIO_Init+0x186>
 8000812:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000816:	42b0      	cmp	r0, r6
 8000818:	d033      	beq.n	8000882 <HAL_GPIO_Init+0x18a>
 800081a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800081e:	42b0      	cmp	r0, r6
 8000820:	bf14      	ite	ne
 8000822:	2607      	movne	r6, #7
 8000824:	2604      	moveq	r6, #4
 8000826:	fa06 f60c 	lsl.w	r6, r6, ip
 800082a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800082e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000830:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000832:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000834:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000838:	bf0c      	ite	eq
 800083a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800083c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800083e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000840:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000842:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000846:	bf0c      	ite	eq
 8000848:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800084a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800084c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800084e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000850:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000854:	bf0c      	ite	eq
 8000856:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000858:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800085a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800085c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800085e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000860:	bf54      	ite	pl
 8000862:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000864:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000866:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000868:	3301      	adds	r3, #1
 800086a:	2b10      	cmp	r3, #16
 800086c:	f47f af4f 	bne.w	800070e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000870:	b005      	add	sp, #20
 8000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000876:	465e      	mov	r6, fp
 8000878:	e7d5      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 800087a:	2601      	movs	r6, #1
 800087c:	e7d3      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 800087e:	2602      	movs	r6, #2
 8000880:	e7d1      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 8000882:	2603      	movs	r6, #3
 8000884:	e7cf      	b.n	8000826 <HAL_GPIO_Init+0x12e>
 8000886:	bf00      	nop
 8000888:	40013c00 	.word	0x40013c00
 800088c:	40020000 	.word	0x40020000
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000894:	b10a      	cbz	r2, 800089a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000896:	6181      	str	r1, [r0, #24]
 8000898:	4770      	bx	lr
 800089a:	0409      	lsls	r1, r1, #16
 800089c:	e7fb      	b.n	8000896 <HAL_GPIO_WritePin+0x2>
	...

080008a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008a4:	4604      	mov	r4, r0
 80008a6:	b908      	cbnz	r0, 80008ac <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008a8:	2001      	movs	r0, #1
 80008aa:	e03f      	b.n	800092c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ac:	6803      	ldr	r3, [r0, #0]
 80008ae:	07dd      	lsls	r5, r3, #31
 80008b0:	d410      	bmi.n	80008d4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	0798      	lsls	r0, r3, #30
 80008b6:	d45a      	bmi.n	800096e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	071a      	lsls	r2, r3, #28
 80008bc:	f100 809c 	bmi.w	80009f8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	075b      	lsls	r3, r3, #29
 80008c4:	f100 80ba 	bmi.w	8000a3c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008c8:	69a0      	ldr	r0, [r4, #24]
 80008ca:	2800      	cmp	r0, #0
 80008cc:	f040 811b 	bne.w	8000b06 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80008d0:	2000      	movs	r0, #0
 80008d2:	e02b      	b.n	800092c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008d4:	4ba4      	ldr	r3, [pc, #656]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	f002 020c 	and.w	r2, r2, #12
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d007      	beq.n	80008f0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008e6:	2a08      	cmp	r2, #8
 80008e8:	d10a      	bne.n	8000900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	0259      	lsls	r1, r3, #9
 80008ee:	d507      	bpl.n	8000900 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f0:	4b9d      	ldr	r3, [pc, #628]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	039a      	lsls	r2, r3, #14
 80008f6:	d5dc      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x12>
 80008f8:	6863      	ldr	r3, [r4, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1d9      	bne.n	80008b2 <HAL_RCC_OscConfig+0x12>
 80008fe:	e7d3      	b.n	80008a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000900:	6863      	ldr	r3, [r4, #4]
 8000902:	4d99      	ldr	r5, [pc, #612]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000908:	d113      	bne.n	8000932 <HAL_RCC_OscConfig+0x92>
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000910:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000912:	f7ff fe8f 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000916:	4d94      	ldr	r5, [pc, #592]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000918:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091a:	682b      	ldr	r3, [r5, #0]
 800091c:	039b      	lsls	r3, r3, #14
 800091e:	d4c8      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000920:	f7ff fe88 	bl	8000634 <HAL_GetTick>
 8000924:	1b80      	subs	r0, r0, r6
 8000926:	2864      	cmp	r0, #100	; 0x64
 8000928:	d9f7      	bls.n	800091a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800092a:	2003      	movs	r0, #3
}
 800092c:	b002      	add	sp, #8
 800092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000936:	d104      	bne.n	8000942 <HAL_RCC_OscConfig+0xa2>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093e:	602b      	str	r3, [r5, #0]
 8000940:	e7e3      	b.n	800090a <HAL_RCC_OscConfig+0x6a>
 8000942:	682a      	ldr	r2, [r5, #0]
 8000944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000948:	602a      	str	r2, [r5, #0]
 800094a:	682a      	ldr	r2, [r5, #0]
 800094c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000950:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1dd      	bne.n	8000912 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000956:	f7ff fe6d 	bl	8000634 <HAL_GetTick>
 800095a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	039f      	lsls	r7, r3, #14
 8000960:	d5a7      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000962:	f7ff fe67 	bl	8000634 <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	2864      	cmp	r0, #100	; 0x64
 800096a:	d9f7      	bls.n	800095c <HAL_RCC_OscConfig+0xbc>
 800096c:	e7dd      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800096e:	4b7e      	ldr	r3, [pc, #504]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	f012 0f0c 	tst.w	r2, #12
 8000976:	d007      	beq.n	8000988 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800097e:	2a08      	cmp	r2, #8
 8000980:	d111      	bne.n	80009a6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	025e      	lsls	r6, r3, #9
 8000986:	d40e      	bmi.n	80009a6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000988:	4b77      	ldr	r3, [pc, #476]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	0795      	lsls	r5, r2, #30
 800098e:	d502      	bpl.n	8000996 <HAL_RCC_OscConfig+0xf6>
 8000990:	68e2      	ldr	r2, [r4, #12]
 8000992:	2a01      	cmp	r2, #1
 8000994:	d188      	bne.n	80008a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	6921      	ldr	r1, [r4, #16]
 800099a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800099e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a4:	e788      	b.n	80008b8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009a6:	68e2      	ldr	r2, [r4, #12]
 80009a8:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <HAL_RCC_OscConfig+0x2cc>)
 80009aa:	b1b2      	cbz	r2, 80009da <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fe40 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	4d6c      	ldr	r5, [pc, #432]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	0798      	lsls	r0, r3, #30
 80009bc:	d507      	bpl.n	80009ce <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009be:	682b      	ldr	r3, [r5, #0]
 80009c0:	6922      	ldr	r2, [r4, #16]
 80009c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	e774      	b.n	80008b8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fe31 	bl	8000634 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9ef      	bls.n	80009b8 <HAL_RCC_OscConfig+0x118>
 80009d8:	e7a7      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80009da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fe2a 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e0:	4d61      	ldr	r5, [pc, #388]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	0799      	lsls	r1, r3, #30
 80009e8:	f57f af66 	bpl.w	80008b8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ec:	f7ff fe22 	bl	8000634 <HAL_GetTick>
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	2802      	cmp	r0, #2
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0x144>
 80009f6:	e798      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009f8:	6962      	ldr	r2, [r4, #20]
 80009fa:	4b5d      	ldr	r3, [pc, #372]	; (8000b70 <HAL_RCC_OscConfig+0x2d0>)
 80009fc:	b17a      	cbz	r2, 8000a1e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a02:	f7ff fe17 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a06:	4d58      	ldr	r5, [pc, #352]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a08:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0c:	079f      	lsls	r7, r3, #30
 8000a0e:	f53f af57 	bmi.w	80008c0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a12:	f7ff fe0f 	bl	8000634 <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	2802      	cmp	r0, #2
 8000a1a:	d9f6      	bls.n	8000a0a <HAL_RCC_OscConfig+0x16a>
 8000a1c:	e785      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a20:	f7ff fe08 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a24:	4d50      	ldr	r5, [pc, #320]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a2a:	0798      	lsls	r0, r3, #30
 8000a2c:	f57f af48 	bpl.w	80008c0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a30:	f7ff fe00 	bl	8000634 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f6      	bls.n	8000a28 <HAL_RCC_OscConfig+0x188>
 8000a3a:	e776      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a40:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a44:	d128      	bne.n	8000a98 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a5a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5c:	4d45      	ldr	r5, [pc, #276]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	05d9      	lsls	r1, r3, #23
 8000a62:	d51b      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a64:	68a3      	ldr	r3, [r4, #8]
 8000a66:	4d40      	ldr	r5, [pc, #256]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d127      	bne.n	8000abc <HAL_RCC_OscConfig+0x21c>
 8000a6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a74:	f7ff fdde 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a78:	4d3b      	ldr	r5, [pc, #236]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a7a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a82:	079b      	lsls	r3, r3, #30
 8000a84:	d539      	bpl.n	8000afa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	f43f af1e 	beq.w	80008c8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a8c:	4a36      	ldr	r2, [pc, #216]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000a8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	e717      	b.n	80008c8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e7df      	b.n	8000a5c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000aa4:	f7ff fdc6 	bl	8000634 <HAL_GetTick>
 8000aa8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	05da      	lsls	r2, r3, #23
 8000aae:	d4d9      	bmi.n	8000a64 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab0:	f7ff fdc0 	bl	8000634 <HAL_GetTick>
 8000ab4:	1bc0      	subs	r0, r0, r7
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9f7      	bls.n	8000aaa <HAL_RCC_OscConfig+0x20a>
 8000aba:	e736      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d104      	bne.n	8000aca <HAL_RCC_OscConfig+0x22a>
 8000ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	672b      	str	r3, [r5, #112]	; 0x70
 8000ac8:	e7d0      	b.n	8000a6c <HAL_RCC_OscConfig+0x1cc>
 8000aca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000acc:	f022 0201 	bic.w	r2, r2, #1
 8000ad0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ad2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ad4:	f022 0204 	bic.w	r2, r2, #4
 8000ad8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1ca      	bne.n	8000a74 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ade:	f7ff fda9 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ae6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aea:	0798      	lsls	r0, r3, #30
 8000aec:	d5cb      	bpl.n	8000a86 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aee:	f7ff fda1 	bl	8000634 <HAL_GetTick>
 8000af2:	1bc0      	subs	r0, r0, r7
 8000af4:	4540      	cmp	r0, r8
 8000af6:	d9f7      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x248>
 8000af8:	e717      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afa:	f7ff fd9b 	bl	8000634 <HAL_GetTick>
 8000afe:	1bc0      	subs	r0, r0, r7
 8000b00:	4540      	cmp	r0, r8
 8000b02:	d9bd      	bls.n	8000a80 <HAL_RCC_OscConfig+0x1e0>
 8000b04:	e711      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b06:	4d18      	ldr	r5, [pc, #96]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
 8000b08:	68ab      	ldr	r3, [r5, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d047      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x302>
 8000b12:	4e19      	ldr	r6, [pc, #100]	; (8000b78 <HAL_RCC_OscConfig+0x2d8>)
 8000b14:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b18:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b1a:	d135      	bne.n	8000b88 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fd8a 	bl	8000634 <HAL_GetTick>
 8000b20:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b22:	682b      	ldr	r3, [r5, #0]
 8000b24:	0199      	lsls	r1, r3, #6
 8000b26:	d429      	bmi.n	8000b7c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b28:	6a22      	ldr	r2, [r4, #32]
 8000b2a:	69e3      	ldr	r3, [r4, #28]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b30:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b3e:	0852      	lsrs	r2, r2, #1
 8000b40:	3a01      	subs	r2, #1
 8000b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b46:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b4c:	f7ff fd72 	bl	8000634 <HAL_GetTick>
 8000b50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	019a      	lsls	r2, r3, #6
 8000b56:	f53f aebb 	bmi.w	80008d0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b5a:	f7ff fd6b 	bl	8000634 <HAL_GetTick>
 8000b5e:	1b40      	subs	r0, r0, r5
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d9f6      	bls.n	8000b52 <HAL_RCC_OscConfig+0x2b2>
 8000b64:	e6e1      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	42470000 	.word	0x42470000
 8000b70:	42470e80 	.word	0x42470e80
 8000b74:	40007000 	.word	0x40007000
 8000b78:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7c:	f7ff fd5a 	bl	8000634 <HAL_GetTick>
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	2802      	cmp	r0, #2
 8000b84:	d9cd      	bls.n	8000b22 <HAL_RCC_OscConfig+0x282>
 8000b86:	e6d0      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd54 	bl	8000634 <HAL_GetTick>
 8000b8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	f57f ae9d 	bpl.w	80008d0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fd4d 	bl	8000634 <HAL_GetTick>
 8000b9a:	1b00      	subs	r0, r0, r4
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x2ee>
 8000ba0:	e6c3      	b.n	800092a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ba2:	2801      	cmp	r0, #1
 8000ba4:	f43f aec2 	beq.w	800092c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000ba8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000baa:	69e3      	ldr	r3, [r4, #28]
 8000bac:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f47f ae79 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
 8000bb6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bb8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	f47f ae73 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bc8:	4003      	ands	r3, r0
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f47f ae6c 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bd2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f47f ae66 	bne.w	80008a8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000bde:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000be2:	1ac0      	subs	r0, r0, r3
 8000be4:	bf18      	it	ne
 8000be6:	2001      	movne	r0, #1
 8000be8:	e6a0      	b.n	800092c <HAL_RCC_OscConfig+0x8c>
 8000bea:	bf00      	nop

08000bec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf0:	688b      	ldr	r3, [r1, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d003      	beq.n	8000c02 <HAL_RCC_GetSysClockFreq+0x16>
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d003      	beq.n	8000c06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c10:	bf14      	ite	ne
 8000c12:	480c      	ldrne	r0, [pc, #48]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c14:	480a      	ldreq	r0, [pc, #40]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c1a:	bf18      	it	ne
 8000c1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c22:	fba1 0100 	umull	r0, r1, r1, r0
 8000c26:	f7ff fb33 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c32:	3301      	adds	r3, #1
 8000c34:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c3a:	bd08      	pop	{r3, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	00f42400 	.word	0x00f42400
 8000c44:	017d7840 	.word	0x017d7840

08000c48 <HAL_RCC_ClockConfig>:
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b910      	cbnz	r0, 8000c58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c58:	4b44      	ldr	r3, [pc, #272]	; (8000d6c <HAL_RCC_ClockConfig+0x124>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f002 020f 	and.w	r2, r2, #15
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d329      	bcc.n	8000cb8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c64:	6821      	ldr	r1, [r4, #0]
 8000c66:	078f      	lsls	r7, r1, #30
 8000c68:	d42e      	bmi.n	8000cc8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c6a:	07c8      	lsls	r0, r1, #31
 8000c6c:	d441      	bmi.n	8000cf2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_RCC_ClockConfig+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	f002 020f 	and.w	r2, r2, #15
 8000c76:	4295      	cmp	r5, r2
 8000c78:	d367      	bcc.n	8000d4a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	0751      	lsls	r1, r2, #29
 8000c7e:	d46d      	bmi.n	8000d5c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c80:	0713      	lsls	r3, r2, #28
 8000c82:	d507      	bpl.n	8000c94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c84:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000c86:	6921      	ldr	r1, [r4, #16]
 8000c88:	6893      	ldr	r3, [r2, #8]
 8000c8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c94:	f7ff ffaa 	bl	8000bec <HAL_RCC_GetSysClockFreq>
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000c9a:	4a36      	ldr	r2, [pc, #216]	; (8000d74 <HAL_RCC_ClockConfig+0x12c>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	40d8      	lsrs	r0, r3
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <HAL_RCC_ClockConfig+0x130>)
 8000ca8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <HAL_RCC_ClockConfig+0x134>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	f7ff fc77 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d1c5      	bne.n	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000cc6:	e7cd      	b.n	8000c64 <HAL_RCC_ClockConfig+0x1c>
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cce:	bf1e      	ittt	ne
 8000cd0:	689a      	ldrne	r2, [r3, #8]
 8000cd2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cd6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cda:	bf42      	ittt	mi
 8000cdc:	689a      	ldrmi	r2, [r3, #8]
 8000cde:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ce2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	68a0      	ldr	r0, [r4, #8]
 8000ce8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cec:	4302      	orrs	r2, r0
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e7bb      	b.n	8000c6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf2:	6862      	ldr	r2, [r4, #4]
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d11d      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	d0a7      	beq.n	8000c52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d02:	4e1b      	ldr	r6, [pc, #108]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000d04:	68b3      	ldr	r3, [r6, #8]
 8000d06:	f023 0303 	bic.w	r3, r3, #3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d0e:	f7ff fc91 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d12:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d18:	68b3      	ldr	r3, [r6, #8]
 8000d1a:	6862      	ldr	r2, [r4, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d24:	d0a3      	beq.n	8000c6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d26:	f7ff fc85 	bl	8000634 <HAL_GetTick>
 8000d2a:	1bc0      	subs	r0, r0, r7
 8000d2c:	4540      	cmp	r0, r8
 8000d2e:	d9f3      	bls.n	8000d18 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
}
 8000d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d36:	1e91      	subs	r1, r2, #2
 8000d38:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d3c:	d802      	bhi.n	8000d44 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d42:	e7dd      	b.n	8000d00 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	f013 0f02 	tst.w	r3, #2
 8000d48:	e7da      	b.n	8000d00 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4a:	b2ea      	uxtb	r2, r5
 8000d4c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	429d      	cmp	r5, r3
 8000d56:	f47f af7c 	bne.w	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000d5a:	e78e      	b.n	8000c7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d5c:	4904      	ldr	r1, [pc, #16]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000d5e:	68e0      	ldr	r0, [r4, #12]
 8000d60:	688b      	ldr	r3, [r1, #8]
 8000d62:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d66:	4303      	orrs	r3, r0
 8000d68:	608b      	str	r3, [r1, #8]
 8000d6a:	e789      	b.n	8000c80 <HAL_RCC_ClockConfig+0x38>
 8000d6c:	40023c00 	.word	0x40023c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	080103c4 	.word	0x080103c4
 8000d78:	20000024 	.word	0x20000024
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
}
 8000d90:	40d8      	lsrs	r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	40023800 	.word	0x40023800
 8000d98:	080103d4 	.word	0x080103d4
 8000d9c:	20000024 	.word	0x20000024

08000da0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dae:	6810      	ldr	r0, [r2, #0]
}
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	40023800 	.word	0x40023800
 8000db8:	080103d4 	.word	0x080103d4
 8000dbc:	20000024 	.word	0x20000024

08000dc0 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	4615      	mov	r5, r2
 8000dc8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000dca:	6821      	ldr	r1, [r4, #0]
 8000dcc:	688a      	ldr	r2, [r1, #8]
 8000dce:	ea36 0302 	bics.w	r3, r6, r2
 8000dd2:	d001      	beq.n	8000dd8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000dd4:	2000      	movs	r0, #0
}
 8000dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000dd8:	1c6b      	adds	r3, r5, #1
 8000dda:	d0f7      	beq.n	8000dcc <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000ddc:	f7ff fc2a 	bl	8000634 <HAL_GetTick>
 8000de0:	1bc0      	subs	r0, r0, r7
 8000de2:	4285      	cmp	r5, r0
 8000de4:	d8f1      	bhi.n	8000dca <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000dee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000df0:	6862      	ldr	r2, [r4, #4]
 8000df2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000df6:	d10a      	bne.n	8000e0e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000df8:	68a2      	ldr	r2, [r4, #8]
 8000dfa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dfe:	d002      	beq.n	8000e06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e00:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e04:	d103      	bne.n	8000e0e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e0c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e14:	d107      	bne.n	8000e26 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e24:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e32:	2003      	movs	r0, #3
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e3a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <SPI_EndRxTxTransaction+0x54>)
 8000e3e:	4e14      	ldr	r6, [pc, #80]	; (8000e90 <SPI_EndRxTxTransaction+0x58>)
 8000e40:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e42:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e44:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e48:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e4c:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e4e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e52:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e54:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e56:	d10d      	bne.n	8000e74 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e58:	460a      	mov	r2, r1
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e60:	b910      	cbnz	r0, 8000e68 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e62:	2000      	movs	r0, #0
}
 8000e64:	b002      	add	sp, #8
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e6a:	f043 0320 	orr.w	r3, r3, #32
 8000e6e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e70:	2003      	movs	r0, #3
 8000e72:	e7f7      	b.n	8000e64 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f3      	beq.n	8000e62 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000e7a:	9b01      	ldr	r3, [sp, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	d4f5      	bmi.n	8000e74 <SPI_EndRxTxTransaction+0x3c>
 8000e88:	e7eb      	b.n	8000e62 <SPI_EndRxTxTransaction+0x2a>
 8000e8a:	bf00      	nop
 8000e8c:	20000024 	.word	0x20000024
 8000e90:	016e3600 	.word	0x016e3600

08000e94 <HAL_SPI_Init>:
{
 8000e94:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e96:	4604      	mov	r4, r0
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d036      	beq.n	8000f0a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ea0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ea8:	b91b      	cbnz	r3, 8000eb2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000eaa:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000eae:	f000 fbf3 	bl	8001698 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000eb2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000eb4:	68a0      	ldr	r0, [r4, #8]
 8000eb6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ebe:	680b      	ldr	r3, [r1, #0]
 8000ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	4303      	orrs	r3, r0
 8000eca:	68e0      	ldr	r0, [r4, #12]
 8000ecc:	4303      	orrs	r3, r0
 8000ece:	6920      	ldr	r0, [r4, #16]
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	6960      	ldr	r0, [r4, #20]
 8000ed4:	4303      	orrs	r3, r0
 8000ed6:	69e0      	ldr	r0, [r4, #28]
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	6a20      	ldr	r0, [r4, #32]
 8000edc:	4303      	orrs	r3, r0
 8000ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000ee6:	4303      	orrs	r3, r0
 8000ee8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000eea:	0c12      	lsrs	r2, r2, #16
 8000eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eee:	f002 0204 	and.w	r2, r2, #4
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ef6:	69cb      	ldr	r3, [r1, #28]
 8000ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000efc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000efe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f00:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f02:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
}
 8000f0c:	bd10      	pop	{r4, pc}

08000f0e <HAL_SPI_TransmitReceive>:
{
 8000f0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f12:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f14:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000f1a:	2b01      	cmp	r3, #1
{
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	460d      	mov	r5, r1
 8000f20:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000f22:	f000 80e2 	beq.w	80010ea <HAL_SPI_TransmitReceive+0x1dc>
 8000f26:	2301      	movs	r3, #1
 8000f28:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f2c:	f7ff fb82 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f30:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f34:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f36:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f38:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f3a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f3c:	d00a      	beq.n	8000f54 <HAL_SPI_TransmitReceive+0x46>
 8000f3e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f42:	f040 80d0 	bne.w	80010e6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f46:	68a0      	ldr	r0, [r4, #8]
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	f040 80cc 	bne.w	80010e6 <HAL_SPI_TransmitReceive+0x1d8>
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	f040 80c9 	bne.w	80010e6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	f000 80c4 	beq.w	80010e2 <HAL_SPI_TransmitReceive+0x1d4>
 8000f5a:	f1b9 0f00 	cmp.w	r9, #0
 8000f5e:	f000 80c0 	beq.w	80010e2 <HAL_SPI_TransmitReceive+0x1d4>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	f000 80bd 	beq.w	80010e2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f68:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f6c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f70:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f72:	bf1c      	itt	ne
 8000f74:	2305      	movne	r3, #5
 8000f76:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f7e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f80:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f82:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f84:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f86:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f88:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f8a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f8c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f8e:	bf58      	it	pl
 8000f90:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f92:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f94:	bf58      	it	pl
 8000f96:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f9a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000f9c:	bf58      	it	pl
 8000f9e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fa0:	68e2      	ldr	r2, [r4, #12]
 8000fa2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fa6:	d158      	bne.n	800105a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000fa8:	b109      	cbz	r1, 8000fae <HAL_SPI_TransmitReceive+0xa0>
 8000faa:	2e01      	cmp	r6, #1
 8000fac:	d107      	bne.n	8000fbe <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fae:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fb2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fb4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fb6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000fbe:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b9ab      	cbnz	r3, 8000ff2 <HAL_SPI_TransmitReceive+0xe4>
 8000fc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b993      	cbnz	r3, 8000ff2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fcc:	4642      	mov	r2, r8
 8000fce:	4639      	mov	r1, r7
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff ff31 	bl	8000e38 <SPI_EndRxTxTransaction>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	f040 8081 	bne.w	80010de <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d132      	bne.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	9001      	str	r0, [sp, #4]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	e02a      	b.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	6893      	ldr	r3, [r2, #8]
 8000ff6:	0799      	lsls	r1, r3, #30
 8000ff8:	d50d      	bpl.n	8001016 <HAL_SPI_TransmitReceive+0x108>
 8000ffa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b153      	cbz	r3, 8001016 <HAL_SPI_TransmitReceive+0x108>
 8001000:	b14d      	cbz	r5, 8001016 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001004:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001008:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800100a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800100c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800100e:	3b01      	subs	r3, #1
 8001010:	b29b      	uxth	r3, r3
 8001012:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001014:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001016:	6893      	ldr	r3, [r2, #8]
 8001018:	07db      	lsls	r3, r3, #31
 800101a:	d50c      	bpl.n	8001036 <HAL_SPI_TransmitReceive+0x128>
 800101c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800101e:	b29b      	uxth	r3, r3
 8001020:	b14b      	cbz	r3, 8001036 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001024:	68d2      	ldr	r2, [r2, #12]
 8001026:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800102a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800102c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001034:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001036:	f7ff fafd 	bl	8000634 <HAL_GetTick>
 800103a:	eba0 0008 	sub.w	r0, r0, r8
 800103e:	4287      	cmp	r7, r0
 8001040:	d8be      	bhi.n	8000fc0 <HAL_SPI_TransmitReceive+0xb2>
 8001042:	1c7e      	adds	r6, r7, #1
 8001044:	d0bc      	beq.n	8000fc0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001046:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001048:	2301      	movs	r3, #1
 800104a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800104e:	2300      	movs	r3, #0
 8001050:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001054:	b003      	add	sp, #12
 8001056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800105a:	b109      	cbz	r1, 8001060 <HAL_SPI_TransmitReceive+0x152>
 800105c:	2e01      	cmp	r6, #1
 800105e:	d108      	bne.n	8001072 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001060:	782a      	ldrb	r2, [r5, #0]
 8001062:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001064:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001066:	3301      	adds	r3, #1
 8001068:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800106a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800106c:	3b01      	subs	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001072:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001074:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001076:	b29b      	uxth	r3, r3
 8001078:	b91b      	cbnz	r3, 8001082 <HAL_SPI_TransmitReceive+0x174>
 800107a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0a4      	beq.n	8000fcc <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6893      	ldr	r3, [r2, #8]
 8001086:	0798      	lsls	r0, r3, #30
 8001088:	d50e      	bpl.n	80010a8 <HAL_SPI_TransmitReceive+0x19a>
 800108a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800108c:	b29b      	uxth	r3, r3
 800108e:	b15b      	cbz	r3, 80010a8 <HAL_SPI_TransmitReceive+0x19a>
 8001090:	b155      	cbz	r5, 80010a8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001098:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800109a:	3301      	adds	r3, #1
 800109c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800109e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010a6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6893      	ldr	r3, [r2, #8]
 80010ac:	07d9      	lsls	r1, r3, #31
 80010ae:	d50d      	bpl.n	80010cc <HAL_SPI_TransmitReceive+0x1be>
 80010b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b153      	cbz	r3, 80010cc <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80010b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010b8:	68d2      	ldr	r2, [r2, #12]
 80010ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80010bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010be:	3301      	adds	r3, #1
 80010c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010ca:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80010cc:	f7ff fab2 	bl	8000634 <HAL_GetTick>
 80010d0:	eba0 0008 	sub.w	r0, r0, r8
 80010d4:	4287      	cmp	r7, r0
 80010d6:	d8cd      	bhi.n	8001074 <HAL_SPI_TransmitReceive+0x166>
 80010d8:	1c7b      	adds	r3, r7, #1
 80010da:	d0cb      	beq.n	8001074 <HAL_SPI_TransmitReceive+0x166>
 80010dc:	e7b3      	b.n	8001046 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010de:	2320      	movs	r3, #32
 80010e0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
 80010e4:	e7b0      	b.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80010e6:	2002      	movs	r0, #2
 80010e8:	e7ae      	b.n	8001048 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80010ea:	2002      	movs	r0, #2
 80010ec:	e7b2      	b.n	8001054 <HAL_SPI_TransmitReceive+0x146>
	...

080010f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010f2:	6803      	ldr	r3, [r0, #0]
 80010f4:	68c1      	ldr	r1, [r0, #12]
 80010f6:	691a      	ldr	r2, [r3, #16]
{
 80010f8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010fe:	430a      	orrs	r2, r1
 8001100:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001102:	6925      	ldr	r5, [r4, #16]
 8001104:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001106:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001108:	69c0      	ldr	r0, [r0, #28]
 800110a:	432a      	orrs	r2, r5
 800110c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800110e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001112:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001114:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001118:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	69a1      	ldr	r1, [r4, #24]
 8001122:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001126:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001128:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001130:	d129      	bne.n	8001186 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001132:	4293      	cmp	r3, r2
 8001134:	d003      	beq.n	800113e <UART_SetConfig+0x4e>
 8001136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800113a:	4293      	cmp	r3, r2
 800113c:	d120      	bne.n	8001180 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800113e:	f7ff fe2f 	bl	8000da0 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	6825      	ldr	r5, [r4, #0]
 8001146:	1892      	adds	r2, r2, r2
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	f04f 0119 	mov.w	r1, #25
 8001150:	415b      	adcs	r3, r3
 8001152:	fba0 0101 	umull	r0, r1, r0, r1
 8001156:	f7ff f89b 	bl	8000290 <__aeabi_uldivmod>
 800115a:	2164      	movs	r1, #100	; 0x64
 800115c:	fbb0 f4f1 	udiv	r4, r0, r1
 8001160:	fb01 0314 	mls	r3, r1, r4, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	3332      	adds	r3, #50	; 0x32
 8001168:	fbb3 f3f1 	udiv	r3, r3, r1
 800116c:	f003 0207 	and.w	r2, r3, #7
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001176:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800117a:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800117c:	60ab      	str	r3, [r5, #8]
 800117e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001180:	f7ff fdfe 	bl	8000d80 <HAL_RCC_GetPCLK1Freq>
 8001184:	e7dd      	b.n	8001142 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001186:	4293      	cmp	r3, r2
 8001188:	d002      	beq.n	8001190 <UART_SetConfig+0xa0>
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <UART_SetConfig+0xd8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d116      	bne.n	80011be <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001190:	f7ff fe06 	bl	8000da0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	6825      	ldr	r5, [r4, #0]
 8001198:	2119      	movs	r1, #25
 800119a:	009a      	lsls	r2, r3, #2
 800119c:	fba0 0101 	umull	r0, r1, r0, r1
 80011a0:	0f9b      	lsrs	r3, r3, #30
 80011a2:	f7ff f875 	bl	8000290 <__aeabi_uldivmod>
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	fbb0 f1f2 	udiv	r1, r0, r2
 80011ac:	fb02 0311 	mls	r3, r2, r1, r0
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	3332      	adds	r3, #50	; 0x32
 80011b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80011bc:	e7de      	b.n	800117c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80011be:	f7ff fddf 	bl	8000d80 <HAL_RCC_GetPCLK1Freq>
 80011c2:	e7e7      	b.n	8001194 <UART_SetConfig+0xa4>
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40011400 	.word	0x40011400

080011cc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	4604      	mov	r4, r0
 80011d0:	460e      	mov	r6, r1
 80011d2:	4617      	mov	r7, r2
 80011d4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011d6:	6821      	ldr	r1, [r4, #0]
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	ea36 0303 	bics.w	r3, r6, r3
 80011de:	d101      	bne.n	80011e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
}
 80011e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011e4:	1c6b      	adds	r3, r5, #1
 80011e6:	d0f7      	beq.n	80011d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011e8:	b995      	cbnz	r5, 8001210 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80011fc:	2320      	movs	r3, #32
 80011fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001202:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001206:	2300      	movs	r3, #0
 8001208:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800120c:	2003      	movs	r0, #3
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001210:	f7ff fa10 	bl	8000634 <HAL_GetTick>
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	4285      	cmp	r5, r0
 8001218:	d2dd      	bcs.n	80011d6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800121a:	e7e6      	b.n	80011ea <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800121c <HAL_UART_Init>:
{
 800121c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800121e:	4604      	mov	r4, r0
 8001220:	b340      	cbz	r0, 8001274 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001222:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001226:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800122a:	b91b      	cbnz	r3, 8001234 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800122c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001230:	f000 fa68 	bl	8001704 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001234:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001236:	2324      	movs	r3, #36	; 0x24
 8001238:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800123c:	68d3      	ldr	r3, [r2, #12]
 800123e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001242:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff ff53 	bl	80010f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001252:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800125a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001262:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001264:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001266:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001268:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800126a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800126e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001272:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
}
 8001276:	bd10      	pop	{r4, pc}

08001278 <HAL_UART_Transmit>:
{
 8001278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800127c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800127e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001282:	2b20      	cmp	r3, #32
{
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800128a:	d151      	bne.n	8001330 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 800128c:	2900      	cmp	r1, #0
 800128e:	d04c      	beq.n	800132a <HAL_UART_Transmit+0xb2>
 8001290:	2a00      	cmp	r2, #0
 8001292:	d04a      	beq.n	800132a <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001294:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001298:	2b01      	cmp	r3, #1
 800129a:	d049      	beq.n	8001330 <HAL_UART_Transmit+0xb8>
 800129c:	2301      	movs	r3, #1
 800129e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a2:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a8:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80012b0:	f7ff f9c0 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80012b4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80012b8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80012ba:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80012be:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80012c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b95b      	cbnz	r3, 80012e0 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4632      	mov	r2, r6
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff ff7c 	bl	80011cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012d4:	b9a0      	cbnz	r0, 8001300 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80012d6:	2320      	movs	r3, #32
 80012d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80012dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80012e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012e8:	68a3      	ldr	r3, [r4, #8]
 80012ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012ee:	4632      	mov	r2, r6
 80012f0:	463b      	mov	r3, r7
 80012f2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80012f6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012f8:	d10e      	bne.n	8001318 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012fa:	f7ff ff67 	bl	80011cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012fe:	b110      	cbz	r0, 8001306 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001306:	882b      	ldrh	r3, [r5, #0]
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800130e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	b943      	cbnz	r3, 8001326 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001314:	3502      	adds	r5, #2
 8001316:	e7d4      	b.n	80012c2 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001318:	f7ff ff58 	bl	80011cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 800131c:	2800      	cmp	r0, #0
 800131e:	d1ef      	bne.n	8001300 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	782a      	ldrb	r2, [r5, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	3501      	adds	r5, #1
 8001328:	e7cb      	b.n	80012c2 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001330:	2002      	movs	r0, #2
}
 8001332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001336 <char2hex>:
{
	unsigned char temp_data = 0;
	int i;
	for(i = 0; i < 2; i++)
	{
		temp_data = (data >> (i*4)) & 0x0F;
 8001336:	f000 030f 	and.w	r3, r0, #15
		if(temp_data < 0x0a)
 800133a:	2b09      	cmp	r3, #9
		{
			r_data[i] = '0' + temp_data;
		}
		else
		{
			r_data[i] = 'A' + temp_data - 0x0a;
 800133c:	bf8c      	ite	hi
 800133e:	3337      	addhi	r3, #55	; 0x37
			r_data[i] = '0' + temp_data;
 8001340:	3330      	addls	r3, #48	; 0x30
		temp_data = (data >> (i*4)) & 0x0F;
 8001342:	1100      	asrs	r0, r0, #4
		if(temp_data < 0x0a)
 8001344:	2809      	cmp	r0, #9
			r_data[i] = '0' + temp_data;
 8001346:	700b      	strb	r3, [r1, #0]
		temp_data = (data >> (i*4)) & 0x0F;
 8001348:	b2c3      	uxtb	r3, r0
			r_data[i] = 'A' + temp_data - 0x0a;
 800134a:	bfcc      	ite	gt
 800134c:	3337      	addgt	r3, #55	; 0x37
			r_data[i] = '0' + temp_data;
 800134e:	3330      	addle	r3, #48	; 0x30
 8001350:	704b      	strb	r3, [r1, #1]
		}
	}
	if((r_data[0] < '0')||(r_data[1] < '0'))
 8001352:	780b      	ldrb	r3, [r1, #0]
 8001354:	2b2f      	cmp	r3, #47	; 0x2f
 8001356:	d905      	bls.n	8001364 <char2hex+0x2e>
 8001358:	7848      	ldrb	r0, [r1, #1]
 800135a:	282f      	cmp	r0, #47	; 0x2f
 800135c:	bf8c      	ite	hi
 800135e:	2000      	movhi	r0, #0
 8001360:	2001      	movls	r0, #1
 8001362:	4770      	bx	lr
 8001364:	2001      	movs	r0, #1
		return 1;
	return 0;

}
 8001366:	4770      	bx	lr

08001368 <string_print_Hex>:

//hex debug print function
char string_print_Hex(unsigned char *buf, unsigned int len)
{
 8001368:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(char2hex(temp_buf, temp_data) != 0)
		{
			printf("trans hex faill len[%d] \r\n", temp_len);
			continue;
		}
		printf("%c%c ",temp_data[1],temp_data[0]);
 800136c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80013cc <string_print_Hex+0x64>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
			printf("\r\n");
 8001370:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80013c8 <string_print_Hex+0x60>
			printf("trans hex faill len[%d] \r\n", temp_len);
 8001374:	f8df a058 	ldr.w	sl, [pc, #88]	; 80013d0 <string_print_Hex+0x68>
{
 8001378:	4607      	mov	r7, r0
 800137a:	460e      	mov	r6, r1
	for(temp_len = 0; temp_len < len; temp_len++)
 800137c:	2400      	movs	r4, #0
 800137e:	42b4      	cmp	r4, r6
 8001380:	d106      	bne.n	8001390 <string_print_Hex+0x28>
	}
	printf("\r\n");
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <string_print_Hex+0x60>)
 8001384:	f00d fec6 	bl	800f114 <puts>
	return 0;
}
 8001388:	2000      	movs	r0, #0
 800138a:	b002      	add	sp, #8
 800138c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(char2hex(temp_buf, temp_data) != 0)
 8001390:	a901      	add	r1, sp, #4
 8001392:	5d38      	ldrb	r0, [r7, r4]
 8001394:	f7ff ffcf 	bl	8001336 <char2hex>
 8001398:	1c65      	adds	r5, r4, #1
 800139a:	b128      	cbz	r0, 80013a8 <string_print_Hex+0x40>
			printf("trans hex faill len[%d] \r\n", temp_len);
 800139c:	4621      	mov	r1, r4
 800139e:	4650      	mov	r0, sl
 80013a0:	f00d fe44 	bl	800f02c <iprintf>
	for(temp_len = 0; temp_len < len; temp_len++)
 80013a4:	462c      	mov	r4, r5
 80013a6:	e7ea      	b.n	800137e <string_print_Hex+0x16>
		printf("%c%c ",temp_data[1],temp_data[0]);
 80013a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80013ac:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80013b0:	4640      	mov	r0, r8
 80013b2:	f00d fe3b 	bl	800f02c <iprintf>
		if((((temp_len + 1) % 16) == 0)&&(temp_len != 0))
 80013b6:	072b      	lsls	r3, r5, #28
 80013b8:	d1f4      	bne.n	80013a4 <string_print_Hex+0x3c>
 80013ba:	2c00      	cmp	r4, #0
 80013bc:	d0f2      	beq.n	80013a4 <string_print_Hex+0x3c>
			printf("\r\n");
 80013be:	4648      	mov	r0, r9
 80013c0:	f00d fea8 	bl	800f114 <puts>
 80013c4:	e7ee      	b.n	80013a4 <string_print_Hex+0x3c>
 80013c6:	bf00      	nop
 80013c8:	080109ef 	.word	0x080109ef
 80013cc:	080102d9 	.word	0x080102d9
 80013d0:	080102be 	.word	0x080102be

080013d4 <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void print_network_information(void);

int _write(int fd, char *str, int len)
{
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=0; i<len; i++)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 80013d6:	4f08      	ldr	r7, [pc, #32]	; (80013f8 <_write+0x24>)
{
 80013d8:	460e      	mov	r6, r1
 80013da:	4615      	mov	r5, r2
	for(int i=0; i<len; i++)
 80013dc:	2400      	movs	r4, #0
 80013de:	42ac      	cmp	r4, r5
 80013e0:	db01      	blt.n	80013e6 <_write+0x12>
	}
	return len;
}
 80013e2:	4628      	mov	r0, r5
 80013e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 80013e6:	1931      	adds	r1, r6, r4
 80013e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ec:	2201      	movs	r2, #1
 80013ee:	4638      	mov	r0, r7
 80013f0:	f7ff ff42 	bl	8001278 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80013f4:	3401      	adds	r4, #1
 80013f6:	e7f2      	b.n	80013de <_write+0xa>
 80013f8:	200027cc 	.word	0x200027cc

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001400:	2230      	movs	r2, #48	; 0x30
 8001402:	2100      	movs	r1, #0
 8001404:	a808      	add	r0, sp, #32
 8001406:	f00d fd4f 	bl	800eea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140a:	2100      	movs	r1, #0
 800140c:	2214      	movs	r2, #20
 800140e:	a803      	add	r0, sp, #12
 8001410:	f00d fd4a 	bl	800eea8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2400      	movs	r4, #0
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <SystemClock_Config+0x78>)
 8001418:	9401      	str	r4, [sp, #4]
 800141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800142e:	9402      	str	r4, [sp, #8]
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800143e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	2301      	movs	r3, #1
 800144e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	f7ff fa23 	bl	80008a0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800145c:	4621      	mov	r1, r4
 800145e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001462:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001466:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800146a:	f7ff fbed 	bl	8000c48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800146e:	b014      	add	sp, #80	; 0x50
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <print_network_information>:

}

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 800147c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	wizchip_getnetinfo(&defaultNetInfo);
 800147e:	4c19      	ldr	r4, [pc, #100]	; (80014e4 <print_network_information+0x68>)
 8001480:	4620      	mov	r0, r4
 8001482:	f001 f84b 	bl	800251c <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",defaultNetInfo.mac[0],defaultNetInfo.mac[1],defaultNetInfo.mac[2],defaultNetInfo.mac[3],defaultNetInfo.mac[4],defaultNetInfo.mac[5]);
 8001486:	7960      	ldrb	r0, [r4, #5]
 8001488:	9002      	str	r0, [sp, #8]
 800148a:	7920      	ldrb	r0, [r4, #4]
 800148c:	9001      	str	r0, [sp, #4]
 800148e:	78e0      	ldrb	r0, [r4, #3]
 8001490:	78a3      	ldrb	r3, [r4, #2]
 8001492:	7862      	ldrb	r2, [r4, #1]
 8001494:	7821      	ldrb	r1, [r4, #0]
 8001496:	9000      	str	r0, [sp, #0]
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <print_network_information+0x6c>)
 800149a:	f00d fdc7 	bl	800f02c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",defaultNetInfo.ip[0],defaultNetInfo.ip[1],defaultNetInfo.ip[2],defaultNetInfo.ip[3]);
 800149e:	7a60      	ldrb	r0, [r4, #9]
 80014a0:	7a23      	ldrb	r3, [r4, #8]
 80014a2:	79e2      	ldrb	r2, [r4, #7]
 80014a4:	79a1      	ldrb	r1, [r4, #6]
 80014a6:	9000      	str	r0, [sp, #0]
 80014a8:	4810      	ldr	r0, [pc, #64]	; (80014ec <print_network_information+0x70>)
 80014aa:	f00d fdbf 	bl	800f02c <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",defaultNetInfo.sn[0],defaultNetInfo.sn[1],defaultNetInfo.sn[2],defaultNetInfo.sn[3]);
 80014ae:	7b60      	ldrb	r0, [r4, #13]
 80014b0:	7b23      	ldrb	r3, [r4, #12]
 80014b2:	7ae2      	ldrb	r2, [r4, #11]
 80014b4:	7aa1      	ldrb	r1, [r4, #10]
 80014b6:	9000      	str	r0, [sp, #0]
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <print_network_information+0x74>)
 80014ba:	f00d fdb7 	bl	800f02c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",defaultNetInfo.gw[0],defaultNetInfo.gw[1],defaultNetInfo.gw[2],defaultNetInfo.gw[3]);
 80014be:	7c60      	ldrb	r0, [r4, #17]
 80014c0:	7c23      	ldrb	r3, [r4, #16]
 80014c2:	7be2      	ldrb	r2, [r4, #15]
 80014c4:	7ba1      	ldrb	r1, [r4, #14]
 80014c6:	9000      	str	r0, [sp, #0]
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <print_network_information+0x78>)
 80014ca:	f00d fdaf 	bl	800f02c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",defaultNetInfo.dns[0],defaultNetInfo.dns[1],defaultNetInfo.dns[2],defaultNetInfo.dns[3]);
 80014ce:	7d60      	ldrb	r0, [r4, #21]
 80014d0:	9000      	str	r0, [sp, #0]
 80014d2:	7d23      	ldrb	r3, [r4, #20]
 80014d4:	7ce2      	ldrb	r2, [r4, #19]
 80014d6:	7ca1      	ldrb	r1, [r4, #18]
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <print_network_information+0x7c>)
 80014da:	f00d fda7 	bl	800f02c <iprintf>
}
 80014de:	b004      	add	sp, #16
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	0801032b 	.word	0x0801032b
 80014ec:	08010358 	.word	0x08010358
 80014f0:	08010373 	.word	0x08010373
 80014f4:	0801038e 	.word	0x0801038e
 80014f8:	080103a9 	.word	0x080103a9

080014fc <main>:
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b089      	sub	sp, #36	; 0x24
  int len, rc, server_fd = 0;
 8001500:	2400      	movs	r4, #0
 8001502:	9400      	str	r4, [sp, #0]
  HAL_Init();
 8001504:	f7ff f870 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001508:	f7ff ff78 	bl	80013fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	4621      	mov	r1, r4
 800150e:	2214      	movs	r2, #20
 8001510:	a803      	add	r0, sp, #12
 8001512:	f00d fcc9 	bl	800eea8 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <main+0x12c>)
 8001518:	9401      	str	r4, [sp, #4]
 800151a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800151c:	4843      	ldr	r0, [pc, #268]	; (800162c <main+0x130>)
		printf("%s : %d \r\n",ethBuf0, len);
 800151e:	4e44      	ldr	r6, [pc, #272]	; (8001630 <main+0x134>)
			printf("SSL closed\r\n");
 8001520:	4f44      	ldr	r7, [pc, #272]	; (8001634 <main+0x138>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152a:	f002 0201 	and.w	r2, r2, #1
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	9402      	str	r4, [sp, #8]
 8001534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001536:	f042 0202 	orr.w	r2, r2, #2
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001542:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001546:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800154a:	f7ff f9a3 	bl	8000894 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001552:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	4835      	ldr	r0, [pc, #212]	; (800162c <main+0x130>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f7ff f8cb 	bl	80006f8 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8001562:	4835      	ldr	r0, [pc, #212]	; (8001638 <main+0x13c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001564:	4a35      	ldr	r2, [pc, #212]	; (800163c <main+0x140>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001568:	f44f 7382 	mov.w	r3, #260	; 0x104
 800156c:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001574:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001576:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001578:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157a:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157e:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001580:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001584:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001586:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001588:	f7ff fc84 	bl	8000e94 <HAL_SPI_Init>
  huart2.Instance = USART2;
 800158c:	482c      	ldr	r0, [pc, #176]	; (8001640 <main+0x144>)
  huart2.Init.BaudRate = 115200;
 800158e:	492d      	ldr	r1, [pc, #180]	; (8001644 <main+0x148>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001590:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001592:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001596:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159a:	230c      	movs	r3, #12
 800159c:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159e:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a0:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	f7ff fe39 	bl	800121c <HAL_UART_Init>
  printf("Hello! MBED TLS System \r\n");
 80015aa:	4827      	ldr	r0, [pc, #156]	; (8001648 <main+0x14c>)
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 80015ac:	4c27      	ldr	r4, [pc, #156]	; (800164c <main+0x150>)
  printf("Hello! MBED TLS System \r\n");
 80015ae:	f00d fdb1 	bl	800f114 <puts>
  WIZCHIPInitialize();
 80015b2:	f000 f97d 	bl	80018b0 <WIZCHIPInitialize>
  printf("version:%.2x\r\n", getVERSIONR());
 80015b6:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 80015ba:	f000 f9bd 	bl	8001938 <WIZCHIP_READ>
 80015be:	4601      	mov	r1, r0
 80015c0:	4823      	ldr	r0, [pc, #140]	; (8001650 <main+0x154>)
 80015c2:	f00d fd33 	bl	800f02c <iprintf>
  wizchip_setnetinfo(&defaultNetInfo);
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <main+0x158>)
 80015c8:	f000 ff7a 	bl	80024c0 <wizchip_setnetinfo>
  print_network_information();
 80015cc:	f7ff ff56 	bl	800147c <print_network_information>
  ret = wiz_tls_init(&tlsContext,&server_fd);
 80015d0:	4669      	mov	r1, sp
 80015d2:	a803      	add	r0, sp, #12
 80015d4:	f001 f808 	bl	80025e8 <wiz_tls_init>
  printf("init [%d] \r\n", ret);
 80015d8:	4601      	mov	r1, r0
 80015da:	481f      	ldr	r0, [pc, #124]	; (8001658 <main+0x15c>)
 80015dc:	f00d fd26 	bl	800f02c <iprintf>
  wiz_tls_connect(&tlsContext, SERVER_PORT, gServer_IP);
 80015e0:	4a1e      	ldr	r2, [pc, #120]	; (800165c <main+0x160>)
 80015e2:	f242 21b3 	movw	r1, #8883	; 0x22b3
 80015e6:	a803      	add	r0, sp, #12
 80015e8:	f001 f89c 	bl	8002724 <wiz_tls_connect>
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 80015ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f0:	4621      	mov	r1, r4
 80015f2:	a803      	add	r0, sp, #12
 80015f4:	f001 f904 	bl	8002800 <wiz_tls_read>
	if(len > 0)
 80015f8:	1e05      	subs	r5, r0, #0
 80015fa:	dd09      	ble.n	8001610 <main+0x114>
		printf("%s : %d \r\n",ethBuf0, len);
 80015fc:	462a      	mov	r2, r5
 80015fe:	4621      	mov	r1, r4
 8001600:	4630      	mov	r0, r6
 8001602:	f00d fd13 	bl	800f02c <iprintf>
		wiz_tls_write(&tlsContext, ethBuf0, len);
 8001606:	462a      	mov	r2, r5
 8001608:	4621      	mov	r1, r4
 800160a:	a803      	add	r0, sp, #12
 800160c:	f001 f8fb 	bl	8002806 <wiz_tls_write>
		if(wiz_tls_close_notify(&tlsContext) == 0)
 8001610:	a803      	add	r0, sp, #12
 8001612:	f001 f8fb 	bl	800280c <wiz_tls_close_notify>
 8001616:	b910      	cbnz	r0, 800161e <main+0x122>
			printf("SSL closed\r\n");
 8001618:	4638      	mov	r0, r7
 800161a:	f00d fd7b 	bl	800f114 <puts>
		wiz_tls_deinit(&tlsContext);
 800161e:	a803      	add	r0, sp, #12
 8001620:	f001 f864 	bl	80026ec <wiz_tls_deinit>
	len = wiz_tls_read(&tlsContext, ethBuf0, ETH_MAX_BUF_SIZE);
 8001624:	e7e2      	b.n	80015ec <main+0xf0>
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020400 	.word	0x40020400
 8001630:	08010314 	.word	0x08010314
 8001634:	0801031f 	.word	0x0801031f
 8001638:	20002774 	.word	0x20002774
 800163c:	40013000 	.word	0x40013000
 8001640:	200027cc 	.word	0x200027cc
 8001644:	40004400 	.word	0x40004400
 8001648:	080102df 	.word	0x080102df
 800164c:	2000280c 	.word	0x2000280c
 8001650:	080102f8 	.word	0x080102f8
 8001654:	20000008 	.word	0x20000008
 8001658:	08010307 	.word	0x08010307
 800165c:	2000001f 	.word	0x2000001f

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_MspInit+0x34>)
 8001664:	2100      	movs	r1, #0
 8001666:	9100      	str	r1, [sp, #0]
 8001668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800166a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
 8001670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001672:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	9101      	str	r1, [sp, #4]
 800167c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	b002      	add	sp, #8
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001698:	b510      	push	{r4, lr}
 800169a:	4604      	mov	r4, r0
 800169c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	2214      	movs	r2, #20
 80016a0:	2100      	movs	r1, #0
 80016a2:	a803      	add	r0, sp, #12
 80016a4:	f00d fc00 	bl	800eea8 <memset>
  if(hspi->Instance==SPI1)
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_SPI_MspInit+0x64>)
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d122      	bne.n	80016f6 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80016b4:	2100      	movs	r1, #0
 80016b6:	9101      	str	r1, [sp, #4]
 80016b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
 80016c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016c8:	9201      	str	r2, [sp, #4]
 80016ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	9102      	str	r1, [sp, #8]
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016e0:	23e0      	movs	r3, #224	; 0xe0
 80016e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ee:	2305      	movs	r3, #5
 80016f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f7ff f801 	bl	80006f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016f6:	b008      	add	sp, #32
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	bf00      	nop
 80016fc:	40013000 	.word	0x40013000
 8001700:	40020000 	.word	0x40020000

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b510      	push	{r4, lr}
 8001706:	4604      	mov	r4, r0
 8001708:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	2214      	movs	r2, #20
 800170c:	2100      	movs	r1, #0
 800170e:	a803      	add	r0, sp, #12
 8001710:	f00d fbca 	bl	800eea8 <memset>
  if(huart->Instance==USART2)
 8001714:	6822      	ldr	r2, [r4, #0]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_UART_MspInit+0x68>)
 8001718:	429a      	cmp	r2, r3
 800171a:	d124      	bne.n	8001766 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001720:	2100      	movs	r1, #0
 8001722:	9101      	str	r1, [sp, #4]
 8001724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	4812      	ldr	r0, [pc, #72]	; (8001770 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001728:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
 800172e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001730:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001734:	9201      	str	r2, [sp, #4]
 8001736:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	9102      	str	r1, [sp, #8]
 800173a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174c:	230c      	movs	r3, #12
 800174e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f7fe ffc9 	bl	80006f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001766:	b008      	add	sp, #32
 8001768:	bd10      	pop	{r4, pc}
 800176a:	bf00      	nop
 800176c:	40004400 	.word	0x40004400
 8001770:	40020000 	.word	0x40020000

08001774 <NMI_Handler>:
 8001774:	4770      	bx	lr

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	e7fe      	b.n	800177a <BusFault_Handler>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler>

0800177e <SVC_Handler>:
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f7fe bf4a 	b.w	800061c <HAL_IncTick>

08001788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	460e      	mov	r6, r1
 800178c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	460c      	mov	r4, r1
 8001790:	1ba3      	subs	r3, r4, r6
 8001792:	429d      	cmp	r5, r3
 8001794:	dc01      	bgt.n	800179a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001796:	4628      	mov	r0, r5
 8001798:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	f804 0b01 	strb.w	r0, [r4], #1
 80017a2:	e7f5      	b.n	8001790 <_read+0x8>

080017a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80017a4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <_sbrk+0x2c>)
 80017a8:	6819      	ldr	r1, [r3, #0]
{
 80017aa:	4602      	mov	r2, r0
	if (heap_end == 0)
 80017ac:	b909      	cbnz	r1, 80017b2 <_sbrk+0xe>
		heap_end = &end;
 80017ae:	4909      	ldr	r1, [pc, #36]	; (80017d4 <_sbrk+0x30>)
 80017b0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80017b2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80017b4:	4669      	mov	r1, sp
 80017b6:	4402      	add	r2, r0
 80017b8:	428a      	cmp	r2, r1
 80017ba:	d906      	bls.n	80017ca <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80017bc:	f00d fb06 	bl	800edcc <__errno>
 80017c0:	230c      	movs	r3, #12
 80017c2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80017ca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80017cc:	bd08      	pop	{r3, pc}
 80017ce:	bf00      	nop
 80017d0:	2000010c 	.word	0x2000010c
 80017d4:	20003010 	.word	0x20003010

080017d8 <_close>:

int _close(int file)
{
	return -1;
}
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	4770      	bx	lr

080017de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80017e4:	2000      	movs	r0, #0
 80017e6:	4770      	bx	lr

080017e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80017e8:	2001      	movs	r0, #1
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80017ec:	2000      	movs	r0, #0
 80017ee:	4770      	bx	lr

080017f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	490f      	ldr	r1, [pc, #60]	; (8001830 <SystemInit+0x40>)
 80017f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80017f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <SystemInit+0x44>)
 8001800:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001802:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800180a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001812:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001816:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <SystemInit+0x48>)
 800181a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001822:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001824:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800182a:	608b      	str	r3, [r1, #8]
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	40023800 	.word	0x40023800
 8001838:	24003010 	.word	0x24003010

0800183c <csEnable>:



void csEnable(void)
{
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	4801      	ldr	r0, [pc, #4]	; (8001848 <csEnable+0xc>)
 8001842:	f7ff b827 	b.w	8000894 <HAL_GPIO_WritePin>
 8001846:	bf00      	nop
 8001848:	40020400 	.word	0x40020400

0800184c <csDisable>:
}

void csDisable(void)
{
	HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2140      	movs	r1, #64	; 0x40
 8001850:	4801      	ldr	r0, [pc, #4]	; (8001858 <csDisable+0xc>)
 8001852:	f7ff b81f 	b.w	8000894 <HAL_GPIO_WritePin>
 8001856:	bf00      	nop
 8001858:	40020400 	.word	0x40020400

0800185c <spiWriteByte>:
}

void spiWriteByte(uint8_t tx)
{
 800185c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t rx;
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 800185e:	230a      	movs	r3, #10
{
 8001860:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	f10d 0217 	add.w	r2, sp, #23
 800186a:	2301      	movs	r3, #1
 800186c:	f10d 010f 	add.w	r1, sp, #15
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <spiWriteByte+0x20>)
 8001872:	f7ff fb4c 	bl	8000f0e <HAL_SPI_TransmitReceive>
}
 8001876:	b007      	add	sp, #28
 8001878:	f85d fb04 	ldr.w	pc, [sp], #4
 800187c:	20002774 	.word	0x20002774

08001880 <spiReadByte>:

uint8_t spiReadByte(void)
{
 8001880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t rx = 0, tx = 0xFF;
 8001882:	2300      	movs	r3, #0
 8001884:	f88d 300e 	strb.w	r3, [sp, #14]
 8001888:	23ff      	movs	r3, #255	; 0xff
 800188a:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_TransmitReceive(&WIZCHIP_SPI, &tx, &rx, 1, 10);
 800188e:	230a      	movs	r3, #10
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f10d 020e 	add.w	r2, sp, #14
 8001896:	2301      	movs	r3, #1
 8001898:	f10d 010f 	add.w	r1, sp, #15
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <spiReadByte+0x2c>)
 800189e:	f7ff fb36 	bl	8000f0e <HAL_SPI_TransmitReceive>
	return rx;
}
 80018a2:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80018a6:	b005      	add	sp, #20
 80018a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ac:	20002774 	.word	0x20002774

080018b0 <WIZCHIPInitialize>:
void WIZCHIPInitialize(){
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	b086      	sub	sp, #24
	csDisable();
 80018b4:	f7ff ffca 	bl	800184c <csDisable>
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <WIZCHIPInitialize+0x6c>)
 80018ba:	4819      	ldr	r0, [pc, #100]	; (8001920 <WIZCHIPInitialize+0x70>)
 80018bc:	f000 fc18 	bl	80020f0 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 80018c0:	4918      	ldr	r1, [pc, #96]	; (8001924 <WIZCHIPInitialize+0x74>)
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <WIZCHIPInitialize+0x78>)
 80018c4:	f000 fc02 	bl	80020cc <reg_wizchip_cs_cbfunc>
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <WIZCHIPInitialize+0x7c>)
 80018ca:	aa02      	add	r2, sp, #8
 80018cc:	f103 0610 	add.w	r6, r3, #16
 80018d0:	4615      	mov	r5, r2
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	6859      	ldr	r1, [r3, #4]
 80018d6:	4614      	mov	r4, r2
 80018d8:	c403      	stmia	r4!, {r0, r1}
 80018da:	3308      	adds	r3, #8
 80018dc:	42b3      	cmp	r3, r6
 80018de:	4622      	mov	r2, r4
 80018e0:	d1f7      	bne.n	80018d2 <WIZCHIPInitialize+0x22>
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80018e2:	4629      	mov	r1, r5
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 fd7d 	bl	80023e4 <ctlwizchip>
 80018ea:	3001      	adds	r0, #1
 80018ec:	d10a      	bne.n	8001904 <WIZCHIPInitialize+0x54>
		printf("WIZCHIP Initialized fail.\r\n", 1, 10);
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <WIZCHIPInitialize+0x80>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	2101      	movs	r1, #1
			printf("Unknown PHY Link status.\r\n", 1, 10);
 80018f4:	f00d fb9a 	bl	800f02c <iprintf>
}
 80018f8:	b006      	add	sp, #24
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
	} while (tmp == PHY_LINK_OFF);
 80018fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f9      	bne.n	80018f8 <WIZCHIPInitialize+0x48>
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8001904:	f10d 0107 	add.w	r1, sp, #7
 8001908:	200f      	movs	r0, #15
 800190a:	f000 fd6b 	bl	80023e4 <ctlwizchip>
 800190e:	3001      	adds	r0, #1
 8001910:	d1f4      	bne.n	80018fc <WIZCHIPInitialize+0x4c>
			printf("Unknown PHY Link status.\r\n", 1, 10);
 8001912:	220a      	movs	r2, #10
 8001914:	2101      	movs	r1, #1
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <WIZCHIPInitialize+0x84>)
 8001918:	e7ec      	b.n	80018f4 <WIZCHIPInitialize+0x44>
 800191a:	bf00      	nop
 800191c:	0800185d 	.word	0x0800185d
 8001920:	08001881 	.word	0x08001881
 8001924:	0800184d 	.word	0x0800184d
 8001928:	0800183d 	.word	0x0800183d
 800192c:	08010278 	.word	0x08010278
 8001930:	080103dc 	.word	0x080103dc
 8001934:	080103f8 	.word	0x080103f8

08001938 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001938:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800193a:	4c14      	ldr	r4, [pc, #80]	; (800198c <WIZCHIP_READ+0x54>)
 800193c:	68e3      	ldr	r3, [r4, #12]
{
 800193e:	4605      	mov	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 8001940:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001942:	6963      	ldr	r3, [r4, #20]
 8001944:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0a2e      	lsrs	r6, r5, #8
 800194c:	b10b      	cbz	r3, 8001952 <WIZCHIP_READ+0x1a>
 800194e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001950:	b993      	cbnz	r3, 8001978 <WIZCHIP_READ+0x40>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001952:	6a23      	ldr	r3, [r4, #32]
 8001954:	b2c0      	uxtb	r0, r0
 8001956:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001958:	6a23      	ldr	r3, [r4, #32]
 800195a:	b2f0      	uxtb	r0, r6
 800195c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800195e:	6a23      	ldr	r3, [r4, #32]
 8001960:	b2e8      	uxtb	r0, r5
 8001962:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001964:	69e3      	ldr	r3, [r4, #28]
 8001966:	4798      	blx	r3

   WIZCHIP.CS._deselect();
 8001968:	69a3      	ldr	r3, [r4, #24]
   ret = WIZCHIP.IF.SPI._read_byte();
 800196a:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 800196c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800196e:	6923      	ldr	r3, [r4, #16]
 8001970:	4798      	blx	r3
   return ret;
}
 8001972:	4628      	mov	r0, r5
 8001974:	b002      	add	sp, #8
 8001976:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001978:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800197c:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001980:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001984:	2103      	movs	r1, #3
 8001986:	a801      	add	r0, sp, #4
 8001988:	4798      	blx	r3
 800198a:	e7eb      	b.n	8001964 <WIZCHIP_READ+0x2c>
 800198c:	2000002c 	.word	0x2000002c

08001990 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001992:	4c16      	ldr	r4, [pc, #88]	; (80019ec <WIZCHIP_WRITE+0x5c>)
 8001994:	68e3      	ldr	r3, [r4, #12]
{
 8001996:	4605      	mov	r5, r0
 8001998:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 800199a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80019a2:	f045 0504 	orr.w	r5, r5, #4
 80019a6:	0c28      	lsrs	r0, r5, #16
 80019a8:	0a2f      	lsrs	r7, r5, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019aa:	b98b      	cbnz	r3, 80019d0 <WIZCHIP_WRITE+0x40>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80019ac:	6a23      	ldr	r3, [r4, #32]
 80019ae:	b2c0      	uxtb	r0, r0
 80019b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80019b2:	6a23      	ldr	r3, [r4, #32]
 80019b4:	b2f8      	uxtb	r0, r7
 80019b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80019b8:	6a23      	ldr	r3, [r4, #32]
 80019ba:	b2e8      	uxtb	r0, r5
 80019bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80019be:	6a23      	ldr	r3, [r4, #32]
 80019c0:	4630      	mov	r0, r6
 80019c2:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 80019c4:	69a3      	ldr	r3, [r4, #24]
 80019c6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80019c8:	6923      	ldr	r3, [r4, #16]
 80019ca:	4798      	blx	r3
}
 80019cc:	b003      	add	sp, #12
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80019d0:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80019d2:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019d6:	f88d 7005 	strb.w	r7, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80019da:	f88d 5006 	strb.w	r5, [sp, #6]
		spi_data[3] = wb;
 80019de:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80019e2:	eb0d 0001 	add.w	r0, sp, r1
 80019e6:	4798      	blx	r3
 80019e8:	e7ec      	b.n	80019c4 <WIZCHIP_WRITE+0x34>
 80019ea:	bf00      	nop
 80019ec:	2000002c 	.word	0x2000002c

080019f0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80019f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80019f4:	4c1b      	ldr	r4, [pc, #108]	; (8001a64 <WIZCHIP_READ_BUF+0x74>)
 80019f6:	68e3      	ldr	r3, [r4, #12]
{
 80019f8:	4605      	mov	r5, r0
 80019fa:	460f      	mov	r7, r1
 80019fc:	4616      	mov	r6, r2
   WIZCHIP_CRITICAL_ENTER();
 80019fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a00:	6963      	ldr	r3, [r4, #20]
 8001a02:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a06:	0c28      	lsrs	r0, r5, #16
 8001a08:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8001a0c:	b10b      	cbz	r3, 8001a12 <WIZCHIP_READ_BUF+0x22>
 8001a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a10:	b9d3      	cbnz	r3, 8001a48 <WIZCHIP_READ_BUF+0x58>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a12:	6a23      	ldr	r3, [r4, #32]
 8001a14:	b2c0      	uxtb	r0, r0
 8001a16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a18:	6a23      	ldr	r3, [r4, #32]
 8001a1a:	fa5f f088 	uxtb.w	r0, r8
 8001a1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a20:	b2e8      	uxtb	r0, r5
 8001a22:	6a23      	ldr	r3, [r4, #32]
 8001a24:	4798      	blx	r3
 8001a26:	3e01      	subs	r6, #1
 8001a28:	1e7d      	subs	r5, r7, #1
 8001a2a:	443e      	add	r6, r7
		for(i = 0; i < len; i++)
 8001a2c:	42b5      	cmp	r5, r6
 8001a2e:	d106      	bne.n	8001a3e <WIZCHIP_READ_BUF+0x4e>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8001a30:	69a3      	ldr	r3, [r4, #24]
 8001a32:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001a34:	6923      	ldr	r3, [r4, #16]
 8001a36:	4798      	blx	r3
}
 8001a38:	b002      	add	sp, #8
 8001a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001a3e:	69e3      	ldr	r3, [r4, #28]
 8001a40:	4798      	blx	r3
 8001a42:	f805 0f01 	strb.w	r0, [r5, #1]!
 8001a46:	e7f1      	b.n	8001a2c <WIZCHIP_READ_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a48:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001a4c:	f88d 8005 	strb.w	r8, [sp, #5]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001a50:	a801      	add	r0, sp, #4
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001a52:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001a56:	2103      	movs	r1, #3
 8001a58:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5c:	4631      	mov	r1, r6
 8001a5e:	4638      	mov	r0, r7
 8001a60:	4798      	blx	r3
 8001a62:	e7e5      	b.n	8001a30 <WIZCHIP_READ_BUF+0x40>
 8001a64:	2000002c 	.word	0x2000002c

08001a68 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001a68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001a6c:	4c1b      	ldr	r4, [pc, #108]	; (8001adc <WIZCHIP_WRITE_BUF+0x74>)
 8001a6e:	68e3      	ldr	r3, [r4, #12]
{
 8001a70:	4605      	mov	r5, r0
 8001a72:	460f      	mov	r7, r1
 8001a74:	4616      	mov	r6, r2
   WIZCHIP_CRITICAL_ENTER();
 8001a76:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a78:	6963      	ldr	r3, [r4, #20]
 8001a7a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001a7e:	f045 0504 	orr.w	r5, r5, #4
 8001a82:	0c28      	lsrs	r0, r5, #16
 8001a84:	ea4f 2815 	mov.w	r8, r5, lsr #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a88:	b9d3      	cbnz	r3, 8001ac0 <WIZCHIP_WRITE_BUF+0x58>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a8a:	6a23      	ldr	r3, [r4, #32]
 8001a8c:	b2c0      	uxtb	r0, r0
 8001a8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a90:	6a23      	ldr	r3, [r4, #32]
 8001a92:	fa5f f088 	uxtb.w	r0, r8
 8001a96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a98:	b2e8      	uxtb	r0, r5
 8001a9a:	6a23      	ldr	r3, [r4, #32]
 8001a9c:	4798      	blx	r3
 8001a9e:	3e01      	subs	r6, #1
 8001aa0:	1e7d      	subs	r5, r7, #1
 8001aa2:	443e      	add	r6, r7
		for(i = 0; i < len; i++)
 8001aa4:	42b5      	cmp	r5, r6
 8001aa6:	d106      	bne.n	8001ab6 <WIZCHIP_WRITE_BUF+0x4e>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8001aa8:	69a3      	ldr	r3, [r4, #24]
 8001aaa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001aac:	6923      	ldr	r3, [r4, #16]
 8001aae:	4798      	blx	r3
}
 8001ab0:	b002      	add	sp, #8
 8001ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001ab6:	6a23      	ldr	r3, [r4, #32]
 8001ab8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001abc:	4798      	blx	r3
 8001abe:	e7f1      	b.n	8001aa4 <WIZCHIP_WRITE_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ac0:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ac4:	f88d 8005 	strb.w	r8, [sp, #5]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ac8:	a801      	add	r0, sp, #4
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001aca:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ace:	2103      	movs	r1, #3
 8001ad0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	4798      	blx	r3
 8001ada:	e7e5      	b.n	8001aa8 <WIZCHIP_WRITE_BUF+0x40>
 8001adc:	2000002c 	.word	0x2000002c

08001ae0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001ae2:	0146      	lsls	r6, r0, #5
 8001ae4:	3608      	adds	r6, #8
 8001ae6:	f506 5700 	add.w	r7, r6, #8192	; 0x2000
   uint16_t val=0,val1=0;
 8001aea:	2400      	movs	r4, #0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001aec:	f506 5604 	add.w	r6, r6, #8448	; 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001af0:	4638      	mov	r0, r7
 8001af2:	f7ff ff21 	bl	8001938 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001af6:	0200      	lsls	r0, r0, #8
 8001af8:	b285      	uxth	r5, r0
 8001afa:	4630      	mov	r0, r6
 8001afc:	f7ff ff1c 	bl	8001938 <WIZCHIP_READ>
 8001b00:	4405      	add	r5, r0
 8001b02:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8001b04:	b14d      	cbz	r5, 8001b1a <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001b06:	4638      	mov	r0, r7
 8001b08:	f7ff ff16 	bl	8001938 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b0c:	0200      	lsls	r0, r0, #8
 8001b0e:	b284      	uxth	r4, r0
 8001b10:	4630      	mov	r0, r6
 8001b12:	f7ff ff11 	bl	8001938 <WIZCHIP_READ>
 8001b16:	4404      	add	r4, r0
 8001b18:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8001b1a:	42ac      	cmp	r4, r5
 8001b1c:	d1e8      	bne.n	8001af0 <getSn_TX_FSR+0x10>
   return val;
}
 8001b1e:	4620      	mov	r0, r4
 8001b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b22 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001b24:	0146      	lsls	r6, r0, #5
 8001b26:	3608      	adds	r6, #8
 8001b28:	f506 5718 	add.w	r7, r6, #9728	; 0x2600
   uint16_t val=0,val1=0;
 8001b2c:	2400      	movs	r4, #0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001b2e:	f506 561c 	add.w	r6, r6, #9984	; 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001b32:	4638      	mov	r0, r7
 8001b34:	f7ff ff00 	bl	8001938 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001b38:	0200      	lsls	r0, r0, #8
 8001b3a:	b285      	uxth	r5, r0
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f7ff fefb 	bl	8001938 <WIZCHIP_READ>
 8001b42:	4405      	add	r5, r0
 8001b44:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8001b46:	b14d      	cbz	r5, 8001b5c <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001b48:	4638      	mov	r0, r7
 8001b4a:	f7ff fef5 	bl	8001938 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001b4e:	0200      	lsls	r0, r0, #8
 8001b50:	b284      	uxth	r4, r0
 8001b52:	4630      	mov	r0, r6
 8001b54:	f7ff fef0 	bl	8001938 <WIZCHIP_READ>
 8001b58:	4404      	add	r4, r0
 8001b5a:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8001b5c:	42ac      	cmp	r4, r5
 8001b5e:	d1e8      	bne.n	8001b32 <getSn_RX_RSR+0x10>
   return val;
}
 8001b60:	4620      	mov	r0, r4
 8001b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b64 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b68:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8001b6a:	4614      	mov	r4, r2
 8001b6c:	b322      	cbz	r2, 8001bb8 <wiz_send_data+0x54>
   ptr = getSn_TX_WR(sn);
 8001b6e:	0087      	lsls	r7, r0, #2
 8001b70:	1c7d      	adds	r5, r7, #1
 8001b72:	00ed      	lsls	r5, r5, #3
 8001b74:	f505 5810 	add.w	r8, r5, #9216	; 0x2400
 8001b78:	4640      	mov	r0, r8
 8001b7a:	f7ff fedd 	bl	8001938 <WIZCHIP_READ>
 8001b7e:	f505 5514 	add.w	r5, r5, #9472	; 0x2500
 8001b82:	4606      	mov	r6, r0
 8001b84:	4628      	mov	r0, r5
 8001b86:	f7ff fed7 	bl	8001938 <WIZCHIP_READ>
 8001b8a:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 8001b8e:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001b90:	4622      	mov	r2, r4
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001b92:	3702      	adds	r7, #2
 8001b94:	0230      	lsls	r0, r6, #8
   
   ptr += len;
 8001b96:	4434      	add	r4, r6
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001b98:	4649      	mov	r1, r9
 8001b9a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   ptr += len;
 8001b9e:	b2a4      	uxth	r4, r4
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001ba0:	f7ff ff62 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setSn_TX_WR(sn,ptr);
 8001ba4:	0a21      	lsrs	r1, r4, #8
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	f7ff fef2 	bl	8001990 <WIZCHIP_WRITE>
 8001bac:	b2e1      	uxtb	r1, r4
 8001bae:	4628      	mov	r0, r5
}
 8001bb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 8001bb4:	f7ff beec 	b.w	8001990 <WIZCHIP_WRITE>
 8001bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bbc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	b322      	cbz	r2, 8001c10 <wiz_recv_data+0x54>
   ptr = getSn_RX_RD(sn);
 8001bc6:	0087      	lsls	r7, r0, #2
 8001bc8:	1c7d      	adds	r5, r7, #1
 8001bca:	00ed      	lsls	r5, r5, #3
 8001bcc:	f505 5820 	add.w	r8, r5, #10240	; 0x2800
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	f7ff feb1 	bl	8001938 <WIZCHIP_READ>
 8001bd6:	f505 5524 	add.w	r5, r5, #10496	; 0x2900
 8001bda:	4606      	mov	r6, r0
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f7ff feab 	bl	8001938 <WIZCHIP_READ>
 8001be2:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 8001be6:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001be8:	4622      	mov	r2, r4
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001bea:	3703      	adds	r7, #3
 8001bec:	0230      	lsls	r0, r6, #8
   ptr += len;
 8001bee:	4434      	add	r4, r6
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   ptr += len;
 8001bf6:	b2a4      	uxth	r4, r4
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001bf8:	f7ff fefa 	bl	80019f0 <WIZCHIP_READ_BUF>
   
   setSn_RX_RD(sn,ptr);
 8001bfc:	0a21      	lsrs	r1, r4, #8
 8001bfe:	4640      	mov	r0, r8
 8001c00:	f7ff fec6 	bl	8001990 <WIZCHIP_WRITE>
 8001c04:	b2e1      	uxtb	r1, r4
 8001c06:	4628      	mov	r0, r5
}
 8001c08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 8001c0c:	f7ff bec0 	b.w	8001990 <WIZCHIP_WRITE>
 8001c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c14 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001c14:	2808      	cmp	r0, #8
{
 8001c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c18:	4605      	mov	r5, r0
	CHECK_SOCKNUM();
 8001c1a:	d82c      	bhi.n	8001c76 <close+0x62>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001c1c:	0144      	lsls	r4, r0, #5
 8001c1e:	3408      	adds	r4, #8
 8001c20:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8001c24:	2110      	movs	r1, #16
 8001c26:	4638      	mov	r0, r7
 8001c28:	f7ff feb2 	bl	8001990 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001c2c:	4638      	mov	r0, r7
 8001c2e:	f7ff fe83 	bl	8001938 <WIZCHIP_READ>
 8001c32:	4606      	mov	r6, r0
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d1f9      	bne.n	8001c2c <close+0x18>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001c38:	211f      	movs	r1, #31
 8001c3a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001c3e:	f7ff fea7 	bl	8001990 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001c42:	490e      	ldr	r1, [pc, #56]	; (8001c7c <close+0x68>)
 8001c44:	2301      	movs	r3, #1
 8001c46:	40ab      	lsls	r3, r5
 8001c48:	880a      	ldrh	r2, [r1, #0]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <close+0x6c>)
 8001c54:	8811      	ldrh	r1, [r2, #0]
 8001c56:	400b      	ands	r3, r1
 8001c58:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <close+0x70>)
 8001c5c:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
	sock_pack_info[sn] = 0;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <close+0x74>)
 8001c62:	555e      	strb	r6, [r3, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001c64:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fe65 	bl	8001938 <WIZCHIP_READ>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	d1fa      	bne.n	8001c68 <close+0x54>
	return SOCK_OK;
 8001c72:	2001      	movs	r0, #1
 8001c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8001c76:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	20000110 	.word	0x20000110
 8001c80:	20000112 	.word	0x20000112
 8001c84:	2000011c 	.word	0x2000011c
 8001c88:	20000114 	.word	0x20000114

08001c8c <socket>:
	CHECK_SOCKNUM();
 8001c8c:	2808      	cmp	r0, #8
{
 8001c8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	4688      	mov	r8, r1
 8001c96:	4617      	mov	r7, r2
 8001c98:	461d      	mov	r5, r3
	CHECK_SOCKNUM();
 8001c9a:	d87b      	bhi.n	8001d94 <socket+0x108>
	switch(protocol)
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d005      	beq.n	8001cac <socket+0x20>
 8001ca0:	d301      	bcc.n	8001ca6 <socket+0x1a>
 8001ca2:	2904      	cmp	r1, #4
 8001ca4:	d910      	bls.n	8001cc8 <socket+0x3c>
         return SOCKERR_SOCKMODE;
 8001ca6:	f06f 0004 	mvn.w	r0, #4
 8001caa:	e00a      	b.n	8001cc2 <socket+0x36>
            getSIPR((uint8_t*)&taddr);
 8001cac:	2204      	movs	r2, #4
 8001cae:	eb0d 0102 	add.w	r1, sp, r2
 8001cb2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001cb6:	f7ff fe9b 	bl	80019f0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001cba:	9b01      	ldr	r3, [sp, #4]
 8001cbc:	b923      	cbnz	r3, 8001cc8 <socket+0x3c>
 8001cbe:	f06f 0002 	mvn.w	r0, #2
}	   
 8001cc2:	b002      	add	sp, #8
 8001cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001cc8:	0768      	lsls	r0, r5, #29
 8001cca:	d457      	bmi.n	8001d7c <socket+0xf0>
	if(flag != 0)
 8001ccc:	b12d      	cbz	r5, 8001cda <socket+0x4e>
   	switch(protocol)
 8001cce:	f1b8 0f01 	cmp.w	r8, #1
 8001cd2:	d050      	beq.n	8001d76 <socket+0xea>
 8001cd4:	f1b8 0f02 	cmp.w	r8, #2
 8001cd8:	d053      	beq.n	8001d82 <socket+0xf6>
	close(sn);
 8001cda:	4620      	mov	r0, r4
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001cdc:	0166      	lsls	r6, r4, #5
	close(sn);
 8001cde:	f7ff ff99 	bl	8001c14 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001ce2:	3608      	adds	r6, #8
 8001ce4:	f025 010f 	bic.w	r1, r5, #15
 8001ce8:	ea41 0108 	orr.w	r1, r1, r8
 8001cec:	4630      	mov	r0, r6
 8001cee:	f7ff fe4f 	bl	8001990 <WIZCHIP_WRITE>
	if(!port)
 8001cf2:	b96f      	cbnz	r7, 8001d10 <socket+0x84>
	   port = sock_any_port++;
 8001cf4:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <socket+0x110>)
 8001cf6:	8817      	ldrh	r7, [r2, #0]
 8001cf8:	1c7b      	adds	r3, r7, #1
 8001cfa:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001cfc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001d00:	428b      	cmp	r3, r1
 8001d02:	bf09      	itett	eq
 8001d04:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 8001d08:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001d0a:	8013      	strheq	r3, [r2, #0]
 8001d0c:	f64f 77ef 	movweq	r7, #65519	; 0xffef
   setSn_PORT(sn,port);	
 8001d10:	0a39      	lsrs	r1, r7, #8
 8001d12:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 8001d16:	f7ff fe3b 	bl	8001990 <WIZCHIP_WRITE>
 8001d1a:	b2f9      	uxtb	r1, r7
 8001d1c:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 8001d20:	f506 7780 	add.w	r7, r6, #256	; 0x100
   setSn_PORT(sn,port);	
 8001d24:	f7ff fe34 	bl	8001990 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	f7ff fe30 	bl	8001990 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d30:	4638      	mov	r0, r7
 8001d32:	f7ff fe01 	bl	8001938 <WIZCHIP_READ>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d1fa      	bne.n	8001d30 <socket+0xa4>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001d3a:	4919      	ldr	r1, [pc, #100]	; (8001da0 <socket+0x114>)
   sock_io_mode &= ~(1 <<sn);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	40a2      	lsls	r2, r4
 8001d40:	880b      	ldrh	r3, [r1, #0]
 8001d42:	43d2      	mvns	r2, r2
 8001d44:	b212      	sxth	r2, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001d46:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 8001d4a:	4013      	ands	r3, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001d4c:	40a5      	lsls	r5, r4
 8001d4e:	431d      	orrs	r5, r3
   sock_is_sending &= ~(1<<sn);
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <socket+0x118>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001d52:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001d54:	8819      	ldrh	r1, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <socket+0x11c>)
 8001d5c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <socket+0x120>)
 8001d62:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001d64:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f7ff fde5 	bl	8001938 <WIZCHIP_READ>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d0fa      	beq.n	8001d68 <socket+0xdc>
   return (int8_t)sn;
 8001d72:	b260      	sxtb	r0, r4
 8001d74:	e7a5      	b.n	8001cc2 <socket+0x36>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001d76:	f015 0f21 	tst.w	r5, #33	; 0x21
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001d7a:	d1ae      	bne.n	8001cda <socket+0x4e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001d7c:	f06f 0005 	mvn.w	r0, #5
 8001d80:	e79f      	b.n	8001cc2 <socket+0x36>
   	      if(flag & SF_IGMP_VER2)
 8001d82:	06a9      	lsls	r1, r5, #26
 8001d84:	d501      	bpl.n	8001d8a <socket+0xfe>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001d86:	062a      	lsls	r2, r5, #24
 8001d88:	d5f8      	bpl.n	8001d7c <socket+0xf0>
      	      if(flag & SF_UNI_BLOCK)
 8001d8a:	06eb      	lsls	r3, r5, #27
 8001d8c:	d5a5      	bpl.n	8001cda <socket+0x4e>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001d8e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001d92:	e7f2      	b.n	8001d7a <socket+0xee>
	CHECK_SOCKNUM();
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	e793      	b.n	8001cc2 <socket+0x36>
 8001d9a:	bf00      	nop
 8001d9c:	20000028 	.word	0x20000028
 8001da0:	20000110 	.word	0x20000110
 8001da4:	20000112 	.word	0x20000112
 8001da8:	2000011c 	.word	0x2000011c
 8001dac:	20000114 	.word	0x20000114

08001db0 <connect>:
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
 8001db0:	2808      	cmp	r0, #8
{
 8001db2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001db6:	4607      	mov	r7, r0
 8001db8:	460d      	mov	r5, r1
 8001dba:	4691      	mov	r9, r2
   CHECK_SOCKNUM();
 8001dbc:	d866      	bhi.n	8001e8c <connect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001dbe:	f04f 0804 	mov.w	r8, #4
 8001dc2:	2401      	movs	r4, #1
 8001dc4:	fb18 4400 	smlabb	r4, r8, r0, r4
 8001dc8:	00e4      	lsls	r4, r4, #3
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff fdb4 	bl	8001938 <WIZCHIP_READ>
 8001dd0:	f000 000f 	and.w	r0, r0, #15
 8001dd4:	2801      	cmp	r0, #1
 8001dd6:	d15d      	bne.n	8001e94 <connect+0xe4>
   CHECK_SOCKINIT();
 8001dd8:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f7ff fdab 	bl	8001938 <WIZCHIP_READ>
 8001de2:	2813      	cmp	r0, #19
 8001de4:	d15a      	bne.n	8001e9c <connect+0xec>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8001de6:	782b      	ldrb	r3, [r5, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001de8:	786a      	ldrb	r2, [r5, #1]
 8001dea:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001dee:	78ab      	ldrb	r3, [r5, #2]
 8001df0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001df4:	78eb      	ldrb	r3, [r5, #3]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001df6:	3b01      	subs	r3, #1
 8001df8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dfc:	3303      	adds	r3, #3
 8001dfe:	d851      	bhi.n	8001ea4 <connect+0xf4>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8001e00:	f1b9 0f00 	cmp.w	r9, #0
 8001e04:	d052      	beq.n	8001eac <connect+0xfc>
	setSn_DIPR(sn,addr);
 8001e06:	4642      	mov	r2, r8
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
 8001e0e:	f7ff fe2b 	bl	8001a68 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8001e12:	ea4f 2119 	mov.w	r1, r9, lsr #8
 8001e16:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001e1a:	f7ff fdb9 	bl	8001990 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8001e1e:	f504 7580 	add.w	r5, r4, #256	; 0x100
	setSn_DPORT(sn,port);
 8001e22:	fa5f f189 	uxtb.w	r1, r9
 8001e26:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8001e2a:	f7ff fdb1 	bl	8001990 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8001e2e:	4641      	mov	r1, r8
 8001e30:	4628      	mov	r0, r5
 8001e32:	f7ff fdad 	bl	8001990 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001e36:	4628      	mov	r0, r5
 8001e38:	f7ff fd7e 	bl	8001938 <WIZCHIP_READ>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d1fa      	bne.n	8001e36 <connect+0x86>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <connect+0x104>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	fa43 f707 	asr.w	r7, r3, r7
 8001e48:	07fa      	lsls	r2, r7, #31
 8001e4a:	d41d      	bmi.n	8001e88 <connect+0xd8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001e4c:	f504 7400 	add.w	r4, r4, #512	; 0x200
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff fd71 	bl	8001938 <WIZCHIP_READ>
 8001e56:	2817      	cmp	r0, #23
 8001e58:	d102      	bne.n	8001e60 <connect+0xb0>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fd69 	bl	8001938 <WIZCHIP_READ>
 8001e66:	0703      	lsls	r3, r0, #28
 8001e68:	d507      	bpl.n	8001e7a <connect+0xca>
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	f7ff fd8f 	bl	8001990 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8001e72:	f06f 000c 	mvn.w	r0, #12
 8001e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (getSn_SR(sn) == SOCK_CLOSED)
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	f7ff fd5c 	bl	8001938 <WIZCHIP_READ>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d1e5      	bne.n	8001e50 <connect+0xa0>
			return SOCKERR_SOCKCLOSED;
 8001e84:	f06f 0003 	mvn.w	r0, #3
}
 8001e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   CHECK_SOCKNUM();
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e94:	f06f 0004 	mvn.w	r0, #4
 8001e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   CHECK_SOCKINIT();
 8001e9c:	f06f 0002 	mvn.w	r0, #2
 8001ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001ea4:	f06f 000b 	mvn.w	r0, #11
 8001ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if(port == 0) return SOCKERR_PORTZERO;
 8001eac:	f06f 000a 	mvn.w	r0, #10
 8001eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001eb4:	20000110 	.word	0x20000110

08001eb8 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8001eb8:	2808      	cmp	r0, #8
{
 8001eba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	468a      	mov	sl, r1
 8001ec2:	4614      	mov	r4, r2
   CHECK_SOCKNUM();
 8001ec4:	d879      	bhi.n	8001fba <send+0x102>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001ec6:	0145      	lsls	r5, r0, #5
 8001ec8:	3508      	adds	r5, #8
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f7ff fd34 	bl	8001938 <WIZCHIP_READ>
 8001ed0:	f000 000f 	and.w	r0, r0, #15
 8001ed4:	2801      	cmp	r0, #1
 8001ed6:	d173      	bne.n	8001fc0 <send+0x108>
   CHECK_SOCKDATA();
 8001ed8:	2c00      	cmp	r4, #0
 8001eda:	d074      	beq.n	8001fc6 <send+0x10e>
   tmp = getSn_SR(sn);
 8001edc:	f505 7940 	add.w	r9, r5, #768	; 0x300
 8001ee0:	4648      	mov	r0, r9
 8001ee2:	f7ff fd29 	bl	8001938 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001ee6:	2817      	cmp	r0, #23
 8001ee8:	d001      	beq.n	8001eee <send+0x36>
 8001eea:	281c      	cmp	r0, #28
 8001eec:	d137      	bne.n	8001f5e <send+0xa6>
   if( sock_is_sending & (1<<sn) )
 8001eee:	4a37      	ldr	r2, [pc, #220]	; (8001fcc <send+0x114>)
 8001ef0:	8813      	ldrh	r3, [r2, #0]
 8001ef2:	4133      	asrs	r3, r6
 8001ef4:	f013 0f01 	tst.w	r3, #1
 8001ef8:	4690      	mov	r8, r2
 8001efa:	d013      	beq.n	8001f24 <send+0x6c>
   {
      tmp = getSn_IR(sn);
 8001efc:	f505 7700 	add.w	r7, r5, #512	; 0x200
 8001f00:	4638      	mov	r0, r7
 8001f02:	f7ff fd19 	bl	8001938 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001f06:	06c2      	lsls	r2, r0, #27
 8001f08:	d52c      	bpl.n	8001f64 <send+0xac>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001f0a:	2110      	movs	r1, #16
 8001f0c:	4638      	mov	r0, r7
 8001f0e:	f7ff fd3f 	bl	8001990 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001f12:	2301      	movs	r3, #1
 8001f14:	fa03 f206 	lsl.w	r2, r3, r6
 8001f18:	f8b8 3000 	ldrh.w	r3, [r8]
 8001f1c:	ea23 0302 	bic.w	r3, r3, r2
 8001f20:	f8a8 3000 	strh.w	r3, [r8]
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
 8001f24:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8001f28:	f7ff fd06 	bl	8001938 <WIZCHIP_READ>
 8001f2c:	0280      	lsls	r0, r0, #10
 8001f2e:	b280      	uxth	r0, r0
 8001f30:	4284      	cmp	r4, r0
 8001f32:	f04f 0701 	mov.w	r7, #1
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <send+0x118>)
 8001f38:	bf28      	it	cs
 8001f3a:	4604      	movcs	r4, r0
 8001f3c:	40b7      	lsls	r7, r6
      freesize = getSn_TX_FSR(sn);
 8001f3e:	4630      	mov	r0, r6
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	f7ff fdcd 	bl	8001ae0 <getSn_TX_FSR>
 8001f46:	4683      	mov	fp, r0
      tmp = getSn_SR(sn);
 8001f48:	4648      	mov	r0, r9
 8001f4a:	f7ff fcf5 	bl	8001938 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001f4e:	2817      	cmp	r0, #23
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	d013      	beq.n	8001f7c <send+0xc4>
 8001f54:	281c      	cmp	r0, #28
 8001f56:	d011      	beq.n	8001f7c <send+0xc4>
         close(sn);
 8001f58:	4630      	mov	r0, r6
 8001f5a:	f7ff fe5b 	bl	8001c14 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001f5e:	f06f 0006 	mvn.w	r0, #6
 8001f62:	e002      	b.n	8001f6a <send+0xb2>
      else if(tmp & Sn_IR_TIMEOUT)
 8001f64:	0703      	lsls	r3, r0, #28
 8001f66:	d403      	bmi.n	8001f70 <send+0xb8>
      else return SOCK_BUSY;
 8001f68:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001f6a:	b003      	add	sp, #12
 8001f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 8001f70:	4630      	mov	r0, r6
 8001f72:	f7ff fe4f 	bl	8001c14 <close>
         return SOCKERR_TIMEOUT;
 8001f76:	f06f 000c 	mvn.w	r0, #12
 8001f7a:	e7f6      	b.n	8001f6a <send+0xb2>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	423a      	tst	r2, r7
 8001f80:	d018      	beq.n	8001fb4 <send+0xfc>
 8001f82:	45a3      	cmp	fp, r4
 8001f84:	d3f0      	bcc.n	8001f68 <send+0xb0>
   wiz_send_data(sn, buf, len);
 8001f86:	4651      	mov	r1, sl
 8001f88:	4630      	mov	r0, r6
 8001f8a:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_SEND);
 8001f8c:	f505 7580 	add.w	r5, r5, #256	; 0x100
   wiz_send_data(sn, buf, len);
 8001f90:	f7ff fde8 	bl	8001b64 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8001f94:	2120      	movs	r1, #32
 8001f96:	4628      	mov	r0, r5
 8001f98:	f7ff fcfa 	bl	8001990 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f7ff fccb 	bl	8001938 <WIZCHIP_READ>
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d1fa      	bne.n	8001f9c <send+0xe4>
   sock_is_sending |= (1 << sn);
 8001fa6:	f8b8 3000 	ldrh.w	r3, [r8]
 8001faa:	431f      	orrs	r7, r3
 8001fac:	f8a8 7000 	strh.w	r7, [r8]
   return (int32_t)len;
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	e7da      	b.n	8001f6a <send+0xb2>
      if(len <= freesize) break;
 8001fb4:	45a3      	cmp	fp, r4
 8001fb6:	d3c2      	bcc.n	8001f3e <send+0x86>
 8001fb8:	e7e5      	b.n	8001f86 <send+0xce>
   CHECK_SOCKNUM();
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	e7d4      	b.n	8001f6a <send+0xb2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001fc0:	f06f 0004 	mvn.w	r0, #4
 8001fc4:	e7d1      	b.n	8001f6a <send+0xb2>
   CHECK_SOCKDATA();
 8001fc6:	f06f 000d 	mvn.w	r0, #13
 8001fca:	e7ce      	b.n	8001f6a <send+0xb2>
 8001fcc:	20000112 	.word	0x20000112
 8001fd0:	20000110 	.word	0x20000110

08001fd4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001fd8:	2808      	cmp	r0, #8
{
 8001fda:	4680      	mov	r8, r0
 8001fdc:	9100      	str	r1, [sp, #0]
 8001fde:	4617      	mov	r7, r2
   CHECK_SOCKNUM();
 8001fe0:	d85c      	bhi.n	800209c <recv+0xc8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001fe2:	0144      	lsls	r4, r0, #5
 8001fe4:	3408      	adds	r4, #8
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fca6 	bl	8001938 <WIZCHIP_READ>
 8001fec:	f000 060f 	and.w	r6, r0, #15
 8001ff0:	2e01      	cmp	r6, #1
 8001ff2:	d156      	bne.n	80020a2 <recv+0xce>
   CHECK_SOCKDATA();
 8001ff4:	2f00      	cmp	r7, #0
 8001ff6:	d057      	beq.n	80020a8 <recv+0xd4>
   
   recvsize = getSn_RxMAX(sn);
 8001ff8:	f504 50f0 	add.w	r0, r4, #7680	; 0x1e00
 8001ffc:	f7ff fc9c 	bl	8001938 <WIZCHIP_READ>
 8002000:	fa06 f608 	lsl.w	r6, r6, r8
 8002004:	4683      	mov	fp, r0
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
         tmp = getSn_SR(sn);
 8002006:	f504 7940 	add.w	r9, r4, #768	; 0x300
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800200a:	f504 5af8 	add.w	sl, r4, #7936	; 0x1f00
         recvsize = getSn_RX_RSR(sn);
 800200e:	4640      	mov	r0, r8
 8002010:	f7ff fd87 	bl	8001b22 <getSn_RX_RSR>
 8002014:	4605      	mov	r5, r0
         tmp = getSn_SR(sn);
 8002016:	4648      	mov	r0, r9
 8002018:	f7ff fc8e 	bl	8001938 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 800201c:	2817      	cmp	r0, #23
 800201e:	d032      	beq.n	8002086 <recv+0xb2>
            if(tmp == SOCK_CLOSE_WAIT)
 8002020:	281c      	cmp	r0, #28
 8002022:	d128      	bne.n	8002076 <recv+0xa2>
               if(recvsize != 0) break;
 8002024:	b1e5      	cbz	r5, 8002060 <recv+0x8c>
   recvsize = getSn_RxMAX(sn);
 8002026:	ea4f 208b 	mov.w	r0, fp, lsl #10
 800202a:	b280      	uxth	r0, r0
 800202c:	4287      	cmp	r7, r0
 800202e:	bf28      	it	cs
 8002030:	4607      	movcs	r7, r0
 8002032:	42bd      	cmp	r5, r7
 8002034:	4628      	mov	r0, r5
 8002036:	bf28      	it	cs
 8002038:	4638      	movcs	r0, r7
 800203a:	b287      	uxth	r7, r0
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
 800203c:	9900      	ldr	r1, [sp, #0]
 800203e:	4640      	mov	r0, r8
 8002040:	463a      	mov	r2, r7
   setSn_CR(sn,Sn_CR_RECV);
 8002042:	f504 7480 	add.w	r4, r4, #256	; 0x100
   wiz_recv_data(sn, buf, len);
 8002046:	f7ff fdb9 	bl	8001bbc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff fc9f 	bl	8001990 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fc70 	bl	8001938 <WIZCHIP_READ>
 8002058:	2800      	cmp	r0, #0
 800205a:	d1fa      	bne.n	8002052 <recv+0x7e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800205c:	4638      	mov	r0, r7
 800205e:	e00f      	b.n	8002080 <recv+0xac>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002060:	4640      	mov	r0, r8
 8002062:	f7ff fd3d 	bl	8001ae0 <getSn_TX_FSR>
 8002066:	9001      	str	r0, [sp, #4]
 8002068:	4650      	mov	r0, sl
 800206a:	f7ff fc65 	bl	8001938 <WIZCHIP_READ>
 800206e:	9901      	ldr	r1, [sp, #4]
 8002070:	ebb1 2f80 	cmp.w	r1, r0, lsl #10
 8002074:	d107      	bne.n	8002086 <recv+0xb2>
                  close(sn);
 8002076:	4640      	mov	r0, r8
 8002078:	f7ff fdcc 	bl	8001c14 <close>
                  return SOCKERR_SOCKSTATUS;
 800207c:	f06f 0006 	mvn.w	r0, #6
}
 8002080:	b003      	add	sp, #12
 8002082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <recv+0xdc>)
 8002088:	8819      	ldrh	r1, [r3, #0]
 800208a:	4231      	tst	r1, r6
 800208c:	d003      	beq.n	8002096 <recv+0xc2>
 800208e:	2d00      	cmp	r5, #0
 8002090:	d1c9      	bne.n	8002026 <recv+0x52>
 8002092:	4628      	mov	r0, r5
 8002094:	e7f4      	b.n	8002080 <recv+0xac>
         if(recvsize != 0) break;
 8002096:	2d00      	cmp	r5, #0
 8002098:	d0b9      	beq.n	800200e <recv+0x3a>
 800209a:	e7c4      	b.n	8002026 <recv+0x52>
   CHECK_SOCKNUM();
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	e7ee      	b.n	8002080 <recv+0xac>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80020a2:	f06f 0004 	mvn.w	r0, #4
 80020a6:	e7eb      	b.n	8002080 <recv+0xac>
   CHECK_SOCKDATA();
 80020a8:	f06f 000d 	mvn.w	r0, #13
 80020ac:	e7e8      	b.n	8002080 <recv+0xac>
 80020ae:	bf00      	nop
 80020b0:	20000110 	.word	0x20000110

080020b4 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80020b4:	4770      	bx	lr

080020b6 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80020b6:	7800      	ldrb	r0, [r0, #0]
 80020b8:	4770      	bx	lr

080020ba <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80020ba:	7001      	strb	r1, [r0, #0]
 80020bc:	4770      	bx	lr

080020be <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80020be:	2000      	movs	r0, #0
 80020c0:	4770      	bx	lr

080020c2 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80020c2:	4770      	bx	lr

080020c4 <wizchip_cris_enter>:
 80020c4:	4770      	bx	lr

080020c6 <wizchip_cris_exit>:
 80020c6:	4770      	bx	lr

080020c8 <wizchip_cs_select>:
 80020c8:	4770      	bx	lr
	...

080020cc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <reg_wizchip_cs_cbfunc+0x18>)
   if(!cs_sel || !cs_desel)
 80020ce:	b100      	cbz	r0, 80020d2 <reg_wizchip_cs_cbfunc+0x6>
 80020d0:	b921      	cbnz	r1, 80020dc <reg_wizchip_cs_cbfunc+0x10>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <reg_wizchip_cs_cbfunc+0x1c>)
 80020d4:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <reg_wizchip_cs_cbfunc+0x20>)
 80020d8:	619a      	str	r2, [r3, #24]
 80020da:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80020dc:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80020de:	6199      	str	r1, [r3, #24]
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000002c 	.word	0x2000002c
 80020e8:	080020c9 	.word	0x080020c9
 80020ec:	080020b5 	.word	0x080020b5

080020f0 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <reg_wizchip_spi_cbfunc+0x24>)
{
 80020f2:	b510      	push	{r4, lr}
 80020f4:	881c      	ldrh	r4, [r3, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80020f6:	05a4      	lsls	r4, r4, #22
 80020f8:	461a      	mov	r2, r3
 80020fa:	d400      	bmi.n	80020fe <reg_wizchip_spi_cbfunc+0xe>
 80020fc:	e7fe      	b.n	80020fc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80020fe:	b100      	cbz	r0, 8002102 <reg_wizchip_spi_cbfunc+0x12>
 8002100:	b921      	cbnz	r1, 800210c <reg_wizchip_spi_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <reg_wizchip_spi_cbfunc+0x28>)
 8002104:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <reg_wizchip_spi_cbfunc+0x2c>)
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	bd10      	pop	{r4, pc}
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800210c:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800210e:	6219      	str	r1, [r3, #32]
 8002110:	bd10      	pop	{r4, pc}
 8002112:	bf00      	nop
 8002114:	2000002c 	.word	0x2000002c
 8002118:	080020bf 	.word	0x080020bf
 800211c:	080020c3 	.word	0x080020c3

08002120 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002122:	2206      	movs	r2, #6
 8002124:	a904      	add	r1, sp, #16
 8002126:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800212a:	f7ff fc61 	bl	80019f0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800212e:	2204      	movs	r2, #4
 8002130:	eb0d 0102 	add.w	r1, sp, r2
 8002134:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002138:	f7ff fc5a 	bl	80019f0 <WIZCHIP_READ_BUF>
 800213c:	a902      	add	r1, sp, #8
 800213e:	2204      	movs	r2, #4
 8002140:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002144:	f7ff fc54 	bl	80019f0 <WIZCHIP_READ_BUF>
 8002148:	2204      	movs	r2, #4
 800214a:	a903      	add	r1, sp, #12
 800214c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002150:	f7ff fc4e 	bl	80019f0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fc1a 	bl	8001990 <WIZCHIP_WRITE>
   getMR(); // for delay
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fbeb 	bl	8001938 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002162:	a904      	add	r1, sp, #16
 8002164:	2206      	movs	r2, #6
 8002166:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800216a:	f7ff fc7d 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800216e:	2204      	movs	r2, #4
 8002170:	eb0d 0102 	add.w	r1, sp, r2
 8002174:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002178:	f7ff fc76 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800217c:	a902      	add	r1, sp, #8
 800217e:	2204      	movs	r2, #4
 8002180:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002184:	f7ff fc70 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002188:	2204      	movs	r2, #4
 800218a:	a903      	add	r1, sp, #12
 800218c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002190:	f7ff fc6a 	bl	8001a68 <WIZCHIP_WRITE_BUF>
}
 8002194:	b007      	add	sp, #28
 8002196:	f85d fb04 	ldr.w	pc, [sp], #4

0800219a <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800219a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219c:	4605      	mov	r5, r0
 800219e:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 80021a0:	f7ff ffbe 	bl	8002120 <wizchip_sw_reset>
   if(txsize)
 80021a4:	b915      	cbnz	r5, 80021ac <wizchip_init+0x12>
		}

	#endif
   }

   if(rxsize)
 80021a6:	b9ec      	cbnz	r4, 80021e4 <wizchip_init+0x4a>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 80021a8:	2000      	movs	r0, #0
 80021aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ac:	1e6e      	subs	r6, r5, #1
   if(txsize)
 80021ae:	4632      	mov	r2, r6
 80021b0:	3507      	adds	r5, #7
 80021b2:	2300      	movs	r3, #0
			tmp += txsize[i];
 80021b4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80021b8:	440b      	add	r3, r1
 80021ba:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 80021bc:	2b10      	cmp	r3, #16
 80021be:	dd02      	ble.n	80021c6 <wizchip_init+0x2c>
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021c6:	42aa      	cmp	r2, r5
 80021c8:	d1f4      	bne.n	80021b4 <wizchip_init+0x1a>
 80021ca:	f641 7508 	movw	r5, #7944	; 0x1f08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021ce:	f242 0708 	movw	r7, #8200	; 0x2008
			setSn_TXBUF_SIZE(i, txsize[i]);
 80021d2:	4628      	mov	r0, r5
 80021d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021d8:	3520      	adds	r5, #32
 80021da:	f7ff fbd9 	bl	8001990 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021de:	42bd      	cmp	r5, r7
 80021e0:	d1f7      	bne.n	80021d2 <wizchip_init+0x38>
 80021e2:	e7e0      	b.n	80021a6 <wizchip_init+0xc>
 80021e4:	1e65      	subs	r5, r4, #1
   if(rxsize)
 80021e6:	462a      	mov	r2, r5
 80021e8:	3407      	adds	r4, #7
 80021ea:	2300      	movs	r3, #0
			tmp += rxsize[i];
 80021ec:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80021f0:	440b      	add	r3, r1
 80021f2:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	dce3      	bgt.n	80021c0 <wizchip_init+0x26>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021f8:	4294      	cmp	r4, r2
 80021fa:	d1f7      	bne.n	80021ec <wizchip_init+0x52>
 80021fc:	f641 6408 	movw	r4, #7688	; 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002200:	f641 7608 	movw	r6, #7944	; 0x1f08
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002204:	4620      	mov	r0, r4
 8002206:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800220a:	3420      	adds	r4, #32
 800220c:	f7ff fbc0 	bl	8001990 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002210:	42b4      	cmp	r4, r6
 8002212:	d1f7      	bne.n	8002204 <wizchip_init+0x6a>
 8002214:	e7c8      	b.n	80021a8 <wizchip_init+0xe>

08002216 <wizchip_clrinterrupt>:
}

void wizchip_clrinterrupt(intr_kind intr)
{
 8002216:	b510      	push	{r4, lr}
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002218:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
{
 800221c:	4604      	mov	r4, r0
   setIR(ir);
 800221e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002222:	f7ff fbb5 	bl	8001990 <WIZCHIP_WRITE>
   setSIR(sir);
 8002226:	0a21      	lsrs	r1, r4, #8
 8002228:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
#endif   
}
 800222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSIR(sir);
 8002230:	f7ff bbae 	b.w	8001990 <WIZCHIP_WRITE>

08002234 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002234:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002236:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800223a:	f7ff fb7d 	bl	8001938 <WIZCHIP_READ>
 800223e:	4604      	mov	r4, r0
   sir = getSIR();
 8002240:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002244:	f7ff fb78 	bl	8001938 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 8002248:	0200      	lsls	r0, r0, #8
 800224a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800224e:	b280      	uxth	r0, r0
 8002250:	4420      	add	r0, r4
  return (intr_kind)ret;
 8002252:	b280      	uxth	r0, r0
}
 8002254:	bd10      	pop	{r4, pc}

08002256 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002256:	b510      	push	{r4, lr}
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002258:	b2c1      	uxtb	r1, r0
{
 800225a:	4604      	mov	r4, r0
   setIMR(imr);
 800225c:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002260:	f7ff fb96 	bl	8001990 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002264:	0a21      	lsrs	r1, r4, #8
 8002266:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
#endif   
}
 800226a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSIMR(simr);
 800226e:	f7ff bb8f 	b.w	8001990 <WIZCHIP_WRITE>

08002272 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002272:	b510      	push	{r4, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002274:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002278:	f7ff fb5e 	bl	8001938 <WIZCHIP_READ>
 800227c:	4604      	mov	r4, r0
   simr = getSIMR();
 800227e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002282:	f7ff fb59 	bl	8001938 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 8002286:	eb04 2000 	add.w	r0, r4, r0, lsl #8
  return (intr_kind)ret;
}
 800228a:	b280      	uxth	r0, r0
 800228c:	bd10      	pop	{r4, pc}

0800228e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800228e:	b508      	push	{r3, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002290:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002294:	f7ff fb50 	bl	8001938 <WIZCHIP_READ>

#else
   tmp = -1;
#endif
   return tmp;
}
 8002298:	f000 0001 	and.w	r0, r0, #1
 800229c:	bd08      	pop	{r3, pc}

0800229e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800229e:	b508      	push	{r3, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80022a0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022a4:	f7ff fb48 	bl	8001938 <WIZCHIP_READ>
 80022a8:	f000 0038 	and.w	r0, r0, #56	; 0x38
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
}
 80022ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80022b0:	4258      	negs	r0, r3
 80022b2:	4158      	adcs	r0, r3
 80022b4:	bd08      	pop	{r3, pc}

080022b6 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80022b6:	b508      	push	{r3, lr}
   uint8_t tmp = getPHYCFGR();
 80022b8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022bc:	f7ff fb3c 	bl	8001938 <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
 80022c0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80022c4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022c8:	f7ff fb62 	bl	8001990 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80022cc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022d0:	f7ff fb32 	bl	8001938 <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
 80022d4:	f060 017f 	orn	r1, r0, #127	; 0x7f
   setPHYCFGR(tmp);
 80022d8:	b2c9      	uxtb	r1, r1
 80022da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
}
 80022de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setPHYCFGR(tmp);
 80022e2:	f7ff bb55 	b.w	8001990 <WIZCHIP_WRITE>

080022e6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80022e6:	b508      	push	{r3, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
 80022e8:	7803      	ldrb	r3, [r0, #0]
 80022ea:	2b01      	cmp	r3, #1
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80022ec:	7843      	ldrb	r3, [r0, #1]
      tmp &= ~PHYCFGR_OPMD;
 80022ee:	bf0c      	ite	eq
 80022f0:	2140      	moveq	r1, #64	; 0x40
 80022f2:	2100      	movne	r1, #0
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d109      	bne.n	800230c <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80022f8:	f041 0138 	orr.w	r1, r1, #56	; 0x38
            tmp |= PHYCFGR_OPMDC_100H;
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80022fc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002300:	f7ff fb46 	bl	8001990 <WIZCHIP_WRITE>
   wizphy_reset();
}
 8002304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   wizphy_reset();
 8002308:	f7ff bfd5 	b.w	80022b6 <wizphy_reset>
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800230c:	78c3      	ldrb	r3, [r0, #3]
 800230e:	2b01      	cmp	r3, #1
 8002310:	7883      	ldrb	r3, [r0, #2]
 8002312:	d106      	bne.n	8002322 <wizphy_setphyconf+0x3c>
         if(phyconf->speed == PHY_SPEED_100)
 8002314:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100F;
 8002316:	bf0c      	ite	eq
 8002318:	f041 0118 	orreq.w	r1, r1, #24
            tmp |= PHYCFGR_OPMDC_10F;
 800231c:	f041 0108 	orrne.w	r1, r1, #8
 8002320:	e7ec      	b.n	80022fc <wizphy_setphyconf+0x16>
         if(phyconf->speed == PHY_SPEED_100)
 8002322:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100H;
 8002324:	bf08      	it	eq
 8002326:	f041 0110 	orreq.w	r1, r1, #16
 800232a:	e7e7      	b.n	80022fc <wizphy_setphyconf+0x16>

0800232c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8002330:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002334:	f7ff fb00 	bl	8001938 <WIZCHIP_READ>
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002338:	f3c0 1380 	ubfx	r3, r0, #6, #1
 800233c:	f000 0038 	and.w	r0, r0, #56	; 0x38
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002340:	2820      	cmp	r0, #32
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002342:	7023      	strb	r3, [r4, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002344:	d001      	beq.n	800234a <wizphy_getphyconf+0x1e>
 8002346:	2838      	cmp	r0, #56	; 0x38
 8002348:	d11d      	bne.n	8002386 <wizphy_getphyconf+0x5a>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800234a:	2301      	movs	r3, #1
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800234c:	7063      	strb	r3, [r4, #1]
 800234e:	f1a0 0310 	sub.w	r3, r0, #16
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b10      	cmp	r3, #16
 8002356:	d818      	bhi.n	800238a <wizphy_getphyconf+0x5e>
 8002358:	2201      	movs	r2, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	b183      	cbz	r3, 800238a <wizphy_getphyconf+0x5e>
   switch(tmp & PHYCFGR_OPMDC_ALLA)
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002368:	70a2      	strb	r2, [r4, #2]
 800236a:	3808      	subs	r0, #8
 800236c:	b2c0      	uxtb	r0, r0
 800236e:	2818      	cmp	r0, #24
 8002370:	d80e      	bhi.n	8002390 <wizphy_getphyconf+0x64>
 8002372:	2301      	movs	r3, #1
 8002374:	fa03 f000 	lsl.w	r0, r3, r0
 8002378:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 800237c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002380:	b130      	cbz	r0, 8002390 <wizphy_getphyconf+0x64>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002382:	70e3      	strb	r3, [r4, #3]
 8002384:	bd10      	pop	{r4, pc}
         phyconf->mode = PHY_MODE_MANUAL;
 8002386:	2300      	movs	r3, #0
 8002388:	e7e0      	b.n	800234c <wizphy_getphyconf+0x20>
         phyconf->speed = PHY_SPEED_10;
 800238a:	2300      	movs	r3, #0
 800238c:	70a3      	strb	r3, [r4, #2]
         break;
 800238e:	e7ec      	b.n	800236a <wizphy_getphyconf+0x3e>
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002390:	2300      	movs	r3, #0
 8002392:	e7f6      	b.n	8002382 <wizphy_getphyconf+0x56>

08002394 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002394:	b510      	push	{r4, lr}
 8002396:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8002398:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800239c:	f7ff facc 	bl	8001938 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80023a0:	0643      	lsls	r3, r0, #25
 80023a2:	d516      	bpl.n	80023d2 <wizphy_setphypmode+0x3e>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80023a4:	f000 01c7 	and.w	r1, r0, #199	; 0xc7
   if( pmode == PHY_POWER_DOWN)
 80023a8:	2c01      	cmp	r4, #1
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80023aa:	bf0c      	ite	eq
 80023ac:	f041 0130 	orreq.w	r1, r1, #48	; 0x30
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80023b0:	f041 0138 	orrne.w	r1, r1, #56	; 0x38
   setPHYCFGR(tmp);
 80023b4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80023b8:	f7ff faea 	bl	8001990 <WIZCHIP_WRITE>
   wizphy_reset();
 80023bc:	f7ff ff7b 	bl	80022b6 <wizphy_reset>
   tmp = getPHYCFGR();
 80023c0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80023c4:	f7ff fab8 	bl	8001938 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
 80023c8:	2c01      	cmp	r4, #1
 80023ca:	d105      	bne.n	80023d8 <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80023cc:	f010 0f30 	tst.w	r0, #48	; 0x30
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80023d0:	d105      	bne.n	80023de <wizphy_setphypmode+0x4a>
   }
   return -1;
 80023d2:	f04f 30ff 	mov.w	r0, #4294967295
 80023d6:	bd10      	pop	{r4, pc}
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80023d8:	f010 0f38 	tst.w	r0, #56	; 0x38
 80023dc:	e7f8      	b.n	80023d0 <wizphy_setphypmode+0x3c>
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80023de:	2000      	movs	r0, #0
}
 80023e0:	bd10      	pop	{r4, pc}
	...

080023e4 <ctlwizchip>:
{
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	460c      	mov	r4, r1
   switch(cwtype)
 80023e8:	280f      	cmp	r0, #15
 80023ea:	d864      	bhi.n	80024b6 <ctlwizchip+0xd2>
 80023ec:	e8df f000 	tbb	[pc, r0]
 80023f0:	14180c08 	.word	0x14180c08
 80023f4:	2f23201c 	.word	0x2f23201c
 80023f8:	504c493b 	.word	0x504c493b
 80023fc:	6059540a 	.word	0x6059540a
         wizchip_sw_reset();
 8002400:	f7ff fe8e 	bl	8002120 <wizchip_sw_reset>
   return 0;
 8002404:	2000      	movs	r0, #0
         break;         
 8002406:	bd38      	pop	{r3, r4, r5, pc}
         if(arg != 0) 
 8002408:	b129      	cbz	r1, 8002416 <ctlwizchip+0x32>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800240a:	3108      	adds	r1, #8
         return wizchip_init(ptmp[0], ptmp[1]);
 800240c:	4620      	mov	r0, r4
}
 800240e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 8002412:	f7ff bec2 	b.w	800219a <wizchip_init>
 8002416:	e7f9      	b.n	800240c <ctlwizchip+0x28>
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002418:	8808      	ldrh	r0, [r1, #0]
 800241a:	f7ff fefc 	bl	8002216 <wizchip_clrinterrupt>
 800241e:	e7f1      	b.n	8002404 <ctlwizchip+0x20>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002420:	f7ff ff08 	bl	8002234 <wizchip_getinterrupt>
         *(uint16_t*)arg = getINTLEVEL();
 8002424:	8020      	strh	r0, [r4, #0]
 8002426:	e7ed      	b.n	8002404 <ctlwizchip+0x20>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002428:	8808      	ldrh	r0, [r1, #0]
 800242a:	f7ff ff14 	bl	8002256 <wizchip_setinterruptmask>
 800242e:	e7e9      	b.n	8002404 <ctlwizchip+0x20>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002430:	f7ff ff1f 	bl	8002272 <wizchip_getinterruptmask>
 8002434:	e7f6      	b.n	8002424 <ctlwizchip+0x40>
         setINTLEVEL(*(uint16_t*)arg);
 8002436:	8809      	ldrh	r1, [r1, #0]
 8002438:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800243c:	0a09      	lsrs	r1, r1, #8
 800243e:	f7ff faa7 	bl	8001990 <WIZCHIP_WRITE>
 8002442:	7821      	ldrb	r1, [r4, #0]
 8002444:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002448:	f7ff faa2 	bl	8001990 <WIZCHIP_WRITE>
 800244c:	e7da      	b.n	8002404 <ctlwizchip+0x20>
         *(uint16_t*)arg = getINTLEVEL();
 800244e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002452:	f7ff fa71 	bl	8001938 <WIZCHIP_READ>
 8002456:	4605      	mov	r5, r0
 8002458:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800245c:	f7ff fa6c 	bl	8001938 <WIZCHIP_READ>
 8002460:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002464:	e7de      	b.n	8002424 <ctlwizchip+0x40>
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <ctlwizchip+0xd8>)
 8002468:	789a      	ldrb	r2, [r3, #2]
 800246a:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800246c:	78da      	ldrb	r2, [r3, #3]
 800246e:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002470:	791a      	ldrb	r2, [r3, #4]
 8002472:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002474:	795a      	ldrb	r2, [r3, #5]
 8002476:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002478:	799b      	ldrb	r3, [r3, #6]
 800247a:	710b      	strb	r3, [r1, #4]
         ((uint8_t*)arg)[5] = 0;
 800247c:	2000      	movs	r0, #0
 800247e:	7148      	strb	r0, [r1, #5]
         break;
 8002480:	bd38      	pop	{r3, r4, r5, pc}
         wizphy_reset();
 8002482:	f7ff ff18 	bl	80022b6 <wizphy_reset>
 8002486:	e7bd      	b.n	8002404 <ctlwizchip+0x20>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002488:	4608      	mov	r0, r1
 800248a:	f7ff ff2c 	bl	80022e6 <wizphy_setphyconf>
 800248e:	e7b9      	b.n	8002404 <ctlwizchip+0x20>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002490:	4608      	mov	r0, r1
 8002492:	f7ff ff4b 	bl	800232c <wizphy_getphyconf>
 8002496:	e7b5      	b.n	8002404 <ctlwizchip+0x20>
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002498:	7808      	ldrb	r0, [r1, #0]
}
 800249a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizphy_setphypmode(*(uint8_t*)arg);
 800249e:	f7ff bf79 	b.w	8002394 <wizphy_setphypmode>
         tmp = wizphy_getphypmode();
 80024a2:	f7ff fefc 	bl	800229e <wizphy_getphypmode>
         tmp = wizphy_getphylink();
 80024a6:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 80024a8:	28ff      	cmp	r0, #255	; 0xff
 80024aa:	d004      	beq.n	80024b6 <ctlwizchip+0xd2>
         *(uint8_t*)arg = tmp;
 80024ac:	7020      	strb	r0, [r4, #0]
 80024ae:	e7a9      	b.n	8002404 <ctlwizchip+0x20>
         tmp = wizphy_getphylink();
 80024b0:	f7ff feed 	bl	800228e <wizphy_getphylink>
 80024b4:	e7f7      	b.n	80024a6 <ctlwizchip+0xc2>
         return -1;
 80024b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	2000002c 	.word	0x2000002c

080024c0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80024c0:	b510      	push	{r4, lr}
   setSHAR(pnetinfo->mac);
 80024c2:	4601      	mov	r1, r0
{
 80024c4:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80024c6:	2206      	movs	r2, #6
 80024c8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80024cc:	f7ff facc 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80024d0:	2204      	movs	r2, #4
 80024d2:	f104 010e 	add.w	r1, r4, #14
 80024d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024da:	f7ff fac5 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80024de:	2204      	movs	r2, #4
 80024e0:	f104 010a 	add.w	r1, r4, #10
 80024e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80024e8:	f7ff fabe 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80024ec:	2204      	movs	r2, #4
 80024ee:	1da1      	adds	r1, r4, #6
 80024f0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80024f4:	f7ff fab8 	bl	8001a68 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <wizchip_setnetinfo+0x54>)
 80024fa:	7ca2      	ldrb	r2, [r4, #18]
 80024fc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80024fe:	7ce2      	ldrb	r2, [r4, #19]
 8002500:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002502:	7d22      	ldrb	r2, [r4, #20]
 8002504:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002506:	7d62      	ldrb	r2, [r4, #21]
 8002508:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800250a:	4b03      	ldr	r3, [pc, #12]	; (8002518 <wizchip_setnetinfo+0x58>)
 800250c:	7da2      	ldrb	r2, [r4, #22]
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	bd10      	pop	{r4, pc}
 8002512:	bf00      	nop
 8002514:	2000012d 	.word	0x2000012d
 8002518:	2000012c 	.word	0x2000012c

0800251c <wizchip_getnetinfo>:
}

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800251c:	b510      	push	{r4, lr}
   getSHAR(pnetinfo->mac);
 800251e:	4601      	mov	r1, r0
{
 8002520:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002522:	2206      	movs	r2, #6
 8002524:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002528:	f7ff fa62 	bl	80019f0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800252c:	2204      	movs	r2, #4
 800252e:	f104 010e 	add.w	r1, r4, #14
 8002532:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002536:	f7ff fa5b 	bl	80019f0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800253a:	2204      	movs	r2, #4
 800253c:	f104 010a 	add.w	r1, r4, #10
 8002540:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002544:	f7ff fa54 	bl	80019f0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002548:	2204      	movs	r2, #4
 800254a:	1da1      	adds	r1, r4, #6
 800254c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002550:	f7ff fa4e 	bl	80019f0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <wizchip_getnetinfo+0x54>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800255a:	785a      	ldrb	r2, [r3, #1]
 800255c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800255e:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <wizchip_getnetinfo+0x58>)
   pnetinfo->dns[2]= _DNS_[2];
 8002566:	7522      	strb	r2, [r4, #20]
   pnetinfo->dhcp  = _DHCP_;
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	75a3      	strb	r3, [r4, #22]
 800256c:	bd10      	pop	{r4, pc}
 800256e:	bf00      	nop
 8002570:	2000012d 	.word	0x2000012d
 8002574:	2000012c 	.word	0x2000012c

08002578 <WIZnetDebugCB>:
/*Shell for mbedtls debug function.
 *DEBUG_LEBEL can be changed from 0 to 3*/
#ifdef MBEDTLS_DEBUG_C
void WIZnetDebugCB(void *ctx, int level, const char *file, int line, const char *str)
{
    if(level <= DEBUG_LEVEL)
 8002578:	2902      	cmp	r1, #2
{
 800257a:	9b00      	ldr	r3, [sp, #0]
    if(level <= DEBUG_LEVEL)
 800257c:	dc03      	bgt.n	8002586 <WIZnetDebugCB+0xe>
    {
       printf("%s\r\n",str);
 800257e:	4619      	mov	r1, r3
 8002580:	4801      	ldr	r0, [pc, #4]	; (8002588 <WIZnetDebugCB+0x10>)
 8002582:	f00c bd53 	b.w	800f02c <iprintf>
 8002586:	4770      	bx	lr
 8002588:	08010413 	.word	0x08010413

0800258c <WIZnetRecv>:
{
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	4614      	mov	r4, r2
 8002590:	4606      	mov	r6, r0
	ret = recv(*((int *)ctx),buf,len);
 8002592:	b292      	uxth	r2, r2
 8002594:	7800      	ldrb	r0, [r0, #0]
{
 8002596:	460f      	mov	r7, r1
	ret = recv(*((int *)ctx),buf,len);
 8002598:	f7ff fd1c 	bl	8001fd4 <recv>
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 800259c:	4622      	mov	r2, r4
 800259e:	4603      	mov	r3, r0
	ret = recv(*((int *)ctx),buf,len);
 80025a0:	4605      	mov	r5, r0
	printf("Port:[%d]/Recv(%d)[%d]: \r\n",*((int *)ctx) ,len, (unsigned int)ret);
 80025a2:	6831      	ldr	r1, [r6, #0]
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <WIZnetRecv+0x2c>)
 80025a6:	f00c fd41 	bl	800f02c <iprintf>
	string_print_Hex(buf, len);
 80025aa:	4621      	mov	r1, r4
 80025ac:	4638      	mov	r0, r7
 80025ae:	f7fe fedb 	bl	8001368 <string_print_Hex>
}
 80025b2:	4628      	mov	r0, r5
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	08010418 	.word	0x08010418

080025bc <WIZnetSend>:
{
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4616      	mov	r6, r2
 80025c0:	460d      	mov	r5, r1
 80025c2:	4604      	mov	r4, r0
	printf("Port:[%d]/Send(%d) : \r\n",*((int *)ctx) ,len);
 80025c4:	6801      	ldr	r1, [r0, #0]
 80025c6:	4807      	ldr	r0, [pc, #28]	; (80025e4 <WIZnetSend+0x28>)
 80025c8:	f00c fd30 	bl	800f02c <iprintf>
	string_print_Hex(buf, len);
 80025cc:	4631      	mov	r1, r6
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7fe feca 	bl	8001368 <string_print_Hex>
    return (send(*((int *)ctx),buf,len));
 80025d4:	b2b2      	uxth	r2, r6
 80025d6:	4629      	mov	r1, r5
 80025d8:	7820      	ldrb	r0, [r4, #0]
}
 80025da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (send(*((int *)ctx),buf,len));
 80025de:	f7ff bc6b 	b.w	8001eb8 <send>
 80025e2:	bf00      	nop
 80025e4:	08010433 	.word	0x08010433

080025e8 <wiz_tls_init>:
#endif

/* SSL context intialization
 * */
unsigned int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd)
{
 80025e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025ea:	4604      	mov	r4, r0
	char error_buf[100];
#endif


#if defined (MBEDTLS_DEBUG_C)
	debug_set_threshold(DEBUG_LEVEL);
 80025ec:	2002      	movs	r0, #2
{
 80025ee:	460e      	mov	r6, r1
	debug_set_threshold(DEBUG_LEVEL);
 80025f0:	f003 f98e 	bl	8005910 <mbedtls_debug_set_threshold>
#if defined (MBEDTLS_ENTROPY_C)
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
	mbedtls_entropy_init( tlsContext->entropy);
#endif

	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 80025f4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80025f8:	f00c fc12 	bl	800ee20 <malloc>
 80025fc:	4605      	mov	r5, r0
 80025fe:	6020      	str	r0, [r4, #0]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 8002600:	20b4      	movs	r0, #180	; 0xb4
 8002602:	f00c fc0d 	bl	800ee20 <malloc>
 8002606:	6060      	str	r0, [r4, #4]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 8002608:	2054      	movs	r0, #84	; 0x54
 800260a:	f00c fc09 	bl	800ee20 <malloc>
 800260e:	60a0      	str	r0, [r4, #8]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));
 8002610:	f44f 709a 	mov.w	r0, #308	; 0x134
 8002614:	f00c fc04 	bl	800ee20 <malloc>
 8002618:	60e0      	str	r0, [r4, #12]

	mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 800261a:	4628      	mov	r0, r5
 800261c:	f003 f8be 	bl	800579c <mbedtls_ctr_drbg_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 8002620:	68e0      	ldr	r0, [r4, #12]
 8002622:	f00b ffa7 	bl	800e574 <mbedtls_x509_crt_init>
	mbedtls_ssl_init(tlsContext->ssl);
 8002626:	6860      	ldr	r0, [r4, #4]
 8002628:	f00a f93c 	bl	800c8a4 <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 800262c:	68a0      	ldr	r0, [r4, #8]
 800262e:	f00a fd59 	bl	800d0e4 <mbedtls_ssl_config_init>
	*/

#if defined (MBEDTLS_X509_CRT_PARSE_C)

#if defined (MBEDTLS_DEBUG_C)
	printf(" Loading the CA root certificate \r\n");
 8002632:	4823      	ldr	r0, [pc, #140]	; (80026c0 <wiz_tls_init+0xd8>)
 8002634:	f00c fd6e 	bl	800f114 <puts>
#endif
	mbedtls_ssl_config_defaults((tlsContext->conf),
 8002638:	2300      	movs	r3, #0
 800263a:	461a      	mov	r2, r3
 800263c:	4619      	mov	r1, r3
 800263e:	68a0      	ldr	r0, [r4, #8]
 8002640:	f00a fd54 	bl	800d0ec <mbedtls_ssl_config_defaults>
								MBEDTLS_SSL_IS_CLIENT,
								MBEDTLS_SSL_TRANSPORT_STREAM,
								MBEDTLS_SSL_PRESET_DEFAULT);
	ret=mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf);
 8002644:	68a1      	ldr	r1, [r4, #8]
 8002646:	6860      	ldr	r0, [r4, #4]
 8002648:	f00a fc98 	bl	800cf7c <mbedtls_ssl_setup>
	printf("mbedtls_ssl_setup : %d\r\n", ret);
 800264c:	4601      	mov	r1, r0
 800264e:	481d      	ldr	r0, [pc, #116]	; (80026c4 <wiz_tls_init+0xdc>)
 8002650:	f00c fcec 	bl	800f02c <iprintf>
	mbedtls_ssl_set_hostname(tlsContext->ssl, sslHostName);
 8002654:	491c      	ldr	r1, [pc, #112]	; (80026c8 <wiz_tls_init+0xe0>)
 8002656:	6860      	ldr	r0, [r4, #4]
 8002658:	f00a f93e 	bl	800c8d8 <mbedtls_ssl_set_hostname>

#if defined (MBEDTLS_CERTS_C)
	printf("cert size[%d] = [%s]\r\n", strlen(CERTIFICATE), CERTIFICATE);
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <wiz_tls_init+0xe4>)
 800265e:	481c      	ldr	r0, [pc, #112]	; (80026d0 <wiz_tls_init+0xe8>)
 8002660:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8002664:	f00c fce2 	bl	800f02c <iprintf>
	ret = mbedtls_x509_crt_parse((tlsContext->cacert),(unsigned char *)CERTIFICATE, strlen(CERTIFICATE));
 8002668:	4918      	ldr	r1, [pc, #96]	; (80026cc <wiz_tls_init+0xe4>)
 800266a:	68e0      	ldr	r0, [r4, #12]
 800266c:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8002670:	f00c fb06 	bl	800ec80 <mbedtls_x509_crt_parse>
#if defined (MBEDTLS_DEBUG_C)
	printf("SSL_CERTS_C not define .\r\n");
#endif
#endif
#endif
	if(ret < 0)
 8002674:	1e01      	subs	r1, r0, #0
 8002676:	da02      	bge.n	800267e <wiz_tls_init+0x96>
	{
#if defined (MBEDTLS_CERTS_C)
		printf("x509_crt_parse failed.%x \r\n",ret);
 8002678:	4816      	ldr	r0, [pc, #88]	; (80026d4 <wiz_tls_init+0xec>)
 800267a:	f00c fcd7 	bl	800f02c <iprintf>
	}
	/*
		set ssl session param
	*/

	mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 800267e:	2200      	movs	r2, #0
 8002680:	68e1      	ldr	r1, [r4, #12]
 8002682:	68a0      	ldr	r0, [r4, #8]
 8002684:	f00a f925 	bl	800c8d2 <mbedtls_ssl_conf_ca_chain>
	//mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_REQUIRED);//This option is for server certificate verification
	mbedtls_ssl_conf_authmode(tlsContext->conf, MBEDTLS_SSL_VERIFY_NONE);
 8002688:	68a0      	ldr	r0, [r4, #8]
 800268a:	2100      	movs	r1, #0
 800268c:	f00a f90e 	bl	800c8ac <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_rng(tlsContext->conf,SSLRandomCB,tlsContext->ctr_drbg);
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	68a0      	ldr	r0, [r4, #8]
 8002694:	4910      	ldr	r1, [pc, #64]	; (80026d8 <wiz_tls_init+0xf0>)
 8002696:	f00a f910 	bl	800c8ba <mbedtls_ssl_conf_rng>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ssl_conf_dbg(tlsContext->conf, WIZnetDebugCB, stdout);
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <wiz_tls_init+0xf4>)
 800269c:	68a0      	ldr	r0, [r4, #8]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	490f      	ldr	r1, [pc, #60]	; (80026e0 <wiz_tls_init+0xf8>)
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	f00a f90c 	bl	800c8c0 <mbedtls_ssl_conf_dbg>
#endif
	mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);		 //set client's socket send and receive functions
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	6860      	ldr	r0, [r4, #4]
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <wiz_tls_init+0xfc>)
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <wiz_tls_init+0x100>)
 80026b2:	4631      	mov	r1, r6
 80026b4:	f00a f907 	bl	800c8c6 <mbedtls_ssl_set_bio>

	return 1;
}
 80026b8:	2001      	movs	r0, #1
 80026ba:	b002      	add	sp, #8
 80026bc:	bd70      	pop	{r4, r5, r6, pc}
 80026be:	bf00      	nop
 80026c0:	080109f1 	.word	0x080109f1
 80026c4:	08010a14 	.word	0x08010a14
 80026c8:	20000058 	.word	0x20000058
 80026cc:	0801044b 	.word	0x0801044b
 80026d0:	08010a2d 	.word	0x08010a2d
 80026d4:	08010a44 	.word	0x08010a44
 80026d8:	0800281f 	.word	0x0800281f
 80026dc:	2000008c 	.word	0x2000008c
 80026e0:	08002579 	.word	0x08002579
 80026e4:	0800258d 	.word	0x0800258d
 80026e8:	080025bd 	.word	0x080025bd

080026ec <wiz_tls_deinit>:

/*Free the memory for ssl context*/
void wiz_tls_deinit(wiz_tls_context* tlsContext)
{
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
	/*  free SSL context memory  */
	mbedtls_ssl_free( tlsContext->ssl );
 80026f0:	6840      	ldr	r0, [r0, #4]
 80026f2:	f00a fc8f 	bl	800d014 <mbedtls_ssl_free>
	mbedtls_ssl_config_free( tlsContext->conf );
 80026f6:	68a0      	ldr	r0, [r4, #8]
 80026f8:	f00a fd34 	bl	800d164 <mbedtls_ssl_config_free>
#if defined (MBEDTLS_DEBUG_C)
	mbedtls_ctr_drbg_free( tlsContext->ctr_drbg );
 80026fc:	6820      	ldr	r0, [r4, #0]
 80026fe:	f003 f852 	bl	80057a6 <mbedtls_ctr_drbg_free>
#endif
	//mbedtls_entropy_free( tlsContext->entropy );
#if defined(MBEDTLS_X509_CRT_PARSE_C)
	mbedtls_x509_crt_free( tlsContext->cacert );
 8002702:	68e0      	ldr	r0, [r4, #12]
 8002704:	f00b ff3b 	bl	800e57e <mbedtls_x509_crt_free>
#endif
	free(tlsContext->ctr_drbg);
 8002708:	6820      	ldr	r0, [r4, #0]
 800270a:	f00c fb91 	bl	800ee30 <free>
	free(tlsContext->ssl);
 800270e:	6860      	ldr	r0, [r4, #4]
 8002710:	f00c fb8e 	bl	800ee30 <free>
	free(tlsContext->conf);
 8002714:	68a0      	ldr	r0, [r4, #8]
 8002716:	f00c fb8b 	bl	800ee30 <free>
	free(tlsContext->cacert);
 800271a:	68e0      	ldr	r0, [r4, #12]
}
 800271c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(tlsContext->cacert);
 8002720:	f00c bb86 	b.w	800ee30 <free>

08002724 <wiz_tls_connect>:

/* SSL handshake */
unsigned int wiz_tls_connect(wiz_tls_context* tlsContext, unsigned short port, uint8_t * addr)
{
 8002724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002726:	4605      	mov	r5, r0
 8002728:	460f      	mov	r7, r1
 800272a:	4616      	mov	r6, r2
    int ret;

    memset(tempBuf,0,1024);
 800272c:	2100      	movs	r1, #0
 800272e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002732:	482b      	ldr	r0, [pc, #172]	; (80027e0 <wiz_tls_connect+0xbc>)
 8002734:	f00c fbb8 	bl	800eea8 <memset>

	/*socket open*/
    printf("socket open port : %d \r\n",*((uint8_t*)(tlsContext->ssl->p_bio)));
 8002738:	686b      	ldr	r3, [r5, #4]
 800273a:	482a      	ldr	r0, [pc, #168]	; (80027e4 <wiz_tls_connect+0xc0>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	7819      	ldrb	r1, [r3, #0]
 8002740:	f00c fc74 	bl	800f02c <iprintf>
	ret = socket(*((uint8_t*)(tlsContext->ssl->p_bio)), Sn_MR_TCP, 0, 0x00);
 8002744:	686b      	ldr	r3, [r5, #4]
 8002746:	69d8      	ldr	r0, [r3, #28]
 8002748:	2300      	movs	r3, #0
 800274a:	461a      	mov	r2, r3
 800274c:	2101      	movs	r1, #1
 800274e:	7800      	ldrb	r0, [r0, #0]
 8002750:	f7ff fa9c 	bl	8001c8c <socket>
 8002754:	4604      	mov	r4, r0
	printf("socket[%d] \r\n", ret);
 8002756:	4601      	mov	r1, r0
 8002758:	4823      	ldr	r0, [pc, #140]	; (80027e8 <wiz_tls_connect+0xc4>)
 800275a:	f00c fc67 	bl	800f02c <iprintf>
	if(ret != *((uint8_t*)(tlsContext->ssl->p_bio)))
 800275e:	686b      	ldr	r3, [r5, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	429c      	cmp	r4, r3
 8002766:	d137      	bne.n	80027d8 <wiz_tls_connect+0xb4>
		return ret;

	/*Connect to the target*/
	printf("server ip : %d.%d.%d.%d port : %d \r\n", addr[0], addr[1], addr[2], addr[3], port);
 8002768:	78f0      	ldrb	r0, [r6, #3]
 800276a:	78b3      	ldrb	r3, [r6, #2]
 800276c:	7872      	ldrb	r2, [r6, #1]
 800276e:	7831      	ldrb	r1, [r6, #0]
 8002770:	9000      	str	r0, [sp, #0]
 8002772:	9701      	str	r7, [sp, #4]
 8002774:	481d      	ldr	r0, [pc, #116]	; (80027ec <wiz_tls_connect+0xc8>)
 8002776:	f00c fc59 	bl	800f02c <iprintf>
	ret = connect(*((uint8_t*)tlsContext->ssl->p_bio), addr, port);
 800277a:	686b      	ldr	r3, [r5, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	463a      	mov	r2, r7
 8002780:	4631      	mov	r1, r6
 8002782:	7818      	ldrb	r0, [r3, #0]
 8002784:	f7ff fb14 	bl	8001db0 <connect>
 8002788:	4604      	mov	r4, r0
	printf("init connect[%d] \r\n", ret);
 800278a:	4601      	mov	r1, r0
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <wiz_tls_connect+0xcc>)
 800278e:	f00c fc4d 	bl	800f02c <iprintf>
	if(ret != SOCK_OK)
 8002792:	2c01      	cmp	r4, #1
 8002794:	d120      	bne.n	80027d8 <wiz_tls_connect+0xb4>
		return ret;

#if defined(MBEDTLS_DEBUG_C)
    printf( "  . Performing the SSL/TLS handshake..." );
 8002796:	4817      	ldr	r0, [pc, #92]	; (80027f4 <wiz_tls_connect+0xd0>)
 8002798:	f00c fc48 	bl	800f02c <iprintf>
#endif

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 800279c:	6868      	ldr	r0, [r5, #4]
 800279e:	f00a f8f3 	bl	800c988 <mbedtls_ssl_handshake>
 80027a2:	4604      	mov	r4, r0
 80027a4:	b938      	cbnz	r0, 80027b6 <wiz_tls_connect+0x92>
            return( -1 );
        }
    }

#if defined(MBEDTLS_DEBUG_C)
    printf( "ok\n\r    [ Ciphersuite is %s ]\n\r",
 80027a6:	6868      	ldr	r0, [r5, #4]
 80027a8:	f00a f8cc 	bl	800c944 <mbedtls_ssl_get_ciphersuite>
 80027ac:	4601      	mov	r1, r0
 80027ae:	4812      	ldr	r0, [pc, #72]	; (80027f8 <wiz_tls_connect+0xd4>)
 80027b0:	f00c fc3c 	bl	800f02c <iprintf>
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
#endif

    return( 0 );
 80027b4:	e010      	b.n	80027d8 <wiz_tls_connect+0xb4>
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 80027b6:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80027ba:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 80027be:	d0ed      	beq.n	800279c <wiz_tls_connect+0x78>
            mbedtls_strerror( ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
 80027c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c4:	4906      	ldr	r1, [pc, #24]	; (80027e0 <wiz_tls_connect+0xbc>)
 80027c6:	f003 fa79 	bl	8005cbc <mbedtls_strerror>
            printf( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
 80027ca:	4621      	mov	r1, r4
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <wiz_tls_connect+0xbc>)
 80027ce:	480b      	ldr	r0, [pc, #44]	; (80027fc <wiz_tls_connect+0xd8>)
 80027d0:	f00c fc2c 	bl	800f02c <iprintf>
            return( -1 );
 80027d4:	f04f 34ff 	mov.w	r4, #4294967295
}
 80027d8:	4620      	mov	r0, r4
 80027da:	b003      	add	sp, #12
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000131 	.word	0x20000131
 80027e4:	08010914 	.word	0x08010914
 80027e8:	0801092d 	.word	0x0801092d
 80027ec:	0801093b 	.word	0x0801093b
 80027f0:	08010960 	.word	0x08010960
 80027f4:	08010974 	.word	0x08010974
 80027f8:	080109d1 	.word	0x080109d1
 80027fc:	0801099c 	.word	0x0801099c

08002800 <wiz_tls_read>:

unsigned int wiz_tls_read(wiz_tls_context* tlsContext, unsigned char* readbuf, unsigned int len)
{
	return mbedtls_ssl_read( tlsContext->ssl, readbuf, len );
 8002800:	6840      	ldr	r0, [r0, #4]
 8002802:	f00a b8ef 	b.w	800c9e4 <mbedtls_ssl_read>

08002806 <wiz_tls_write>:
}

unsigned int wiz_tls_write(wiz_tls_context* tlsContext, unsigned char* writebuf, unsigned int len)
{
	return mbedtls_ssl_write( tlsContext->ssl, writebuf, len );
 8002806:	6840      	ldr	r0, [r0, #4]
 8002808:	f00a b9e8 	b.w	800cbdc <mbedtls_ssl_write>

0800280c <wiz_tls_close_notify>:
	}
}

/* ssl Close notify */
unsigned int wiz_tls_close_notify(wiz_tls_context* tlsContext)
{
 800280c:	b510      	push	{r4, lr}
 800280e:	4604      	mov	r4, r0
	uint32_t rc;
	do rc = mbedtls_ssl_close_notify( tlsContext->ssl );
 8002810:	6860      	ldr	r0, [r4, #4]
 8002812:	f00a fa53 	bl	800ccbc <mbedtls_ssl_close_notify>
	while( rc == MBEDTLS_ERR_SSL_WANT_WRITE );
 8002816:	f510 4fd1 	cmn.w	r0, #26752	; 0x6880
 800281a:	d0f9      	beq.n	8002810 <wiz_tls_close_notify+0x4>
	//SSLDeinit(tlsContext);
	return rc;
}
 800281c:	bd10      	pop	{r4, pc}

0800281e <SSLRandomCB>:
{
	srand(randSeed);
}

int SSLRandomCB( void *p_rng, unsigned char *output, size_t output_len )
{
 800281e:	b570      	push	{r4, r5, r6, lr}
 8002820:	460d      	mov	r5, r1
    int i;

	if(output_len <= 0)
 8002822:	b18a      	cbz	r2, 8002848 <SSLRandomCB+0x2a>
 8002824:	188c      	adds	r4, r1, r2
	{
         return (1);
	}
    for(i = 0;i < output_len;i++)
    {
       *output++ = rand() % 0xff;
 8002826:	26ff      	movs	r6, #255	; 0xff
    for(i = 0;i < output_len;i++)
 8002828:	42a5      	cmp	r5, r4
 800282a:	d105      	bne.n	8002838 <SSLRandomCB+0x1a>
	}
    srand(rand());
 800282c:	f00c fca2 	bl	800f174 <rand>
 8002830:	f00c fc78 	bl	800f124 <srand>
	return (0);
 8002834:	2000      	movs	r0, #0
 8002836:	bd70      	pop	{r4, r5, r6, pc}
       *output++ = rand() % 0xff;
 8002838:	f00c fc9c 	bl	800f174 <rand>
 800283c:	fb90 f3f6 	sdiv	r3, r0, r6
 8002840:	4418      	add	r0, r3
 8002842:	f805 0b01 	strb.w	r0, [r5], #1
 8002846:	e7ef      	b.n	8002828 <SSLRandomCB+0xa>
         return (1);
 8002848:	2001      	movs	r0, #1
}
 800284a:	bd70      	pop	{r4, r5, r6, pc}

0800284c <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 800284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002850:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8002854:	2301      	movs	r3, #1
 8002856:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 8002858:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
        pow[i] = x;
 800285c:	a804      	add	r0, sp, #16
        log[x] = i;
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        pow[i] = x;
 8002862:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8002866:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800286a:	bf18      	it	ne
 800286c:	201b      	movne	r0, #27
 800286e:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    for( i = 0, x = 1; i < 256; i++ )
 8002872:	3201      	adds	r2, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8002874:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
 8002876:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800287a:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
 800287c:	d1ee      	bne.n	800285c <aes_gen_tables+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800287e:	4c68      	ldr	r4, [pc, #416]	; (8002a20 <aes_gen_tables+0x1d4>)
 8002880:	2301      	movs	r3, #1
 8002882:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 8002884:	f013 0080 	ands.w	r0, r3, #128	; 0x80
        RCON[i] = (uint32_t) x;
 8002888:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 800288c:	bf18      	it	ne
 800288e:	201b      	movne	r0, #27
    for( i = 0, x = 1; i < 10; i++ )
 8002890:	3201      	adds	r2, #1
        x = XTIME( x ) & 0xFF;
 8002892:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
    for( i = 0, x = 1; i < 10; i++ )
 8002896:	2a0a      	cmp	r2, #10
        x = XTIME( x ) & 0xFF;
 8002898:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
 800289a:	d1f3      	bne.n	8002884 <aes_gen_tables+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 800289c:	4e61      	ldr	r6, [pc, #388]	; (8002a24 <aes_gen_tables+0x1d8>)
    RSb[0x63] = 0x00;
 800289e:	4d62      	ldr	r5, [pc, #392]	; (8002a28 <aes_gen_tables+0x1dc>)
    FSb[0x00] = 0x63;
 80028a0:	2363      	movs	r3, #99	; 0x63
 80028a2:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 80028aa:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 80028ac:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 80028b0:	aa04      	add	r2, sp, #16
 80028b2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80028ba:	ea4f 1ee3 	mov.w	lr, r3, asr #7
 80028be:	ea4e 0e43 	orr.w	lr, lr, r3, lsl #1
 80028c2:	fa5f fe8e 	uxtb.w	lr, lr
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80028c6:	ea4f 17ee 	mov.w	r7, lr, asr #7
 80028ca:	ea47 074e 	orr.w	r7, r7, lr, lsl #1
 80028ce:	b2ff      	uxtb	r7, r7
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80028d0:	11f8      	asrs	r0, r7, #7
 80028d2:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 80028d6:	b2c0      	uxtb	r0, r0
 80028d8:	f083 0363 	eor.w	r3, r3, #99	; 0x63
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80028dc:	11c2      	asrs	r2, r0, #7
 80028de:	ea83 030e 	eor.w	r3, r3, lr
 80028e2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80028e6:	407b      	eors	r3, r7
 80028e8:	4043      	eors	r3, r0
 80028ea:	b2d2      	uxtb	r2, r2
        x ^= y ^ 0x63;
 80028ec:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 80028ee:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 80028f0:	54ec      	strb	r4, [r5, r3]
    for( i = 1; i < 256; i++ )
 80028f2:	3401      	adds	r4, #1
 80028f4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80028f8:	d1d8      	bne.n	80028ac <aes_gen_tables+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80028fa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80028fc:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80028fe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002900:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8002902:	6acf      	ldr	r7, [r1, #44]	; 0x2c
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8002904:	6b4b      	ldr	r3, [r1, #52]	; 0x34
        x = FSb[i];
 8002906:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8002a24 <aes_gen_tables+0x1d8>
        FT0[i] = ( (uint32_t) y       ) ^
 800290a:	f8df c130 	ldr.w	ip, [pc, #304]	; 8002a3c <aes_gen_tables+0x1f0>
        FT1[i] = ROTL8( FT0[i] );
 800290e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8002a40 <aes_gen_tables+0x1f4>
        FT2[i] = ROTL8( FT1[i] );
 8002912:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8002a44 <aes_gen_tables+0x1f8>
        FT3[i] = ROTL8( FT2[i] );
 8002916:	f8df a130 	ldr.w	sl, [pc, #304]	; 8002a48 <aes_gen_tables+0x1fc>
        x = RSb[i];
 800291a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002a28 <aes_gen_tables+0x1dc>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800291e:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8002920:	2200      	movs	r2, #0
        x = FSb[i];
 8002922:	f812 100e 	ldrb.w	r1, [r2, lr]
        y = XTIME( x ) & 0xFF;
 8002926:	f011 0f80 	tst.w	r1, #128	; 0x80
 800292a:	bf14      	ite	ne
 800292c:	201b      	movne	r0, #27
 800292e:	2000      	moveq	r0, #0
 8002930:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
                 ( (uint32_t) x << 16 ) ^
 8002934:	040b      	lsls	r3, r1, #16
        y = XTIME( x ) & 0xFF;
 8002936:	b2c0      	uxtb	r0, r0
                 ( (uint32_t) x <<  8 ) ^
 8002938:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800293c:	4043      	eors	r3, r0
        z =  ( y ^ x ) & 0xFF;
 800293e:	4041      	eors	r1, r0
                 ( (uint32_t) x << 16 ) ^
 8002940:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        FT1[i] = ROTL8( FT0[i] );
 8002944:	ea4f 6133 	mov.w	r1, r3, ror #24
        FT0[i] = ( (uint32_t) y       ) ^
 8002948:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
        FT1[i] = ROTL8( FT0[i] );
 800294c:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8002950:	ea4f 4133 	mov.w	r1, r3, ror #16
        FT3[i] = ROTL8( FT2[i] );
 8002954:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002958:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
        x = RSb[i];
 800295c:	f81b 3002 	ldrb.w	r3, [fp, r2]
        FT2[i] = ROTL8( FT1[i] );
 8002960:	f849 1022 	str.w	r1, [r9, r2, lsl #2]
 8002964:	0094      	lsls	r4, r2, #2
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8002966:	2b00      	cmp	r3, #0
 8002968:	d054      	beq.n	8002a14 <aes_gen_tables+0x1c8>
 800296a:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 800296e:	9801      	ldr	r0, [sp, #4]
 8002970:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002974:	1845      	adds	r5, r0, r1
 8002976:	20ff      	movs	r0, #255	; 0xff
 8002978:	fb95 f6f0 	sdiv	r6, r5, r0
 800297c:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8002980:	1bae      	subs	r6, r5, r6
 8002982:	ad04      	add	r5, sp, #16
 8002984:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8002988:	9e02      	ldr	r6, [sp, #8]
 800298a:	4431      	add	r1, r6
 800298c:	fb91 f0f0 	sdiv	r0, r1, r0
 8002990:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8002994:	1a09      	subs	r1, r1, r0
 8002996:	a804      	add	r0, sp, #16
 8002998:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800299c:	0209      	lsls	r1, r1, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800299e:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d03a      	beq.n	8002a1a <aes_gen_tables+0x1ce>
 80029a4:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80029a8:	9803      	ldr	r0, [sp, #12]
 80029aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80029ae:	4401      	add	r1, r0
 80029b0:	20ff      	movs	r0, #255	; 0xff
 80029b2:	fb91 f0f0 	sdiv	r0, r1, r0
 80029b6:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80029ba:	1a08      	subs	r0, r1, r0
 80029bc:	a904      	add	r1, sp, #16
 80029be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80029c2:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80029c4:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80029c6:	b173      	cbz	r3, 80029e6 <aes_gen_tables+0x19a>
 80029c8:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80029cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029d0:	21ff      	movs	r1, #255	; 0xff
 80029d2:	443b      	add	r3, r7
 80029d4:	fb93 f1f1 	sdiv	r1, r3, r1
 80029d8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80029dc:	1a59      	subs	r1, r3, r1
 80029de:	ab04      	add	r3, sp, #16
 80029e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029e4:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80029e6:	405d      	eors	r5, r3
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <aes_gen_tables+0x1e0>)
 80029ea:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <aes_gen_tables+0x1e4>)
 80029ee:	ea4f 6135 	mov.w	r1, r5, ror #24
 80029f2:	50e1      	str	r1, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <aes_gen_tables+0x1e8>)
 80029f6:	ea4f 4135 	mov.w	r1, r5, ror #16
 80029fa:	50e1      	str	r1, [r4, r3]
    for( i = 0; i < 256; i++ )
 80029fc:	3201      	adds	r2, #1
        RT3[i] = ROTL8( RT2[i] );
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <aes_gen_tables+0x1ec>)
 8002a00:	ea4f 2535 	mov.w	r5, r5, ror #8
    for( i = 0; i < 256; i++ )
 8002a04:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        RT3[i] = ROTL8( RT2[i] );
 8002a08:	50e5      	str	r5, [r4, r3]
    for( i = 0; i < 256; i++ )
 8002a0a:	d18a      	bne.n	8002922 <aes_gen_tables+0xd6>
    }
}
 8002a0c:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 8002a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8002a14:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8002a16:	4619      	mov	r1, r3
 8002a18:	e7c1      	b.n	800299e <aes_gen_tables+0x152>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	e7d2      	b.n	80029c4 <aes_gen_tables+0x178>
 8002a1e:	bf00      	nop
 8002a20:	20001634 	.word	0x20001634
 8002a24:	20000531 	.word	0x20000531
 8002a28:	2000165c 	.word	0x2000165c
 8002a2c:	2000175c 	.word	0x2000175c
 8002a30:	20001b5c 	.word	0x20001b5c
 8002a34:	20001f5c 	.word	0x20001f5c
 8002a38:	2000235c 	.word	0x2000235c
 8002a3c:	20000634 	.word	0x20000634
 8002a40:	20000a34 	.word	0x20000a34
 8002a44:	20000e34 	.word	0x20000e34
 8002a48:	20001234 	.word	0x20001234

08002a4c <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8002a4c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002a50:	2100      	movs	r1, #0
 8002a52:	f00c ba29 	b.w	800eea8 <memset>

08002a56 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 8002a56:	b120      	cbz	r0, 8002a62 <mbedtls_aes_free+0xc>
 8002a58:	f500 738c 	add.w	r3, r0, #280	; 0x118
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4298      	cmp	r0, r3
 8002a60:	d100      	bne.n	8002a64 <mbedtls_aes_free+0xe>
 8002a62:	4770      	bx	lr
 8002a64:	7002      	strb	r2, [r0, #0]
 8002a66:	3001      	adds	r0, #1
 8002a68:	e7f9      	b.n	8002a5e <mbedtls_aes_free+0x8>
	...

08002a6c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8002a6e:	4f8a      	ldr	r7, [pc, #552]	; (8002c98 <mbedtls_aes_setkey_enc+0x22c>)
 8002a70:	683b      	ldr	r3, [r7, #0]
{
 8002a72:	4605      	mov	r5, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	4616      	mov	r6, r2
    if( aes_init_done == 0 )
 8002a78:	b91b      	cbnz	r3, 8002a82 <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 8002a7a:	f7ff fee7 	bl	800284c <aes_gen_tables>
        aes_init_done = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	603b      	str	r3, [r7, #0]

    }
#endif

    switch( keybits )
 8002a82:	2ec0      	cmp	r6, #192	; 0xc0
 8002a84:	d04f      	beq.n	8002b26 <mbedtls_aes_setkey_enc+0xba>
 8002a86:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8002a8a:	d04e      	beq.n	8002b2a <mbedtls_aes_setkey_enc+0xbe>
 8002a8c:	2e80      	cmp	r6, #128	; 0x80
 8002a8e:	f040 80ff 	bne.w	8002c90 <mbedtls_aes_setkey_enc+0x224>
    {
        case 128: ctx->nr = 10; break;
 8002a92:	230a      	movs	r3, #10

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8002a94:	f105 0008 	add.w	r0, r5, #8
        case 256: ctx->nr = 14; break;
 8002a98:	602b      	str	r3, [r5, #0]
    ctx->rk = RK = ctx->buf;
 8002a9a:	6068      	str	r0, [r5, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002a9c:	0976      	lsrs	r6, r6, #5
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	42b2      	cmp	r2, r6
 8002aa4:	f101 0104 	add.w	r1, r1, #4
 8002aa8:	d141      	bne.n	8002b2e <mbedtls_aes_setkey_enc+0xc2>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 8002aaa:	682b      	ldr	r3, [r5, #0]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	d050      	beq.n	8002b52 <mbedtls_aes_setkey_enc+0xe6>
 8002ab0:	2b0e      	cmp	r3, #14
 8002ab2:	f000 808f 	beq.w	8002bd4 <mbedtls_aes_setkey_enc+0x168>
 8002ab6:	2b0a      	cmp	r3, #10
 8002ab8:	d133      	bne.n	8002b22 <mbedtls_aes_setkey_enc+0xb6>
 8002aba:	f105 0018 	add.w	r0, r5, #24
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8002abe:	4e77      	ldr	r6, [pc, #476]	; (8002c9c <mbedtls_aes_setkey_enc+0x230>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002ac0:	4d77      	ldr	r5, [pc, #476]	; (8002ca0 <mbedtls_aes_setkey_enc+0x234>)
    switch( ctx->nr )
 8002ac2:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002ac4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002ac8:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002acc:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8002ad0:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002ad2:	f3c1 2207 	ubfx	r2, r1, #8, #8
            for( i = 0; i < 10; i++, RK += 4 )
 8002ad6:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002ad8:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002ada:	4053      	eors	r3, r2
 8002adc:	0e0a      	lsrs	r2, r1, #24
            for( i = 0; i < 10; i++, RK += 4 )
 8002ade:	2c0a      	cmp	r4, #10
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002ae0:	5caa      	ldrb	r2, [r5, r2]
 8002ae2:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8002ae6:	b2ca      	uxtb	r2, r1
 8002ae8:	f100 0010 	add.w	r0, r0, #16
 8002aec:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002aee:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002af2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8002af6:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002af8:	ea83 2302 	eor.w	r3, r3, r2, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 8002afc:	f850 2c1c 	ldr.w	r2, [r0, #-28]
                RK[4]  = RK[0] ^ RCON[i] ^
 8002b00:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[5]  = RK[1] ^ RK[4];
 8002b04:	ea83 0302 	eor.w	r3, r3, r2
                RK[6]  = RK[2] ^ RK[5];
 8002b08:	f850 2c18 	ldr.w	r2, [r0, #-24]
                RK[5]  = RK[1] ^ RK[4];
 8002b0c:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[6]  = RK[2] ^ RK[5];
 8002b10:	ea83 0302 	eor.w	r3, r3, r2
 8002b14:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[7]  = RK[3] ^ RK[6];
 8002b18:	ea83 0301 	eor.w	r3, r3, r1
 8002b1c:	f840 3c04 	str.w	r3, [r0, #-4]
            for( i = 0; i < 10; i++, RK += 4 )
 8002b20:	d1d0      	bne.n	8002ac4 <mbedtls_aes_setkey_enc+0x58>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 8002b22:	2000      	movs	r0, #0
}
 8002b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 192: ctx->nr = 12; break;
 8002b26:	230c      	movs	r3, #12
 8002b28:	e7b4      	b.n	8002a94 <mbedtls_aes_setkey_enc+0x28>
        case 256: ctx->nr = 14; break;
 8002b2a:	230e      	movs	r3, #14
 8002b2c:	e7b2      	b.n	8002a94 <mbedtls_aes_setkey_enc+0x28>
        GET_UINT32_LE( RK[i], key, i << 2 );
 8002b2e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8002b32:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002b3c:	f811 4c04 	ldrb.w	r4, [r1, #-4]
 8002b40:	4323      	orrs	r3, r4
 8002b42:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8002b46:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002b4a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002b4e:	3201      	adds	r2, #1
 8002b50:	e7a7      	b.n	8002aa2 <mbedtls_aes_setkey_enc+0x36>
 8002b52:	f105 0020 	add.w	r0, r5, #32
                RK[6]  = RK[0] ^ RCON[i] ^
 8002b56:	4e51      	ldr	r6, [pc, #324]	; (8002c9c <mbedtls_aes_setkey_enc+0x230>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002b58:	4d51      	ldr	r5, [pc, #324]	; (8002ca0 <mbedtls_aes_setkey_enc+0x234>)
    switch( ctx->nr )
 8002b5a:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002b5c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002b60:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002b64:	f850 3c18 	ldr.w	r3, [r0, #-24]
 8002b68:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002b6a:	f3c1 2207 	ubfx	r2, r1, #8, #8
            for( i = 0; i < 8; i++, RK += 6 )
 8002b6e:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002b70:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002b72:	4053      	eors	r3, r2
 8002b74:	0e0a      	lsrs	r2, r1, #24
            for( i = 0; i < 8; i++, RK += 6 )
 8002b76:	2c08      	cmp	r4, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002b78:	5caa      	ldrb	r2, [r5, r2]
 8002b7a:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8002b7e:	b2ca      	uxtb	r2, r1
 8002b80:	f100 0018 	add.w	r0, r0, #24
 8002b84:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002b86:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8002b8a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8002b8e:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002b90:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 8002b94:	f850 2c2c 	ldr.w	r2, [r0, #-44]
                RK[6]  = RK[0] ^ RCON[i] ^
 8002b98:	f840 3c18 	str.w	r3, [r0, #-24]
                RK[7]  = RK[1] ^ RK[6];
 8002b9c:	ea83 0302 	eor.w	r3, r3, r2
                RK[8]  = RK[2] ^ RK[7];
 8002ba0:	f850 2c28 	ldr.w	r2, [r0, #-40]
                RK[7]  = RK[1] ^ RK[6];
 8002ba4:	f840 3c14 	str.w	r3, [r0, #-20]
                RK[8]  = RK[2] ^ RK[7];
 8002ba8:	ea83 0302 	eor.w	r3, r3, r2
                RK[9]  = RK[3] ^ RK[8];
 8002bac:	f850 2c24 	ldr.w	r2, [r0, #-36]
                RK[8]  = RK[2] ^ RK[7];
 8002bb0:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[9]  = RK[3] ^ RK[8];
 8002bb4:	ea83 0302 	eor.w	r3, r3, r2
                RK[10] = RK[4] ^ RK[9];
 8002bb8:	f850 2c20 	ldr.w	r2, [r0, #-32]
                RK[9]  = RK[3] ^ RK[8];
 8002bbc:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[10] = RK[4] ^ RK[9];
 8002bc0:	ea83 0302 	eor.w	r3, r3, r2
 8002bc4:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[11] = RK[5] ^ RK[10];
 8002bc8:	ea83 0301 	eor.w	r3, r3, r1
 8002bcc:	f840 3c04 	str.w	r3, [r0, #-4]
            for( i = 0; i < 8; i++, RK += 6 )
 8002bd0:	d1c4      	bne.n	8002b5c <mbedtls_aes_setkey_enc+0xf0>
 8002bd2:	e7a6      	b.n	8002b22 <mbedtls_aes_setkey_enc+0xb6>
 8002bd4:	f105 0028 	add.w	r0, r5, #40	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <mbedtls_aes_setkey_enc+0x234>)
                RK[8]  = RK[0] ^ RCON[i] ^
 8002bda:	4d30      	ldr	r5, [pc, #192]	; (8002c9c <mbedtls_aes_setkey_enc+0x230>)
    switch( ctx->nr )
 8002bdc:	2400      	movs	r4, #0
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002bde:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8002be2:	f850 1c04 	ldr.w	r1, [r0, #-4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002be6:	f850 6c20 	ldr.w	r6, [r0, #-32]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8002bea:	f850 7c10 	ldr.w	r7, [r0, #-16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002bee:	4073      	eors	r3, r6
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8002bf0:	f3c1 2607 	ubfx	r6, r1, #8, #8
            for( i = 0; i < 7; i++, RK += 8 )
 8002bf4:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8002bf6:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002bf8:	4073      	eors	r3, r6
 8002bfa:	0e0e      	lsrs	r6, r1, #24
            for( i = 0; i < 7; i++, RK += 8 )
 8002bfc:	2c07      	cmp	r4, #7
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002bfe:	5d96      	ldrb	r6, [r2, r6]
 8002c00:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8002c04:	b2ce      	uxtb	r6, r1
 8002c06:	f100 0020 	add.w	r0, r0, #32
 8002c0a:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002c0c:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8002c10:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8002c14:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8002c16:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 8002c1a:	f850 6c3c 	ldr.w	r6, [r0, #-60]
                RK[8]  = RK[0] ^ RCON[i] ^
 8002c1e:	f840 3c20 	str.w	r3, [r0, #-32]
                RK[9]  = RK[1] ^ RK[8];
 8002c22:	ea83 0306 	eor.w	r3, r3, r6
                RK[10] = RK[2] ^ RK[9];
 8002c26:	f850 6c38 	ldr.w	r6, [r0, #-56]
                RK[9]  = RK[1] ^ RK[8];
 8002c2a:	f840 3c1c 	str.w	r3, [r0, #-28]
                RK[10] = RK[2] ^ RK[9];
 8002c2e:	ea83 0306 	eor.w	r3, r3, r6
                RK[11] = RK[3] ^ RK[10];
 8002c32:	f850 6c34 	ldr.w	r6, [r0, #-52]
                RK[10] = RK[2] ^ RK[9];
 8002c36:	f840 3c18 	str.w	r3, [r0, #-24]
                RK[11] = RK[3] ^ RK[10];
 8002c3a:	ea83 0306 	eor.w	r3, r3, r6
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8002c3e:	b2de      	uxtb	r6, r3
                RK[11] = RK[3] ^ RK[10];
 8002c40:	f840 3c14 	str.w	r3, [r0, #-20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8002c44:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8002c46:	ea86 0607 	eor.w	r6, r6, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8002c4a:	ea4f 6713 	mov.w	r7, r3, lsr #24
 8002c4e:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8002c50:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8002c54:	f3c3 2707 	ubfx	r7, r3, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8002c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8002c5c:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	ea86 2607 	eor.w	r6, r6, r7, lsl #8
 8002c64:	ea86 4303 	eor.w	r3, r6, r3, lsl #16
                RK[13] = RK[5] ^ RK[12];
 8002c68:	f850 6c2c 	ldr.w	r6, [r0, #-44]
                RK[12] = RK[4] ^
 8002c6c:	f840 3c10 	str.w	r3, [r0, #-16]
                RK[13] = RK[5] ^ RK[12];
 8002c70:	ea83 0306 	eor.w	r3, r3, r6
                RK[14] = RK[6] ^ RK[13];
 8002c74:	f850 6c28 	ldr.w	r6, [r0, #-40]
                RK[13] = RK[5] ^ RK[12];
 8002c78:	f840 3c0c 	str.w	r3, [r0, #-12]
                RK[14] = RK[6] ^ RK[13];
 8002c7c:	ea83 0306 	eor.w	r3, r3, r6
                RK[15] = RK[7] ^ RK[14];
 8002c80:	ea81 0103 	eor.w	r1, r1, r3
                RK[14] = RK[6] ^ RK[13];
 8002c84:	f840 3c08 	str.w	r3, [r0, #-8]
                RK[15] = RK[7] ^ RK[14];
 8002c88:	f840 1c04 	str.w	r1, [r0, #-4]
            for( i = 0; i < 7; i++, RK += 8 )
 8002c8c:	d1a7      	bne.n	8002bde <mbedtls_aes_setkey_enc+0x172>
 8002c8e:	e748      	b.n	8002b22 <mbedtls_aes_setkey_enc+0xb6>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8002c90:	f06f 001f 	mvn.w	r0, #31
 8002c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000275c 	.word	0x2000275c
 8002c9c:	20001634 	.word	0x20001634
 8002ca0:	20000531 	.word	0x20000531

08002ca4 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca8:	b0c9      	sub	sp, #292	; 0x124
 8002caa:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 8002cac:	a802      	add	r0, sp, #8
{
 8002cae:	460d      	mov	r5, r1
 8002cb0:	4616      	mov	r6, r2
    mbedtls_aes_init( &cty );
 8002cb2:	f7ff fecb 	bl	8002a4c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8002cb6:	f104 0308 	add.w	r3, r4, #8
 8002cba:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	a802      	add	r0, sp, #8
 8002cc2:	f7ff fed3 	bl	8002a6c <mbedtls_aes_setkey_enc>
 8002cc6:	4680      	mov	r8, r0
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d14c      	bne.n	8002d66 <mbedtls_aes_setkey_dec+0xc2>
        goto exit;

    ctx->nr = cty.nr;
 8002ccc:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8002cce:	9803      	ldr	r0, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8002cd0:	4d28      	ldr	r5, [pc, #160]	; (8002d74 <mbedtls_aes_setkey_dec+0xd0>)
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 8002cd2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002d7c <mbedtls_aes_setkey_dec+0xd8>
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8002cd6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8002d80 <mbedtls_aes_setkey_dec+0xdc>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8002cda:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8002d84 <mbedtls_aes_setkey_dec+0xe0>
    ctx->nr = cty.nr;
 8002cde:	6021      	str	r1, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 8002ce0:	010a      	lsls	r2, r1, #4
 8002ce2:	1883      	adds	r3, r0, r2
    *RK++ = *SK++;
 8002ce4:	5882      	ldr	r2, [r0, r2]
 8002ce6:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 8002cf0:	68d8      	ldr	r0, [r3, #12]
 8002cf2:	6160      	str	r0, [r4, #20]
 8002cf4:	f104 0218 	add.w	r2, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8002cf8:	3901      	subs	r1, #1
 8002cfa:	3b10      	subs	r3, #16
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	dd2a      	ble.n	8002d56 <mbedtls_aes_setkey_dec+0xb2>
 8002d00:	1f1e      	subs	r6, r3, #4
 8002d02:	f1a2 0e04 	sub.w	lr, r2, #4
 8002d06:	f103 0c0c 	add.w	ip, r3, #12
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8002d0a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8002d0e:	b2c4      	uxtb	r4, r0
        for( j = 0; j < 4; j++, SK++ )
 8002d10:	45b4      	cmp	ip, r6
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8002d12:	5d2f      	ldrb	r7, [r5, r4]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 8002d14:	ea4f 6410 	mov.w	r4, r0, lsr #24
 8002d18:	5d2c      	ldrb	r4, [r5, r4]
 8002d1a:	9401      	str	r4, [sp, #4]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8002d1c:	4c16      	ldr	r4, [pc, #88]	; (8002d78 <mbedtls_aes_setkey_dec+0xd4>)
 8002d1e:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8002d22:	9c01      	ldr	r4, [sp, #4]
 8002d24:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8002d28:	ea87 0704 	eor.w	r7, r7, r4
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8002d2c:	f3c0 2407 	ubfx	r4, r0, #8, #8
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8002d30:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 8002d34:	5d2c      	ldrb	r4, [r5, r4]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 8002d36:	5c28      	ldrb	r0, [r5, r0]
 8002d38:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8002d3c:	ea84 0407 	eor.w	r4, r4, r7
 8002d40:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]
 8002d44:	ea84 0407 	eor.w	r4, r4, r7
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 8002d48:	f84e 4f04 	str.w	r4, [lr, #4]!
        for( j = 0; j < 4; j++, SK++ )
 8002d4c:	d1dd      	bne.n	8002d0a <mbedtls_aes_setkey_dec+0x66>
 8002d4e:	3210      	adds	r2, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8002d50:	3901      	subs	r1, #1
 8002d52:	3b10      	subs	r3, #16
 8002d54:	e7d2      	b.n	8002cfc <mbedtls_aes_setkey_dec+0x58>
        }
    }

    *RK++ = *SK++;
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 8002d66:	a802      	add	r0, sp, #8
 8002d68:	f7ff fe75 	bl	8002a56 <mbedtls_aes_free>

    return( ret );
}
 8002d6c:	4640      	mov	r0, r8
 8002d6e:	b049      	add	sp, #292	; 0x124
 8002d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d74:	20000531 	.word	0x20000531
 8002d78:	2000175c 	.word	0x2000175c
 8002d7c:	2000235c 	.word	0x2000235c
 8002d80:	20001b5c 	.word	0x20001b5c
 8002d84:	20001f5c 	.word	0x20001f5c

08002d88 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8002d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8002d8c:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8002d8e:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8002d90:	680c      	ldr	r4, [r1, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8002d92:	f8d1 c008 	ldr.w	ip, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8002d96:	68cf      	ldr	r7, [r1, #12]
 8002d98:	68e9      	ldr	r1, [r5, #12]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8002d9a:	682b      	ldr	r3, [r5, #0]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8002d9c:	f8df e378 	ldr.w	lr, [pc, #888]	; 8003118 <mbedtls_internal_aes_encrypt+0x390>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8002da0:	404f      	eors	r7, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002da2:	6801      	ldr	r1, [r0, #0]
 8002da4:	48da      	ldr	r0, [pc, #872]	; (8003110 <mbedtls_internal_aes_encrypt+0x388>)
 8002da6:	1049      	asrs	r1, r1, #1
 8002da8:	3901      	subs	r1, #1
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8002daa:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8002dac:	686b      	ldr	r3, [r5, #4]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002dae:	9101      	str	r1, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8002db0:	4629      	mov	r1, r5
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8002db2:	4073      	eors	r3, r6
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8002db4:	68ae      	ldr	r6, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8002db6:	f851 9f10 	ldr.w	r9, [r1, #16]!
 8002dba:	4dd6      	ldr	r5, [pc, #856]	; (8003114 <mbedtls_internal_aes_encrypt+0x38c>)
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8002dbc:	ea8c 0c06 	eor.w	ip, ip, r6
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002dc0:	9e01      	ldr	r6, [sp, #4]
 8002dc2:	2e00      	cmp	r6, #0
 8002dc4:	4688      	mov	r8, r1
 8002dc6:	fa5f fa84 	uxtb.w	sl, r4
 8002dca:	f101 0120 	add.w	r1, r1, #32
 8002dce:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 8002dd2:	f300 80d1 	bgt.w	8002f78 <mbedtls_internal_aes_encrypt+0x1f0>
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8002dd6:	f850 602b 	ldr.w	r6, [r0, fp, lsl #2]
 8002dda:	f855 102a 	ldr.w	r1, [r5, sl, lsl #2]
 8002dde:	f8df e340 	ldr.w	lr, [pc, #832]	; 8003120 <mbedtls_internal_aes_encrypt+0x398>
 8002de2:	4071      	eors	r1, r6
 8002de4:	ea81 0909 	eor.w	r9, r1, r9
 8002de8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002dec:	4eca      	ldr	r6, [pc, #808]	; (8003118 <mbedtls_internal_aes_encrypt+0x390>)
 8002dee:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8002df2:	ea89 0901 	eor.w	r9, r9, r1
 8002df6:	f3cc 4107 	ubfx	r1, ip, #16, #8
 8002dfa:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8002dfe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8002e02:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 8002e06:	ea89 0901 	eor.w	r9, r9, r1
 8002e0a:	b2d9      	uxtb	r1, r3
 8002e0c:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8002e10:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8002e14:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8002e18:	ea81 0a0a 	eor.w	sl, r1, sl
 8002e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002e20:	ea8a 0a01 	eor.w	sl, sl, r1
 8002e24:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8002e28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002e2c:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8002e30:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002e34:	ea8a 0a01 	eor.w	sl, sl, r1
 8002e38:	f3c7 4107 	ubfx	r1, r7, #16, #8
 8002e3c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8002e40:	ea8a 0a01 	eor.w	sl, sl, r1
 8002e44:	fa5f f18c 	uxtb.w	r1, ip
 8002e48:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8002e4c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8002e50:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002e54:	ea81 0b0b 	eor.w	fp, r1, fp
 8002e58:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8002e5c:	ea8b 0101 	eor.w	r1, fp, r1
 8002e60:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8002e64:	b2ff      	uxtb	r7, r7
 8002e66:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8002e6a:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8002e6e:	ea81 010b 	eor.w	r1, r1, fp
 8002e72:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 8002e76:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002e7a:	4045      	eors	r5, r0
 8002e7c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002e80:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8002e84:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8002e88:	4068      	eors	r0, r5
 8002e8a:	4060      	eors	r0, r4
 8002e8c:	4058      	eors	r0, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8002e8e:	fa5f f489 	uxtb.w	r4, r9
 8002e92:	4ba2      	ldr	r3, [pc, #648]	; (800311c <mbedtls_internal_aes_encrypt+0x394>)
 8002e94:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 8002e96:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8002e9a:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8002e9c:	0e04      	lsrs	r4, r0, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8002e9e:	ea81 010b 	eor.w	r1, r1, fp
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8002ea2:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8002ea4:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8002ea8:	f3ca 2407 	ubfx	r4, sl, #8, #8
 8002eac:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8002eae:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8002eb2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8002eb6:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8002eb8:	ea86 4604 	eor.w	r6, r6, r4, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8002ebc:	fa5f f48a 	uxtb.w	r4, sl
 8002ec0:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 8002ec2:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8002ec6:	406c      	eors	r4, r5
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8002ec8:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8002ecc:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8002ece:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8002ed2:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8002ed6:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8002ed8:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8002edc:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8002ee0:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8002ee2:	ea84 4405 	eor.w	r4, r4, r5, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8002ee6:	b2cd      	uxtb	r5, r1

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8002ee8:	0e09      	lsrs	r1, r1, #24
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8002eea:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8002eec:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8002ef0:	407d      	eors	r5, r7
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8002ef2:	ea4f 671a 	mov.w	r7, sl, lsr #24
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8002ef6:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8002efa:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8002efc:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8002f00:	f3c0 2707 	ubfx	r7, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8002f04:	b2c0      	uxtb	r0, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8002f06:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8002f08:	5c18      	ldrb	r0, [r3, r0]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8002f0a:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
 8002f0c:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8002f10:	f3c9 4707 	ubfx	r7, r9, #16, #8
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8002f14:	f3c9 2907 	ubfx	r9, r9, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8002f18:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8002f1a:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
    X3 = *RK++ ^ \
 8002f1e:	f8d8 701c 	ldr.w	r7, [r8, #28]
 8002f22:	4078      	eors	r0, r7
 8002f24:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8002f28:	f813 1009 	ldrb.w	r1, [r3, r9]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8002f2c:	f813 300a 	ldrb.w	r3, [r3, sl]

    PUT_UINT32_LE( X0, output,  0 );
 8002f30:	7016      	strb	r6, [r2, #0]
    X3 = *RK++ ^ \
 8002f32:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
    PUT_UINT32_LE( X0, output,  0 );
 8002f36:	0a31      	lsrs	r1, r6, #8
 8002f38:	7051      	strb	r1, [r2, #1]
 8002f3a:	0c31      	lsrs	r1, r6, #16
 8002f3c:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 8002f3e:	0a21      	lsrs	r1, r4, #8
 8002f40:	7151      	strb	r1, [r2, #5]
 8002f42:	0c21      	lsrs	r1, r4, #16
 8002f44:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 8002f46:	0a29      	lsrs	r1, r5, #8
    X3 = *RK++ ^ \
 8002f48:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
    PUT_UINT32_LE( X2, output,  8 );
 8002f4c:	7251      	strb	r1, [r2, #9]
 8002f4e:	0c29      	lsrs	r1, r5, #16
 8002f50:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 8002f52:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
 8002f54:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 8002f56:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 8002f58:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
 8002f5a:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 8002f5c:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 8002f5e:	7313      	strb	r3, [r2, #12]
 8002f60:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 8002f62:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 8002f64:	0c19      	lsrs	r1, r3, #16
 8002f66:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
 8002f68:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8002f6a:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8002f6c:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8002f6e:	7391      	strb	r1, [r2, #14]
 8002f70:	73d3      	strb	r3, [r2, #15]
}
 8002f72:	b003      	add	sp, #12
 8002f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8002f78:	f850 802b 	ldr.w	r8, [r0, fp, lsl #2]
 8002f7c:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 8002f80:	f851 6c20 	ldr.w	r6, [r1, #-32]
 8002f84:	ea8a 0a08 	eor.w	sl, sl, r8
 8002f88:	ea8a 0a06 	eor.w	sl, sl, r6
 8002f8c:	f3c3 2807 	ubfx	r8, r3, #8, #8
 8002f90:	4e63      	ldr	r6, [pc, #396]	; (8003120 <mbedtls_internal_aes_encrypt+0x398>)
 8002f92:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8002f96:	f851 6c1c 	ldr.w	r6, [r1, #-28]
 8002f9a:	ea8a 0a08 	eor.w	sl, sl, r8
 8002f9e:	f3cc 4807 	ubfx	r8, ip, #16, #8
 8002fa2:	fa5f f983 	uxtb.w	r9, r3
 8002fa6:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8002faa:	f855 b029 	ldr.w	fp, [r5, r9, lsl #2]
 8002fae:	ea8a 0a08 	eor.w	sl, sl, r8
 8002fb2:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8002fb6:	fa5f f98c 	uxtb.w	r9, ip
 8002fba:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8002fbe:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 8002fc2:	ea8b 0b08 	eor.w	fp, fp, r8
 8002fc6:	ea8b 0b06 	eor.w	fp, fp, r6
 8002fca:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8002fce:	4e54      	ldr	r6, [pc, #336]	; (8003120 <mbedtls_internal_aes_encrypt+0x398>)
 8002fd0:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8002fd4:	f851 6c18 	ldr.w	r6, [r1, #-24]
 8002fd8:	ea8b 0b08 	eor.w	fp, fp, r8
 8002fdc:	f3c7 4807 	ubfx	r8, r7, #16, #8
 8002fe0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8002fe4:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8002fe8:	ea8b 0b08 	eor.w	fp, fp, r8
 8002fec:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002ff0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002ff4:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8002ff8:	ea89 0808 	eor.w	r8, r9, r8
 8002ffc:	ea88 0806 	eor.w	r8, r8, r6
 8003000:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8003004:	4e46      	ldr	r6, [pc, #280]	; (8003120 <mbedtls_internal_aes_encrypt+0x398>)
 8003006:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800300a:	ea88 0809 	eor.w	r8, r8, r9
 800300e:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8003012:	b2ff      	uxtb	r7, r7
 8003014:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 8003018:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800301c:	ea88 0809 	eor.w	r8, r8, r9
 8003020:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 8003024:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003028:	ea87 0909 	eor.w	r9, r7, r9
 800302c:	f851 7c14 	ldr.w	r7, [r1, #-20]
 8003030:	ea89 0907 	eor.w	r9, r9, r7
 8003034:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8003038:	ea89 0907 	eor.w	r9, r9, r7
 800303c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
 8003040:	ea89 0907 	eor.w	r9, r9, r7
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003044:	fa5f f48a 	uxtb.w	r4, sl
 8003048:	ea4f 6319 	mov.w	r3, r9, lsr #24
 800304c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8003050:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003054:	405c      	eors	r4, r3
 8003056:	f851 3c10 	ldr.w	r3, [r1, #-16]
 800305a:	405c      	eors	r4, r3
 800305c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8003060:	fa5f f78b 	uxtb.w	r7, fp
 8003064:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003068:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800306c:	405c      	eors	r4, r3
 800306e:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8003072:	fa5f fc88 	uxtb.w	ip, r8
 8003076:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800307a:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800307e:	405c      	eors	r4, r3
 8003080:	ea4f 631a 	mov.w	r3, sl, lsr #24
 8003084:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003088:	405f      	eors	r7, r3
 800308a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800308e:	407b      	eors	r3, r7
 8003090:	f3c8 2707 	ubfx	r7, r8, #8, #8
 8003094:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8003098:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800309c:	407b      	eors	r3, r7
 800309e:	f3c9 4707 	ubfx	r7, r9, #16, #8
 80030a2:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80030a6:	407b      	eors	r3, r7
 80030a8:	ea4f 671b 	mov.w	r7, fp, lsr #24
 80030ac:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 80030b0:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 80030b4:	ea8c 0c07 	eor.w	ip, ip, r7
 80030b8:	f851 7c08 	ldr.w	r7, [r1, #-8]
 80030bc:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 80030c0:	ea8c 0c07 	eor.w	ip, ip, r7
 80030c4:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80030c8:	fa5f f989 	uxtb.w	r9, r9
 80030cc:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80030d0:	ea8c 0c07 	eor.w	ip, ip, r7
 80030d4:	f3ca 4707 	ubfx	r7, sl, #16, #8
 80030d8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80030dc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80030e0:	ea8c 0c07 	eor.w	ip, ip, r7
 80030e4:	f855 7029 	ldr.w	r7, [r5, r9, lsl #2]
 80030e8:	f8d1 9000 	ldr.w	r9, [r1]
 80030ec:	ea87 0808 	eor.w	r8, r7, r8
 80030f0:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80030f4:	ea88 0707 	eor.w	r7, r8, r7
 80030f8:	f856 802a 	ldr.w	r8, [r6, sl, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80030fc:	9e01      	ldr	r6, [sp, #4]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80030fe:	ea87 0708 	eor.w	r7, r7, r8
 8003102:	f85e 802b 	ldr.w	r8, [lr, fp, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003106:	3e01      	subs	r6, #1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003108:	ea87 0708 	eor.w	r7, r7, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800310c:	9601      	str	r6, [sp, #4]
 800310e:	e657      	b.n	8002dc0 <mbedtls_internal_aes_encrypt+0x38>
 8003110:	20001234 	.word	0x20001234
 8003114:	20000634 	.word	0x20000634
 8003118:	20000e34 	.word	0x20000e34
 800311c:	20000531 	.word	0x20000531
 8003120:	20000a34 	.word	0x20000a34

08003124 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003128:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800312a:	f8d1 c000 	ldr.w	ip, [r1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800312e:	684c      	ldr	r4, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003130:	688e      	ldr	r6, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003132:	68cf      	ldr	r7, [r1, #12]
 8003134:	68e9      	ldr	r1, [r5, #12]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003136:	682b      	ldr	r3, [r5, #0]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003138:	f8df e378 	ldr.w	lr, [pc, #888]	; 80034b4 <mbedtls_internal_aes_decrypt+0x390>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800313c:	404f      	eors	r7, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800313e:	6801      	ldr	r1, [r0, #0]
 8003140:	48da      	ldr	r0, [pc, #872]	; (80034ac <mbedtls_internal_aes_decrypt+0x388>)
 8003142:	1049      	asrs	r1, r1, #1
 8003144:	3901      	subs	r1, #1
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003146:	ea8c 0c03 	eor.w	ip, ip, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800314a:	686b      	ldr	r3, [r5, #4]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800314c:	9101      	str	r1, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800314e:	4629      	mov	r1, r5
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003150:	405c      	eors	r4, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003152:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003154:	f851 9f10 	ldr.w	r9, [r1, #16]!
 8003158:	4dd5      	ldr	r5, [pc, #852]	; (80034b0 <mbedtls_internal_aes_decrypt+0x38c>)
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800315a:	4073      	eors	r3, r6
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800315c:	9e01      	ldr	r6, [sp, #4]
 800315e:	2e00      	cmp	r6, #0
 8003160:	4688      	mov	r8, r1
 8003162:	fa5f fb8c 	uxtb.w	fp, ip
 8003166:	f101 0120 	add.w	r1, r1, #32
 800316a:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 800316e:	f300 80d0 	bgt.w	8003312 <mbedtls_internal_aes_decrypt+0x1ee>
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003172:	f850 602a 	ldr.w	r6, [r0, sl, lsl #2]
 8003176:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 800317a:	f8df e340 	ldr.w	lr, [pc, #832]	; 80034bc <mbedtls_internal_aes_decrypt+0x398>
 800317e:	4071      	eors	r1, r6
 8003180:	ea81 0909 	eor.w	r9, r1, r9
 8003184:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8003188:	4eca      	ldr	r6, [pc, #808]	; (80034b4 <mbedtls_internal_aes_decrypt+0x390>)
 800318a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800318e:	ea89 0901 	eor.w	r9, r9, r1
 8003192:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8003196:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 800319a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800319e:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 80031a2:	ea89 0901 	eor.w	r9, r9, r1
 80031a6:	b2e1      	uxtb	r1, r4
 80031a8:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 80031ac:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80031b0:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 80031b4:	ea81 0a0a 	eor.w	sl, r1, sl
 80031b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80031bc:	ea8a 0a01 	eor.w	sl, sl, r1
 80031c0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80031c4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80031c8:	ea8a 0a01 	eor.w	sl, sl, r1
 80031cc:	f3c7 4107 	ubfx	r1, r7, #16, #8
 80031d0:	b2ff      	uxtb	r7, r7
 80031d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80031d6:	ea8a 0a01 	eor.w	sl, sl, r1
 80031da:	b2d9      	uxtb	r1, r3
 80031dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80031e0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80031e4:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 80031e8:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80031ec:	ea81 0b0b 	eor.w	fp, r1, fp
 80031f0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80031f4:	ea8b 0101 	eor.w	r1, fp, r1
 80031f8:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 80031fc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8003200:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8003204:	ea81 010b 	eor.w	r1, r1, fp
 8003208:	f3cc 4b07 	ubfx	fp, ip, #16, #8
 800320c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8003210:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8003214:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8003218:	4045      	eors	r5, r0
 800321a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800321e:	4068      	eors	r0, r5
 8003220:	4058      	eors	r0, r3
 8003222:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003226:	fa5f f489 	uxtb.w	r4, r9
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800322a:	4058      	eors	r0, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800322c:	4ba2      	ldr	r3, [pc, #648]	; (80034b8 <mbedtls_internal_aes_decrypt+0x394>)
 800322e:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 8003230:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8003234:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003236:	ea4f 641a 	mov.w	r4, sl, lsr #24
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800323a:	ea81 010b 	eor.w	r1, r1, fp
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800323e:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8003240:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003244:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003248:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 800324a:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800324e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8003252:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 8003254:	ea86 4604 	eor.w	r6, r6, r4, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003258:	fa5f f48a 	uxtb.w	r4, sl
 800325c:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 800325e:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8003262:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003264:	0e0d      	lsrs	r5, r1, #24
 8003266:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8003268:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800326c:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8003270:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8003272:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003276:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800327a:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 800327c:	ea84 4405 	eor.w	r4, r4, r5, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003280:	b2cd      	uxtb	r5, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003282:	f3c1 2107 	ubfx	r1, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003286:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8003288:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800328c:	407d      	eors	r5, r7
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800328e:	0e07      	lsrs	r7, r0, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003290:	b2c0      	uxtb	r0, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003292:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8003294:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003298:	f3ca 2707 	ubfx	r7, sl, #8, #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800329c:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80032a0:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80032a2:	5c18      	ldrb	r0, [r3, r0]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80032a4:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
 80032a6:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80032aa:	f3c9 4707 	ubfx	r7, r9, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80032ae:	ea4f 6919 	mov.w	r9, r9, lsr #24
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80032b2:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 80032b4:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
    X3 = *RK++ ^ \
 80032b8:	f8d8 701c 	ldr.w	r7, [r8, #28]
 80032bc:	4078      	eors	r0, r7
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80032be:	f813 7009 	ldrb.w	r7, [r3, r9]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80032c2:	f813 300a 	ldrb.w	r3, [r3, sl]

    PUT_UINT32_LE( X0, output,  0 );
 80032c6:	7016      	strb	r6, [r2, #0]
    X3 = *RK++ ^ \
 80032c8:	ea80 6007 	eor.w	r0, r0, r7, lsl #24
 80032cc:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
    PUT_UINT32_LE( X0, output,  0 );
 80032d0:	0a31      	lsrs	r1, r6, #8
 80032d2:	7051      	strb	r1, [r2, #1]
 80032d4:	0c31      	lsrs	r1, r6, #16
 80032d6:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80032d8:	0a21      	lsrs	r1, r4, #8
 80032da:	7151      	strb	r1, [r2, #5]
 80032dc:	0c21      	lsrs	r1, r4, #16
 80032de:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80032e0:	0a29      	lsrs	r1, r5, #8
    X3 = *RK++ ^ \
 80032e2:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
    PUT_UINT32_LE( X2, output,  8 );
 80032e6:	7251      	strb	r1, [r2, #9]
 80032e8:	0c29      	lsrs	r1, r5, #16
 80032ea:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80032ec:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
 80032ee:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 80032f0:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 80032f2:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
 80032f4:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 80032f6:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 80032f8:	7313      	strb	r3, [r2, #12]
 80032fa:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80032fc:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 80032fe:	0c19      	lsrs	r1, r3, #16
 8003300:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
 8003302:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8003304:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8003306:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8003308:	7391      	strb	r1, [r2, #14]
 800330a:	73d3      	strb	r3, [r2, #15]
}
 800330c:	b003      	add	sp, #12
 800330e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003312:	f850 802a 	ldr.w	r8, [r0, sl, lsl #2]
 8003316:	f855 902b 	ldr.w	r9, [r5, fp, lsl #2]
 800331a:	f851 6c20 	ldr.w	r6, [r1, #-32]
 800331e:	ea89 0908 	eor.w	r9, r9, r8
 8003322:	ea89 0906 	eor.w	r9, r9, r6
 8003326:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800332a:	4e64      	ldr	r6, [pc, #400]	; (80034bc <mbedtls_internal_aes_decrypt+0x398>)
 800332c:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8003330:	f851 6c1c 	ldr.w	r6, [r1, #-28]
 8003334:	ea89 0908 	eor.w	r9, r9, r8
 8003338:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800333c:	fa5f fa84 	uxtb.w	sl, r4
 8003340:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8003344:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 8003348:	ea89 0908 	eor.w	r9, r9, r8
 800334c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8003350:	fa5f fb83 	uxtb.w	fp, r3
 8003354:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8003358:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800335c:	ea8a 0a08 	eor.w	sl, sl, r8
 8003360:	ea8a 0a06 	eor.w	sl, sl, r6
 8003364:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8003368:	4e54      	ldr	r6, [pc, #336]	; (80034bc <mbedtls_internal_aes_decrypt+0x398>)
 800336a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800336e:	f851 6c18 	ldr.w	r6, [r1, #-24]
 8003372:	ea8a 0a08 	eor.w	sl, sl, r8
 8003376:	f3c7 4807 	ubfx	r8, r7, #16, #8
 800337a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800337e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8003382:	ea8a 0a08 	eor.w	sl, sl, r8
 8003386:	ea4f 6817 	mov.w	r8, r7, lsr #24
 800338a:	b2ff      	uxtb	r7, r7
 800338c:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
 8003390:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8003394:	ea8b 0808 	eor.w	r8, fp, r8
 8003398:	ea88 0806 	eor.w	r8, r8, r6
 800339c:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 80033a0:	4e46      	ldr	r6, [pc, #280]	; (80034bc <mbedtls_internal_aes_decrypt+0x398>)
 80033a2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80033a6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80033aa:	ea88 080b 	eor.w	r8, r8, fp
 80033ae:	f3cc 4b07 	ubfx	fp, ip, #16, #8
 80033b2:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 80033b6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80033ba:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 80033be:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 80033c2:	ea87 0c0c 	eor.w	ip, r7, ip
 80033c6:	f851 7c14 	ldr.w	r7, [r1, #-20]
 80033ca:	ea8c 0707 	eor.w	r7, ip, r7
 80033ce:	405f      	eors	r7, r3
 80033d0:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80033d4:	ea4f 641a 	mov.w	r4, sl, lsr #24
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80033d8:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80033da:	fa5f f389 	uxtb.w	r3, r9
 80033de:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80033e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80033e6:	ea83 0c04 	eor.w	ip, r3, r4
 80033ea:	f851 3c10 	ldr.w	r3, [r1, #-16]
 80033ee:	ea8c 0c03 	eor.w	ip, ip, r3
 80033f2:	f3c7 2307 	ubfx	r3, r7, #8, #8
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80033f6:	ea88 080b 	eor.w	r8, r8, fp
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80033fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80033fe:	ea8c 0c03 	eor.w	ip, ip, r3
 8003402:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8003406:	fa5f f48a 	uxtb.w	r4, sl
 800340a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800340e:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8003412:	ea8c 0c03 	eor.w	ip, ip, r3
 8003416:	ea4f 6318 	mov.w	r3, r8, lsr #24
 800341a:	fa5f fb88 	uxtb.w	fp, r8
 800341e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003422:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8003426:	405c      	eors	r4, r3
 8003428:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800342c:	405c      	eors	r4, r3
 800342e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8003432:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8003436:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800343a:	405c      	eors	r4, r3
 800343c:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8003440:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003444:	405c      	eors	r4, r3
 8003446:	0e3b      	lsrs	r3, r7, #24
 8003448:	b2ff      	uxtb	r7, r7
 800344a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800344e:	ea8b 0b03 	eor.w	fp, fp, r3
 8003452:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8003456:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800345a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800345e:	ea8b 0303 	eor.w	r3, fp, r3
 8003462:	f3ca 2b07 	ubfx	fp, sl, #8, #8
 8003466:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800346a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800346e:	9e01      	ldr	r6, [sp, #4]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003470:	ea83 030b 	eor.w	r3, r3, fp
 8003474:	f3c9 4b07 	ubfx	fp, r9, #16, #8
 8003478:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800347c:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8003480:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8003484:	ea87 0909 	eor.w	r9, r7, r9
 8003488:	f851 7c04 	ldr.w	r7, [r1, #-4]
 800348c:	ea89 0707 	eor.w	r7, r9, r7
 8003490:	ea87 0708 	eor.w	r7, r7, r8
 8003494:	f85e 802a 	ldr.w	r8, [lr, sl, lsl #2]
 8003498:	f8d1 9000 	ldr.w	r9, [r1]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800349c:	3e01      	subs	r6, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800349e:	ea83 030b 	eor.w	r3, r3, fp
 80034a2:	ea87 0708 	eor.w	r7, r7, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80034a6:	9601      	str	r6, [sp, #4]
 80034a8:	e658      	b.n	800315c <mbedtls_internal_aes_decrypt+0x38>
 80034aa:	bf00      	nop
 80034ac:	2000235c 	.word	0x2000235c
 80034b0:	2000175c 	.word	0x2000175c
 80034b4:	20001f5c 	.word	0x20001f5c
 80034b8:	2000165c 	.word	0x2000165c
 80034bc:	20001b5c 	.word	0x20001b5c

080034c0 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80034c0:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80034c2:	2901      	cmp	r1, #1
{
 80034c4:	4614      	mov	r4, r2
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80034c6:	4621      	mov	r1, r4
{
 80034c8:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 80034ca:	d103      	bne.n	80034d4 <mbedtls_aes_crypt_ecb+0x14>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80034cc:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80034d0:	f7ff bc5a 	b.w	8002d88 <mbedtls_internal_aes_encrypt>
}
 80034d4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80034d8:	f7ff be24 	b.w	8003124 <mbedtls_internal_aes_decrypt>

080034dc <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	b085      	sub	sp, #20
 80034e2:	4698      	mov	r8, r3
    int i;
    unsigned char temp[16];

    if( length % 16 )
 80034e4:	0713      	lsls	r3, r2, #28
{
 80034e6:	4681      	mov	r9, r0
 80034e8:	460f      	mov	r7, r1
 80034ea:	4616      	mov	r6, r2
 80034ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80034ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    if( length % 16 )
 80034f0:	d15c      	bne.n	80035ac <mbedtls_aes_crypt_cbc+0xd0>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80034f2:	b949      	cbnz	r1, 8003508 <mbedtls_aes_crypt_cbc+0x2c>
 80034f4:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 80034f6:	f10d 0b10 	add.w	fp, sp, #16
 80034fa:	1ab3      	subs	r3, r6, r2
        while( length > 0 )
 80034fc:	42dd      	cmn	r5, r3
 80034fe:	d127      	bne.n	8003550 <mbedtls_aes_crypt_cbc+0x74>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 8003500:	2000      	movs	r0, #0
}
 8003502:	b005      	add	sp, #20
 8003504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003508:	1e6b      	subs	r3, r5, #1
        while( length > 0 )
 800350a:	2e00      	cmp	r6, #0
 800350c:	d0f8      	beq.n	8003500 <mbedtls_aes_crypt_cbc+0x24>
 800350e:	f108 30ff 	add.w	r0, r8, #4294967295
 8003512:	1e61      	subs	r1, r4, #1
 8003514:	f103 0510 	add.w	r5, r3, #16
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8003518:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800351c:	f810 ef01 	ldrb.w	lr, [r0, #1]!
            for( i = 0; i < 16; i++ )
 8003520:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8003522:	ea82 020e 	eor.w	r2, r2, lr
 8003526:	f801 2f01 	strb.w	r2, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800352a:	d1f5      	bne.n	8003518 <mbedtls_aes_crypt_cbc+0x3c>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800352c:	4623      	mov	r3, r4
 800352e:	4622      	mov	r2, r4
 8003530:	4639      	mov	r1, r7
 8003532:	4648      	mov	r0, r9
 8003534:	f7ff ffc4 	bl	80034c0 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8003538:	4643      	mov	r3, r8
 800353a:	f104 0210 	add.w	r2, r4, #16
 800353e:	f854 1b04 	ldr.w	r1, [r4], #4
 8003542:	f843 1b04 	str.w	r1, [r3], #4
 8003546:	4294      	cmp	r4, r2
 8003548:	d1f9      	bne.n	800353e <mbedtls_aes_crypt_cbc+0x62>
            length -= 16;
 800354a:	3e10      	subs	r6, #16
 800354c:	462b      	mov	r3, r5
 800354e:	e7dc      	b.n	800350a <mbedtls_aes_crypt_cbc+0x2e>
            memcpy( temp, input, 16 );
 8003550:	4613      	mov	r3, r2
 8003552:	46ee      	mov	lr, sp
 8003554:	f102 0a10 	add.w	sl, r2, #16
 8003558:	466f      	mov	r7, sp
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	46f4      	mov	ip, lr
 8003560:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003564:	3308      	adds	r3, #8
 8003566:	4553      	cmp	r3, sl
 8003568:	46e6      	mov	lr, ip
 800356a:	d1f6      	bne.n	800355a <mbedtls_aes_crypt_cbc+0x7e>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 800356c:	4623      	mov	r3, r4
 800356e:	2100      	movs	r1, #0
 8003570:	4648      	mov	r0, r9
 8003572:	f7ff ffa5 	bl	80034c0 <mbedtls_aes_crypt_ecb>
 8003576:	1e63      	subs	r3, r4, #1
 8003578:	f108 31ff 	add.w	r1, r8, #4294967295
 800357c:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8003580:	785a      	ldrb	r2, [r3, #1]
 8003582:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8003586:	ea82 020e 	eor.w	r2, r2, lr
 800358a:	f803 2f01 	strb.w	r2, [r3, #1]!
            for( i = 0; i < 16; i++ )
 800358e:	4283      	cmp	r3, r0
 8003590:	d1f6      	bne.n	8003580 <mbedtls_aes_crypt_cbc+0xa4>
            memcpy( iv, temp, 16 );
 8003592:	4642      	mov	r2, r8
 8003594:	463b      	mov	r3, r7
 8003596:	cb03      	ldmia	r3!, {r0, r1}
 8003598:	455b      	cmp	r3, fp
 800359a:	6010      	str	r0, [r2, #0]
 800359c:	6051      	str	r1, [r2, #4]
 800359e:	461f      	mov	r7, r3
 80035a0:	f102 0208 	add.w	r2, r2, #8
 80035a4:	d1f6      	bne.n	8003594 <mbedtls_aes_crypt_cbc+0xb8>
            input  += 16;
 80035a6:	4652      	mov	r2, sl
            output += 16;
 80035a8:	3410      	adds	r4, #16
 80035aa:	e7a6      	b.n	80034fa <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80035ac:	f06f 0021 	mvn.w	r0, #33	; 0x21
 80035b0:	e7a7      	b.n	8003502 <mbedtls_aes_crypt_cbc+0x26>

080035b2 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 80035b2:	6803      	ldr	r3, [r0, #0]
{
 80035b4:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 80035b6:	1acd      	subs	r5, r1, r3
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	dc02      	bgt.n	80035c2 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80035bc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80035c0:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 80035c2:	781c      	ldrb	r4, [r3, #0]
 80035c4:	f014 0f80 	tst.w	r4, #128	; 0x80
 80035c8:	d10a      	bne.n	80035e0 <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 80035ca:	1c5c      	adds	r4, r3, #1
 80035cc:	6004      	str	r4, [r0, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	1ac9      	subs	r1, r1, r3
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	428b      	cmp	r3, r1
 80035da:	d8ef      	bhi.n	80035bc <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80035dc:	2000      	movs	r0, #0
 80035de:	bd30      	pop	{r4, r5, pc}
        switch( **p & 0x7F )
 80035e0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80035e4:	3c01      	subs	r4, #1
 80035e6:	2c03      	cmp	r4, #3
 80035e8:	d82e      	bhi.n	8003648 <mbedtls_asn1_get_len+0x96>
 80035ea:	e8df f004 	tbb	[pc, r4]
 80035ee:	0902      	.short	0x0902
 80035f0:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 80035f2:	2d01      	cmp	r5, #1
 80035f4:	d0e2      	beq.n	80035bc <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 80035f6:	785c      	ldrb	r4, [r3, #1]
 80035f8:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 80035fa:	3302      	adds	r3, #2
            (*p) += 5;
 80035fc:	6003      	str	r3, [r0, #0]
            break;
 80035fe:	e7e8      	b.n	80035d2 <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 8003600:	2d02      	cmp	r5, #2
 8003602:	dddb      	ble.n	80035bc <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8003604:	785d      	ldrb	r5, [r3, #1]
 8003606:	789c      	ldrb	r4, [r3, #2]
 8003608:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800360c:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 800360e:	3303      	adds	r3, #3
 8003610:	e7f4      	b.n	80035fc <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 8003612:	2d03      	cmp	r5, #3
 8003614:	ddd2      	ble.n	80035bc <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8003616:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8003618:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800361a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800361c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8003620:	78dd      	ldrb	r5, [r3, #3]
 8003622:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 8003624:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8003626:	3304      	adds	r3, #4
 8003628:	e7e8      	b.n	80035fc <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 800362a:	2d04      	cmp	r5, #4
 800362c:	ddc6      	ble.n	80035bc <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800362e:	789c      	ldrb	r4, [r3, #2]
 8003630:	785d      	ldrb	r5, [r3, #1]
 8003632:	0424      	lsls	r4, r4, #16
 8003634:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8003638:	791d      	ldrb	r5, [r3, #4]
 800363a:	432c      	orrs	r4, r5
 800363c:	78dd      	ldrb	r5, [r3, #3]
 800363e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8003642:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 8003644:	3305      	adds	r3, #5
 8003646:	e7d9      	b.n	80035fc <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8003648:	f06f 0063 	mvn.w	r0, #99	; 0x63
}
 800364c:	bd30      	pop	{r4, r5, pc}

0800364e <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800364e:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8003650:	6804      	ldr	r4, [r0, #0]
 8003652:	1b0e      	subs	r6, r1, r4
 8003654:	2e00      	cmp	r6, #0
 8003656:	dd07      	ble.n	8003668 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 8003658:	7826      	ldrb	r6, [r4, #0]
 800365a:	429e      	cmp	r6, r3
 800365c:	d108      	bne.n	8003670 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800365e:	3401      	adds	r4, #1
 8003660:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8003662:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 8003664:	f7ff bfa5 	b.w	80035b2 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8003668:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800366c:	bc70      	pop	{r4, r5, r6}
 800366e:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8003670:	f06f 0061 	mvn.w	r0, #97	; 0x61
 8003674:	e7fa      	b.n	800366c <mbedtls_asn1_get_tag+0x1e>

08003676 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8003676:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8003678:	2301      	movs	r3, #1
{
 800367a:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800367c:	aa01      	add	r2, sp, #4
{
 800367e:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8003680:	f7ff ffe5 	bl	800364e <mbedtls_asn1_get_tag>
 8003684:	b950      	cbnz	r0, 800369c <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 8003686:	9b01      	ldr	r3, [sp, #4]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d109      	bne.n	80036a0 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003692:	3200      	adds	r2, #0
 8003694:	bf18      	it	ne
 8003696:	2201      	movne	r2, #1
 8003698:	602a      	str	r2, [r5, #0]
    (*p)++;
 800369a:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800369c:	b003      	add	sp, #12
 800369e:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80036a0:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80036a4:	e7fa      	b.n	800369c <mbedtls_asn1_get_bool+0x26>

080036a6 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80036a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80036a8:	2302      	movs	r3, #2
{
 80036aa:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80036ac:	aa01      	add	r2, sp, #4
{
 80036ae:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80036b0:	f7ff ffcd 	bl	800364e <mbedtls_asn1_get_tag>
 80036b4:	b968      	cbnz	r0, 80036d2 <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 80036b6:	9b01      	ldr	r3, [sp, #4]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d814      	bhi.n	80036e8 <mbedtls_asn1_get_int+0x42>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f993 3000 	ldrsb.w	r3, [r3]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db0f      	blt.n	80036e8 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 80036c8:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 80036ca:	9b01      	ldr	r3, [sp, #4]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	9201      	str	r2, [sp, #4]
 80036d0:	b90b      	cbnz	r3, 80036d6 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 80036d2:	b003      	add	sp, #12
 80036d4:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	6829      	ldr	r1, [r5, #0]
 80036da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036e2:	602a      	str	r2, [r5, #0]
        (*p)++;
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	e7f0      	b.n	80036ca <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80036e8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80036ec:	e7f1      	b.n	80036d2 <mbedtls_asn1_get_int+0x2c>

080036ee <mbedtls_asn1_get_bitstring>:
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80036ee:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80036f0:	2303      	movs	r3, #3
{
 80036f2:	4604      	mov	r4, r0
 80036f4:	460e      	mov	r6, r1
 80036f6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80036f8:	f7ff ffa9 	bl	800364e <mbedtls_asn1_get_tag>
 80036fc:	b9c8      	cbnz	r0, 8003732 <mbedtls_asn1_get_bitstring+0x44>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	b193      	cbz	r3, 8003728 <mbedtls_asn1_get_bitstring+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8003702:	3b01      	subs	r3, #1
 8003704:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	7812      	ldrb	r2, [r2, #0]
 800370a:	712a      	strb	r2, [r5, #4]
    if( bs->unused_bits > 7 )
 800370c:	2a07      	cmp	r2, #7
 800370e:	d80e      	bhi.n	800372e <mbedtls_asn1_get_bitstring+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	3201      	adds	r2, #1
 8003714:	6022      	str	r2, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8003716:	60aa      	str	r2, [r5, #8]
    *p += bs->len;
 8003718:	6822      	ldr	r2, [r4, #0]
 800371a:	4413      	add	r3, r2

    if( *p != end )
 800371c:	429e      	cmp	r6, r3
    *p += bs->len;
 800371e:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8003720:	bf18      	it	ne
 8003722:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 8003726:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8003728:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 800372c:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800372e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    return( 0 );
}
 8003732:	bd70      	pop	{r4, r5, r6, pc}

08003734 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8003734:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8003736:	2303      	movs	r3, #3
{
 8003738:	4604      	mov	r4, r0
 800373a:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800373c:	f7ff ff87 	bl	800364e <mbedtls_asn1_get_tag>
 8003740:	b958      	cbnz	r0, 800375a <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	1e5a      	subs	r2, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	d904      	bls.n	8003756 <mbedtls_asn1_get_bitstring_null+0x22>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	6022      	str	r2, [r4, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b10b      	cbz	r3, 800375a <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8003756:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800375a:	bd38      	pop	{r3, r4, r5, pc}

0800375c <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800375c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003760:	4614      	mov	r4, r2
 8003762:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8003764:	aa01      	add	r2, sp, #4
 8003766:	2330      	movs	r3, #48	; 0x30
{
 8003768:	4605      	mov	r5, r0
 800376a:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800376c:	f7ff ff6f 	bl	800364e <mbedtls_asn1_get_tag>
 8003770:	4606      	mov	r6, r0
 8003772:	b930      	cbnz	r0, 8003782 <mbedtls_asn1_get_sequence_of+0x26>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	9a01      	ldr	r2, [sp, #4]
 8003778:	4413      	add	r3, r2
 800377a:	429f      	cmp	r7, r3
 800377c:	d01d      	beq.n	80037ba <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800377e:	f06f 0665 	mvn.w	r6, #101	; 0x65

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8003782:	4630      	mov	r0, r6
 8003784:	b003      	add	sp, #12
 8003786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800378e:	464a      	mov	r2, r9
 8003790:	4643      	mov	r3, r8
 8003792:	4639      	mov	r1, r7
 8003794:	4628      	mov	r0, r5
 8003796:	f7ff ff5a 	bl	800364e <mbedtls_asn1_get_tag>
 800379a:	b9c0      	cbnz	r0, 80037ce <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	6862      	ldr	r2, [r4, #4]
 80037a4:	4413      	add	r3, r2
        if( *p < end )
 80037a6:	429f      	cmp	r7, r3
        *p += buf->len;
 80037a8:	602b      	str	r3, [r5, #0]
        if( *p < end )
 80037aa:	d908      	bls.n	80037be <mbedtls_asn1_get_sequence_of+0x62>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 80037ac:	2110      	movs	r1, #16
 80037ae:	2001      	movs	r0, #1
 80037b0:	f00b fb04 	bl	800edbc <calloc>
 80037b4:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 80037b6:	4604      	mov	r4, r0
 80037b8:	b158      	cbz	r0, 80037d2 <mbedtls_asn1_get_sequence_of+0x76>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80037ba:	f104 0904 	add.w	r9, r4, #4
    while( *p < end )
 80037be:	682b      	ldr	r3, [r5, #0]
 80037c0:	429f      	cmp	r7, r3
 80037c2:	d8e2      	bhi.n	800378a <mbedtls_asn1_get_sequence_of+0x2e>
    cur->next = NULL;
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	60e3      	str	r3, [r4, #12]
    if( *p != end )
 80037ca:	d0da      	beq.n	8003782 <mbedtls_asn1_get_sequence_of+0x26>
 80037cc:	e7d7      	b.n	800377e <mbedtls_asn1_get_sequence_of+0x22>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80037ce:	4606      	mov	r6, r0
 80037d0:	e7d7      	b.n	8003782 <mbedtls_asn1_get_sequence_of+0x26>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80037d2:	f06f 0669 	mvn.w	r6, #105	; 0x69
 80037d6:	e7d4      	b.n	8003782 <mbedtls_asn1_get_sequence_of+0x26>

080037d8 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80037d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037dc:	4690      	mov	r8, r2
 80037de:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80037e0:	aa01      	add	r2, sp, #4
 80037e2:	2330      	movs	r3, #48	; 0x30
{
 80037e4:	4604      	mov	r4, r0
 80037e6:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80037e8:	f7ff ff31 	bl	800364e <mbedtls_asn1_get_tag>
 80037ec:	4606      	mov	r6, r0
 80037ee:	bb08      	cbnz	r0, 8003834 <mbedtls_asn1_get_alg+0x5c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 80037f0:	6827      	ldr	r7, [r4, #0]
 80037f2:	eba9 0907 	sub.w	r9, r9, r7
 80037f6:	f1b9 0f00 	cmp.w	r9, #0
 80037fa:	dd38      	ble.n	800386e <mbedtls_asn1_get_alg+0x96>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80037fc:	4642      	mov	r2, r8
 80037fe:	783b      	ldrb	r3, [r7, #0]
 8003800:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8003804:	9b01      	ldr	r3, [sp, #4]
 8003806:	441f      	add	r7, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8003808:	4639      	mov	r1, r7
 800380a:	2306      	movs	r3, #6
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff1e 	bl	800364e <mbedtls_asn1_get_tag>
 8003812:	4606      	mov	r6, r0
 8003814:	b970      	cbnz	r0, 8003834 <mbedtls_asn1_get_alg+0x5c>
        return( ret );

    alg->p = *p;
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 800381c:	6821      	ldr	r1, [r4, #0]
 800381e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003822:	188b      	adds	r3, r1, r2

    if( *p == end )
 8003824:	429f      	cmp	r7, r3
    *p += alg->len;
 8003826:	6023      	str	r3, [r4, #0]
    if( *p == end )
 8003828:	d10b      	bne.n	8003842 <mbedtls_asn1_get_alg+0x6a>
 800382a:	f105 030c 	add.w	r3, r5, #12
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800382e:	4602      	mov	r2, r0
 8003830:	429d      	cmp	r5, r3
 8003832:	d103      	bne.n	800383c <mbedtls_asn1_get_alg+0x64>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8003834:	4630      	mov	r0, r6
 8003836:	b003      	add	sp, #12
 8003838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800383c:	702a      	strb	r2, [r5, #0]
 800383e:	3501      	adds	r5, #1
 8003840:	e7f6      	b.n	8003830 <mbedtls_asn1_get_alg+0x58>
    params->tag = **p;
 8003842:	5c89      	ldrb	r1, [r1, r2]
 8003844:	462a      	mov	r2, r5
    (*p)++;
 8003846:	3301      	adds	r3, #1
    params->tag = **p;
 8003848:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800384c:	4620      	mov	r0, r4
    (*p)++;
 800384e:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8003850:	4639      	mov	r1, r7
 8003852:	f7ff feae 	bl	80035b2 <mbedtls_asn1_get_len>
 8003856:	b968      	cbnz	r0, 8003874 <mbedtls_asn1_get_alg+0x9c>
    params->p = *p;
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	686a      	ldr	r2, [r5, #4]
 8003860:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8003862:	429f      	cmp	r7, r3
    *p += params->len;
 8003864:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8003866:	bf18      	it	ne
 8003868:	f06f 0665 	mvnne.w	r6, #101	; 0x65
 800386c:	e7e2      	b.n	8003834 <mbedtls_asn1_get_alg+0x5c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800386e:	f06f 065f 	mvn.w	r6, #95	; 0x5f
 8003872:	e7df      	b.n	8003834 <mbedtls_asn1_get_alg+0x5c>
 8003874:	4606      	mov	r6, r0
 8003876:	e7dd      	b.n	8003834 <mbedtls_asn1_get_alg+0x5c>

08003878 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8003878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800387c:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8003880:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800399c <mbedtls_base64_decode+0x124>
    for( i = n = j = 0; i < slen; i++ )
 8003884:	2700      	movs	r7, #0
 8003886:	463c      	mov	r4, r7
 8003888:	463d      	mov	r5, r7
 800388a:	4575      	cmp	r5, lr
 800388c:	d22d      	bcs.n	80038ea <mbedtls_base64_decode+0x72>
 800388e:	f04f 0c00 	mov.w	ip, #0
        while( i < slen && src[i] == ' ' )
 8003892:	5d5e      	ldrb	r6, [r3, r5]
 8003894:	2e20      	cmp	r6, #32
 8003896:	d023      	beq.n	80038e0 <mbedtls_base64_decode+0x68>
        if( ( slen - i ) >= 2 &&
 8003898:	ebae 0905 	sub.w	r9, lr, r5
 800389c:	f1b9 0f01 	cmp.w	r9, #1
 80038a0:	d905      	bls.n	80038ae <mbedtls_base64_decode+0x36>
 80038a2:	2e0d      	cmp	r6, #13
 80038a4:	d103      	bne.n	80038ae <mbedtls_base64_decode+0x36>
            src[i] == '\r' && src[i + 1] == '\n' )
 80038a6:	195e      	adds	r6, r3, r5
 80038a8:	7876      	ldrb	r6, [r6, #1]
 80038aa:	2e0a      	cmp	r6, #10
 80038ac:	d016      	beq.n	80038dc <mbedtls_base64_decode+0x64>
        if( src[i] == '\n' )
 80038ae:	5d5e      	ldrb	r6, [r3, r5]
 80038b0:	2e0a      	cmp	r6, #10
 80038b2:	d013      	beq.n	80038dc <mbedtls_base64_decode+0x64>
        if( x != 0 )
 80038b4:	f1bc 0f00 	cmp.w	ip, #0
 80038b8:	d16c      	bne.n	8003994 <mbedtls_base64_decode+0x11c>
        if( src[i] == '=' && ++j > 2 )
 80038ba:	2e3d      	cmp	r6, #61	; 0x3d
 80038bc:	d102      	bne.n	80038c4 <mbedtls_base64_decode+0x4c>
 80038be:	3701      	adds	r7, #1
 80038c0:	2f02      	cmp	r7, #2
 80038c2:	d867      	bhi.n	8003994 <mbedtls_base64_decode+0x11c>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80038c4:	f016 0f80 	tst.w	r6, #128	; 0x80
 80038c8:	d164      	bne.n	8003994 <mbedtls_base64_decode+0x11c>
 80038ca:	f818 6006 	ldrb.w	r6, [r8, r6]
 80038ce:	2e7f      	cmp	r6, #127	; 0x7f
 80038d0:	d060      	beq.n	8003994 <mbedtls_base64_decode+0x11c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80038d2:	2e3f      	cmp	r6, #63	; 0x3f
 80038d4:	d801      	bhi.n	80038da <mbedtls_base64_decode+0x62>
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	d15c      	bne.n	8003994 <mbedtls_base64_decode+0x11c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 80038da:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 80038dc:	3501      	adds	r5, #1
 80038de:	e7d4      	b.n	800388a <mbedtls_base64_decode+0x12>
            ++i;
 80038e0:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 80038e2:	45ae      	cmp	lr, r5
            ++x;
 80038e4:	f10c 0c01 	add.w	ip, ip, #1
        while( i < slen && src[i] == ' ' )
 80038e8:	d1d3      	bne.n	8003892 <mbedtls_base64_decode+0x1a>
    }

    if( n == 0 )
 80038ea:	b91c      	cbnz	r4, 80038f4 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 80038ec:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 80038ee:	2000      	movs	r0, #0
 80038f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 80038f4:	f004 0e07 	and.w	lr, r4, #7
 80038f8:	2606      	movs	r6, #6
 80038fa:	08e4      	lsrs	r4, r4, #3
 80038fc:	fb06 fe0e 	mul.w	lr, r6, lr
 8003900:	4374      	muls	r4, r6
 8003902:	f10e 0e07 	add.w	lr, lr, #7
 8003906:	1be4      	subs	r4, r4, r7
    n -= j;
 8003908:	eb04 04de 	add.w	r4, r4, lr, lsr #3
    if( dst == NULL || dlen < n )
 800390c:	b178      	cbz	r0, 800392e <mbedtls_base64_decode+0xb6>
 800390e:	428c      	cmp	r4, r1
 8003910:	d80d      	bhi.n	800392e <mbedtls_base64_decode+0xb6>
 8003912:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
 8003914:	f8df c084 	ldr.w	ip, [pc, #132]	; 800399c <mbedtls_base64_decode+0x124>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8003918:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80039a0 <mbedtls_base64_decode+0x128>
 800391c:	441d      	add	r5, r3
    if( dst == NULL || dlen < n )
 800391e:	4601      	mov	r1, r0
 8003920:	2603      	movs	r6, #3
 8003922:	463c      	mov	r4, r7
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8003924:	42ab      	cmp	r3, r5
 8003926:	d107      	bne.n	8003938 <mbedtls_base64_decode+0xc0>
    *olen = p - dst;
 8003928:	1a09      	subs	r1, r1, r0
 800392a:	6011      	str	r1, [r2, #0]
 800392c:	e7df      	b.n	80038ee <mbedtls_base64_decode+0x76>
        *olen = n;
 800392e:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8003930:	f06f 0029 	mvn.w	r0, #41	; 0x29
 8003934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8003938:	f813 9b01 	ldrb.w	r9, [r3], #1
 800393c:	f1a9 0e0a 	sub.w	lr, r9, #10
 8003940:	fa5f fe8e 	uxtb.w	lr, lr
 8003944:	f1be 0f16 	cmp.w	lr, #22
 8003948:	d804      	bhi.n	8003954 <mbedtls_base64_decode+0xdc>
 800394a:	fa28 fe0e 	lsr.w	lr, r8, lr
 800394e:	f01e 0f01 	tst.w	lr, #1
 8003952:	d1e7      	bne.n	8003924 <mbedtls_base64_decode+0xac>
        j -= ( base64_dec_map[*src] == 64 );
 8003954:	f81c e009 	ldrb.w	lr, [ip, r9]
        if( ++n == 4 )
 8003958:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800395a:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 800395e:	bf08      	it	eq
 8003960:	3e01      	subeq	r6, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8003962:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
        if( ++n == 4 )
 8003966:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8003968:	ea4e 1787 	orr.w	r7, lr, r7, lsl #6
        if( ++n == 4 )
 800396c:	d1da      	bne.n	8003924 <mbedtls_base64_decode+0xac>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800396e:	b17e      	cbz	r6, 8003990 <mbedtls_base64_decode+0x118>
 8003970:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8003972:	2e01      	cmp	r6, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8003974:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8003976:	d102      	bne.n	800397e <mbedtls_base64_decode+0x106>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8003978:	3101      	adds	r1, #1
            n = 0;
 800397a:	2400      	movs	r4, #0
 800397c:	e7d2      	b.n	8003924 <mbedtls_base64_decode+0xac>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800397e:	2e02      	cmp	r6, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8003980:	ea4f 2417 	mov.w	r4, r7, lsr #8
 8003984:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8003986:	bf16      	itet	ne
 8003988:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800398a:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800398c:	3103      	addne	r1, #3
 800398e:	e7f4      	b.n	800397a <mbedtls_base64_decode+0x102>
            n = 0;
 8003990:	4634      	mov	r4, r6
 8003992:	e7c7      	b.n	8003924 <mbedtls_base64_decode+0xac>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8003994:	f06f 002b 	mvn.w	r0, #43	; 0x2b
}
 8003998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800399c:	08010a60 	.word	0x08010a60
 80039a0:	00400009 	.word	0x00400009

080039a4 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80039a4:	2300      	movs	r3, #0
{
 80039a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = c = 0; i < n; i++, s++, d++ )
 80039a8:	4616      	mov	r6, r2
 80039aa:	461c      	mov	r4, r3
 80039ac:	4284      	cmp	r4, r0
 80039ae:	d103      	bne.n	80039b8 <mpi_sub_hlp+0x14>
 80039b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80039b4:	b9bb      	cbnz	r3, 80039e6 <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; i++; d++;
    }
}
 80039b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 80039b8:	f8d6 e000 	ldr.w	lr, [r6]
 80039bc:	ebae 0503 	sub.w	r5, lr, r3
 80039c0:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 80039c2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 80039c6:	42bd      	cmp	r5, r7
 80039c8:	bf2c      	ite	cs
 80039ca:	f04f 0c00 	movcs.w	ip, #0
 80039ce:	f04f 0c01 	movcc.w	ip, #1
 80039d2:	1bed      	subs	r5, r5, r7
 80039d4:	4573      	cmp	r3, lr
 80039d6:	bf94      	ite	ls
 80039d8:	4663      	movls	r3, ip
 80039da:	f10c 0301 	addhi.w	r3, ip, #1
 80039de:	f846 5b04 	str.w	r5, [r6], #4
    for( i = c = 0; i < n; i++, s++, d++ )
 80039e2:	3401      	adds	r4, #1
 80039e4:	e7e2      	b.n	80039ac <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 80039e6:	6811      	ldr	r1, [r2, #0]
 80039e8:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 80039ea:	428b      	cmp	r3, r1
        z = ( *d < c ); *d -= c;
 80039ec:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 80039f0:	bf94      	ite	ls
 80039f2:	2300      	movls	r3, #0
 80039f4:	2301      	movhi	r3, #1
 80039f6:	e7dd      	b.n	80039b4 <mpi_sub_hlp+0x10>

080039f8 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_mpi_uint c = 0, t = 0;
 80039fc:	f04f 0c00 	mov.w	ip, #0
 8003a00:	460d      	mov	r5, r1
 8003a02:	4614      	mov	r4, r2
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8003a04:	4686      	mov	lr, r0
 8003a06:	f1be 0f0f 	cmp.w	lr, #15
 8003a0a:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8003a0e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8003a12:	f200 8087 	bhi.w	8003b24 <mpi_mul_hlp+0x12c>
 8003a16:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8003a1a:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8003a1e:	2807      	cmp	r0, #7
 8003a20:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 8003a24:	eb01 050e 	add.w	r5, r1, lr
 8003a28:	eb02 040e 	add.w	r4, r2, lr
 8003a2c:	d966      	bls.n	8003afc <mpi_mul_hlp+0x104>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 8003a2e:	f851 600e 	ldr.w	r6, [r1, lr]
 8003a32:	fba3 7806 	umull	r7, r8, r3, r6
 8003a36:	f852 600e 	ldr.w	r6, [r2, lr]
 8003a3a:	eb1c 0c07 	adds.w	ip, ip, r7
 8003a3e:	bf2c      	ite	cs
 8003a40:	2101      	movcs	r1, #1
 8003a42:	2100      	movcc	r1, #0
 8003a44:	eb1c 0606 	adds.w	r6, ip, r6
 8003a48:	f842 600e 	str.w	r6, [r2, lr]
 8003a4c:	686e      	ldr	r6, [r5, #4]
 8003a4e:	eb41 0108 	adc.w	r1, r1, r8
 8003a52:	fba3 7806 	umull	r7, r8, r3, r6
 8003a56:	6866      	ldr	r6, [r4, #4]
 8003a58:	19ca      	adds	r2, r1, r7
 8003a5a:	bf2c      	ite	cs
 8003a5c:	2101      	movcs	r1, #1
 8003a5e:	2100      	movcc	r1, #0
 8003a60:	1992      	adds	r2, r2, r6
 8003a62:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 8003a64:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
 8003a66:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 8003a6a:	fba3 7806 	umull	r7, r8, r3, r6
 8003a6e:	68a6      	ldr	r6, [r4, #8]
 8003a70:	19c9      	adds	r1, r1, r7
 8003a72:	bf2c      	ite	cs
 8003a74:	2201      	movcs	r2, #1
 8003a76:	2200      	movcc	r2, #0
 8003a78:	1989      	adds	r1, r1, r6
 8003a7a:	60a1      	str	r1, [r4, #8]
 8003a7c:	68ee      	ldr	r6, [r5, #12]
 8003a7e:	eb42 0208 	adc.w	r2, r2, r8
 8003a82:	fba3 7806 	umull	r7, r8, r3, r6
 8003a86:	68e6      	ldr	r6, [r4, #12]
 8003a88:	19d2      	adds	r2, r2, r7
 8003a8a:	bf2c      	ite	cs
 8003a8c:	2101      	movcs	r1, #1
 8003a8e:	2100      	movcc	r1, #0
 8003a90:	1992      	adds	r2, r2, r6
 8003a92:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 8003a94:	692e      	ldr	r6, [r5, #16]
        MULADDC_CORE   MULADDC_CORE
 8003a96:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 8003a9a:	fba3 7806 	umull	r7, r8, r3, r6
 8003a9e:	6926      	ldr	r6, [r4, #16]
 8003aa0:	19c9      	adds	r1, r1, r7
 8003aa2:	bf2c      	ite	cs
 8003aa4:	2201      	movcs	r2, #1
 8003aa6:	2200      	movcc	r2, #0
 8003aa8:	1989      	adds	r1, r1, r6
 8003aaa:	6121      	str	r1, [r4, #16]
 8003aac:	696e      	ldr	r6, [r5, #20]
 8003aae:	eb42 0208 	adc.w	r2, r2, r8
 8003ab2:	fba3 7806 	umull	r7, r8, r3, r6
 8003ab6:	6966      	ldr	r6, [r4, #20]
 8003ab8:	19d2      	adds	r2, r2, r7
 8003aba:	bf2c      	ite	cs
 8003abc:	2101      	movcs	r1, #1
 8003abe:	2100      	movcc	r1, #0
 8003ac0:	1992      	adds	r2, r2, r6
 8003ac2:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 8003ac4:	69ae      	ldr	r6, [r5, #24]
        MULADDC_CORE   MULADDC_CORE
 8003ac6:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 8003aca:	fba3 7806 	umull	r7, r8, r3, r6
 8003ace:	69a6      	ldr	r6, [r4, #24]
 8003ad0:	19c9      	adds	r1, r1, r7
 8003ad2:	bf2c      	ite	cs
 8003ad4:	2201      	movcs	r2, #1
 8003ad6:	2200      	movcc	r2, #0
 8003ad8:	1989      	adds	r1, r1, r6
 8003ada:	61a1      	str	r1, [r4, #24]
 8003adc:	69ee      	ldr	r6, [r5, #28]
 8003ade:	69e1      	ldr	r1, [r4, #28]
 8003ae0:	fba3 6706 	umull	r6, r7, r3, r6
 8003ae4:	eb42 0208 	adc.w	r2, r2, r8
 8003ae8:	1992      	adds	r2, r2, r6
 8003aea:	bf2c      	ite	cs
 8003aec:	f04f 0c01 	movcs.w	ip, #1
 8003af0:	f04f 0c00 	movcc.w	ip, #0
 8003af4:	1852      	adds	r2, r2, r1
 8003af6:	eb4c 0c07 	adc.w	ip, ip, r7
 8003afa:	61e2      	str	r2, [r4, #28]
 8003afc:	08c2      	lsrs	r2, r0, #3
 8003afe:	0151      	lsls	r1, r2, #5
 8003b00:	440c      	add	r4, r1
 8003b02:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 8003b06:	440d      	add	r5, r1
 8003b08:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8003b0c:	4284      	cmp	r4, r0
 8003b0e:	f040 812c 	bne.w	8003d6a <mpi_mul_hlp+0x372>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 8003b12:	6803      	ldr	r3, [r0, #0]
 8003b14:	4463      	add	r3, ip
    }
    while( c != 0 );
 8003b16:	459c      	cmp	ip, r3
        *d += c; c = ( *d < c ); d++;
 8003b18:	f840 3b04 	str.w	r3, [r0], #4
    while( c != 0 );
 8003b1c:	f200 813a 	bhi.w	8003d94 <mpi_mul_hlp+0x39c>
}
 8003b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_CORE   MULADDC_CORE
 8003b24:	f855 6c40 	ldr.w	r6, [r5, #-64]
 8003b28:	fba3 9a06 	umull	r9, sl, r3, r6
 8003b2c:	f854 6c40 	ldr.w	r6, [r4, #-64]
 8003b30:	eb1c 0c09 	adds.w	ip, ip, r9
 8003b34:	bf2c      	ite	cs
 8003b36:	f04f 0801 	movcs.w	r8, #1
 8003b3a:	f04f 0800 	movcc.w	r8, #0
 8003b3e:	eb1c 0606 	adds.w	r6, ip, r6
 8003b42:	f844 6c40 	str.w	r6, [r4, #-64]
 8003b46:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 8003b4a:	eb48 080a 	adc.w	r8, r8, sl
 8003b4e:	fba3 9a06 	umull	r9, sl, r3, r6
 8003b52:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 8003b56:	eb18 0809 	adds.w	r8, r8, r9
 8003b5a:	bf2c      	ite	cs
 8003b5c:	f04f 0c01 	movcs.w	ip, #1
 8003b60:	f04f 0c00 	movcc.w	ip, #0
 8003b64:	eb18 0606 	adds.w	r6, r8, r6
 8003b68:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 8003b6c:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
 8003b70:	eb4c 070a 	adc.w	r7, ip, sl
        MULADDC_CORE   MULADDC_CORE
 8003b74:	fba3 8906 	umull	r8, r9, r3, r6
 8003b78:	f854 6c38 	ldr.w	r6, [r4, #-56]
 8003b7c:	eb17 0708 	adds.w	r7, r7, r8
 8003b80:	bf2c      	ite	cs
 8003b82:	f04f 0c01 	movcs.w	ip, #1
 8003b86:	f04f 0c00 	movcc.w	ip, #0
 8003b8a:	19be      	adds	r6, r7, r6
 8003b8c:	f844 6c38 	str.w	r6, [r4, #-56]
 8003b90:	f855 7c34 	ldr.w	r7, [r5, #-52]
 8003b94:	f854 6c34 	ldr.w	r6, [r4, #-52]
 8003b98:	eb4c 0c09 	adc.w	ip, ip, r9
 8003b9c:	fba3 8907 	umull	r8, r9, r3, r7
 8003ba0:	eb1c 0c08 	adds.w	ip, ip, r8
 8003ba4:	bf2c      	ite	cs
 8003ba6:	2701      	movcs	r7, #1
 8003ba8:	2700      	movcc	r7, #0
 8003baa:	eb1c 0606 	adds.w	r6, ip, r6
 8003bae:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 8003bb2:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
 8003bb6:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8003bba:	fba3 8906 	umull	r8, r9, r3, r6
 8003bbe:	f854 6c30 	ldr.w	r6, [r4, #-48]
 8003bc2:	eb17 0708 	adds.w	r7, r7, r8
 8003bc6:	bf2c      	ite	cs
 8003bc8:	f04f 0c01 	movcs.w	ip, #1
 8003bcc:	f04f 0c00 	movcc.w	ip, #0
 8003bd0:	19be      	adds	r6, r7, r6
 8003bd2:	f844 6c30 	str.w	r6, [r4, #-48]
 8003bd6:	f855 7c2c 	ldr.w	r7, [r5, #-44]
 8003bda:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 8003bde:	eb4c 0c09 	adc.w	ip, ip, r9
 8003be2:	fba3 8907 	umull	r8, r9, r3, r7
 8003be6:	eb1c 0c08 	adds.w	ip, ip, r8
 8003bea:	bf2c      	ite	cs
 8003bec:	2701      	movcs	r7, #1
 8003bee:	2700      	movcc	r7, #0
 8003bf0:	eb1c 0606 	adds.w	r6, ip, r6
 8003bf4:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 8003bf8:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
 8003bfc:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8003c00:	fba3 8906 	umull	r8, r9, r3, r6
 8003c04:	f854 6c28 	ldr.w	r6, [r4, #-40]
 8003c08:	eb17 0708 	adds.w	r7, r7, r8
 8003c0c:	bf2c      	ite	cs
 8003c0e:	f04f 0c01 	movcs.w	ip, #1
 8003c12:	f04f 0c00 	movcc.w	ip, #0
 8003c16:	19be      	adds	r6, r7, r6
 8003c18:	f844 6c28 	str.w	r6, [r4, #-40]
 8003c1c:	f855 7c24 	ldr.w	r7, [r5, #-36]
 8003c20:	f854 6c24 	ldr.w	r6, [r4, #-36]
 8003c24:	eb4c 0c09 	adc.w	ip, ip, r9
 8003c28:	fba3 8907 	umull	r8, r9, r3, r7
 8003c2c:	eb1c 0c08 	adds.w	ip, ip, r8
 8003c30:	bf2c      	ite	cs
 8003c32:	2701      	movcs	r7, #1
 8003c34:	2700      	movcc	r7, #0
 8003c36:	eb1c 0606 	adds.w	r6, ip, r6
 8003c3a:	f844 6c24 	str.w	r6, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
 8003c3e:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
 8003c42:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8003c46:	fba3 8906 	umull	r8, r9, r3, r6
 8003c4a:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8003c4e:	eb17 0708 	adds.w	r7, r7, r8
 8003c52:	bf2c      	ite	cs
 8003c54:	f04f 0c01 	movcs.w	ip, #1
 8003c58:	f04f 0c00 	movcc.w	ip, #0
 8003c5c:	19be      	adds	r6, r7, r6
 8003c5e:	f844 6c20 	str.w	r6, [r4, #-32]
 8003c62:	f855 7c1c 	ldr.w	r7, [r5, #-28]
 8003c66:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 8003c6a:	eb4c 0c09 	adc.w	ip, ip, r9
 8003c6e:	fba3 8907 	umull	r8, r9, r3, r7
 8003c72:	eb1c 0c08 	adds.w	ip, ip, r8
 8003c76:	bf2c      	ite	cs
 8003c78:	2701      	movcs	r7, #1
 8003c7a:	2700      	movcc	r7, #0
 8003c7c:	eb1c 0606 	adds.w	r6, ip, r6
 8003c80:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 8003c84:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
 8003c88:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8003c8c:	fba3 8906 	umull	r8, r9, r3, r6
 8003c90:	f854 6c18 	ldr.w	r6, [r4, #-24]
 8003c94:	eb17 0708 	adds.w	r7, r7, r8
 8003c98:	bf2c      	ite	cs
 8003c9a:	f04f 0c01 	movcs.w	ip, #1
 8003c9e:	f04f 0c00 	movcc.w	ip, #0
 8003ca2:	19be      	adds	r6, r7, r6
 8003ca4:	f844 6c18 	str.w	r6, [r4, #-24]
 8003ca8:	f855 7c14 	ldr.w	r7, [r5, #-20]
 8003cac:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8003cb0:	eb4c 0c09 	adc.w	ip, ip, r9
 8003cb4:	fba3 8907 	umull	r8, r9, r3, r7
 8003cb8:	eb1c 0c08 	adds.w	ip, ip, r8
 8003cbc:	bf2c      	ite	cs
 8003cbe:	2701      	movcs	r7, #1
 8003cc0:	2700      	movcc	r7, #0
 8003cc2:	eb1c 0606 	adds.w	r6, ip, r6
 8003cc6:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 8003cca:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
 8003cce:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8003cd2:	fba3 8906 	umull	r8, r9, r3, r6
 8003cd6:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8003cda:	eb17 0708 	adds.w	r7, r7, r8
 8003cde:	bf2c      	ite	cs
 8003ce0:	f04f 0c01 	movcs.w	ip, #1
 8003ce4:	f04f 0c00 	movcc.w	ip, #0
 8003ce8:	19be      	adds	r6, r7, r6
 8003cea:	f844 6c10 	str.w	r6, [r4, #-16]
 8003cee:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 8003cf2:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8003cf6:	eb4c 0c09 	adc.w	ip, ip, r9
 8003cfa:	fba3 8907 	umull	r8, r9, r3, r7
 8003cfe:	eb1c 0c08 	adds.w	ip, ip, r8
 8003d02:	bf2c      	ite	cs
 8003d04:	2701      	movcs	r7, #1
 8003d06:	2700      	movcc	r7, #0
 8003d08:	eb1c 0606 	adds.w	r6, ip, r6
 8003d0c:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 8003d10:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
 8003d14:	eb47 0709 	adc.w	r7, r7, r9
        MULADDC_CORE   MULADDC_CORE
 8003d18:	fba3 8906 	umull	r8, r9, r3, r6
 8003d1c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8003d20:	eb17 0708 	adds.w	r7, r7, r8
 8003d24:	bf2c      	ite	cs
 8003d26:	f04f 0c01 	movcs.w	ip, #1
 8003d2a:	f04f 0c00 	movcc.w	ip, #0
 8003d2e:	19be      	adds	r6, r7, r6
 8003d30:	f844 6c08 	str.w	r6, [r4, #-8]
 8003d34:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8003d38:	eb4c 0c09 	adc.w	ip, ip, r9
 8003d3c:	fba3 7806 	umull	r7, r8, r3, r6
 8003d40:	eb1c 0c07 	adds.w	ip, ip, r7
 8003d44:	bf2c      	ite	cs
 8003d46:	2601      	movcs	r6, #1
 8003d48:	2600      	movcc	r6, #0
 8003d4a:	eb08 0706 	add.w	r7, r8, r6
 8003d4e:	f854 8c04 	ldr.w	r8, [r4, #-4]
 8003d52:	eb0c 0608 	add.w	r6, ip, r8
 8003d56:	f844 6c04 	str.w	r6, [r4, #-4]
    for( ; i >= 16; i -= 16 )
 8003d5a:	f1ae 0e10 	sub.w	lr, lr, #16
        MULADDC_CORE   MULADDC_CORE
 8003d5e:	45b0      	cmp	r8, r6
 8003d60:	bf94      	ite	ls
 8003d62:	46bc      	movls	ip, r7
 8003d64:	f107 0c01 	addhi.w	ip, r7, #1
 8003d68:	e64d      	b.n	8003a06 <mpi_mul_hlp+0xe>
        MULADDC_CORE
 8003d6a:	f855 6b04 	ldr.w	r6, [r5], #4
 8003d6e:	fba3 6706 	umull	r6, r7, r3, r6
 8003d72:	eb1c 0c06 	adds.w	ip, ip, r6
 8003d76:	6826      	ldr	r6, [r4, #0]
 8003d78:	bf2c      	ite	cs
 8003d7a:	2101      	movcs	r1, #1
 8003d7c:	2100      	movcc	r1, #0
 8003d7e:	eb0c 0206 	add.w	r2, ip, r6
 8003d82:	4439      	add	r1, r7
 8003d84:	f844 2b04 	str.w	r2, [r4], #4
 8003d88:	4296      	cmp	r6, r2
 8003d8a:	bf94      	ite	ls
 8003d8c:	468c      	movls	ip, r1
 8003d8e:	f101 0c01 	addhi.w	ip, r1, #1
 8003d92:	e6bb      	b.n	8003b0c <mpi_mul_hlp+0x114>
        *d += c; c = ( *d < c ); d++;
 8003d94:	f04f 0c01 	mov.w	ip, #1
 8003d98:	e6bb      	b.n	8003b12 <mpi_mul_hlp+0x11a>

08003d9a <mbedtls_mpi_init>:
    if( X == NULL )
 8003d9a:	b120      	cbz	r0, 8003da6 <mbedtls_mpi_init+0xc>
    X->s = 1;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	6003      	str	r3, [r0, #0]
    X->n = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 8003da4:	6083      	str	r3, [r0, #8]
 8003da6:	4770      	bx	lr

08003da8 <mbedtls_mpi_free>:
{
 8003da8:	b510      	push	{r4, lr}
    if( X == NULL )
 8003daa:	4604      	mov	r4, r0
 8003dac:	b170      	cbz	r0, 8003dcc <mbedtls_mpi_free+0x24>
    if( X->p != NULL )
 8003dae:	6880      	ldr	r0, [r0, #8]
 8003db0:	b138      	cbz	r0, 8003dc2 <mbedtls_mpi_free+0x1a>
        mbedtls_mpi_zeroize( X->p, X->n );
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	4602      	mov	r2, r0
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8003db6:	2100      	movs	r1, #0
 8003db8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003dbc:	d207      	bcs.n	8003dce <mbedtls_mpi_free+0x26>
        mbedtls_free( X->p );
 8003dbe:	f00b f837 	bl	800ee30 <free>
    X->s = 1;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	6023      	str	r3, [r4, #0]
    X->n = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 8003dca:	60a3      	str	r3, [r4, #8]
 8003dcc:	bd10      	pop	{r4, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8003dce:	6011      	str	r1, [r2, #0]
 8003dd0:	3204      	adds	r2, #4
 8003dd2:	e7f1      	b.n	8003db8 <mbedtls_mpi_free+0x10>

08003dd4 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8003dd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003dd8:	4299      	cmp	r1, r3
{
 8003dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dde:	4605      	mov	r5, r0
 8003de0:	460e      	mov	r6, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8003de2:	d903      	bls.n	8003dec <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8003de4:	f06f 000f 	mvn.w	r0, #15
 8003de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n < nblimbs )
 8003dec:	6844      	ldr	r4, [r0, #4]
 8003dee:	42a1      	cmp	r1, r4
 8003df0:	d917      	bls.n	8003e22 <mbedtls_mpi_grow+0x4e>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8003df2:	2104      	movs	r1, #4
 8003df4:	4630      	mov	r0, r6
 8003df6:	f00a ffe1 	bl	800edbc <calloc>
 8003dfa:	4680      	mov	r8, r0
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d0f1      	beq.n	8003de4 <mbedtls_mpi_grow+0x10>
        if( X->p != NULL )
 8003e00:	68af      	ldr	r7, [r5, #8]
 8003e02:	b15f      	cbz	r7, 8003e1c <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 8003e04:	00a2      	lsls	r2, r4, #2
 8003e06:	4639      	mov	r1, r7
 8003e08:	f00b f829 	bl	800ee5e <memcpy>
 8003e0c:	463b      	mov	r3, r7
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f114 34ff 	adds.w	r4, r4, #4294967295
 8003e14:	d208      	bcs.n	8003e28 <mbedtls_mpi_grow+0x54>
            mbedtls_free( X->p );
 8003e16:	4638      	mov	r0, r7
 8003e18:	f00b f80a 	bl	800ee30 <free>
        X->n = nblimbs;
 8003e1c:	606e      	str	r6, [r5, #4]
        X->p = p;
 8003e1e:	f8c5 8008 	str.w	r8, [r5, #8]
    return( 0 );
 8003e22:	2000      	movs	r0, #0
}
 8003e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	e7f0      	b.n	8003e10 <mbedtls_mpi_grow+0x3c>

08003e2e <mbedtls_mpi_copy>:
    if( X == Y )
 8003e2e:	4288      	cmp	r0, r1
{
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	4606      	mov	r6, r0
 8003e34:	460f      	mov	r7, r1
    if( X == Y )
 8003e36:	d022      	beq.n	8003e7e <mbedtls_mpi_copy+0x50>
    if( Y->p == NULL )
 8003e38:	688d      	ldr	r5, [r1, #8]
 8003e3a:	b91d      	cbnz	r5, 8003e44 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 8003e3c:	f7ff ffb4 	bl	8003da8 <mbedtls_mpi_free>
}
 8003e40:	4628      	mov	r0, r5
 8003e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 8003e44:	684a      	ldr	r2, [r1, #4]
 8003e46:	3a01      	subs	r2, #1
 8003e48:	b11a      	cbz	r2, 8003e52 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 8003e4a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f9      	beq.n	8003e46 <mbedtls_mpi_copy+0x18>
    i++;
 8003e52:	1c54      	adds	r4, r2, #1
    X->s = Y->s;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6033      	str	r3, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f7ff ffba 	bl	8003dd4 <mbedtls_mpi_grow>
 8003e60:	4605      	mov	r5, r0
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d1ec      	bne.n	8003e40 <mbedtls_mpi_copy+0x12>
    memset( X->p, 0, X->n * ciL );
 8003e66:	6872      	ldr	r2, [r6, #4]
 8003e68:	4601      	mov	r1, r0
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	68b0      	ldr	r0, [r6, #8]
 8003e6e:	f00b f81b 	bl	800eea8 <memset>
    memcpy( X->p, Y->p, i * ciL );
 8003e72:	00a2      	lsls	r2, r4, #2
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68b0      	ldr	r0, [r6, #8]
 8003e78:	f00a fff1 	bl	800ee5e <memcpy>
 8003e7c:	e7e0      	b.n	8003e40 <mbedtls_mpi_copy+0x12>
        return( 0 );
 8003e7e:	2500      	movs	r5, #0
 8003e80:	e7de      	b.n	8003e40 <mbedtls_mpi_copy+0x12>

08003e82 <mbedtls_mpi_lset>:
{
 8003e82:	b570      	push	{r4, r5, r6, lr}
 8003e84:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8003e86:	2101      	movs	r1, #1
{
 8003e88:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8003e8a:	f7ff ffa3 	bl	8003dd4 <mbedtls_mpi_grow>
 8003e8e:	4605      	mov	r5, r0
 8003e90:	b988      	cbnz	r0, 8003eb6 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 8003e92:	6862      	ldr	r2, [r4, #4]
 8003e94:	4601      	mov	r1, r0
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	68a0      	ldr	r0, [r4, #8]
 8003e9a:	f00b f805 	bl	800eea8 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8003e9e:	68a3      	ldr	r3, [r4, #8]
 8003ea0:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 8003ea4:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 8003ea6:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 8003eaa:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8003eac:	bfb4      	ite	lt
 8003eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb2:	2301      	movge	r3, #1
 8003eb4:	6023      	str	r3, [r4, #0]
}
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	bd70      	pop	{r4, r5, r6, pc}

08003eba <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 8003eba:	6843      	ldr	r3, [r0, #4]
 8003ebc:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8003ec0:	bf3f      	itttt	cc
 8003ec2:	6883      	ldrcc	r3, [r0, #8]
 8003ec4:	094a      	lsrcc	r2, r1, #5
 8003ec6:	f001 011f 	andcc.w	r1, r1, #31
 8003eca:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 8003ece:	bf3a      	itte	cc
 8003ed0:	40c8      	lsrcc	r0, r1
 8003ed2:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 8003ed6:	2000      	movcs	r0, #0
}
 8003ed8:	4770      	bx	lr

08003eda <mbedtls_mpi_lsb>:
{
 8003eda:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
 8003edc:	2300      	movs	r3, #0
    for( i = 0; i < X->n; i++ )
 8003ede:	6845      	ldr	r5, [r0, #4]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	42a9      	cmp	r1, r5
 8003ee4:	d00e      	beq.n	8003f04 <mbedtls_mpi_lsb+0x2a>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8003ee6:	6882      	ldr	r2, [r0, #8]
 8003ee8:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8003eec:	2200      	movs	r2, #0
 8003eee:	fa24 f602 	lsr.w	r6, r4, r2
 8003ef2:	07f6      	lsls	r6, r6, #31
 8003ef4:	d407      	bmi.n	8003f06 <mbedtls_mpi_lsb+0x2c>
        for( j = 0; j < biL; j++, count++ )
 8003ef6:	3201      	adds	r2, #1
 8003ef8:	2a20      	cmp	r2, #32
 8003efa:	f103 0301 	add.w	r3, r3, #1
 8003efe:	d1f6      	bne.n	8003eee <mbedtls_mpi_lsb+0x14>
    for( i = 0; i < X->n; i++ )
 8003f00:	3101      	adds	r1, #1
 8003f02:	e7ee      	b.n	8003ee2 <mbedtls_mpi_lsb+0x8>
    return( 0 );
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	bd70      	pop	{r4, r5, r6, pc}

08003f0a <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 8003f0a:	6843      	ldr	r3, [r0, #4]
{
 8003f0c:	b510      	push	{r4, lr}
    if( X->n == 0 )
 8003f0e:	b1e3      	cbz	r3, 8003f4a <mbedtls_mpi_bitlen+0x40>
    for( i = X->n - 1; i > 0; i-- )
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f16:	3b01      	subs	r3, #1
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	6881      	ldr	r1, [r0, #8]
 8003f1c:	b97a      	cbnz	r2, 8003f3e <mbedtls_mpi_bitlen+0x34>
    j = biL - mbedtls_clz( X->p[i] );
 8003f1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    for( j = 0; j < biL; j++ )
 8003f22:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8003f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        if( x & mask ) break;
 8003f28:	4219      	tst	r1, r3
 8003f2a:	d104      	bne.n	8003f36 <mbedtls_mpi_bitlen+0x2c>
    for( j = 0; j < biL; j++ )
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	2820      	cmp	r0, #32
        mask >>= 1;
 8003f30:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 8003f34:	d1f8      	bne.n	8003f28 <mbedtls_mpi_bitlen+0x1e>
    return( ( i * biL ) + j );
 8003f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003f3a:	3020      	adds	r0, #32
 8003f3c:	bd10      	pop	{r4, pc}
        if( X->p[i] != 0 )
 8003f3e:	58cc      	ldr	r4, [r1, r3]
 8003f40:	3b04      	subs	r3, #4
 8003f42:	2c00      	cmp	r4, #0
 8003f44:	d1eb      	bne.n	8003f1e <mbedtls_mpi_bitlen+0x14>
    for( i = X->n - 1; i > 0; i-- )
 8003f46:	3a01      	subs	r2, #1
 8003f48:	e7e7      	b.n	8003f1a <mbedtls_mpi_bitlen+0x10>
        return( 0 );
 8003f4a:	4618      	mov	r0, r3
}
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <mbedtls_mpi_size>:
{
 8003f4e:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 8003f50:	f7ff ffdb 	bl	8003f0a <mbedtls_mpi_bitlen>
 8003f54:	3007      	adds	r0, #7
}
 8003f56:	08c0      	lsrs	r0, r0, #3
 8003f58:	bd08      	pop	{r3, pc}

08003f5a <mbedtls_mpi_read_binary>:
{
 8003f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5c:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8003f5e:	f012 0103 	ands.w	r1, r2, #3
 8003f62:	bf18      	it	ne
 8003f64:	2101      	movne	r1, #1
    if( X->n != limbs )
 8003f66:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8003f68:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    if( X->n != limbs )
 8003f6c:	429c      	cmp	r4, r3
{
 8003f6e:	4606      	mov	r6, r0
 8003f70:	4615      	mov	r5, r2
    if( X->n != limbs )
 8003f72:	d105      	bne.n	8003f80 <mbedtls_mpi_read_binary+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8003f74:	2100      	movs	r1, #0
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7ff ff83 	bl	8003e82 <mbedtls_mpi_lset>
 8003f7c:	b160      	cbz	r0, 8003f98 <mbedtls_mpi_read_binary+0x3e>
 8003f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mbedtls_mpi_free( X );
 8003f80:	f7ff ff12 	bl	8003da8 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7ff ff08 	bl	8003d9a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff ff21 	bl	8003dd4 <mbedtls_mpi_grow>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0ee      	beq.n	8003f74 <mbedtls_mpi_read_binary+0x1a>
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f98:	1979      	adds	r1, r7, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8003f9a:	4603      	mov	r3, r0
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8003f9c:	42ab      	cmp	r3, r5
 8003f9e:	d100      	bne.n	8003fa2 <mbedtls_mpi_read_binary+0x48>
}
 8003fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 8003fa2:	f023 0703 	bic.w	r7, r3, #3
 8003fa6:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 8003faa:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8003fae:	00dc      	lsls	r4, r3, #3
 8003fb0:	f004 0418 	and.w	r4, r4, #24
 8003fb4:	fa02 f404 	lsl.w	r4, r2, r4
 8003fb8:	f85e 2007 	ldr.w	r2, [lr, r7]
 8003fbc:	4322      	orrs	r2, r4
 8003fbe:	f84e 2007 	str.w	r2, [lr, r7]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	e7ea      	b.n	8003f9c <mbedtls_mpi_read_binary+0x42>

08003fc6 <mbedtls_mpi_write_binary>:
{
 8003fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc8:	4617      	mov	r7, r2
 8003fca:	4605      	mov	r5, r0
 8003fcc:	460c      	mov	r4, r1
    n = mbedtls_mpi_size( X );
 8003fce:	f7ff ffbe 	bl	8003f4e <mbedtls_mpi_size>
    if( buflen < n )
 8003fd2:	42b8      	cmp	r0, r7
    n = mbedtls_mpi_size( X );
 8003fd4:	4606      	mov	r6, r0
    if( buflen < n )
 8003fd6:	d816      	bhi.n	8004006 <mbedtls_mpi_write_binary+0x40>
    memset( buf, 0, buflen );
 8003fd8:	4620      	mov	r0, r4
 8003fda:	463a      	mov	r2, r7
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f00a ff63 	bl	800eea8 <memset>
 8003fe2:	443c      	add	r4, r7
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	42b3      	cmp	r3, r6
 8003fe8:	d101      	bne.n	8003fee <mbedtls_mpi_write_binary+0x28>
    return( 0 );
 8003fea:	2000      	movs	r0, #0
 8003fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 8003fee:	f023 0003 	bic.w	r0, r3, #3
 8003ff2:	68af      	ldr	r7, [r5, #8]
 8003ff4:	00da      	lsls	r2, r3, #3
 8003ff6:	f002 0118 	and.w	r1, r2, #24
 8003ffa:	583a      	ldr	r2, [r7, r0]
 8003ffc:	40ca      	lsrs	r2, r1
 8003ffe:	f804 2d01 	strb.w	r2, [r4, #-1]!
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 8004002:	3301      	adds	r3, #1
 8004004:	e7ef      	b.n	8003fe6 <mbedtls_mpi_write_binary+0x20>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8004006:	f06f 0007 	mvn.w	r0, #7
}
 800400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800400c <mbedtls_mpi_shift_l>:
{
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	4606      	mov	r6, r0
 8004010:	460c      	mov	r4, r1
    v0 = count / (biL    );
 8004012:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
 8004014:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 8004018:	f7ff ff77 	bl	8003f0a <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800401c:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800401e:	4420      	add	r0, r4
    if( X->n * biL < i )
 8004020:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 8004024:	d803      	bhi.n	800402e <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 8004026:	b975      	cbnz	r5, 8004046 <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 8004028:	bb4f      	cbnz	r7, 800407e <mbedtls_mpi_shift_l+0x72>
    ret = 0;
 800402a:	2000      	movs	r0, #0
 800402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800402e:	f010 011f 	ands.w	r1, r0, #31
 8004032:	bf18      	it	ne
 8004034:	2101      	movne	r1, #1
 8004036:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff feca 	bl	8003dd4 <mbedtls_mpi_grow>
 8004040:	2800      	cmp	r0, #0
 8004042:	d0f0      	beq.n	8004026 <mbedtls_mpi_shift_l+0x1a>
 8004044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 8004046:	6873      	ldr	r3, [r6, #4]
 8004048:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800404c:	3a01      	subs	r2, #1
 800404e:	f06f 0103 	mvn.w	r1, #3
 8004052:	0092      	lsls	r2, r2, #2
 8004054:	4369      	muls	r1, r5
 8004056:	42ab      	cmp	r3, r5
 8004058:	d80a      	bhi.n	8004070 <mbedtls_mpi_shift_l+0x64>
 800405a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800405e:	3b01      	subs	r3, #1
 8004060:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 8004062:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
 8004064:	1d19      	adds	r1, r3, #4
 8004066:	d0df      	beq.n	8004028 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 8004068:	68b1      	ldr	r1, [r6, #8]
 800406a:	50ca      	str	r2, [r1, r3]
 800406c:	3b04      	subs	r3, #4
 800406e:	e7f9      	b.n	8004064 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 8004070:	68b0      	ldr	r0, [r6, #8]
 8004072:	1884      	adds	r4, r0, r2
        for( i = X->n; i > v0; i-- )
 8004074:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 8004076:	5864      	ldr	r4, [r4, r1]
 8004078:	5084      	str	r4, [r0, r2]
 800407a:	3a04      	subs	r2, #4
 800407c:	e7eb      	b.n	8004056 <mbedtls_mpi_shift_l+0x4a>
        for( i = v0; i < X->n; i++ )
 800407e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8004082:	00ab      	lsls	r3, r5, #2
 8004084:	2100      	movs	r1, #0
            r1 = X->p[i] >> (biL - t1);
 8004086:	f1c7 0c20 	rsb	ip, r7, #32
        for( i = v0; i < X->n; i++ )
 800408a:	4575      	cmp	r5, lr
 800408c:	d2cd      	bcs.n	800402a <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 800408e:	68b4      	ldr	r4, [r6, #8]
 8004090:	58e0      	ldr	r0, [r4, r3]
            X->p[i] <<= t1;
 8004092:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 8004096:	430a      	orrs	r2, r1
 8004098:	50e2      	str	r2, [r4, r3]
        for( i = v0; i < X->n; i++ )
 800409a:	3501      	adds	r5, #1
 800409c:	3304      	adds	r3, #4
            r1 = X->p[i] >> (biL - t1);
 800409e:	fa20 f10c 	lsr.w	r1, r0, ip
 80040a2:	e7f2      	b.n	800408a <mbedtls_mpi_shift_l+0x7e>

080040a4 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80040a4:	6842      	ldr	r2, [r0, #4]
{
 80040a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    v0 = count /  biL;
 80040a8:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80040aa:	4294      	cmp	r4, r2
    v1 = count & (biL - 1);
 80040ac:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80040b0:	d801      	bhi.n	80040b6 <mbedtls_mpi_shift_r+0x12>
 80040b2:	d105      	bne.n	80040c0 <mbedtls_mpi_shift_r+0x1c>
 80040b4:	b371      	cbz	r1, 8004114 <mbedtls_mpi_shift_r+0x70>
        return mbedtls_mpi_lset( X, 0 );
 80040b6:	2100      	movs	r1, #0
}
 80040b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return mbedtls_mpi_lset( X, 0 );
 80040bc:	f7ff bee1 	b.w	8003e82 <mbedtls_mpi_lset>
    if( v0 > 0 )
 80040c0:	bb54      	cbnz	r4, 8004118 <mbedtls_mpi_shift_r+0x74>
    if( v1 > 0 )
 80040c2:	b139      	cbz	r1, 80040d4 <mbedtls_mpi_shift_r+0x30>
 80040c4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80040c8:	3b01      	subs	r3, #1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	2500      	movs	r5, #0
            r1 = X->p[i - 1] << (biL - v1);
 80040ce:	f1c1 0e20 	rsb	lr, r1, #32
        for( i = X->n; i > 0; i-- )
 80040d2:	b9a2      	cbnz	r2, 80040fe <mbedtls_mpi_shift_r+0x5a>
}
 80040d4:	2000      	movs	r0, #0
 80040d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            X->p[i] = X->p[i + v0];
 80040d8:	6885      	ldr	r5, [r0, #8]
 80040da:	191e      	adds	r6, r3, r4
 80040dc:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80040e0:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 80040e4:	3301      	adds	r3, #1
 80040e6:	1b15      	subs	r5, r2, r4
 80040e8:	42ab      	cmp	r3, r5
 80040ea:	d3f5      	bcc.n	80040d8 <mbedtls_mpi_shift_r+0x34>
 80040ec:	00ab      	lsls	r3, r5, #2
            X->p[i] = 0;
 80040ee:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
 80040f0:	4295      	cmp	r5, r2
 80040f2:	d2e6      	bcs.n	80040c2 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
 80040f4:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 80040f6:	3501      	adds	r5, #1
            X->p[i] = 0;
 80040f8:	50f4      	str	r4, [r6, r3]
 80040fa:	3304      	adds	r3, #4
 80040fc:	e7f8      	b.n	80040f0 <mbedtls_mpi_shift_r+0x4c>
            r1 = X->p[i - 1] << (biL - v1);
 80040fe:	6887      	ldr	r7, [r0, #8]
 8004100:	58fe      	ldr	r6, [r7, r3]
            X->p[i - 1] >>= v1;
 8004102:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 8004106:	432c      	orrs	r4, r5
 8004108:	50fc      	str	r4, [r7, r3]
        for( i = X->n; i > 0; i-- )
 800410a:	3a01      	subs	r2, #1
 800410c:	3b04      	subs	r3, #4
            r1 = X->p[i - 1] << (biL - v1);
 800410e:	fa06 f50e 	lsl.w	r5, r6, lr
 8004112:	e7de      	b.n	80040d2 <mbedtls_mpi_shift_r+0x2e>
    if( v0 > 0 )
 8004114:	2c00      	cmp	r4, #0
 8004116:	d0dd      	beq.n	80040d4 <mbedtls_mpi_shift_r+0x30>
 8004118:	2300      	movs	r3, #0
 800411a:	e7e4      	b.n	80040e6 <mbedtls_mpi_shift_r+0x42>

0800411c <mbedtls_mpi_cmp_abs>:
    for( i = X->n; i > 0; i-- )
 800411c:	6843      	ldr	r3, [r0, #4]
{
 800411e:	b570      	push	{r4, r5, r6, lr}
 8004120:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004124:	3a01      	subs	r2, #1
 8004126:	0092      	lsls	r2, r2, #2
    for( i = X->n; i > 0; i-- )
 8004128:	b94b      	cbnz	r3, 800413e <mbedtls_mpi_cmp_abs+0x22>
    for( j = Y->n; j > 0; j-- )
 800412a:	684c      	ldr	r4, [r1, #4]
 800412c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8004130:	3a01      	subs	r2, #1
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	b954      	cbnz	r4, 800414c <mbedtls_mpi_cmp_abs+0x30>
    if( i == 0 && j == 0 )
 8004136:	1c18      	adds	r0, r3, #0
 8004138:	bf18      	it	ne
 800413a:	2001      	movne	r0, #1
}
 800413c:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] != 0 )
 800413e:	6884      	ldr	r4, [r0, #8]
 8004140:	58a4      	ldr	r4, [r4, r2]
 8004142:	3a04      	subs	r2, #4
 8004144:	2c00      	cmp	r4, #0
 8004146:	d1f0      	bne.n	800412a <mbedtls_mpi_cmp_abs+0xe>
    for( i = X->n; i > 0; i-- )
 8004148:	3b01      	subs	r3, #1
 800414a:	e7ed      	b.n	8004128 <mbedtls_mpi_cmp_abs+0xc>
        if( Y->p[j - 1] != 0 )
 800414c:	688d      	ldr	r5, [r1, #8]
 800414e:	58ae      	ldr	r6, [r5, r2]
 8004150:	3a04      	subs	r2, #4
 8004152:	b90e      	cbnz	r6, 8004158 <mbedtls_mpi_cmp_abs+0x3c>
    for( j = Y->n; j > 0; j-- )
 8004154:	3c01      	subs	r4, #1
 8004156:	e7ed      	b.n	8004134 <mbedtls_mpi_cmp_abs+0x18>
    if( i > j ) return(  1 );
 8004158:	429c      	cmp	r4, r3
 800415a:	d311      	bcc.n	8004180 <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
 800415c:	d812      	bhi.n	8004184 <mbedtls_mpi_cmp_abs+0x68>
 800415e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004162:	3a01      	subs	r2, #1
 8004164:	0092      	lsls	r2, r2, #2
    for( ; i > 0; i-- )
 8004166:	b90b      	cbnz	r3, 800416c <mbedtls_mpi_cmp_abs+0x50>
    return( 0 );
 8004168:	4618      	mov	r0, r3
 800416a:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800416c:	6881      	ldr	r1, [r0, #8]
 800416e:	588c      	ldr	r4, [r1, r2]
 8004170:	58a9      	ldr	r1, [r5, r2]
 8004172:	428c      	cmp	r4, r1
 8004174:	d804      	bhi.n	8004180 <mbedtls_mpi_cmp_abs+0x64>
 8004176:	f1a2 0204 	sub.w	r2, r2, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800417a:	d303      	bcc.n	8004184 <mbedtls_mpi_cmp_abs+0x68>
    for( ; i > 0; i-- )
 800417c:	3b01      	subs	r3, #1
 800417e:	e7f2      	b.n	8004166 <mbedtls_mpi_cmp_abs+0x4a>
    if( i > j ) return(  1 );
 8004180:	2001      	movs	r0, #1
 8004182:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	bd70      	pop	{r4, r5, r6, pc}

0800418a <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800418a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418e:	b085      	sub	sp, #20
 8004190:	4616      	mov	r6, r2
 8004192:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 8004194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	6873      	ldr	r3, [r6, #4]
 800419a:	3301      	adds	r3, #1
 800419c:	429a      	cmp	r2, r3
{
 800419e:	4681      	mov	r9, r0
 80041a0:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 80041a2:	d353      	bcc.n	800424c <mpi_montmul+0xc2>
 80041a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a6:	6898      	ldr	r0, [r3, #8]
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d04f      	beq.n	800424c <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 80041ac:	0092      	lsls	r2, r2, #2
 80041ae:	2100      	movs	r1, #0
 80041b0:	f00a fe7a 	bl	800eea8 <memset>

    d = T->p;
 80041b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 80041b6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 80041be:	f8db 3004 	ldr.w	r3, [fp, #4]
    d = T->p;
 80041c2:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 80041c4:	4553      	cmp	r3, sl
 80041c6:	bf28      	it	cs
 80041c8:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80041ca:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 80041ce:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 80041d0:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 80041d2:	2400      	movs	r4, #0
 80041d4:	4554      	cmp	r4, sl
 80041d6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80041da:	d11b      	bne.n	8004214 <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	1f39      	subs	r1, r7, #4
 80041e0:	440b      	add	r3, r1
 80041e2:	463a      	mov	r2, r7
 80041e4:	4619      	mov	r1, r3
 80041e6:	f00a fe3a 	bl	800ee5e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 80041ea:	4631      	mov	r1, r6
 80041ec:	4648      	mov	r0, r9
 80041ee:	f7ff ff95 	bl	800411c <mbedtls_mpi_cmp_abs>
 80041f2:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80041f4:	bfb3      	iteet	lt
 80041f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
        mpi_sub_hlp( n, N->p, A->p );
 80041f8:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 80041fc:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 80041fe:	689a      	ldrlt	r2, [r3, #8]
 8004200:	bfb8      	it	lt
 8004202:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff fbcc 	bl	80039a4 <mpi_sub_hlp>

    return( 0 );
 800420c:	2000      	movs	r0, #0
}
 800420e:	b005      	add	sp, #20
 8004210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004214:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 8004218:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800421c:	682a      	ldr	r2, [r5, #0]
 800421e:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 8004220:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8004222:	fb03 2308 	mla	r3, r3, r8, r2
 8004226:	9a03      	ldr	r2, [sp, #12]
 8004228:	4353      	muls	r3, r2
 800422a:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 800422c:	462a      	mov	r2, r5
 800422e:	4643      	mov	r3, r8
 8004230:	f7ff fbe2 	bl	80039f8 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8004234:	9b02      	ldr	r3, [sp, #8]
 8004236:	68b1      	ldr	r1, [r6, #8]
 8004238:	462a      	mov	r2, r5
 800423a:	4650      	mov	r0, sl
 800423c:	f7ff fbdc 	bl	80039f8 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 8004240:	f845 8b04 	str.w	r8, [r5], #4
 8004244:	2300      	movs	r3, #0
 8004246:	51eb      	str	r3, [r5, r7]
    for( i = 0; i < n; i++ )
 8004248:	3401      	adds	r4, #1
 800424a:	e7c3      	b.n	80041d4 <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800424c:	f06f 0003 	mvn.w	r0, #3
 8004250:	e7dd      	b.n	800420e <mpi_montmul+0x84>

08004252 <mbedtls_mpi_cmp_mpi>:
    for( i = X->n; i > 0; i-- )
 8004252:	6843      	ldr	r3, [r0, #4]
{
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800425a:	3a01      	subs	r2, #1
 800425c:	0092      	lsls	r2, r2, #2
    for( i = X->n; i > 0; i-- )
 800425e:	b93b      	cbnz	r3, 8004270 <mbedtls_mpi_cmp_mpi+0x1e>
    for( j = Y->n; j > 0; j-- )
 8004260:	684c      	ldr	r4, [r1, #4]
 8004262:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8004266:	3a01      	subs	r2, #1
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	b944      	cbnz	r4, 800427e <mbedtls_mpi_cmp_mpi+0x2c>
    if( i == 0 && j == 0 )
 800426c:	b97b      	cbnz	r3, 800428e <mbedtls_mpi_cmp_mpi+0x3c>
 800426e:	e023      	b.n	80042b8 <mbedtls_mpi_cmp_mpi+0x66>
        if( X->p[i - 1] != 0 )
 8004270:	6884      	ldr	r4, [r0, #8]
 8004272:	58a4      	ldr	r4, [r4, r2]
 8004274:	3a04      	subs	r2, #4
 8004276:	2c00      	cmp	r4, #0
 8004278:	d1f2      	bne.n	8004260 <mbedtls_mpi_cmp_mpi+0xe>
    for( i = X->n; i > 0; i-- )
 800427a:	3b01      	subs	r3, #1
 800427c:	e7ef      	b.n	800425e <mbedtls_mpi_cmp_mpi+0xc>
        if( Y->p[j - 1] != 0 )
 800427e:	688d      	ldr	r5, [r1, #8]
 8004280:	58ae      	ldr	r6, [r5, r2]
 8004282:	3a04      	subs	r2, #4
 8004284:	b90e      	cbnz	r6, 800428a <mbedtls_mpi_cmp_mpi+0x38>
    for( j = Y->n; j > 0; j-- )
 8004286:	3c01      	subs	r4, #1
 8004288:	e7ef      	b.n	800426a <mbedtls_mpi_cmp_mpi+0x18>
    if( i > j ) return(  X->s );
 800428a:	429c      	cmp	r4, r3
 800428c:	d202      	bcs.n	8004294 <mbedtls_mpi_cmp_mpi+0x42>
 800428e:	6802      	ldr	r2, [r0, #0]
}
 8004290:	4610      	mov	r0, r2
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 8004296:	d901      	bls.n	800429c <mbedtls_mpi_cmp_mpi+0x4a>
 8004298:	424a      	negs	r2, r1
 800429a:	e7f9      	b.n	8004290 <mbedtls_mpi_cmp_mpi+0x3e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800429c:	6802      	ldr	r2, [r0, #0]
 800429e:	2a00      	cmp	r2, #0
 80042a0:	dd01      	ble.n	80042a6 <mbedtls_mpi_cmp_mpi+0x54>
 80042a2:	2900      	cmp	r1, #0
 80042a4:	db16      	blt.n	80042d4 <mbedtls_mpi_cmp_mpi+0x82>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80042a6:	2900      	cmp	r1, #0
 80042a8:	dd01      	ble.n	80042ae <mbedtls_mpi_cmp_mpi+0x5c>
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	db14      	blt.n	80042d8 <mbedtls_mpi_cmp_mpi+0x86>
 80042ae:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80042b2:	3901      	subs	r1, #1
 80042b4:	0089      	lsls	r1, r1, #2
    for( ; i > 0; i-- )
 80042b6:	b90b      	cbnz	r3, 80042bc <mbedtls_mpi_cmp_mpi+0x6a>
    return( 0 );
 80042b8:	461a      	mov	r2, r3
 80042ba:	e7e9      	b.n	8004290 <mbedtls_mpi_cmp_mpi+0x3e>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80042bc:	6884      	ldr	r4, [r0, #8]
 80042be:	5866      	ldr	r6, [r4, r1]
 80042c0:	586c      	ldr	r4, [r5, r1]
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d8e4      	bhi.n	8004290 <mbedtls_mpi_cmp_mpi+0x3e>
 80042c6:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80042ca:	d201      	bcs.n	80042d0 <mbedtls_mpi_cmp_mpi+0x7e>
 80042cc:	4252      	negs	r2, r2
 80042ce:	e7df      	b.n	8004290 <mbedtls_mpi_cmp_mpi+0x3e>
    for( ; i > 0; i-- )
 80042d0:	3b01      	subs	r3, #1
 80042d2:	e7f0      	b.n	80042b6 <mbedtls_mpi_cmp_mpi+0x64>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80042d4:	2201      	movs	r2, #1
 80042d6:	e7db      	b.n	8004290 <mbedtls_mpi_cmp_mpi+0x3e>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	e7d8      	b.n	8004290 <mbedtls_mpi_cmp_mpi+0x3e>

080042de <mbedtls_mpi_cmp_int>:
{
 80042de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 80042e0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80042e4:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 80042e8:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 80042ea:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 80042ec:	bfb4      	ite	lt
 80042ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80042f2:	2301      	movge	r3, #1
 80042f4:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80042f6:	a901      	add	r1, sp, #4
    Y.n = 1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	9302      	str	r3, [sp, #8]
    Y.p = p;
 80042fc:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8004300:	f7ff ffa7 	bl	8004252 <mbedtls_mpi_cmp_mpi>
}
 8004304:	b005      	add	sp, #20
 8004306:	f85d fb04 	ldr.w	pc, [sp], #4

0800430a <mbedtls_mpi_add_abs>:
    if( X == B )
 800430a:	4290      	cmp	r0, r2
{
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	4605      	mov	r5, r0
 8004312:	460c      	mov	r4, r1
 8004314:	4617      	mov	r7, r2
    if( X == B )
 8004316:	d002      	beq.n	800431e <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 8004318:	4288      	cmp	r0, r1
 800431a:	d130      	bne.n	800437e <mbedtls_mpi_add_abs+0x74>
{
 800431c:	463c      	mov	r4, r7
    for( j = B->n; j > 0; j-- )
 800431e:	6867      	ldr	r7, [r4, #4]
    X->s = 1;
 8004320:	2301      	movs	r3, #1
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8004328:	3b01      	subs	r3, #1
 800432a:	009b      	lsls	r3, r3, #2
    for( j = B->n; j > 0; j-- )
 800432c:	bb7f      	cbnz	r7, 800438e <mbedtls_mpi_add_abs+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800432e:	4639      	mov	r1, r7
 8004330:	4628      	mov	r0, r5
 8004332:	f7ff fd4f 	bl	8003dd4 <mbedtls_mpi_grow>
 8004336:	4606      	mov	r6, r0
 8004338:	bb30      	cbnz	r0, 8004388 <mbedtls_mpi_add_abs+0x7e>
    o = B->p; p = X->p; c = 0;
 800433a:	68ab      	ldr	r3, [r5, #8]
 800433c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8004340:	461a      	mov	r2, r3
 8004342:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 8004344:	4601      	mov	r1, r0
 8004346:	42b9      	cmp	r1, r7
 8004348:	d128      	bne.n	800439c <mbedtls_mpi_add_abs+0x92>
 800434a:	008f      	lsls	r7, r1, #2
 800434c:	443b      	add	r3, r7
    while( c != 0 )
 800434e:	b1dc      	cbz	r4, 8004388 <mbedtls_mpi_add_abs+0x7e>
        if( i >= X->n )
 8004350:	686a      	ldr	r2, [r5, #4]
 8004352:	4291      	cmp	r1, r2
 8004354:	f101 0801 	add.w	r8, r1, #1
 8004358:	d306      	bcc.n	8004368 <mbedtls_mpi_add_abs+0x5e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800435a:	4641      	mov	r1, r8
 800435c:	4628      	mov	r0, r5
 800435e:	f7ff fd39 	bl	8003dd4 <mbedtls_mpi_grow>
 8004362:	bb58      	cbnz	r0, 80043bc <mbedtls_mpi_add_abs+0xb2>
            p = X->p + i;
 8004364:	68ab      	ldr	r3, [r5, #8]
 8004366:	443b      	add	r3, r7
        *p += c; c = ( *p < c ); i++; p++;
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4422      	add	r2, r4
 800436c:	4294      	cmp	r4, r2
 800436e:	f843 2b04 	str.w	r2, [r3], #4
 8004372:	bf94      	ite	ls
 8004374:	2400      	movls	r4, #0
 8004376:	2401      	movhi	r4, #1
 8004378:	4641      	mov	r1, r8
 800437a:	3704      	adds	r7, #4
 800437c:	e7e7      	b.n	800434e <mbedtls_mpi_add_abs+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800437e:	f7ff fd56 	bl	8003e2e <mbedtls_mpi_copy>
 8004382:	4606      	mov	r6, r0
 8004384:	2800      	cmp	r0, #0
 8004386:	d0c9      	beq.n	800431c <mbedtls_mpi_add_abs+0x12>
}
 8004388:	4630      	mov	r0, r6
 800438a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800438e:	68a2      	ldr	r2, [r4, #8]
 8004390:	58d2      	ldr	r2, [r2, r3]
 8004392:	3b04      	subs	r3, #4
 8004394:	2a00      	cmp	r2, #0
 8004396:	d1ca      	bne.n	800432e <mbedtls_mpi_add_abs+0x24>
    for( j = B->n; j > 0; j-- )
 8004398:	3f01      	subs	r7, #1
 800439a:	e7c7      	b.n	800432c <mbedtls_mpi_add_abs+0x22>
        *p +=  c; c  = ( *p <  c );
 800439c:	6810      	ldr	r0, [r2, #0]
        tmp= *o;
 800439e:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 80043a2:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 80043a4:	4474      	add	r4, lr
        *p +=  c; c  = ( *p <  c );
 80043a6:	bf2c      	ite	cs
 80043a8:	2001      	movcs	r0, #1
 80043aa:	2000      	movcc	r0, #0
        *p += tmp; c += ( *p < tmp );
 80043ac:	f842 4b04 	str.w	r4, [r2], #4
    for( i = 0; i < j; i++, o++, p++ )
 80043b0:	3101      	adds	r1, #1
        *p += tmp; c += ( *p < tmp );
 80043b2:	45a6      	cmp	lr, r4
 80043b4:	bf94      	ite	ls
 80043b6:	4604      	movls	r4, r0
 80043b8:	1c44      	addhi	r4, r0, #1
 80043ba:	e7c4      	b.n	8004346 <mbedtls_mpi_add_abs+0x3c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80043bc:	4606      	mov	r6, r0
    return( ret );
 80043be:	e7e3      	b.n	8004388 <mbedtls_mpi_add_abs+0x7e>

080043c0 <mbedtls_mpi_sub_abs>:
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	460f      	mov	r7, r1
 80043c4:	b085      	sub	sp, #20
 80043c6:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80043c8:	4611      	mov	r1, r2
 80043ca:	4638      	mov	r0, r7
{
 80043cc:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80043ce:	f7ff fea5 	bl	800411c <mbedtls_mpi_cmp_abs>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	db32      	blt.n	800443c <mbedtls_mpi_sub_abs+0x7c>
    X->s = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	9301      	str	r3, [sp, #4]
    if( X == B )
 80043da:	42b4      	cmp	r4, r6
    X->n = 0;
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80043e2:	9303      	str	r3, [sp, #12]
    if( X == B )
 80043e4:	d106      	bne.n	80043f4 <mbedtls_mpi_sub_abs+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80043e6:	4621      	mov	r1, r4
 80043e8:	a801      	add	r0, sp, #4
 80043ea:	f7ff fd20 	bl	8003e2e <mbedtls_mpi_copy>
 80043ee:	4605      	mov	r5, r0
 80043f0:	b9b8      	cbnz	r0, 8004422 <mbedtls_mpi_sub_abs+0x62>
        B = &TB;
 80043f2:	ac01      	add	r4, sp, #4
    if( X != A )
 80043f4:	42b7      	cmp	r7, r6
 80043f6:	d10d      	bne.n	8004414 <mbedtls_mpi_sub_abs+0x54>
    for( n = B->n; n > 0; n-- )
 80043f8:	6860      	ldr	r0, [r4, #4]
    X->s = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004402:	3b01      	subs	r3, #1
 8004404:	009b      	lsls	r3, r3, #2
    for( n = B->n; n > 0; n-- )
 8004406:	b990      	cbnz	r0, 800442e <mbedtls_mpi_sub_abs+0x6e>
    mpi_sub_hlp( n, B->p, X->p );
 8004408:	68b2      	ldr	r2, [r6, #8]
 800440a:	68a1      	ldr	r1, [r4, #8]
 800440c:	f7ff faca 	bl	80039a4 <mpi_sub_hlp>
    ret = 0;
 8004410:	2500      	movs	r5, #0
 8004412:	e006      	b.n	8004422 <mbedtls_mpi_sub_abs+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8004414:	4639      	mov	r1, r7
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff fd09 	bl	8003e2e <mbedtls_mpi_copy>
 800441c:	4605      	mov	r5, r0
 800441e:	2800      	cmp	r0, #0
 8004420:	d0ea      	beq.n	80043f8 <mbedtls_mpi_sub_abs+0x38>
    mbedtls_mpi_free( &TB );
 8004422:	a801      	add	r0, sp, #4
 8004424:	f7ff fcc0 	bl	8003da8 <mbedtls_mpi_free>
}
 8004428:	4628      	mov	r0, r5
 800442a:	b005      	add	sp, #20
 800442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 800442e:	68a2      	ldr	r2, [r4, #8]
 8004430:	58d2      	ldr	r2, [r2, r3]
 8004432:	3b04      	subs	r3, #4
 8004434:	2a00      	cmp	r2, #0
 8004436:	d1e7      	bne.n	8004408 <mbedtls_mpi_sub_abs+0x48>
    for( n = B->n; n > 0; n-- )
 8004438:	3801      	subs	r0, #1
 800443a:	e7e4      	b.n	8004406 <mbedtls_mpi_sub_abs+0x46>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800443c:	f06f 0509 	mvn.w	r5, #9
 8004440:	e7f2      	b.n	8004428 <mbedtls_mpi_sub_abs+0x68>

08004442 <mbedtls_mpi_add_mpi>:
{
 8004442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 8004444:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	4363      	muls	r3, r4
{
 800444a:	4605      	mov	r5, r0
 800444c:	460f      	mov	r7, r1
 800444e:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 8004450:	d516      	bpl.n	8004480 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8004452:	4611      	mov	r1, r2
 8004454:	4638      	mov	r0, r7
 8004456:	f7ff fe61 	bl	800411c <mbedtls_mpi_cmp_abs>
 800445a:	2800      	cmp	r0, #0
 800445c:	db06      	blt.n	800446c <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800445e:	4632      	mov	r2, r6
 8004460:	4639      	mov	r1, r7
 8004462:	4628      	mov	r0, r5
 8004464:	f7ff ffac 	bl	80043c0 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8004468:	b140      	cbz	r0, 800447c <mbedtls_mpi_add_mpi+0x3a>
}
 800446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800446c:	463a      	mov	r2, r7
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	f7ff ffa5 	bl	80043c0 <mbedtls_mpi_sub_abs>
 8004476:	2800      	cmp	r0, #0
 8004478:	d1f7      	bne.n	800446a <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800447a:	4264      	negs	r4, r4
        X->s = s;
 800447c:	602c      	str	r4, [r5, #0]
    return( ret );
 800447e:	e7f4      	b.n	800446a <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8004480:	f7ff ff43 	bl	800430a <mbedtls_mpi_add_abs>
 8004484:	e7f0      	b.n	8004468 <mbedtls_mpi_add_mpi+0x26>

08004486 <mbedtls_mpi_sub_mpi>:
{
 8004486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 8004488:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	4363      	muls	r3, r4
 800448e:	2b00      	cmp	r3, #0
{
 8004490:	4605      	mov	r5, r0
 8004492:	460f      	mov	r7, r1
 8004494:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 8004496:	dd16      	ble.n	80044c6 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8004498:	4611      	mov	r1, r2
 800449a:	4638      	mov	r0, r7
 800449c:	f7ff fe3e 	bl	800411c <mbedtls_mpi_cmp_abs>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	db06      	blt.n	80044b2 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80044a4:	4632      	mov	r2, r6
 80044a6:	4639      	mov	r1, r7
 80044a8:	4628      	mov	r0, r5
 80044aa:	f7ff ff89 	bl	80043c0 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80044ae:	b140      	cbz	r0, 80044c2 <mbedtls_mpi_sub_mpi+0x3c>
}
 80044b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80044b2:	463a      	mov	r2, r7
 80044b4:	4631      	mov	r1, r6
 80044b6:	4628      	mov	r0, r5
 80044b8:	f7ff ff82 	bl	80043c0 <mbedtls_mpi_sub_abs>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d1f7      	bne.n	80044b0 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 80044c0:	4264      	negs	r4, r4
        X->s = s;
 80044c2:	602c      	str	r4, [r5, #0]
    return( ret );
 80044c4:	e7f4      	b.n	80044b0 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80044c6:	f7ff ff20 	bl	800430a <mbedtls_mpi_add_abs>
 80044ca:	e7f0      	b.n	80044ae <mbedtls_mpi_sub_mpi+0x28>

080044cc <mbedtls_mpi_add_int>:
{
 80044cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 80044ce:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80044d2:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80044d6:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 80044d8:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80044da:	bfb4      	ite	lt
 80044dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80044e0:	2301      	movge	r3, #1
 80044e2:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80044e4:	aa01      	add	r2, sp, #4
    _B.n = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80044ea:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80044ee:	f7ff ffa8 	bl	8004442 <mbedtls_mpi_add_mpi>
}
 80044f2:	b005      	add	sp, #20
 80044f4:	f85d fb04 	ldr.w	pc, [sp], #4

080044f8 <mbedtls_mpi_sub_int>:
{
 80044f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 80044fa:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80044fe:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 8004502:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 8004504:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 8004506:	bfb4      	ite	lt
 8004508:	f04f 33ff 	movlt.w	r3, #4294967295
 800450c:	2301      	movge	r3, #1
 800450e:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8004510:	aa01      	add	r2, sp, #4
    _B.n = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8004516:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800451a:	f7ff ffb4 	bl	8004486 <mbedtls_mpi_sub_mpi>
}
 800451e:	b005      	add	sp, #20
 8004520:	f85d fb04 	ldr.w	pc, [sp], #4

08004524 <mbedtls_mpi_mul_mpi>:
{
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	b086      	sub	sp, #24
    X->n = 0;
 800452a:	2300      	movs	r3, #0
{
 800452c:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800452e:	4288      	cmp	r0, r1
    X->n = 0;
 8004530:	f04f 0201 	mov.w	r2, #1
{
 8004534:	4681      	mov	r9, r0
 8004536:	460e      	mov	r6, r1
    X->n = 0;
 8004538:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 800453c:	9302      	str	r3, [sp, #8]
    X->s = 1;
 800453e:	9203      	str	r2, [sp, #12]
    X->n = 0;
 8004540:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 8004542:	9305      	str	r3, [sp, #20]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8004544:	d105      	bne.n	8004552 <mbedtls_mpi_mul_mpi+0x2e>
 8004546:	4668      	mov	r0, sp
 8004548:	f7ff fc71 	bl	8003e2e <mbedtls_mpi_copy>
 800454c:	4604      	mov	r4, r0
 800454e:	bb88      	cbnz	r0, 80045b4 <mbedtls_mpi_mul_mpi+0x90>
 8004550:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8004552:	45a9      	cmp	r9, r5
 8004554:	d106      	bne.n	8004564 <mbedtls_mpi_mul_mpi+0x40>
 8004556:	4649      	mov	r1, r9
 8004558:	a803      	add	r0, sp, #12
 800455a:	f7ff fc68 	bl	8003e2e <mbedtls_mpi_copy>
 800455e:	4604      	mov	r4, r0
 8004560:	bb40      	cbnz	r0, 80045b4 <mbedtls_mpi_mul_mpi+0x90>
 8004562:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 8004564:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8004568:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800456c:	3b01      	subs	r3, #1
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	f1ba 0f00 	cmp.w	sl, #0
 8004574:	d128      	bne.n	80045c8 <mbedtls_mpi_mul_mpi+0xa4>
    for( j = B->n; j > 0; j-- )
 8004576:	686f      	ldr	r7, [r5, #4]
 8004578:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 800457c:	3b01      	subs	r3, #1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	bb57      	cbnz	r7, 80045d8 <mbedtls_mpi_mul_mpi+0xb4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8004582:	eb0a 0107 	add.w	r1, sl, r7
 8004586:	4648      	mov	r0, r9
 8004588:	f7ff fc24 	bl	8003dd4 <mbedtls_mpi_grow>
 800458c:	4604      	mov	r4, r0
 800458e:	b988      	cbnz	r0, 80045b4 <mbedtls_mpi_mul_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8004590:	4601      	mov	r1, r0
 8004592:	4648      	mov	r0, r9
 8004594:	f7ff fc75 	bl	8003e82 <mbedtls_mpi_lset>
 8004598:	4604      	mov	r4, r0
 800459a:	b958      	cbnz	r0, 80045b4 <mbedtls_mpi_mul_mpi+0x90>
 800459c:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80045a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80045a4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    for( i++; j > 0; j-- )
 80045a8:	b9ef      	cbnz	r7, 80045e6 <mbedtls_mpi_mul_mpi+0xc2>
    X->s = A->s * B->s;
 80045aa:	6832      	ldr	r2, [r6, #0]
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	4353      	muls	r3, r2
 80045b0:	f8c9 3000 	str.w	r3, [r9]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 80045b4:	a803      	add	r0, sp, #12
 80045b6:	f7ff fbf7 	bl	8003da8 <mbedtls_mpi_free>
 80045ba:	4668      	mov	r0, sp
 80045bc:	f7ff fbf4 	bl	8003da8 <mbedtls_mpi_free>
}
 80045c0:	4620      	mov	r0, r4
 80045c2:	b006      	add	sp, #24
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 80045c8:	68b2      	ldr	r2, [r6, #8]
 80045ca:	58d2      	ldr	r2, [r2, r3]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	d1d1      	bne.n	8004576 <mbedtls_mpi_mul_mpi+0x52>
    for( i = A->n; i > 0; i-- )
 80045d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045d6:	e7cb      	b.n	8004570 <mbedtls_mpi_mul_mpi+0x4c>
        if( B->p[j - 1] != 0 )
 80045d8:	68aa      	ldr	r2, [r5, #8]
 80045da:	58d2      	ldr	r2, [r2, r3]
 80045dc:	3b04      	subs	r3, #4
 80045de:	2a00      	cmp	r2, #0
 80045e0:	d1cf      	bne.n	8004582 <mbedtls_mpi_mul_mpi+0x5e>
    for( j = B->n; j > 0; j-- )
 80045e2:	3f01      	subs	r7, #1
 80045e4:	e7cc      	b.n	8004580 <mbedtls_mpi_mul_mpi+0x5c>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 80045e6:	68ab      	ldr	r3, [r5, #8]
 80045e8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80045ec:	f853 3008 	ldr.w	r3, [r3, r8]
 80045f0:	68b1      	ldr	r1, [r6, #8]
 80045f2:	4442      	add	r2, r8
 80045f4:	4650      	mov	r0, sl
 80045f6:	f7ff f9ff 	bl	80039f8 <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 80045fa:	3f01      	subs	r7, #1
 80045fc:	f1a8 0804 	sub.w	r8, r8, #4
 8004600:	e7d2      	b.n	80045a8 <mbedtls_mpi_mul_mpi+0x84>

08004602 <mbedtls_mpi_mul_int>:
{
 8004602:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 8004604:	2301      	movs	r3, #1
    p[0] = b;
 8004606:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8004608:	aa01      	add	r2, sp, #4
    _B.s = 1;
 800460a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 800460c:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800460e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8004612:	f7ff ff87 	bl	8004524 <mbedtls_mpi_mul_mpi>
}
 8004616:	b005      	add	sp, #20
 8004618:	f85d fb04 	ldr.w	pc, [sp], #4

0800461c <mbedtls_mpi_div_mpi>:
{
 800461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004620:	b09b      	sub	sp, #108	; 0x6c
 8004622:	460f      	mov	r7, r1
 8004624:	9001      	str	r0, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
{
 800462a:	4690      	mov	r8, r2
 800462c:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800462e:	f7ff fe56 	bl	80042de <mbedtls_mpi_cmp_int>
 8004632:	2800      	cmp	r0, #0
 8004634:	f000 81a3 	beq.w	800497e <mbedtls_mpi_div_mpi+0x362>
    X->n = 0;
 8004638:	2400      	movs	r4, #0
    X->s = 1;
 800463a:	2601      	movs	r6, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800463c:	9903      	ldr	r1, [sp, #12]
    X->s = 1;
 800463e:	960b      	str	r6, [sp, #44]	; 0x2c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8004640:	4640      	mov	r0, r8
    X->n = 0;
 8004642:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 8004644:	940d      	str	r4, [sp, #52]	; 0x34
    X->s = 1;
 8004646:	960e      	str	r6, [sp, #56]	; 0x38
    X->n = 0;
 8004648:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 800464a:	9410      	str	r4, [sp, #64]	; 0x40
    X->s = 1;
 800464c:	9611      	str	r6, [sp, #68]	; 0x44
    X->n = 0;
 800464e:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 8004650:	9413      	str	r4, [sp, #76]	; 0x4c
    X->s = 1;
 8004652:	9614      	str	r6, [sp, #80]	; 0x50
    X->n = 0;
 8004654:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 8004656:	9416      	str	r4, [sp, #88]	; 0x58
    X->s = 1;
 8004658:	9617      	str	r6, [sp, #92]	; 0x5c
    X->n = 0;
 800465a:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 800465c:	9419      	str	r4, [sp, #100]	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800465e:	f7ff fd5d 	bl	800411c <mbedtls_mpi_cmp_abs>
 8004662:	42a0      	cmp	r0, r4
 8004664:	da26      	bge.n	80046b4 <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	b92b      	cbnz	r3, 8004676 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800466a:	b9df      	cbnz	r7, 80046a4 <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 800466c:	2400      	movs	r4, #0
}
 800466e:	4620      	mov	r0, r4
 8004670:	b01b      	add	sp, #108	; 0x6c
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8004676:	4621      	mov	r1, r4
 8004678:	9801      	ldr	r0, [sp, #4]
 800467a:	f7ff fc02 	bl	8003e82 <mbedtls_mpi_lset>
 800467e:	4604      	mov	r4, r0
 8004680:	2800      	cmp	r0, #0
 8004682:	d0f2      	beq.n	800466a <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8004684:	a80b      	add	r0, sp, #44	; 0x2c
 8004686:	f7ff fb8f 	bl	8003da8 <mbedtls_mpi_free>
 800468a:	a80e      	add	r0, sp, #56	; 0x38
 800468c:	f7ff fb8c 	bl	8003da8 <mbedtls_mpi_free>
 8004690:	a811      	add	r0, sp, #68	; 0x44
 8004692:	f7ff fb89 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8004696:	a814      	add	r0, sp, #80	; 0x50
 8004698:	f7ff fb86 	bl	8003da8 <mbedtls_mpi_free>
 800469c:	a817      	add	r0, sp, #92	; 0x5c
 800469e:	f7ff fb83 	bl	8003da8 <mbedtls_mpi_free>
    return( ret );
 80046a2:	e7e4      	b.n	800466e <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80046a4:	4641      	mov	r1, r8
 80046a6:	4638      	mov	r0, r7
 80046a8:	f7ff fbc1 	bl	8003e2e <mbedtls_mpi_copy>
 80046ac:	4604      	mov	r4, r0
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d1e8      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
 80046b2:	e7db      	b.n	800466c <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80046b4:	4641      	mov	r1, r8
 80046b6:	a80b      	add	r0, sp, #44	; 0x2c
 80046b8:	f7ff fbb9 	bl	8003e2e <mbedtls_mpi_copy>
 80046bc:	4604      	mov	r4, r0
 80046be:	2800      	cmp	r0, #0
 80046c0:	d1e0      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80046c2:	ad0e      	add	r5, sp, #56	; 0x38
 80046c4:	9903      	ldr	r1, [sp, #12]
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7ff fbb1 	bl	8003e2e <mbedtls_mpi_copy>
 80046cc:	4604      	mov	r4, r0
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d1d8      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80046d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    X.s = Y.s = 1;
 80046d6:	960e      	str	r6, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80046d8:	3102      	adds	r1, #2
 80046da:	a811      	add	r0, sp, #68	; 0x44
    X.s = Y.s = 1;
 80046dc:	960b      	str	r6, [sp, #44]	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80046de:	f7ff fb79 	bl	8003dd4 <mbedtls_mpi_grow>
 80046e2:	4604      	mov	r4, r0
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d1cd      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80046e8:	4601      	mov	r1, r0
 80046ea:	a811      	add	r0, sp, #68	; 0x44
 80046ec:	f7ff fbc9 	bl	8003e82 <mbedtls_mpi_lset>
 80046f0:	4604      	mov	r4, r0
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d1c6      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80046f6:	2102      	movs	r1, #2
 80046f8:	a814      	add	r0, sp, #80	; 0x50
 80046fa:	f7ff fb6b 	bl	8003dd4 <mbedtls_mpi_grow>
 80046fe:	4604      	mov	r4, r0
 8004700:	2800      	cmp	r0, #0
 8004702:	d1bf      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8004704:	2103      	movs	r1, #3
 8004706:	a817      	add	r0, sp, #92	; 0x5c
 8004708:	f7ff fb64 	bl	8003dd4 <mbedtls_mpi_grow>
 800470c:	4604      	mov	r4, r0
 800470e:	2800      	cmp	r0, #0
 8004710:	d1b8      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8004712:	4628      	mov	r0, r5
 8004714:	f7ff fbf9 	bl	8003f0a <mbedtls_mpi_bitlen>
 8004718:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 800471c:	281f      	cmp	r0, #31
 800471e:	d078      	beq.n	8004812 <mbedtls_mpi_div_mpi+0x1f6>
        k = biL - 1 - k;
 8004720:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8004724:	4619      	mov	r1, r3
 8004726:	a80b      	add	r0, sp, #44	; 0x2c
        k = biL - 1 - k;
 8004728:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800472a:	f7ff fc6f 	bl	800400c <mbedtls_mpi_shift_l>
 800472e:	4604      	mov	r4, r0
 8004730:	2800      	cmp	r0, #0
 8004732:	d1a7      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8004734:	9902      	ldr	r1, [sp, #8]
 8004736:	4628      	mov	r0, r5
 8004738:	f7ff fc68 	bl	800400c <mbedtls_mpi_shift_l>
 800473c:	4604      	mov	r4, r0
 800473e:	2800      	cmp	r0, #0
 8004740:	d1a0      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 8004742:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    t = Y.n - 1;
 8004744:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    n = X.n - 1;
 8004748:	f106 39ff 	add.w	r9, r6, #4294967295
    t = Y.n - 1;
 800474c:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8004750:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 8004754:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8004756:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800475a:	4619      	mov	r1, r3
 800475c:	4628      	mov	r0, r5
 800475e:	9306      	str	r3, [sp, #24]
 8004760:	f7ff fc54 	bl	800400c <mbedtls_mpi_shift_l>
 8004764:	4604      	mov	r4, r0
 8004766:	2800      	cmp	r0, #0
 8004768:	d18c      	bne.n	8004684 <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 800476a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800476e:	4629      	mov	r1, r5
 8004770:	a80b      	add	r0, sp, #44	; 0x2c
 8004772:	f7ff fd6e 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 8004776:	2800      	cmp	r0, #0
 8004778:	da4d      	bge.n	8004816 <mbedtls_mpi_div_mpi+0x1fa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800477a:	9906      	ldr	r1, [sp, #24]
 800477c:	4628      	mov	r0, r5
 800477e:	f7ff fc91 	bl	80040a4 <mbedtls_mpi_shift_r>
 8004782:	4604      	mov	r4, r0
 8004784:	2800      	cmp	r0, #0
 8004786:	f47f af7d 	bne.w	8004684 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800478a:	9b00      	ldr	r3, [sp, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	9306      	str	r3, [sp, #24]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8004790:	3b04      	subs	r3, #4
 8004792:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
 8004796:	9308      	str	r3, [sp, #32]
 8004798:	f106 6300 	add.w	r3, r6, #134217728	; 0x8000000
 800479c:	3d01      	subs	r5, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80047a4:	eba5 050a 	sub.w	r5, r5, sl
 80047a8:	3e02      	subs	r6, #2
 80047aa:	eba3 0a0a 	sub.w	sl, r3, sl
 80047ae:	00ad      	lsls	r5, r5, #2
 80047b0:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 80047b4:	00b6      	lsls	r6, r6, #2
    for( i = n; i > t ; i-- )
 80047b6:	9b00      	ldr	r3, [sp, #0]
 80047b8:	4599      	cmp	r9, r3
 80047ba:	d83b      	bhi.n	8004834 <mbedtls_mpi_div_mpi+0x218>
    if( Q != NULL )
 80047bc:	9b01      	ldr	r3, [sp, #4]
 80047be:	b15b      	cbz	r3, 80047d8 <mbedtls_mpi_div_mpi+0x1bc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80047c0:	a911      	add	r1, sp, #68	; 0x44
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fb33 	bl	8003e2e <mbedtls_mpi_copy>
 80047c8:	bb08      	cbnz	r0, 800480e <mbedtls_mpi_div_mpi+0x1f2>
        Q->s = A->s * B->s;
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	f8d8 2000 	ldr.w	r2, [r8]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4353      	muls	r3, r2
 80047d4:	9a01      	ldr	r2, [sp, #4]
 80047d6:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f43f af53 	beq.w	8004684 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80047de:	9902      	ldr	r1, [sp, #8]
 80047e0:	a80b      	add	r0, sp, #44	; 0x2c
 80047e2:	f7ff fc5f 	bl	80040a4 <mbedtls_mpi_shift_r>
 80047e6:	b990      	cbnz	r0, 800480e <mbedtls_mpi_div_mpi+0x1f2>
        X.s = A->s;
 80047e8:	f8d8 3000 	ldr.w	r3, [r8]
 80047ec:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80047ee:	a90b      	add	r1, sp, #44	; 0x2c
 80047f0:	4638      	mov	r0, r7
 80047f2:	f7ff fb1c 	bl	8003e2e <mbedtls_mpi_copy>
 80047f6:	4601      	mov	r1, r0
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f040 80be 	bne.w	800497a <mbedtls_mpi_div_mpi+0x35e>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80047fe:	4638      	mov	r0, r7
 8004800:	f7ff fd6d 	bl	80042de <mbedtls_mpi_cmp_int>
 8004804:	2800      	cmp	r0, #0
 8004806:	f47f af3d 	bne.w	8004684 <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4604      	mov	r4, r0
 8004810:	e738      	b.n	8004684 <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 8004812:	9402      	str	r4, [sp, #8]
 8004814:	e795      	b.n	8004742 <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 8004816:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004818:	f851 200b 	ldr.w	r2, [r1, fp]
 800481c:	3201      	adds	r2, #1
 800481e:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8004822:	a90b      	add	r1, sp, #44	; 0x2c
 8004824:	462a      	mov	r2, r5
 8004826:	4608      	mov	r0, r1
 8004828:	f7ff fe2d 	bl	8004486 <mbedtls_mpi_sub_mpi>
 800482c:	4604      	mov	r4, r0
 800482e:	2800      	cmp	r0, #0
 8004830:	d09d      	beq.n	800476e <mbedtls_mpi_div_mpi+0x152>
 8004832:	e727      	b.n	8004684 <mbedtls_mpi_div_mpi+0x68>
 8004834:	1d33      	adds	r3, r6, #4
        if( X.p[i] >= Y.p[t] )
 8004836:	9806      	ldr	r0, [sp, #24]
 8004838:	990d      	ldr	r1, [sp, #52]	; 0x34
 800483a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800483c:	9309      	str	r3, [sp, #36]	; 0x24
 800483e:	5812      	ldr	r2, [r2, r0]
 8004840:	58cb      	ldr	r3, [r1, r3]
 8004842:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004844:	4293      	cmp	r3, r2
 8004846:	d379      	bcc.n	800493c <mbedtls_mpi_div_mpi+0x320>
            Z.p[i - t - 1] = ~0;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	5143      	str	r3, [r0, r5]
        Z.p[i - t - 1]++;
 800484e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004850:	5953      	ldr	r3, [r2, r5]
 8004852:	3301      	adds	r3, #1
 8004854:	5153      	str	r3, [r2, r5]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8004856:	1f33      	subs	r3, r6, #4
 8004858:	469b      	mov	fp, r3
            Z.p[i - t - 1]--;
 800485a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800485c:	5953      	ldr	r3, [r2, r5]
 800485e:	3b01      	subs	r3, #1
 8004860:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8004862:	2100      	movs	r1, #0
 8004864:	a814      	add	r0, sp, #80	; 0x50
 8004866:	f7ff fb0c 	bl	8003e82 <mbedtls_mpi_lset>
 800486a:	2800      	cmp	r0, #0
 800486c:	d1cf      	bne.n	800480e <mbedtls_mpi_div_mpi+0x1f2>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800486e:	9900      	ldr	r1, [sp, #0]
 8004870:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004872:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004874:	2900      	cmp	r1, #0
 8004876:	d07e      	beq.n	8004976 <mbedtls_mpi_div_mpi+0x35a>
 8004878:	9908      	ldr	r1, [sp, #32]
 800487a:	5851      	ldr	r1, [r2, r1]
 800487c:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800487e:	9906      	ldr	r1, [sp, #24]
 8004880:	5852      	ldr	r2, [r2, r1]
 8004882:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8004884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004886:	a914      	add	r1, sp, #80	; 0x50
 8004888:	4608      	mov	r0, r1
 800488a:	595a      	ldr	r2, [r3, r5]
 800488c:	f7ff feb9 	bl	8004602 <mbedtls_mpi_mul_int>
 8004890:	4601      	mov	r1, r0
 8004892:	2800      	cmp	r0, #0
 8004894:	d171      	bne.n	800497a <mbedtls_mpi_div_mpi+0x35e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8004896:	a817      	add	r0, sp, #92	; 0x5c
 8004898:	f7ff faf3 	bl	8003e82 <mbedtls_mpi_lset>
 800489c:	2800      	cmp	r0, #0
 800489e:	d1b6      	bne.n	800480e <mbedtls_mpi_div_mpi+0x1f2>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80048a0:	f1b9 0f01 	cmp.w	r9, #1
 80048a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048a8:	bf1c      	itt	ne
 80048aa:	4659      	movne	r1, fp
 80048ac:	5850      	ldrne	r0, [r2, r1]
 80048ae:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80048b0:	5991      	ldr	r1, [r2, r6]
 80048b2:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 80048b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048b6:	5852      	ldr	r2, [r2, r1]
 80048b8:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80048ba:	a917      	add	r1, sp, #92	; 0x5c
 80048bc:	a814      	add	r0, sp, #80	; 0x50
 80048be:	f7ff fcc8 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	dcc9      	bgt.n	800485a <mbedtls_mpi_div_mpi+0x23e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80048c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048c8:	a90e      	add	r1, sp, #56	; 0x38
 80048ca:	595a      	ldr	r2, [r3, r5]
 80048cc:	a814      	add	r0, sp, #80	; 0x50
 80048ce:	f7ff fe98 	bl	8004602 <mbedtls_mpi_mul_int>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d19b      	bne.n	800480e <mbedtls_mpi_div_mpi+0x1f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80048d6:	4651      	mov	r1, sl
 80048d8:	a814      	add	r0, sp, #80	; 0x50
 80048da:	f7ff fb97 	bl	800400c <mbedtls_mpi_shift_l>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d195      	bne.n	800480e <mbedtls_mpi_div_mpi+0x1f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80048e2:	a90b      	add	r1, sp, #44	; 0x2c
 80048e4:	4608      	mov	r0, r1
 80048e6:	aa14      	add	r2, sp, #80	; 0x50
 80048e8:	f7ff fdcd 	bl	8004486 <mbedtls_mpi_sub_mpi>
 80048ec:	4601      	mov	r1, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d143      	bne.n	800497a <mbedtls_mpi_div_mpi+0x35e>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 80048f2:	a80b      	add	r0, sp, #44	; 0x2c
 80048f4:	f7ff fcf3 	bl	80042de <mbedtls_mpi_cmp_int>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	da18      	bge.n	800492e <mbedtls_mpi_div_mpi+0x312>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80048fc:	a90e      	add	r1, sp, #56	; 0x38
 80048fe:	a814      	add	r0, sp, #80	; 0x50
 8004900:	f7ff fa95 	bl	8003e2e <mbedtls_mpi_copy>
 8004904:	2800      	cmp	r0, #0
 8004906:	d182      	bne.n	800480e <mbedtls_mpi_div_mpi+0x1f2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8004908:	4651      	mov	r1, sl
 800490a:	a814      	add	r0, sp, #80	; 0x50
 800490c:	f7ff fb7e 	bl	800400c <mbedtls_mpi_shift_l>
 8004910:	2800      	cmp	r0, #0
 8004912:	f47f af7c 	bne.w	800480e <mbedtls_mpi_div_mpi+0x1f2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8004916:	a90b      	add	r1, sp, #44	; 0x2c
 8004918:	aa14      	add	r2, sp, #80	; 0x50
 800491a:	4608      	mov	r0, r1
 800491c:	f7ff fd91 	bl	8004442 <mbedtls_mpi_add_mpi>
 8004920:	2800      	cmp	r0, #0
 8004922:	f47f af74 	bne.w	800480e <mbedtls_mpi_div_mpi+0x1f2>
            Z.p[i - t - 1]--;
 8004926:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004928:	5953      	ldr	r3, [r2, r5]
 800492a:	3b01      	subs	r3, #1
 800492c:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
 800492e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004932:	3d04      	subs	r5, #4
 8004934:	f1aa 0a20 	sub.w	sl, sl, #32
 8004938:	3e04      	subs	r6, #4
 800493a:	e73c      	b.n	80047b6 <mbedtls_mpi_div_mpi+0x19a>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800493c:	4428      	add	r0, r5
 800493e:	9007      	str	r0, [sp, #28]
 8004940:	5988      	ldr	r0, [r1, r6]
    if( 0 == d || u1 >= d )
 8004942:	b1aa      	cbz	r2, 8004970 <mbedtls_mpi_div_mpi+0x354>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	2300      	movs	r3, #0
 8004948:	9304      	str	r3, [sp, #16]
    quotient = dividend / d;
 800494a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800494e:	ea4b 0b00 	orr.w	fp, fp, r0
 8004952:	4658      	mov	r0, fp
 8004954:	4661      	mov	r1, ip
 8004956:	f7fb fc9b 	bl	8000290 <__aeabi_uldivmod>
 800495a:	2300      	movs	r3, #0
 800495c:	f04f 32ff 	mov.w	r2, #4294967295
 8004960:	428b      	cmp	r3, r1
 8004962:	bf08      	it	eq
 8004964:	4282      	cmpeq	r2, r0
 8004966:	d200      	bcs.n	800496a <mbedtls_mpi_div_mpi+0x34e>
 8004968:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800496a:	9b07      	ldr	r3, [sp, #28]
 800496c:	6018      	str	r0, [r3, #0]
 800496e:	e76e      	b.n	800484e <mbedtls_mpi_div_mpi+0x232>
    if( 0 == d || u1 >= d )
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e7f9      	b.n	800496a <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8004976:	9900      	ldr	r1, [sp, #0]
 8004978:	e780      	b.n	800487c <mbedtls_mpi_div_mpi+0x260>
 800497a:	460c      	mov	r4, r1
 800497c:	e682      	b.n	8004684 <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800497e:	f06f 040b 	mvn.w	r4, #11
 8004982:	e674      	b.n	800466e <mbedtls_mpi_div_mpi+0x52>

08004984 <mbedtls_mpi_mod_mpi>:
{
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	4604      	mov	r4, r0
 8004988:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800498a:	4610      	mov	r0, r2
 800498c:	2100      	movs	r1, #0
{
 800498e:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8004990:	f7ff fca5 	bl	80042de <mbedtls_mpi_cmp_int>
 8004994:	2800      	cmp	r0, #0
 8004996:	db24      	blt.n	80049e2 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8004998:	462a      	mov	r2, r5
 800499a:	4633      	mov	r3, r6
 800499c:	4621      	mov	r1, r4
 800499e:	2000      	movs	r0, #0
 80049a0:	f7ff fe3c 	bl	800461c <mbedtls_mpi_div_mpi>
 80049a4:	4605      	mov	r5, r0
 80049a6:	b138      	cbz	r0, 80049b8 <mbedtls_mpi_mod_mpi+0x34>
}
 80049a8:	4628      	mov	r0, r5
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80049ac:	4632      	mov	r2, r6
 80049ae:	4621      	mov	r1, r4
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff fd46 	bl	8004442 <mbedtls_mpi_add_mpi>
 80049b6:	b990      	cbnz	r0, 80049de <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80049b8:	2100      	movs	r1, #0
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fc8f 	bl	80042de <mbedtls_mpi_cmp_int>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	dbf3      	blt.n	80049ac <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80049c4:	4631      	mov	r1, r6
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff fc43 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	dbeb      	blt.n	80049a8 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80049d0:	4632      	mov	r2, r6
 80049d2:	4621      	mov	r1, r4
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff fd56 	bl	8004486 <mbedtls_mpi_sub_mpi>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d0f2      	beq.n	80049c4 <mbedtls_mpi_mod_mpi+0x40>
 80049de:	4605      	mov	r5, r0
 80049e0:	e7e2      	b.n	80049a8 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80049e2:	f06f 0509 	mvn.w	r5, #9
 80049e6:	e7df      	b.n	80049a8 <mbedtls_mpi_mod_mpi+0x24>

080049e8 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 80049f0:	4606      	mov	r6, r0
 80049f2:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80049f4:	4618      	mov	r0, r3
 80049f6:	2100      	movs	r1, #0
{
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80049fc:	f7ff fc6f 	bl	80042de <mbedtls_mpi_cmp_int>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	f340 8225 	ble.w	8004e50 <mbedtls_mpi_exp_mod+0x468>
 8004a06:	68ab      	ldr	r3, [r5, #8]
 8004a08:	f8d3 8000 	ldr.w	r8, [r3]
 8004a0c:	f018 0f01 	tst.w	r8, #1
 8004a10:	f000 821e 	beq.w	8004e50 <mbedtls_mpi_exp_mod+0x468>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 8004a14:	2100      	movs	r1, #0
 8004a16:	9803      	ldr	r0, [sp, #12]
 8004a18:	f7ff fc61 	bl	80042de <mbedtls_mpi_cmp_int>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	f2c0 8217 	blt.w	8004e50 <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 8004a22:	f108 0402 	add.w	r4, r8, #2
 8004a26:	0064      	lsls	r4, r4, #1
 8004a28:	f004 0408 	and.w	r4, r4, #8
 8004a2c:	4444      	add	r4, r8
 8004a2e:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 8004a30:	fb04 f308 	mul.w	r3, r4, r8
 8004a34:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 8004a38:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 8004a3a:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 8004a3e:	d1f7      	bne.n	8004a30 <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 8004a40:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 8004a42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a46:	a814      	add	r0, sp, #80	; 0x50
    X->s = 1;
 8004a48:	9308      	str	r3, [sp, #32]
    X->n = 0;
 8004a4a:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 8004a4c:	910a      	str	r1, [sp, #40]	; 0x28
    X->s = 1;
 8004a4e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 8004a50:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 8004a52:	910d      	str	r1, [sp, #52]	; 0x34
    X->s = 1;
 8004a54:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 8004a56:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 8004a58:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 8004a5a:	f00a fa25 	bl	800eea8 <memset>

    i = mbedtls_mpi_bitlen( E );
 8004a5e:	9803      	ldr	r0, [sp, #12]
 8004a60:	f7ff fa53 	bl	8003f0a <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8004a64:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 8004a68:	f080 80e2 	bcs.w	8004c30 <mbedtls_mpi_exp_mod+0x248>
 8004a6c:	28ef      	cmp	r0, #239	; 0xef
 8004a6e:	f200 80e2 	bhi.w	8004c36 <mbedtls_mpi_exp_mod+0x24e>
 8004a72:	284f      	cmp	r0, #79	; 0x4f
 8004a74:	f200 80e2 	bhi.w	8004c3c <mbedtls_mpi_exp_mod+0x254>
 8004a78:	2817      	cmp	r0, #23
 8004a7a:	bf8c      	ite	hi
 8004a7c:	f04f 0b03 	movhi.w	fp, #3
 8004a80:	f04f 0b01 	movls.w	fp, #1
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 8004a84:	686b      	ldr	r3, [r5, #4]
 8004a86:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f7ff f9a1 	bl	8003dd4 <mbedtls_mpi_grow>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2800      	cmp	r0, #0
 8004a96:	f040 8163 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	a817      	add	r0, sp, #92	; 0x5c
 8004a9e:	f7ff f999 	bl	8003dd4 <mbedtls_mpi_grow>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f040 815b 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 8004aaa:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8004aae:	a80b      	add	r0, sp, #44	; 0x2c
 8004ab0:	f7ff f990 	bl	8003dd4 <mbedtls_mpi_grow>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	f040 8152 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	9304      	str	r3, [sp, #16]
    if( neg )
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	d10a      	bne.n	8004ada <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	a80e      	add	r0, sp, #56	; 0x38
 8004ac8:	f7ff f9b1 	bl	8003e2e <mbedtls_mpi_copy>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f040 8146 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 8004ad8:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 8004ada:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 8004ade:	b11b      	cbz	r3, 8004ae8 <mbedtls_mpi_exp_mod+0x100>
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f040 80ad 	bne.w	8004c42 <mbedtls_mpi_exp_mod+0x25a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 8004ae8:	2101      	movs	r1, #1
 8004aea:	a808      	add	r0, sp, #32
 8004aec:	f7ff f9c9 	bl	8003e82 <mbedtls_mpi_lset>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	f040 8134 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8004af8:	6869      	ldr	r1, [r5, #4]
 8004afa:	a808      	add	r0, sp, #32
 8004afc:	0189      	lsls	r1, r1, #6
 8004afe:	f7ff fa85 	bl	800400c <mbedtls_mpi_shift_l>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f040 812b 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 8004b0a:	a908      	add	r1, sp, #32
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	4608      	mov	r0, r1
 8004b10:	f7ff ff38 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f040 8122 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>

        if( _RR != NULL )
 8004b1c:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 8004b20:	b13b      	cbz	r3, 8004b32 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 8004b22:	ab08      	add	r3, sp, #32
 8004b24:	cb03      	ldmia	r3!, {r0, r1}
 8004b26:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8004b2a:	6010      	str	r0, [r2, #0]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	6051      	str	r1, [r2, #4]
 8004b30:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 8004b32:	4629      	mov	r1, r5
 8004b34:	4638      	mov	r0, r7
 8004b36:	f7ff fb8c 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f2c0 808a 	blt.w	8004c54 <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 8004b40:	462a      	mov	r2, r5
 8004b42:	4639      	mov	r1, r7
 8004b44:	a817      	add	r0, sp, #92	; 0x5c
 8004b46:	f7ff ff1d 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f040 8107 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 8004b52:	4264      	negs	r4, r4
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 8004b54:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8004b58:	4623      	mov	r3, r4
 8004b5a:	f8cd 9000 	str.w	r9, [sp]
 8004b5e:	462a      	mov	r2, r5
 8004b60:	a908      	add	r1, sp, #32
 8004b62:	a817      	add	r0, sp, #92	; 0x5c
 8004b64:	f7ff fb11 	bl	800418a <mpi_montmul>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	f040 80f8 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 8004b70:	a908      	add	r1, sp, #32
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff f95b 	bl	8003e2e <mbedtls_mpi_copy>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	f040 80f0 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 8004b80:	ab07      	add	r3, sp, #28
 8004b82:	2701      	movs	r7, #1
    U.p = &z;
 8004b84:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 8004b86:	f8cd 9000 	str.w	r9, [sp]
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	a911      	add	r1, sp, #68	; 0x44
 8004b90:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 8004b92:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 8004b94:	9711      	str	r7, [sp, #68]	; 0x44
 8004b96:	9712      	str	r7, [sp, #72]	; 0x48
    return( mpi_montmul( A, &U, N, mm, T ) );
 8004b98:	f7ff faf7 	bl	800418a <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f040 80de 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>

    if( wsize > 1 )
 8004ba4:	45bb      	cmp	fp, r7
 8004ba6:	d15a      	bne.n	8004c5e <mbedtls_mpi_exp_mod+0x276>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 8004ba8:	9b03      	ldr	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 8004baa:	f04f 0900 	mov.w	r9, #0
    nblimbs = E->n;
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	9302      	str	r3, [sp, #8]
    nbits   = 0;
 8004bb2:	46c8      	mov	r8, r9
    bufsize = 0;
 8004bb4:	46ca      	mov	sl, r9
    wbits   = 0;
 8004bb6:	464f      	mov	r7, r9

    while( 1 )
    {
        if( bufsize == 0 )
 8004bb8:	f1ba 0f00 	cmp.w	sl, #0
 8004bbc:	f040 80b1 	bne.w	8004d22 <mbedtls_mpi_exp_mod+0x33a>
        {
            if( nblimbs == 0 )
 8004bc0:	9b02      	ldr	r3, [sp, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 80a8 	bne.w	8004d18 <mbedtls_mpi_exp_mod+0x330>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 8004bc8:	f04f 0a01 	mov.w	sl, #1
 8004bcc:	fa0a fa0b 	lsl.w	sl, sl, fp
 8004bd0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 8004bd4:	9b02      	ldr	r3, [sp, #8]
 8004bd6:	4543      	cmp	r3, r8
 8004bd8:	f040 8113 	bne.w	8004e02 <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	aa07      	add	r2, sp, #28
 8004be0:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 8004be2:	9311      	str	r3, [sp, #68]	; 0x44
 8004be4:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 8004be6:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 8004be8:	4623      	mov	r3, r4
 8004bea:	f8cd 9000 	str.w	r9, [sp]
 8004bee:	462a      	mov	r2, r5
 8004bf0:	a911      	add	r1, sp, #68	; 0x44
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7ff fac9 	bl	800418a <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f040 80b0 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 8004c00:	9a04      	ldr	r2, [sp, #16]
 8004c02:	3201      	adds	r2, #1
 8004c04:	f040 80ac 	bne.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
 8004c08:	9a03      	ldr	r2, [sp, #12]
 8004c0a:	6852      	ldr	r2, [r2, #4]
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	f000 80a7 	beq.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
 8004c12:	9a03      	ldr	r2, [sp, #12]
 8004c14:	6892      	ldr	r2, [r2, #8]
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	07d2      	lsls	r2, r2, #31
 8004c1a:	f140 80a1 	bpl.w	8004d60 <mbedtls_mpi_exp_mod+0x378>
    {
        X->s = -1;
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 8004c22:	4632      	mov	r2, r6
 8004c24:	4629      	mov	r1, r5
 8004c26:	4630      	mov	r0, r6
 8004c28:	f7ff fc0b 	bl	8004442 <mbedtls_mpi_add_mpi>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	e097      	b.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8004c30:	f04f 0b06 	mov.w	fp, #6
 8004c34:	e726      	b.n	8004a84 <mbedtls_mpi_exp_mod+0x9c>
 8004c36:	f04f 0b05 	mov.w	fp, #5
 8004c3a:	e723      	b.n	8004a84 <mbedtls_mpi_exp_mod+0x9c>
 8004c3c:	f04f 0b04 	mov.w	fp, #4
 8004c40:	e720      	b.n	8004a84 <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 8004c42:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8004c46:	6810      	ldr	r0, [r2, #0]
 8004c48:	6851      	ldr	r1, [r2, #4]
 8004c4a:	ab08      	add	r3, sp, #32
 8004c4c:	c303      	stmia	r3!, {r0, r1}
 8004c4e:	6890      	ldr	r0, [r2, #8]
 8004c50:	6018      	str	r0, [r3, #0]
 8004c52:	e76e      	b.n	8004b32 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8004c54:	4639      	mov	r1, r7
 8004c56:	a817      	add	r0, sp, #92	; 0x5c
 8004c58:	f7ff f8e9 	bl	8003e2e <mbedtls_mpi_copy>
 8004c5c:	e775      	b.n	8004b4a <mbedtls_mpi_exp_mod+0x162>
        j =  one << ( wsize - 1 );
 8004c5e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004c62:	9302      	str	r3, [sp, #8]
 8004c64:	fa07 f303 	lsl.w	r3, r7, r3
 8004c68:	9305      	str	r3, [sp, #20]
 8004c6a:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 8004c6c:	6869      	ldr	r1, [r5, #4]
 8004c6e:	270c      	movs	r7, #12
 8004c70:	409f      	lsls	r7, r3
 8004c72:	ab14      	add	r3, sp, #80	; 0x50
 8004c74:	eb03 0807 	add.w	r8, r3, r7
 8004c78:	3101      	adds	r1, #1
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	f7ff f8aa 	bl	8003dd4 <mbedtls_mpi_grow>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d16c      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 8004c86:	a917      	add	r1, sp, #92	; 0x5c
 8004c88:	4640      	mov	r0, r8
 8004c8a:	f7ff f8d0 	bl	8003e2e <mbedtls_mpi_copy>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d165      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
 8004c94:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 8004c96:	4623      	mov	r3, r4
 8004c98:	f8cd 9000 	str.w	r9, [sp]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	f7ff fa72 	bl	800418a <mpi_montmul>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d159      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	f10a 0a01 	add.w	sl, sl, #1
 8004cb2:	4553      	cmp	r3, sl
 8004cb4:	d8ef      	bhi.n	8004c96 <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8004cb6:	9b05      	ldr	r3, [sp, #20]
 8004cb8:	f103 0901 	add.w	r9, r3, #1
 8004cbc:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 8004cc0:	f04f 0801 	mov.w	r8, #1
 8004cc4:	441f      	add	r7, r3
 8004cc6:	fa08 f80b 	lsl.w	r8, r8, fp
 8004cca:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8004cce:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 8004cd2:	45c1      	cmp	r9, r8
 8004cd4:	f4bf af68 	bcs.w	8004ba8 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 8004cd8:	6869      	ldr	r1, [r5, #4]
 8004cda:	4638      	mov	r0, r7
 8004cdc:	3101      	adds	r1, #1
 8004cde:	f7ff f879 	bl	8003dd4 <mbedtls_mpi_grow>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d13b      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 8004ce8:	f1a7 010c 	sub.w	r1, r7, #12
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7ff f89e 	bl	8003e2e <mbedtls_mpi_copy>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	bba0      	cbnz	r0, 8004d60 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f8cd a000 	str.w	sl, [sp]
 8004cfe:	462a      	mov	r2, r5
 8004d00:	a917      	add	r1, sp, #92	; 0x5c
 8004d02:	f7ff fa42 	bl	800418a <mpi_montmul>
 8004d06:	370c      	adds	r7, #12
 8004d08:	4603      	mov	r3, r0
 8004d0a:	bb48      	cbnz	r0, 8004d60 <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8004d0c:	f109 0901 	add.w	r9, r9, #1
 8004d10:	e7df      	b.n	8004cd2 <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 8004d12:	f04f 0902 	mov.w	r9, #2
 8004d16:	e74f      	b.n	8004bb8 <mbedtls_mpi_exp_mod+0x1d0>
            nblimbs--;
 8004d18:	9b02      	ldr	r3, [sp, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	9302      	str	r3, [sp, #8]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 8004d1e:	f04f 0a20 	mov.w	sl, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	9a02      	ldr	r2, [sp, #8]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
 8004d2c:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8004d30:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 8004d34:	f013 0301 	ands.w	r3, r3, #1
 8004d38:	d136      	bne.n	8004da8 <mbedtls_mpi_exp_mod+0x3c0>
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	f43f af3b 	beq.w	8004bb8 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 8004d42:	f1b9 0f01 	cmp.w	r9, #1
 8004d46:	d12f      	bne.n	8004da8 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8004d48:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4623      	mov	r3, r4
 8004d50:	4631      	mov	r1, r6
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7ff fa19 	bl	800418a <mpi_montmul>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f43f af2c 	beq.w	8004bb8 <mbedtls_mpi_exp_mod+0x1d0>
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8004d60:	2201      	movs	r2, #1
 8004d62:	f10b 34ff 	add.w	r4, fp, #4294967295
 8004d66:	fa02 f404 	lsl.w	r4, r2, r4
 8004d6a:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 8004d6e:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8004d70:	42ac      	cmp	r4, r5
 8004d72:	9302      	str	r3, [sp, #8]
 8004d74:	d364      	bcc.n	8004e40 <mbedtls_mpi_exp_mod+0x458>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 8004d76:	a817      	add	r0, sp, #92	; 0x5c
 8004d78:	f7ff f816 	bl	8003da8 <mbedtls_mpi_free>
 8004d7c:	a80b      	add	r0, sp, #44	; 0x2c
 8004d7e:	f7ff f813 	bl	8003da8 <mbedtls_mpi_free>
 8004d82:	a80e      	add	r0, sp, #56	; 0x38
 8004d84:	f7ff f810 	bl	8003da8 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 8004d88:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 8004d8c:	9b02      	ldr	r3, [sp, #8]
 8004d8e:	b10a      	cbz	r2, 8004d94 <mbedtls_mpi_exp_mod+0x3ac>
 8004d90:	6892      	ldr	r2, [r2, #8]
 8004d92:	b922      	cbnz	r2, 8004d9e <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 8004d94:	a808      	add	r0, sp, #32
 8004d96:	9302      	str	r3, [sp, #8]
 8004d98:	f7ff f806 	bl	8003da8 <mbedtls_mpi_free>
 8004d9c:	9b02      	ldr	r3, [sp, #8]

    return( ret );
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 8004da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 8004da8:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 8004dac:	ebab 0208 	sub.w	r2, fp, r8
 8004db0:	4093      	lsls	r3, r2
        if( nbits == wsize )
 8004db2:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 8004db4:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 8004db8:	d1ab      	bne.n	8004d12 <mbedtls_mpi_exp_mod+0x32a>
 8004dba:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8004dbe:	ab0b      	add	r3, sp, #44	; 0x2c
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f7ff f9de 	bl	800418a <mpi_montmul>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d1c5      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 8004dd4:	f108 0801 	add.w	r8, r8, #1
 8004dd8:	45c3      	cmp	fp, r8
 8004dda:	d8f0      	bhi.n	8004dbe <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 8004ddc:	ab0b      	add	r3, sp, #44	; 0x2c
 8004dde:	a814      	add	r0, sp, #80	; 0x50
 8004de0:	210c      	movs	r1, #12
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	fb01 0107 	mla	r1, r1, r7, r0
 8004de8:	4623      	mov	r3, r4
 8004dea:	462a      	mov	r2, r5
 8004dec:	4630      	mov	r0, r6
 8004dee:	f7ff f9cc 	bl	800418a <mpi_montmul>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1b3      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
            state--;
 8004df8:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 8004dfc:	4607      	mov	r7, r0
            wbits = 0;
 8004dfe:	4680      	mov	r8, r0
 8004e00:	e6da      	b.n	8004bb8 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8004e02:	4623      	mov	r3, r4
 8004e04:	f8cd 9000 	str.w	r9, [sp]
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f7ff f9bc 	bl	800418a <mpi_montmul>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d1a3      	bne.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 8004e18:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 8004e1a:	ea17 0f0a 	tst.w	r7, sl
 8004e1e:	d103      	bne.n	8004e28 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 8004e20:	9b02      	ldr	r3, [sp, #8]
 8004e22:	3301      	adds	r3, #1
 8004e24:	9302      	str	r3, [sp, #8]
 8004e26:	e6d5      	b.n	8004bd4 <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 8004e28:	4623      	mov	r3, r4
 8004e2a:	f8cd 9000 	str.w	r9, [sp]
 8004e2e:	462a      	mov	r2, r5
 8004e30:	a917      	add	r1, sp, #92	; 0x5c
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff f9a9 	bl	800418a <mpi_montmul>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d0f0      	beq.n	8004e20 <mbedtls_mpi_exp_mod+0x438>
 8004e3e:	e78f      	b.n	8004d60 <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 8004e40:	ab14      	add	r3, sp, #80	; 0x50
 8004e42:	fb06 3004 	mla	r0, r6, r4, r3
 8004e46:	f7fe ffaf 	bl	8003da8 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8004e4a:	3401      	adds	r4, #1
 8004e4c:	9b02      	ldr	r3, [sp, #8]
 8004e4e:	e78f      	b.n	8004d70 <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004e50:	f06f 0303 	mvn.w	r3, #3
 8004e54:	e7a3      	b.n	8004d9e <mbedtls_mpi_exp_mod+0x3b6>

08004e56 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8004e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e58:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 8004e5a:	2300      	movs	r3, #0
    X->s = 1;
 8004e5c:	2601      	movs	r6, #1
{
 8004e5e:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8004e60:	a804      	add	r0, sp, #16
{
 8004e62:	4615      	mov	r5, r2
    X->s = 1;
 8004e64:	9601      	str	r6, [sp, #4]
    X->n = 0;
 8004e66:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8004e68:	9303      	str	r3, [sp, #12]
    X->s = 1;
 8004e6a:	9604      	str	r6, [sp, #16]
    X->n = 0;
 8004e6c:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8004e6e:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8004e70:	9607      	str	r6, [sp, #28]
    X->n = 0;
 8004e72:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8004e76:	f7fe ffda 	bl	8003e2e <mbedtls_mpi_copy>
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d157      	bne.n	8004f30 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8004e80:	4629      	mov	r1, r5
 8004e82:	a807      	add	r0, sp, #28
 8004e84:	f7fe ffd3 	bl	8003e2e <mbedtls_mpi_copy>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d150      	bne.n	8004f30 <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 8004e8e:	a804      	add	r0, sp, #16
 8004e90:	f7ff f823 	bl	8003eda <mbedtls_mpi_lsb>
 8004e94:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 8004e96:	a807      	add	r0, sp, #28
 8004e98:	f7ff f81f 	bl	8003eda <mbedtls_mpi_lsb>
 8004e9c:	4285      	cmp	r5, r0
 8004e9e:	bf28      	it	cs
 8004ea0:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	a804      	add	r0, sp, #16
 8004ea6:	f7ff f8fd 	bl	80040a4 <mbedtls_mpi_shift_r>
 8004eaa:	4604      	mov	r4, r0
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d13f      	bne.n	8004f30 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	a807      	add	r0, sp, #28
 8004eb4:	f7ff f8f6 	bl	80040a4 <mbedtls_mpi_shift_r>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d138      	bne.n	8004f30 <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 8004ebe:	9607      	str	r6, [sp, #28]
 8004ec0:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	a804      	add	r0, sp, #16
 8004ec6:	f7ff fa0a 	bl	80042de <mbedtls_mpi_cmp_int>
 8004eca:	b958      	cbnz	r0, 8004ee4 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8004ecc:	4629      	mov	r1, r5
 8004ece:	a807      	add	r0, sp, #28
 8004ed0:	f7ff f89c 	bl	800400c <mbedtls_mpi_shift_l>
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	bb58      	cbnz	r0, 8004f30 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8004ed8:	a907      	add	r1, sp, #28
 8004eda:	4638      	mov	r0, r7
 8004edc:	f7fe ffa7 	bl	8003e2e <mbedtls_mpi_copy>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	e025      	b.n	8004f30 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8004ee4:	a804      	add	r0, sp, #16
 8004ee6:	f7fe fff8 	bl	8003eda <mbedtls_mpi_lsb>
 8004eea:	4601      	mov	r1, r0
 8004eec:	a804      	add	r0, sp, #16
 8004eee:	f7ff f8d9 	bl	80040a4 <mbedtls_mpi_shift_r>
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	b9e0      	cbnz	r0, 8004f30 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8004ef6:	a807      	add	r0, sp, #28
 8004ef8:	f7fe ffef 	bl	8003eda <mbedtls_mpi_lsb>
 8004efc:	4601      	mov	r1, r0
 8004efe:	a807      	add	r0, sp, #28
 8004f00:	f7ff f8d0 	bl	80040a4 <mbedtls_mpi_shift_r>
 8004f04:	4604      	mov	r4, r0
 8004f06:	b998      	cbnz	r0, 8004f30 <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8004f08:	a907      	add	r1, sp, #28
 8004f0a:	a804      	add	r0, sp, #16
 8004f0c:	f7ff f9a1 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	db19      	blt.n	8004f48 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8004f14:	a904      	add	r1, sp, #16
 8004f16:	aa07      	add	r2, sp, #28
 8004f18:	4608      	mov	r0, r1
 8004f1a:	f7ff fa51 	bl	80043c0 <mbedtls_mpi_sub_abs>
 8004f1e:	4604      	mov	r4, r0
 8004f20:	b930      	cbnz	r0, 8004f30 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 8004f22:	2101      	movs	r1, #1
 8004f24:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8004f26:	f7ff f8bd 	bl	80040a4 <mbedtls_mpi_shift_r>
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0c8      	beq.n	8004ec2 <mbedtls_mpi_gcd+0x6c>

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 8004f30:	a801      	add	r0, sp, #4
 8004f32:	f7fe ff39 	bl	8003da8 <mbedtls_mpi_free>
 8004f36:	a804      	add	r0, sp, #16
 8004f38:	f7fe ff36 	bl	8003da8 <mbedtls_mpi_free>
 8004f3c:	a807      	add	r0, sp, #28
 8004f3e:	f7fe ff33 	bl	8003da8 <mbedtls_mpi_free>

    return( ret );
}
 8004f42:	4620      	mov	r0, r4
 8004f44:	b00b      	add	sp, #44	; 0x2c
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8004f48:	a907      	add	r1, sp, #28
 8004f4a:	aa04      	add	r2, sp, #16
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	f7ff fa37 	bl	80043c0 <mbedtls_mpi_sub_abs>
 8004f52:	4604      	mov	r4, r0
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d1eb      	bne.n	8004f30 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8004f58:	2101      	movs	r1, #1
 8004f5a:	a807      	add	r0, sp, #28
 8004f5c:	e7e3      	b.n	8004f26 <mbedtls_mpi_gcd+0xd0>

08004f5e <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8004f5e:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 8004f60:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8004f64:	b0c0      	sub	sp, #256	; 0x100
 8004f66:	4605      	mov	r5, r0
 8004f68:	460c      	mov	r4, r1
 8004f6a:	4616      	mov	r6, r2
    if( size > MBEDTLS_MPI_MAX_SIZE )
 8004f6c:	d816      	bhi.n	8004f9c <mbedtls_mpi_fill_random+0x3e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 8004f6e:	460a      	mov	r2, r1
 8004f70:	4618      	mov	r0, r3
 8004f72:	4669      	mov	r1, sp
 8004f74:	47b0      	blx	r6
 8004f76:	b920      	cbnz	r0, 8004f82 <mbedtls_mpi_fill_random+0x24>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4669      	mov	r1, sp
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7fe ffec 	bl	8003f5a <mbedtls_mpi_read_binary>
 8004f82:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8004f84:	f240 1201 	movw	r2, #257	; 0x101
 8004f88:	461c      	mov	r4, r3
 8004f8a:	eb0d 0103 	add.w	r1, sp, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <mbedtls_mpi_fill_random+0x3a>

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 8004f94:	b040      	add	sp, #256	; 0x100
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8004f98:	700c      	strb	r4, [r1, #0]
 8004f9a:	e7f6      	b.n	8004f8a <mbedtls_mpi_fill_random+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004f9c:	f06f 0003 	mvn.w	r0, #3
 8004fa0:	e7f8      	b.n	8004f94 <mbedtls_mpi_fill_random+0x36>

08004fa2 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8004fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	b09c      	sub	sp, #112	; 0x70
 8004faa:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8004fac:	4610      	mov	r0, r2
 8004fae:	2101      	movs	r1, #1
{
 8004fb0:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8004fb2:	f7ff f994 	bl	80042de <mbedtls_mpi_cmp_int>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f340 8143 	ble.w	8005242 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 8004fbc:	2300      	movs	r3, #0
    X->s = 1;
 8004fbe:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	a801      	add	r0, sp, #4
    X->s = 1;
 8004fc6:	9504      	str	r5, [sp, #16]
    X->n = 0;
 8004fc8:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8004fca:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8004fcc:	9507      	str	r5, [sp, #28]
    X->n = 0;
 8004fce:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8004fd0:	9309      	str	r3, [sp, #36]	; 0x24
    X->s = 1;
 8004fd2:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 8004fd4:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 8004fd6:	930c      	str	r3, [sp, #48]	; 0x30
    X->s = 1;
 8004fd8:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 8004fda:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 8004fdc:	930f      	str	r3, [sp, #60]	; 0x3c
    X->s = 1;
 8004fde:	9501      	str	r5, [sp, #4]
    X->n = 0;
 8004fe0:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8004fe2:	9303      	str	r3, [sp, #12]
    X->s = 1;
 8004fe4:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 8004fe6:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 8004fe8:	9312      	str	r3, [sp, #72]	; 0x48
    X->s = 1;
 8004fea:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 8004fec:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 8004fee:	9315      	str	r3, [sp, #84]	; 0x54
    X->s = 1;
 8004ff0:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 8004ff2:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 8004ff4:	9318      	str	r3, [sp, #96]	; 0x60
    X->s = 1;
 8004ff6:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 8004ff8:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 8004ffa:	931b      	str	r3, [sp, #108]	; 0x6c
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8004ffc:	f7ff ff2b 	bl	8004e56 <mbedtls_mpi_gcd>
 8005000:	4604      	mov	r4, r0
 8005002:	2800      	cmp	r0, #0
 8005004:	d154      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8005006:	4629      	mov	r1, r5
 8005008:	a801      	add	r0, sp, #4
 800500a:	f7ff f968 	bl	80042de <mbedtls_mpi_cmp_int>
 800500e:	2800      	cmp	r0, #0
 8005010:	f040 8114 	bne.w	800523c <mbedtls_mpi_inv_mod+0x29a>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8005014:	4632      	mov	r2, r6
 8005016:	4639      	mov	r1, r7
 8005018:	a804      	add	r0, sp, #16
 800501a:	f7ff fcb3 	bl	8004984 <mbedtls_mpi_mod_mpi>
 800501e:	4604      	mov	r4, r0
 8005020:	2800      	cmp	r0, #0
 8005022:	d145      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8005024:	a904      	add	r1, sp, #16
 8005026:	a807      	add	r0, sp, #28
 8005028:	f7fe ff01 	bl	8003e2e <mbedtls_mpi_copy>
 800502c:	4604      	mov	r4, r0
 800502e:	2800      	cmp	r0, #0
 8005030:	d13e      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8005032:	4631      	mov	r1, r6
 8005034:	a810      	add	r0, sp, #64	; 0x40
 8005036:	f7fe fefa 	bl	8003e2e <mbedtls_mpi_copy>
 800503a:	4604      	mov	r4, r0
 800503c:	2800      	cmp	r0, #0
 800503e:	d137      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8005040:	4631      	mov	r1, r6
 8005042:	a813      	add	r0, sp, #76	; 0x4c
 8005044:	f7fe fef3 	bl	8003e2e <mbedtls_mpi_copy>
 8005048:	4604      	mov	r4, r0
 800504a:	2800      	cmp	r0, #0
 800504c:	d130      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800504e:	4629      	mov	r1, r5
 8005050:	a80a      	add	r0, sp, #40	; 0x28
 8005052:	f7fe ff16 	bl	8003e82 <mbedtls_mpi_lset>
 8005056:	4604      	mov	r4, r0
 8005058:	bb50      	cbnz	r0, 80050b0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800505a:	4601      	mov	r1, r0
 800505c:	a80d      	add	r0, sp, #52	; 0x34
 800505e:	f7fe ff10 	bl	8003e82 <mbedtls_mpi_lset>
 8005062:	4604      	mov	r4, r0
 8005064:	bb20      	cbnz	r0, 80050b0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8005066:	4601      	mov	r1, r0
 8005068:	a816      	add	r0, sp, #88	; 0x58
 800506a:	f7fe ff0a 	bl	8003e82 <mbedtls_mpi_lset>
 800506e:	4604      	mov	r4, r0
 8005070:	b9f0      	cbnz	r0, 80050b0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 8005072:	4629      	mov	r1, r5
 8005074:	a819      	add	r0, sp, #100	; 0x64
 8005076:	f7fe ff04 	bl	8003e82 <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800507a:	4604      	mov	r4, r0
 800507c:	b9c0      	cbnz	r0, 80050b0 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 800507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	07d8      	lsls	r0, r3, #31
 8005084:	d466      	bmi.n	8005154 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8005086:	2101      	movs	r1, #1
 8005088:	a807      	add	r0, sp, #28
 800508a:	f7ff f80b 	bl	80040a4 <mbedtls_mpi_shift_r>
 800508e:	4604      	mov	r4, r0
 8005090:	b970      	cbnz	r0, 80050b0 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 8005092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	07dd      	lsls	r5, r3, #31
 8005098:	d429      	bmi.n	80050ee <mbedtls_mpi_inv_mod+0x14c>
 800509a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	07dc      	lsls	r4, r3, #31
 80050a0:	d425      	bmi.n	80050ee <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80050a2:	2101      	movs	r1, #1
 80050a4:	a80a      	add	r0, sp, #40	; 0x28
 80050a6:	f7fe fffd 	bl	80040a4 <mbedtls_mpi_shift_r>
 80050aa:	4604      	mov	r4, r0
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d02f      	beq.n	8005110 <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80050b0:	a804      	add	r0, sp, #16
 80050b2:	f7fe fe79 	bl	8003da8 <mbedtls_mpi_free>
 80050b6:	a807      	add	r0, sp, #28
 80050b8:	f7fe fe76 	bl	8003da8 <mbedtls_mpi_free>
 80050bc:	a80a      	add	r0, sp, #40	; 0x28
 80050be:	f7fe fe73 	bl	8003da8 <mbedtls_mpi_free>
 80050c2:	a80d      	add	r0, sp, #52	; 0x34
 80050c4:	f7fe fe70 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 80050c8:	a801      	add	r0, sp, #4
 80050ca:	f7fe fe6d 	bl	8003da8 <mbedtls_mpi_free>
 80050ce:	a810      	add	r0, sp, #64	; 0x40
 80050d0:	f7fe fe6a 	bl	8003da8 <mbedtls_mpi_free>
 80050d4:	a813      	add	r0, sp, #76	; 0x4c
 80050d6:	f7fe fe67 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 80050da:	a816      	add	r0, sp, #88	; 0x58
 80050dc:	f7fe fe64 	bl	8003da8 <mbedtls_mpi_free>
 80050e0:	a819      	add	r0, sp, #100	; 0x64
 80050e2:	f7fe fe61 	bl	8003da8 <mbedtls_mpi_free>

    return( ret );
}
 80050e6:	4620      	mov	r0, r4
 80050e8:	b01c      	add	sp, #112	; 0x70
 80050ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80050ee:	a90a      	add	r1, sp, #40	; 0x28
 80050f0:	aa10      	add	r2, sp, #64	; 0x40
 80050f2:	4608      	mov	r0, r1
 80050f4:	f7ff f9a5 	bl	8004442 <mbedtls_mpi_add_mpi>
 80050f8:	4604      	mov	r4, r0
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d1d8      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80050fe:	a90d      	add	r1, sp, #52	; 0x34
 8005100:	aa04      	add	r2, sp, #16
 8005102:	4608      	mov	r0, r1
 8005104:	f7ff f9bf 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8005108:	4604      	mov	r4, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d0c9      	beq.n	80050a2 <mbedtls_mpi_inv_mod+0x100>
 800510e:	e7cf      	b.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8005110:	2101      	movs	r1, #1
 8005112:	a80d      	add	r0, sp, #52	; 0x34
 8005114:	f7fe ffc6 	bl	80040a4 <mbedtls_mpi_shift_r>
 8005118:	e7af      	b.n	800507a <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800511a:	2101      	movs	r1, #1
 800511c:	a813      	add	r0, sp, #76	; 0x4c
 800511e:	f7fe ffc1 	bl	80040a4 <mbedtls_mpi_shift_r>
 8005122:	4604      	mov	r4, r0
 8005124:	2800      	cmp	r0, #0
 8005126:	d1c3      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8005128:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	07d9      	lsls	r1, r3, #31
 800512e:	d44c      	bmi.n	80051ca <mbedtls_mpi_inv_mod+0x228>
 8005130:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	07da      	lsls	r2, r3, #31
 8005136:	d448      	bmi.n	80051ca <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8005138:	2101      	movs	r1, #1
 800513a:	a816      	add	r0, sp, #88	; 0x58
 800513c:	f7fe ffb2 	bl	80040a4 <mbedtls_mpi_shift_r>
 8005140:	4604      	mov	r4, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d1b4      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8005146:	2101      	movs	r1, #1
 8005148:	a819      	add	r0, sp, #100	; 0x64
 800514a:	f7fe ffab 	bl	80040a4 <mbedtls_mpi_shift_r>
 800514e:	4604      	mov	r4, r0
 8005150:	2800      	cmp	r0, #0
 8005152:	d1ad      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 8005154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d5de      	bpl.n	800511a <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800515c:	a913      	add	r1, sp, #76	; 0x4c
 800515e:	a807      	add	r0, sp, #28
 8005160:	f7ff f877 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 8005164:	2800      	cmp	r0, #0
 8005166:	db42      	blt.n	80051ee <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8005168:	a907      	add	r1, sp, #28
 800516a:	aa13      	add	r2, sp, #76	; 0x4c
 800516c:	4608      	mov	r0, r1
 800516e:	f7ff f98a 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8005172:	4604      	mov	r4, r0
 8005174:	2800      	cmp	r0, #0
 8005176:	d19b      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8005178:	a90a      	add	r1, sp, #40	; 0x28
 800517a:	aa16      	add	r2, sp, #88	; 0x58
 800517c:	4608      	mov	r0, r1
 800517e:	f7ff f982 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8005182:	4604      	mov	r4, r0
 8005184:	2800      	cmp	r0, #0
 8005186:	d193      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8005188:	aa19      	add	r2, sp, #100	; 0x64
 800518a:	a90d      	add	r1, sp, #52	; 0x34
 800518c:	4608      	mov	r0, r1
 800518e:	f7ff f97a 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8005192:	4604      	mov	r4, r0
 8005194:	2800      	cmp	r0, #0
 8005196:	d18b      	bne.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8005198:	2100      	movs	r1, #0
 800519a:	a807      	add	r0, sp, #28
 800519c:	f7ff f89f 	bl	80042de <mbedtls_mpi_cmp_int>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f47f af6c 	bne.w	800507e <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 80051a6:	2100      	movs	r1, #0
 80051a8:	a816      	add	r0, sp, #88	; 0x58
 80051aa:	f7ff f898 	bl	80042de <mbedtls_mpi_cmp_int>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	db32      	blt.n	8005218 <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80051b2:	4631      	mov	r1, r6
 80051b4:	a816      	add	r0, sp, #88	; 0x58
 80051b6:	f7ff f84c 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	da35      	bge.n	800522a <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 80051be:	a916      	add	r1, sp, #88	; 0x58
 80051c0:	4640      	mov	r0, r8
 80051c2:	f7fe fe34 	bl	8003e2e <mbedtls_mpi_copy>
 80051c6:	4604      	mov	r4, r0
 80051c8:	e772      	b.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80051ca:	a916      	add	r1, sp, #88	; 0x58
 80051cc:	aa10      	add	r2, sp, #64	; 0x40
 80051ce:	4608      	mov	r0, r1
 80051d0:	f7ff f937 	bl	8004442 <mbedtls_mpi_add_mpi>
 80051d4:	4604      	mov	r4, r0
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f47f af6a 	bne.w	80050b0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80051dc:	a919      	add	r1, sp, #100	; 0x64
 80051de:	aa04      	add	r2, sp, #16
 80051e0:	4608      	mov	r0, r1
 80051e2:	f7ff f950 	bl	8004486 <mbedtls_mpi_sub_mpi>
 80051e6:	4604      	mov	r4, r0
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d0a5      	beq.n	8005138 <mbedtls_mpi_inv_mod+0x196>
 80051ec:	e760      	b.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80051ee:	a913      	add	r1, sp, #76	; 0x4c
 80051f0:	aa07      	add	r2, sp, #28
 80051f2:	4608      	mov	r0, r1
 80051f4:	f7ff f947 	bl	8004486 <mbedtls_mpi_sub_mpi>
 80051f8:	4604      	mov	r4, r0
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f47f af58 	bne.w	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8005200:	a916      	add	r1, sp, #88	; 0x58
 8005202:	aa0a      	add	r2, sp, #40	; 0x28
 8005204:	4608      	mov	r0, r1
 8005206:	f7ff f93e 	bl	8004486 <mbedtls_mpi_sub_mpi>
 800520a:	4604      	mov	r4, r0
 800520c:	2800      	cmp	r0, #0
 800520e:	f47f af4f 	bne.w	80050b0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8005212:	aa0d      	add	r2, sp, #52	; 0x34
 8005214:	a919      	add	r1, sp, #100	; 0x64
 8005216:	e7b9      	b.n	800518c <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8005218:	a916      	add	r1, sp, #88	; 0x58
 800521a:	4632      	mov	r2, r6
 800521c:	4608      	mov	r0, r1
 800521e:	f7ff f910 	bl	8004442 <mbedtls_mpi_add_mpi>
 8005222:	4604      	mov	r4, r0
 8005224:	2800      	cmp	r0, #0
 8005226:	d0be      	beq.n	80051a6 <mbedtls_mpi_inv_mod+0x204>
 8005228:	e742      	b.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800522a:	a916      	add	r1, sp, #88	; 0x58
 800522c:	4632      	mov	r2, r6
 800522e:	4608      	mov	r0, r1
 8005230:	f7ff f929 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8005234:	4604      	mov	r4, r0
 8005236:	2800      	cmp	r0, #0
 8005238:	d0bb      	beq.n	80051b2 <mbedtls_mpi_inv_mod+0x210>
 800523a:	e739      	b.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800523c:	f06f 040d 	mvn.w	r4, #13
 8005240:	e736      	b.n	80050b0 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8005242:	f06f 0403 	mvn.w	r4, #3
 8005246:	e74e      	b.n	80050e6 <mbedtls_mpi_inv_mod+0x144>

08005248 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8005248:	b110      	cbz	r0, 8005250 <mbedtls_cipher_get_block_size+0x8>
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	b100      	cbz	r0, 8005250 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 800524e:	6940      	ldr	r0, [r0, #20]
}
 8005250:	4770      	bx	lr
	...

08005254 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8005254:	b118      	cbz	r0, 800525e <get_no_padding+0xa>
 8005256:	b112      	cbz	r2, 800525e <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8005258:	6011      	str	r1, [r2, #0]

    return( 0 );
 800525a:	2000      	movs	r0, #0
 800525c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800525e:	4801      	ldr	r0, [pc, #4]	; (8005264 <get_no_padding+0x10>)
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	ffff9f00 	.word	0xffff9f00

08005268 <mbedtls_cipher_info_from_type>:
{
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <mbedtls_cipher_info_from_type+0x18>)
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800526a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800526e:	b122      	cbz	r2, 800527a <mbedtls_cipher_info_from_type+0x12>
 8005270:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8005272:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8005276:	4281      	cmp	r1, r0
 8005278:	d1f7      	bne.n	800526a <mbedtls_cipher_info_from_type+0x2>
}
 800527a:	4610      	mov	r0, r2
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	08010c1c 	.word	0x08010c1c

08005284 <mbedtls_cipher_info_from_values>:
{
 8005284:	b530      	push	{r4, r5, lr}
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8005286:	4c08      	ldr	r4, [pc, #32]	; (80052a8 <mbedtls_cipher_info_from_values+0x24>)
 8005288:	6863      	ldr	r3, [r4, #4]
 800528a:	b90b      	cbnz	r3, 8005290 <mbedtls_cipher_info_from_values+0xc>
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 8005290:	699d      	ldr	r5, [r3, #24]
 8005292:	782d      	ldrb	r5, [r5, #0]
 8005294:	4285      	cmp	r5, r0
 8005296:	d105      	bne.n	80052a4 <mbedtls_cipher_info_from_values+0x20>
 8005298:	685d      	ldr	r5, [r3, #4]
 800529a:	428d      	cmp	r5, r1
 800529c:	d102      	bne.n	80052a4 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800529e:	785d      	ldrb	r5, [r3, #1]
 80052a0:	4295      	cmp	r5, r2
 80052a2:	d0f3      	beq.n	800528c <mbedtls_cipher_info_from_values+0x8>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80052a4:	3408      	adds	r4, #8
 80052a6:	e7ef      	b.n	8005288 <mbedtls_cipher_info_from_values+0x4>
 80052a8:	08010c14 	.word	0x08010c14

080052ac <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	2100      	movs	r1, #0
 80052b0:	f009 bdfa 	b.w	800eea8 <memset>

080052b4 <mbedtls_cipher_free>:
{
 80052b4:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80052b6:	4604      	mov	r4, r0
 80052b8:	b150      	cbz	r0, 80052d0 <mbedtls_cipher_free+0x1c>
    if( ctx->cipher_ctx )
 80052ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80052bc:	b118      	cbz	r0, 80052c6 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	4798      	blx	r3
 80052c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80052ca:	2200      	movs	r2, #0
 80052cc:	429c      	cmp	r4, r3
 80052ce:	d100      	bne.n	80052d2 <mbedtls_cipher_free+0x1e>
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	7022      	strb	r2, [r4, #0]
 80052d4:	3401      	adds	r4, #1
 80052d6:	e7f9      	b.n	80052cc <mbedtls_cipher_free+0x18>

080052d8 <mbedtls_cipher_setkey>:
{
 80052d8:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 80052da:	b1c8      	cbz	r0, 8005310 <mbedtls_cipher_setkey+0x38>
 80052dc:	6804      	ldr	r4, [r0, #0]
 80052de:	b1bc      	cbz	r4, 8005310 <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80052e0:	6925      	ldr	r5, [r4, #16]
 80052e2:	07ad      	lsls	r5, r5, #30
 80052e4:	d402      	bmi.n	80052ec <mbedtls_cipher_setkey+0x14>
 80052e6:	6865      	ldr	r5, [r4, #4]
 80052e8:	4295      	cmp	r5, r2
 80052ea:	d111      	bne.n	8005310 <mbedtls_cipher_setkey+0x38>
    if( MBEDTLS_ENCRYPT == operation ||
 80052ec:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 80052ee:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 80052f0:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 80052f2:	d004      	beq.n	80052fe <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80052f4:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 80052f6:	2d03      	cmp	r5, #3
 80052f8:	d001      	beq.n	80052fe <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80052fa:	2d05      	cmp	r5, #5
 80052fc:	d104      	bne.n	8005308 <mbedtls_cipher_setkey+0x30>
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80052fe:	69a3      	ldr	r3, [r4, #24]
 8005300:	68db      	ldr	r3, [r3, #12]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8005302:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005304:	bc30      	pop	{r4, r5}
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8005306:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 8005308:	b913      	cbnz	r3, 8005310 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800530a:	69a3      	ldr	r3, [r4, #24]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	e7f8      	b.n	8005302 <mbedtls_cipher_setkey+0x2a>
}
 8005310:	4801      	ldr	r0, [pc, #4]	; (8005318 <mbedtls_cipher_setkey+0x40>)
 8005312:	bc30      	pop	{r4, r5}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	ffff9f00 	.word	0xffff9f00

0800531c <mbedtls_cipher_set_iv>:
{
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4614      	mov	r4, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 8005320:	4605      	mov	r5, r0
 8005322:	b1a8      	cbz	r0, 8005350 <mbedtls_cipher_set_iv+0x34>
 8005324:	6803      	ldr	r3, [r0, #0]
 8005326:	b19b      	cbz	r3, 8005350 <mbedtls_cipher_set_iv+0x34>
 8005328:	b191      	cbz	r1, 8005350 <mbedtls_cipher_set_iv+0x34>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800532a:	2a10      	cmp	r2, #16
 800532c:	d80e      	bhi.n	800534c <mbedtls_cipher_set_iv+0x30>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	07d2      	lsls	r2, r2, #31
 8005332:	d403      	bmi.n	800533c <mbedtls_cipher_set_iv+0x20>
        actual_iv_size = ctx->cipher_info->iv_size;
 8005334:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 8005336:	429c      	cmp	r4, r3
 8005338:	d30a      	bcc.n	8005350 <mbedtls_cipher_set_iv+0x34>
 800533a:	461c      	mov	r4, r3
    memcpy( ctx->iv, iv, actual_iv_size );
 800533c:	4622      	mov	r2, r4
 800533e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005342:	f009 fd8c 	bl	800ee5e <memcpy>
    ctx->iv_size = actual_iv_size;
 8005346:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 8005348:	2000      	movs	r0, #0
 800534a:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800534c:	4801      	ldr	r0, [pc, #4]	; (8005354 <mbedtls_cipher_set_iv+0x38>)
 800534e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005350:	4801      	ldr	r0, [pc, #4]	; (8005358 <mbedtls_cipher_set_iv+0x3c>)
}
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	ffff9f80 	.word	0xffff9f80
 8005358:	ffff9f00 	.word	0xffff9f00

0800535c <mbedtls_cipher_reset>:
    if( NULL == ctx || NULL == ctx->cipher_info )
 800535c:	b128      	cbz	r0, 800536a <mbedtls_cipher_reset+0xe>
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	b11b      	cbz	r3, 800536a <mbedtls_cipher_reset+0xe>
    ctx->unprocessed_len = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 8005366:	4618      	mov	r0, r3
 8005368:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800536a:	4801      	ldr	r0, [pc, #4]	; (8005370 <mbedtls_cipher_reset+0x14>)
}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	ffff9f00 	.word	0xffff9f00

08005374 <mbedtls_cipher_update>:
{
 8005374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800537c:	460f      	mov	r7, r1
 800537e:	4615      	mov	r5, r2
 8005380:	4699      	mov	r9, r3
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8005382:	4604      	mov	r4, r0
 8005384:	b918      	cbnz	r0, 800538e <mbedtls_cipher_update+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8005386:	4858      	ldr	r0, [pc, #352]	; (80054e8 <mbedtls_cipher_update+0x174>)
}
 8005388:	b003      	add	sp, #12
 800538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800538e:	6802      	ldr	r2, [r0, #0]
 8005390:	2a00      	cmp	r2, #0
 8005392:	d0f8      	beq.n	8005386 <mbedtls_cipher_update+0x12>
 8005394:	f1b8 0f00 	cmp.w	r8, #0
 8005398:	d0f5      	beq.n	8005386 <mbedtls_cipher_update+0x12>
    *olen = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 80053a0:	f7ff ff52 	bl	8005248 <mbedtls_cipher_get_block_size>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80053a4:	7853      	ldrb	r3, [r2, #1]
 80053a6:	2b01      	cmp	r3, #1
    block_size = mbedtls_cipher_get_block_size( ctx );
 80053a8:	4606      	mov	r6, r0
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80053aa:	d110      	bne.n	80053ce <mbedtls_cipher_update+0x5a>
        if( ilen != block_size )
 80053ac:	42a8      	cmp	r0, r5
 80053ae:	f040 8095 	bne.w	80054dc <mbedtls_cipher_update+0x168>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80053b2:	6993      	ldr	r3, [r2, #24]
        *olen = ilen;
 80053b4:	f8c8 0000 	str.w	r0, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80053b8:	685d      	ldr	r5, [r3, #4]
 80053ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80053bc:	460a      	mov	r2, r1
 80053be:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80053c2:	464b      	mov	r3, r9
 80053c4:	46ac      	mov	ip, r5
}
 80053c6:	b003      	add	sp, #12
 80053c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80053cc:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d10a      	bne.n	80053e8 <mbedtls_cipher_update+0x74>
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80053d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 80053d4:	f8c8 5000 	str.w	r5, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80053d8:	460a      	mov	r2, r1
 80053da:	464b      	mov	r3, r9
 80053dc:	4629      	mov	r1, r5
}
 80053de:	b003      	add	sp, #12
 80053e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80053e4:	f001 bce0 	b.w	8006da8 <mbedtls_gcm_update>
    if ( 0 == block_size )
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d079      	beq.n	80054e0 <mbedtls_cipher_update+0x16c>
    if( input == output &&
 80053ec:	4549      	cmp	r1, r9
 80053ee:	d108      	bne.n	8005402 <mbedtls_cipher_update+0x8e>
 80053f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	d1c7      	bne.n	8005386 <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80053f6:	fbb5 f2f0 	udiv	r2, r5, r0
 80053fa:	fb00 5212 	mls	r2, r0, r2, r5
 80053fe:	2a00      	cmp	r2, #0
 8005400:	d1c1      	bne.n	8005386 <mbedtls_cipher_update+0x12>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8005402:	2b02      	cmp	r3, #2
 8005404:	d16e      	bne.n	80054e4 <mbedtls_cipher_update+0x170>
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 8005406:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800540a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800540c:	b96b      	cbnz	r3, 800542a <mbedtls_cipher_update+0xb6>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800540e:	1a33      	subs	r3, r6, r0
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 8005410:	429d      	cmp	r5, r3
 8005412:	d80f      	bhi.n	8005434 <mbedtls_cipher_update+0xc0>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8005414:	3014      	adds	r0, #20
 8005416:	462a      	mov	r2, r5
 8005418:	4639      	mov	r1, r7
 800541a:	4420      	add	r0, r4
 800541c:	f009 fd1f 	bl	800ee5e <memcpy>
            ctx->unprocessed_len += ilen;
 8005420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005422:	441d      	add	r5, r3
 8005424:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 8005426:	2000      	movs	r0, #0
 8005428:	e7ae      	b.n	8005388 <mbedtls_cipher_update+0x14>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800542a:	2b01      	cmp	r3, #1
 800542c:	d102      	bne.n	8005434 <mbedtls_cipher_update+0xc0>
                ilen < block_size - ctx->unprocessed_len ) )
 800542e:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8005430:	429d      	cmp	r5, r3
 8005432:	d3ef      	bcc.n	8005414 <mbedtls_cipher_update+0xa0>
        if( 0 != ctx->unprocessed_len )
 8005434:	b310      	cbz	r0, 800547c <mbedtls_cipher_update+0x108>
            copy_len = block_size - ctx->unprocessed_len;
 8005436:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800543a:	3014      	adds	r0, #20
 800543c:	4652      	mov	r2, sl
 800543e:	4639      	mov	r1, r7
 8005440:	4420      	add	r0, r4
 8005442:	f009 fd0c 	bl	800ee5e <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8005446:	4623      	mov	r3, r4
 8005448:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800544c:	f853 2b14 	ldr.w	r2, [r3], #20
 8005450:	6992      	ldr	r2, [r2, #24]
 8005452:	e88d 0208 	stmia.w	sp, {r3, r9}
 8005456:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800545a:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800545e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005460:	4632      	mov	r2, r6
 8005462:	47d8      	blx	fp
 8005464:	2800      	cmp	r0, #0
 8005466:	d18f      	bne.n	8005388 <mbedtls_cipher_update+0x14>
            *olen += block_size;
 8005468:	f8d8 3000 	ldr.w	r3, [r8]
 800546c:	4433      	add	r3, r6
 800546e:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
 8005472:	44b1      	add	r9, r6
            ctx->unprocessed_len = 0;
 8005474:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 8005476:	4457      	add	r7, sl
            ilen -= copy_len;
 8005478:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 800547c:	2d00      	cmp	r5, #0
 800547e:	d0d2      	beq.n	8005426 <mbedtls_cipher_update+0xb2>
            copy_len = ilen % block_size;
 8005480:	fbb5 faf6 	udiv	sl, r5, r6
 8005484:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 8005488:	f1ba 0f00 	cmp.w	sl, #0
 800548c:	d104      	bne.n	8005498 <mbedtls_cipher_update+0x124>
 800548e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf08      	it	eq
 8005496:	46b2      	moveq	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8005498:	eba5 050a 	sub.w	r5, r5, sl
 800549c:	4652      	mov	r2, sl
 800549e:	1979      	adds	r1, r7, r5
 80054a0:	f104 0014 	add.w	r0, r4, #20
 80054a4:	f009 fcdb 	bl	800ee5e <memcpy>
            ctx->unprocessed_len += copy_len;
 80054a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054aa:	4453      	add	r3, sl
 80054ac:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	d0b9      	beq.n	8005426 <mbedtls_cipher_update+0xb2>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	e88d 0280 	stmia.w	sp, {r7, r9}
 80054be:	462a      	mov	r2, r5
 80054c0:	689e      	ldr	r6, [r3, #8]
 80054c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80054c4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80054c8:	47b0      	blx	r6
 80054ca:	2800      	cmp	r0, #0
 80054cc:	f47f af5c 	bne.w	8005388 <mbedtls_cipher_update+0x14>
            *olen += ilen;
 80054d0:	f8d8 3000 	ldr.w	r3, [r8]
 80054d4:	441d      	add	r5, r3
 80054d6:	f8c8 5000 	str.w	r5, [r8]
 80054da:	e755      	b.n	8005388 <mbedtls_cipher_update+0x14>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80054dc:	4803      	ldr	r0, [pc, #12]	; (80054ec <mbedtls_cipher_update+0x178>)
 80054de:	e753      	b.n	8005388 <mbedtls_cipher_update+0x14>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 80054e0:	4803      	ldr	r0, [pc, #12]	; (80054f0 <mbedtls_cipher_update+0x17c>)
 80054e2:	e751      	b.n	8005388 <mbedtls_cipher_update+0x14>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80054e4:	4803      	ldr	r0, [pc, #12]	; (80054f4 <mbedtls_cipher_update+0x180>)
 80054e6:	e74f      	b.n	8005388 <mbedtls_cipher_update+0x14>
 80054e8:	ffff9f00 	.word	0xffff9f00
 80054ec:	ffff9d80 	.word	0xffff9d80
 80054f0:	ffff9c80 	.word	0xffff9c80
 80054f4:	ffff9f80 	.word	0xffff9f80

080054f8 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 80054f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054fa:	460e      	mov	r6, r1
 80054fc:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80054fe:	4604      	mov	r4, r0
 8005500:	2800      	cmp	r0, #0
 8005502:	d055      	beq.n	80055b0 <mbedtls_cipher_finish+0xb8>
 8005504:	6807      	ldr	r7, [r0, #0]
 8005506:	2f00      	cmp	r7, #0
 8005508:	d052      	beq.n	80055b0 <mbedtls_cipher_finish+0xb8>
 800550a:	2a00      	cmp	r2, #0
 800550c:	d050      	beq.n	80055b0 <mbedtls_cipher_finish+0xb8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8005512:	787a      	ldrb	r2, [r7, #1]
 8005514:	2a03      	cmp	r2, #3
 8005516:	d009      	beq.n	800552c <mbedtls_cipher_finish+0x34>
 8005518:	1f51      	subs	r1, r2, #5
 800551a:	2902      	cmp	r1, #2
 800551c:	d906      	bls.n	800552c <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800551e:	2a01      	cmp	r2, #1
 8005520:	d107      	bne.n	8005532 <mbedtls_cipher_finish+0x3a>
    {
        if( ctx->unprocessed_len != 0 )
 8005522:	6a63      	ldr	r3, [r4, #36]	; 0x24
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 8005524:	2b00      	cmp	r3, #0
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <mbedtls_cipher_finish+0xc0>)
 8005528:	bf08      	it	eq
 800552a:	2300      	moveq	r3, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 800552c:	4618      	mov	r0, r3
 800552e:	b003      	add	sp, #12
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8005532:	2a02      	cmp	r2, #2
 8005534:	d13e      	bne.n	80055b4 <mbedtls_cipher_finish+0xbc>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 8005536:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d12a      	bne.n	8005594 <mbedtls_cipher_finish+0x9c>
            if( NULL == ctx->add_padding )
 800553e:	68c3      	ldr	r3, [r0, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ee      	beq.n	8005522 <mbedtls_cipher_finish+0x2a>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 8005544:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 8005546:	3014      	adds	r0, #20
 8005548:	b901      	cbnz	r1, 800554c <mbedtls_cipher_finish+0x54>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800554e:	4798      	blx	r3
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8005550:	4620      	mov	r0, r4
 8005552:	f7ff fe79 	bl	8005248 <mbedtls_cipher_get_block_size>
 8005556:	4623      	mov	r3, r4
 8005558:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800555c:	f853 2b14 	ldr.w	r2, [r3], #20
 8005560:	6992      	ldr	r2, [r2, #24]
 8005562:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005566:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800556a:	6897      	ldr	r7, [r2, #8]
 800556c:	4602      	mov	r2, r0
 800556e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005570:	47b8      	blx	r7
 8005572:	4603      	mov	r3, r0
 8005574:	2800      	cmp	r0, #0
 8005576:	d1d9      	bne.n	800552c <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 8005578:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800557c:	4620      	mov	r0, r4
        if( MBEDTLS_DECRYPT == ctx->operation )
 800557e:	b99a      	cbnz	r2, 80055a8 <mbedtls_cipher_finish+0xb0>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8005580:	f7ff fe62 	bl	8005248 <mbedtls_cipher_get_block_size>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	4601      	mov	r1, r0
 8005588:	462a      	mov	r2, r5
 800558a:	4630      	mov	r0, r6
}
 800558c:	b003      	add	sp, #12
 800558e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8005592:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8005594:	f7ff fe58 	bl	8005248 <mbedtls_cipher_get_block_size>
 8005598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800559a:	4298      	cmp	r0, r3
 800559c:	d0d8      	beq.n	8005550 <mbedtls_cipher_finish+0x58>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800559e:	68e2      	ldr	r2, [r4, #12]
 80055a0:	2a00      	cmp	r2, #0
 80055a2:	d0bf      	beq.n	8005524 <mbedtls_cipher_finish+0x2c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <mbedtls_cipher_finish+0xc0>)
 80055a6:	e7c1      	b.n	800552c <mbedtls_cipher_finish+0x34>
        *olen = mbedtls_cipher_get_block_size( ctx );
 80055a8:	f7ff fe4e 	bl	8005248 <mbedtls_cipher_get_block_size>
 80055ac:	6028      	str	r0, [r5, #0]
 80055ae:	e7bd      	b.n	800552c <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <mbedtls_cipher_finish+0xc4>)
 80055b2:	e7bb      	b.n	800552c <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <mbedtls_cipher_finish+0xc8>)
 80055b6:	e7b9      	b.n	800552c <mbedtls_cipher_finish+0x34>
 80055b8:	ffff9d80 	.word	0xffff9d80
 80055bc:	ffff9f00 	.word	0xffff9f00
 80055c0:	ffff9f80 	.word	0xffff9f80

080055c4 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 80055c4:	b158      	cbz	r0, 80055de <mbedtls_cipher_set_padding_mode+0x1a>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 80055c6:	6803      	ldr	r3, [r0, #0]
    if( NULL == ctx ||
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d107      	bne.n	80055de <mbedtls_cipher_set_padding_mode+0x1a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 80055ce:	2904      	cmp	r1, #4
 80055d0:	d107      	bne.n	80055e2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 80055d2:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 80055d4:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <mbedtls_cipher_set_padding_mode+0x24>)
        ctx->add_padding = NULL;
 80055d6:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 80055d8:	6102      	str	r2, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80055da:	4618      	mov	r0, r3
 80055dc:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80055de:	4803      	ldr	r0, [pc, #12]	; (80055ec <mbedtls_cipher_set_padding_mode+0x28>)
 80055e0:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80055e2:	4803      	ldr	r0, [pc, #12]	; (80055f0 <mbedtls_cipher_set_padding_mode+0x2c>)
}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	08005255 	.word	0x08005255
 80055ec:	ffff9f00 	.word	0xffff9f00
 80055f0:	ffff9f80 	.word	0xffff9f80

080055f4 <mbedtls_cipher_setup>:
{
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80055f8:	460d      	mov	r5, r1
 80055fa:	b181      	cbz	r1, 800561e <mbedtls_cipher_setup+0x2a>
 80055fc:	b178      	cbz	r0, 800561e <mbedtls_cipher_setup+0x2a>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	2100      	movs	r1, #0
 8005602:	f009 fc51 	bl	800eea8 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8005606:	69ab      	ldr	r3, [r5, #24]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	4798      	blx	r3
 800560c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800560e:	b140      	cbz	r0, 8005622 <mbedtls_cipher_setup+0x2e>
    ctx->cipher_info = cipher_info;
 8005610:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 8005612:	2104      	movs	r1, #4
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff ffd5 	bl	80055c4 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 800561a:	2000      	movs	r0, #0
 800561c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800561e:	4802      	ldr	r0, [pc, #8]	; (8005628 <mbedtls_cipher_setup+0x34>)
 8005620:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8005622:	4802      	ldr	r0, [pc, #8]	; (800562c <mbedtls_cipher_setup+0x38>)
}
 8005624:	bd38      	pop	{r3, r4, r5, pc}
 8005626:	bf00      	nop
 8005628:	ffff9f00 	.word	0xffff9f00
 800562c:	ffff9e80 	.word	0xffff9e80

08005630 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8005630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005632:	b085      	sub	sp, #20
 8005634:	4605      	mov	r5, r0
 8005636:	461f      	mov	r7, r3
 8005638:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800563a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 800563c:	f7ff fe6e 	bl	800531c <mbedtls_cipher_set_iv>
 8005640:	b9b0      	cbnz	r0, 8005670 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 8005642:	4628      	mov	r0, r5
 8005644:	f7ff fe8a 	bl	800535c <mbedtls_cipher_reset>
 8005648:	b990      	cbnz	r0, 8005670 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 800564a:	9400      	str	r4, [sp, #0]
 800564c:	4633      	mov	r3, r6
 800564e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005650:	4639      	mov	r1, r7
 8005652:	4628      	mov	r0, r5
 8005654:	f7ff fe8e 	bl	8005374 <mbedtls_cipher_update>
 8005658:	b950      	cbnz	r0, 8005670 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 800565a:	6821      	ldr	r1, [r4, #0]
 800565c:	aa03      	add	r2, sp, #12
 800565e:	4431      	add	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	f7ff ff49 	bl	80054f8 <mbedtls_cipher_finish>
 8005666:	b918      	cbnz	r0, 8005670 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	9a03      	ldr	r2, [sp, #12]
 800566c:	4413      	add	r3, r2
 800566e:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8005670:	b005      	add	sp, #20
 8005672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005674 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8005674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005678:	6807      	ldr	r7, [r0, #0]
{
 800567a:	9d07      	ldr	r5, [sp, #28]
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800567c:	787f      	ldrb	r7, [r7, #1]
{
 800567e:	9e08      	ldr	r6, [sp, #32]
 8005680:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005684:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005688:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800568c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005690:	2f06      	cmp	r7, #6
{
 8005692:	4614      	mov	r4, r2
 8005694:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8005696:	d112      	bne.n	80056be <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 8005698:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 800569c:	9308      	str	r3, [sp, #32]
 800569e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80056a2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80056a6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80056aa:	960a      	str	r6, [sp, #40]	; 0x28
 80056ac:	9509      	str	r5, [sp, #36]	; 0x24
 80056ae:	9407      	str	r4, [sp, #28]
 80056b0:	460b      	mov	r3, r1
 80056b2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80056b4:	2101      	movs	r1, #1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80056b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 80056ba:	f001 bc63 	b.w	8006f84 <mbedtls_gcm_crypt_and_tag>
}
 80056be:	4801      	ldr	r0, [pc, #4]	; (80056c4 <mbedtls_cipher_auth_encrypt+0x50>)
 80056c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056c4:	ffff9f80 	.word	0xffff9f80

080056c8 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80056c8:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80056ca:	6805      	ldr	r5, [r0, #0]
 80056cc:	786d      	ldrb	r5, [r5, #1]
{
 80056ce:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80056d0:	2d06      	cmp	r5, #6
{
 80056d2:	460c      	mov	r4, r1
 80056d4:	990c      	ldr	r1, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80056d6:	d118      	bne.n	800570a <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
 80056d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056da:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 80056dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80056de:	9505      	str	r5, [sp, #20]
 80056e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80056e2:	9504      	str	r5, [sp, #16]
 80056e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056e6:	9503      	str	r5, [sp, #12]
 80056e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80056ea:	9502      	str	r5, [sp, #8]
 80056ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056ee:	e88d 0028 	stmia.w	sp, {r3, r5}
 80056f2:	4613      	mov	r3, r2
 80056f4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80056f6:	4622      	mov	r2, r4
 80056f8:	f001 fc69 	bl	8006fce <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <mbedtls_cipher_auth_decrypt+0x48>)
 80056fe:	f110 0f12 	cmn.w	r0, #18
 8005702:	bf08      	it	eq
 8005704:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8005706:	b007      	add	sp, #28
 8005708:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800570a:	4802      	ldr	r0, [pc, #8]	; (8005714 <mbedtls_cipher_auth_decrypt+0x4c>)
 800570c:	e7fb      	b.n	8005706 <mbedtls_cipher_auth_decrypt+0x3e>
 800570e:	bf00      	nop
 8005710:	ffff9d00 	.word	0xffff9d00
 8005714:	ffff9f80 	.word	0xffff9f80

08005718 <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8005718:	b510      	push	{r4, lr}
 800571a:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 800571c:	f001 fc84 	bl	8007028 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8005720:	4620      	mov	r0, r4
}
 8005722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8005726:	f009 bb83 	b.w	800ee30 <free>

0800572a <gcm_ctx_alloc>:
{
 800572a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800572c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8005730:	2001      	movs	r0, #1
 8005732:	f009 fb43 	bl	800edbc <calloc>
    if( ctx != NULL )
 8005736:	4604      	mov	r4, r0
 8005738:	b108      	cbz	r0, 800573e <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800573a:	f001 f9d7 	bl	8006aec <mbedtls_gcm_init>
}
 800573e:	4620      	mov	r0, r4
 8005740:	bd10      	pop	{r4, pc}

08005742 <gcm_aes_setkey_wrap>:

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8005742:	4613      	mov	r3, r2
 8005744:	460a      	mov	r2, r1
 8005746:	2102      	movs	r1, #2
 8005748:	f001 b9d5 	b.w	8006af6 <mbedtls_gcm_setkey>

0800574c <aes_ctx_free>:
{
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8005750:	f7fd f981 	bl	8002a56 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8005754:	4620      	mov	r0, r4
}
 8005756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800575a:	f009 bb69 	b.w	800ee30 <free>

0800575e <aes_ctx_alloc>:
{
 800575e:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8005760:	f44f 718c 	mov.w	r1, #280	; 0x118
 8005764:	2001      	movs	r0, #1
 8005766:	f009 fb29 	bl	800edbc <calloc>
    if( aes == NULL )
 800576a:	4604      	mov	r4, r0
 800576c:	b108      	cbz	r0, 8005772 <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 800576e:	f7fd f96d 	bl	8002a4c <mbedtls_aes_init>
}
 8005772:	4620      	mov	r0, r4
 8005774:	bd10      	pop	{r4, pc}

08005776 <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8005776:	f7fd ba95 	b.w	8002ca4 <mbedtls_aes_setkey_dec>

0800577a <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800577a:	f7fd b977 	b.w	8002a6c <mbedtls_aes_setkey_enc>

0800577e <aes_crypt_cbc_wrap>:
{
 800577e:	b410      	push	{r4}
}
 8005780:	f85d 4b04 	ldr.w	r4, [sp], #4
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 8005784:	f7fd beaa 	b.w	80034dc <mbedtls_aes_crypt_cbc>

08005788 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8005788:	f7fd be9a 	b.w	80034c0 <mbedtls_aes_crypt_ecb>

0800578c <mbedtls_zeroize>:
#define mbedtls_printf printf
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800578c:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	4288      	cmp	r0, r1
 8005792:	d100      	bne.n	8005796 <mbedtls_zeroize+0xa>
}
 8005794:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8005796:	7003      	strb	r3, [r0, #0]
 8005798:	3001      	adds	r0, #1
 800579a:	e7f9      	b.n	8005790 <mbedtls_zeroize+0x4>

0800579c <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800579c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80057a0:	2100      	movs	r1, #0
 80057a2:	f009 bb81 	b.w	800eea8 <memset>

080057a6 <mbedtls_ctr_drbg_free>:
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 80057a6:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80057a8:	4604      	mov	r4, r0
 80057aa:	b148      	cbz	r0, 80057c0 <mbedtls_ctr_drbg_free+0x1a>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 80057ac:	3020      	adds	r0, #32
 80057ae:	f7fd f952 	bl	8002a56 <mbedtls_aes_free>
    mbedtls_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 80057b2:	4620      	mov	r0, r4
 80057b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
}
 80057b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 80057bc:	f7ff bfe6 	b.w	800578c <mbedtls_zeroize>
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 80057c2:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80057c4:	6904      	ldr	r4, [r0, #16]
 80057c6:	6940      	ldr	r0, [r0, #20]
 80057c8:	46a4      	mov	ip, r4
#endif
}
 80057ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80057ce:	4760      	bx	ip

080057d0 <mbedtls_debug_print_mpi.part.1>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80057d8:	469a      	mov	sl, r3
 80057da:	9e91      	ldr	r6, [sp, #580]	; 0x244
 80057dc:	9103      	str	r1, [sp, #12]
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 80057de:	6873      	ldr	r3, [r6, #4]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80057e0:	9204      	str	r2, [sp, #16]
    for( n = X->n - 1; n > 0; n-- )
 80057e2:	1e5c      	subs	r4, r3, #1
 80057e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e8:	3b01      	subs	r3, #1
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 80057ea:	4683      	mov	fp, r0
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	68b2      	ldr	r2, [r6, #8]
    for( n = X->n - 1; n > 0; n-- )
 80057f0:	b11c      	cbz	r4, 80057fa <mbedtls_debug_print_mpi.part.1+0x2a>
        if( X->p[n] != 0 )
 80057f2:	58d1      	ldr	r1, [r2, r3]
 80057f4:	3b04      	subs	r3, #4
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d040      	beq.n	800587c <mbedtls_debug_print_mpi.part.1+0xac>
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 80057fa:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80057fe:	00a5      	lsls	r5, r4, #2
 8005800:	231f      	movs	r3, #31
 8005802:	fa22 f103 	lsr.w	r1, r2, r3
 8005806:	07c9      	lsls	r1, r1, #31
 8005808:	d402      	bmi.n	8005810 <mbedtls_debug_print_mpi.part.1+0x40>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800580a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800580e:	d2f8      	bcs.n	8005802 <mbedtls_debug_print_mpi.part.1+0x32>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8005810:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8005814:	af06      	add	r7, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8005816:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	4a39      	ldr	r2, [pc, #228]	; (8005900 <mbedtls_debug_print_mpi.part.1+0x130>)
 800581c:	9b90      	ldr	r3, [sp, #576]	; 0x240
 800581e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005822:	4638      	mov	r0, r7
 8005824:	f009 fcf0 	bl	800f208 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 8005828:	4653      	mov	r3, sl
 800582a:	9700      	str	r7, [sp, #0]
 800582c:	9a04      	ldr	r2, [sp, #16]
 800582e:	9903      	ldr	r1, [sp, #12]
 8005830:	f8db 0000 	ldr.w	r0, [fp]
 8005834:	f7ff ffc5 	bl	80057c2 <debug_send_line.isra.0>

    idx = 0;
    for( i = n + 1, j = 0; i > 0; i-- )
 8005838:	1c63      	adds	r3, r4, #1
    idx = 0;
 800583a:	2400      	movs	r4, #0
    for( i = n + 1, j = 0; i > 0; i-- )
 800583c:	9302      	str	r3, [sp, #8]
 800583e:	46a1      	mov	r9, r4
    int j, k, zeros = 1;
 8005840:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 8005842:	9a02      	ldr	r2, [sp, #8]
 8005844:	b9e2      	cbnz	r2, 8005880 <mbedtls_debug_print_mpi.part.1+0xb0>
 8005846:	ad06      	add	r5, sp, #24
            j++;
        }

    }

    if( zeros == 1 )
 8005848:	b133      	cbz	r3, 8005858 <mbedtls_debug_print_mpi.part.1+0x88>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 800584a:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 800584e:	1928      	adds	r0, r5, r4
 8005850:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <mbedtls_debug_print_mpi.part.1+0x134>)
 8005852:	f009 fcd9 	bl	800f208 <sniprintf>
 8005856:	4404      	add	r4, r0

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8005858:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <mbedtls_debug_print_mpi.part.1+0x138>)
 800585e:	1928      	adds	r0, r5, r4
 8005860:	f009 fcd2 	bl	800f208 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8005864:	9500      	str	r5, [sp, #0]
 8005866:	4653      	mov	r3, sl
 8005868:	9a04      	ldr	r2, [sp, #16]
 800586a:	9903      	ldr	r1, [sp, #12]
 800586c:	f8db 0000 	ldr.w	r0, [fp]
 8005870:	f7ff ffa7 	bl	80057c2 <debug_send_line.isra.0>
}
 8005874:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8005878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( n = X->n - 1; n > 0; n-- )
 800587c:	3c01      	subs	r4, #1
 800587e:	e7b6      	b.n	80057ee <mbedtls_debug_print_mpi.part.1+0x1e>
        if( zeros && X->p[i - 1] == 0 )
 8005880:	b11b      	cbz	r3, 800588a <mbedtls_debug_print_mpi.part.1+0xba>
 8005882:	68b2      	ldr	r2, [r6, #8]
 8005884:	5952      	ldr	r2, [r2, r5]
 8005886:	2a00      	cmp	r2, #0
 8005888:	d034      	beq.n	80058f4 <mbedtls_debug_print_mpi.part.1+0x124>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 800588a:	f04f 0818 	mov.w	r8, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 800588e:	b133      	cbz	r3, 800589e <mbedtls_debug_print_mpi.part.1+0xce>
 8005890:	68b2      	ldr	r2, [r6, #8]
 8005892:	5952      	ldr	r2, [r2, r5]
 8005894:	fa22 f208 	lsr.w	r2, r2, r8
 8005898:	f012 0fff 	tst.w	r2, #255	; 0xff
 800589c:	d025      	beq.n	80058ea <mbedtls_debug_print_mpi.part.1+0x11a>
            if( j % 16 == 0 )
 800589e:	f019 030f 	ands.w	r3, r9, #15
 80058a2:	9305      	str	r3, [sp, #20]
 80058a4:	d111      	bne.n	80058ca <mbedtls_debug_print_mpi.part.1+0xfa>
                if( j > 0 )
 80058a6:	f1b9 0f00 	cmp.w	r9, #0
 80058aa:	d00e      	beq.n	80058ca <mbedtls_debug_print_mpi.part.1+0xfa>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 80058ac:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80058b0:	4a15      	ldr	r2, [pc, #84]	; (8005908 <mbedtls_debug_print_mpi.part.1+0x138>)
 80058b2:	1938      	adds	r0, r7, r4
 80058b4:	f009 fca8 	bl	800f208 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 80058b8:	9700      	str	r7, [sp, #0]
 80058ba:	4653      	mov	r3, sl
 80058bc:	9a04      	ldr	r2, [sp, #16]
 80058be:	9903      	ldr	r1, [sp, #12]
 80058c0:	f8db 0000 	ldr.w	r0, [fp]
 80058c4:	f7ff ff7d 	bl	80057c2 <debug_send_line.isra.0>
                    idx = 0;
 80058c8:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80058ca:	68b3      	ldr	r3, [r6, #8]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80058cc:	4a0f      	ldr	r2, [pc, #60]	; (800590c <mbedtls_debug_print_mpi.part.1+0x13c>)
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80058ce:	595b      	ldr	r3, [r3, r5]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80058d0:	a806      	add	r0, sp, #24
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80058d2:	fa23 f308 	lsr.w	r3, r3, r8
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80058dc:	4420      	add	r0, r4
 80058de:	f009 fc93 	bl	800f208 <sniprintf>
            j++;
 80058e2:	f109 0901 	add.w	r9, r9, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80058e6:	4404      	add	r4, r0
                zeros = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	f1a8 0808 	sub.w	r8, r8, #8
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 80058ee:	f118 0f08 	cmn.w	r8, #8
 80058f2:	d1cc      	bne.n	800588e <mbedtls_debug_print_mpi.part.1+0xbe>
    for( i = n + 1, j = 0; i > 0; i-- )
 80058f4:	9a02      	ldr	r2, [sp, #8]
 80058f6:	3a01      	subs	r2, #1
 80058f8:	9202      	str	r2, [sp, #8]
 80058fa:	3d04      	subs	r5, #4
 80058fc:	e7a1      	b.n	8005842 <mbedtls_debug_print_mpi.part.1+0x72>
 80058fe:	bf00      	nop
 8005900:	08010d35 	.word	0x08010d35
 8005904:	08010d58 	.word	0x08010d58
 8005908:	0801314c 	.word	0x0801314c
 800590c:	08010d52 	.word	0x08010d52

08005910 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 8005910:	4b01      	ldr	r3, [pc, #4]	; (8005918 <mbedtls_debug_set_threshold+0x8>)
 8005912:	6018      	str	r0, [r3, #0]
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20002760 	.word	0x20002760

0800591c <mbedtls_debug_print_msg>:
{
 800591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005920:	460e      	mov	r6, r1
 8005922:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8005926:	4617      	mov	r7, r2
 8005928:	4698      	mov	r8, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 800592a:	4605      	mov	r5, r0
 800592c:	b1f8      	cbz	r0, 800596e <mbedtls_debug_print_msg+0x52>
 800592e:	6803      	ldr	r3, [r0, #0]
 8005930:	b1eb      	cbz	r3, 800596e <mbedtls_debug_print_msg+0x52>
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	b1db      	cbz	r3, 800596e <mbedtls_debug_print_msg+0x52>
 8005936:	4b10      	ldr	r3, [pc, #64]	; (8005978 <mbedtls_debug_print_msg+0x5c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	428b      	cmp	r3, r1
 800593c:	db17      	blt.n	800596e <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 800593e:	ac04      	add	r4, sp, #16
    va_start( argp, format );
 8005940:	ab8b      	add	r3, sp, #556	; 0x22c
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8005942:	9a8a      	ldr	r2, [sp, #552]	; 0x228
    va_start( argp, format );
 8005944:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8005946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800594a:	4620      	mov	r0, r4
 800594c:	f009 fd1a 	bl	800f384 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 8005950:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8005954:	d804      	bhi.n	8005960 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 8005956:	230a      	movs	r3, #10
 8005958:	5423      	strb	r3, [r4, r0]
        str[ret + 1] = '\0';
 800595a:	4420      	add	r0, r4
 800595c:	2300      	movs	r3, #0
 800595e:	7043      	strb	r3, [r0, #1]
    debug_send_line( ssl, level, file, line, str );
 8005960:	9400      	str	r4, [sp, #0]
 8005962:	4643      	mov	r3, r8
 8005964:	463a      	mov	r2, r7
 8005966:	4631      	mov	r1, r6
 8005968:	6828      	ldr	r0, [r5, #0]
 800596a:	f7ff ff2a 	bl	80057c2 <debug_send_line.isra.0>
}
 800596e:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8005972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005976:	bf00      	nop
 8005978:	20002760 	.word	0x20002760

0800597c <mbedtls_debug_print_ret>:
{
 800597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005980:	4617      	mov	r7, r2
 8005982:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8005986:	6802      	ldr	r2, [r0, #0]
{
 8005988:	4698      	mov	r8, r3
 800598a:	4604      	mov	r4, r0
 800598c:	460d      	mov	r5, r1
 800598e:	9b89      	ldr	r3, [sp, #548]	; 0x224
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8005990:	b1d2      	cbz	r2, 80059c8 <mbedtls_debug_print_ret+0x4c>
 8005992:	6912      	ldr	r2, [r2, #16]
 8005994:	b1c2      	cbz	r2, 80059c8 <mbedtls_debug_print_ret+0x4c>
 8005996:	4a0e      	ldr	r2, [pc, #56]	; (80059d0 <mbedtls_debug_print_ret+0x54>)
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	428a      	cmp	r2, r1
 800599c:	db14      	blt.n	80059c8 <mbedtls_debug_print_ret+0x4c>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 800599e:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 80059a2:	d011      	beq.n	80059c8 <mbedtls_debug_print_ret+0x4c>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 80059a4:	425a      	negs	r2, r3
 80059a6:	ae02      	add	r6, sp, #8
 80059a8:	9201      	str	r2, [sp, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <mbedtls_debug_print_ret+0x58>)
 80059ae:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80059b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059b4:	4630      	mov	r0, r6
 80059b6:	f009 fc27 	bl	800f208 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 80059ba:	9600      	str	r6, [sp, #0]
 80059bc:	4643      	mov	r3, r8
 80059be:	463a      	mov	r2, r7
 80059c0:	4629      	mov	r1, r5
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	f7ff fefd 	bl	80057c2 <debug_send_line.isra.0>
}
 80059c8:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	20002760 	.word	0x20002760
 80059d4:	08010d5c 	.word	0x08010d5c

080059d8 <mbedtls_debug_print_buf>:
{
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	4699      	mov	r9, r3
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80059de:	6803      	ldr	r3, [r0, #0]
{
 80059e0:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80059e4:	4606      	mov	r6, r0
 80059e6:	460f      	mov	r7, r1
 80059e8:	4690      	mov	r8, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d040      	beq.n	8005a70 <mbedtls_debug_print_buf+0x98>
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d03d      	beq.n	8005a70 <mbedtls_debug_print_buf+0x98>
 80059f4:	4b41      	ldr	r3, [pc, #260]	; (8005afc <mbedtls_debug_print_buf+0x124>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	428b      	cmp	r3, r1
 80059fa:	db39      	blt.n	8005a70 <mbedtls_debug_print_buf+0x98>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 80059fc:	ac08      	add	r4, sp, #32
 80059fe:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4a3f      	ldr	r2, [pc, #252]	; (8005b00 <mbedtls_debug_print_buf+0x128>)
 8005a04:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8005a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f009 fbfc 	bl	800f208 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8005a10:	464b      	mov	r3, r9
 8005a12:	9400      	str	r4, [sp, #0]
 8005a14:	4642      	mov	r2, r8
 8005a16:	4639      	mov	r1, r7
 8005a18:	6830      	ldr	r0, [r6, #0]
 8005a1a:	f7ff fed2 	bl	80057c2 <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 8005a1e:	2211      	movs	r2, #17
 8005a20:	2100      	movs	r1, #0
 8005a22:	a803      	add	r0, sp, #12
 8005a24:	f009 fa40 	bl	800eea8 <memset>
 8005a28:	9b93      	ldr	r3, [sp, #588]	; 0x24c
    idx = 0;
 8005a2a:	2400      	movs	r4, #0
 8005a2c:	f103 3bff 	add.w	fp, r3, #4294967295
    for( i = 0; i < len; i++ )
 8005a30:	4625      	mov	r5, r4
 8005a32:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8005a34:	429d      	cmp	r5, r3
 8005a36:	d002      	beq.n	8005a3e <mbedtls_debug_print_buf+0x66>
        if( i >= 4096 )
 8005a38:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005a3c:	d11c      	bne.n	8005a78 <mbedtls_debug_print_buf+0xa0>
    if( len > 0 )
 8005a3e:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8005a40:	b1b3      	cbz	r3, 8005a70 <mbedtls_debug_print_buf+0x98>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8005a42:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8005b10 <mbedtls_debug_print_buf+0x138>
 8005a46:	f10d 0a20 	add.w	sl, sp, #32
        for( /* i = i */; i % 16 != 0; i++ )
 8005a4a:	f015 0f0f 	tst.w	r5, #15
 8005a4e:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8005a52:	d14a      	bne.n	8005aea <mbedtls_debug_print_buf+0x112>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8005a54:	ab03      	add	r3, sp, #12
 8005a56:	4a2b      	ldr	r2, [pc, #172]	; (8005b04 <mbedtls_debug_print_buf+0x12c>)
 8005a58:	eb0a 0004 	add.w	r0, sl, r4
 8005a5c:	f009 fbd4 	bl	800f208 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8005a60:	f8cd a000 	str.w	sl, [sp]
 8005a64:	464b      	mov	r3, r9
 8005a66:	4642      	mov	r2, r8
 8005a68:	4639      	mov	r1, r7
 8005a6a:	6830      	ldr	r0, [r6, #0]
 8005a6c:	f7ff fea9 	bl	80057c2 <debug_send_line.isra.0>
}
 8005a70:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i % 16 == 0 )
 8005a78:	f015 0a0f 	ands.w	sl, r5, #15
 8005a7c:	d11f      	bne.n	8005abe <mbedtls_debug_print_buf+0xe6>
            if( i > 0 )
 8005a7e:	b1ad      	cbz	r5, 8005aac <mbedtls_debug_print_buf+0xd4>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8005a80:	a808      	add	r0, sp, #32
 8005a82:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8005a86:	ab03      	add	r3, sp, #12
 8005a88:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <mbedtls_debug_print_buf+0x12c>)
 8005a8a:	4420      	add	r0, r4
 8005a8c:	f009 fbbc 	bl	800f208 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 8005a90:	ab08      	add	r3, sp, #32
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	4639      	mov	r1, r7
 8005a9a:	6830      	ldr	r0, [r6, #0]
 8005a9c:	f7ff fe91 	bl	80057c2 <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 8005aa0:	2211      	movs	r2, #17
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	a803      	add	r0, sp, #12
 8005aa6:	f009 f9ff 	bl	800eea8 <memset>
                idx = 0;
 8005aaa:	4654      	mov	r4, sl
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 8005aac:	a808      	add	r0, sp, #32
 8005aae:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8005ab2:	4420      	add	r0, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <mbedtls_debug_print_buf+0x130>)
 8005ab8:	f009 fba6 	bl	800f208 <sniprintf>
 8005abc:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8005abe:	a808      	add	r0, sp, #32
 8005ac0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <mbedtls_debug_print_buf+0x134>)
 8005ac6:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8005aca:	4420      	add	r0, r4
 8005acc:	f009 fb9c 	bl	800f208 <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 8005ad0:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8005ad4:	f1a3 0220 	sub.w	r2, r3, #32
 8005ad8:	2a5e      	cmp	r2, #94	; 0x5e
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	bf88      	it	hi
 8005ade:	232e      	movhi	r3, #46	; 0x2e
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8005ae0:	4404      	add	r4, r0
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 8005ae2:	f802 300a 	strb.w	r3, [r2, sl]
    for( i = 0; i < len; i++ )
 8005ae6:	3501      	adds	r5, #1
 8005ae8:	e7a3      	b.n	8005a32 <mbedtls_debug_print_buf+0x5a>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8005aea:	eb0a 0004 	add.w	r0, sl, r4
 8005aee:	465a      	mov	r2, fp
 8005af0:	f009 fb8a 	bl	800f208 <sniprintf>
        for( /* i = i */; i % 16 != 0; i++ )
 8005af4:	3501      	adds	r5, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8005af6:	4404      	add	r4, r0
 8005af8:	e7a7      	b.n	8005a4a <mbedtls_debug_print_buf+0x72>
 8005afa:	bf00      	nop
 8005afc:	20002760 	.word	0x20002760
 8005b00:	08010cd0 	.word	0x08010cd0
 8005b04:	08010ce9 	.word	0x08010ce9
 8005b08:	08010cef 	.word	0x08010cef
 8005b0c:	08010d52 	.word	0x08010d52
 8005b10:	08010cf6 	.word	0x08010cf6

08005b14 <mbedtls_debug_print_mpi>:
{
 8005b14:	b4f0      	push	{r4, r5, r6, r7}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8005b16:	6805      	ldr	r5, [r0, #0]
{
 8005b18:	9c05      	ldr	r4, [sp, #20]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8005b1a:	b14d      	cbz	r5, 8005b30 <mbedtls_debug_print_mpi+0x1c>
 8005b1c:	692d      	ldr	r5, [r5, #16]
 8005b1e:	b13d      	cbz	r5, 8005b30 <mbedtls_debug_print_mpi+0x1c>
 8005b20:	b134      	cbz	r4, 8005b30 <mbedtls_debug_print_mpi+0x1c>
 8005b22:	4d04      	ldr	r5, [pc, #16]	; (8005b34 <mbedtls_debug_print_mpi+0x20>)
 8005b24:	682d      	ldr	r5, [r5, #0]
 8005b26:	428d      	cmp	r5, r1
 8005b28:	db02      	blt.n	8005b30 <mbedtls_debug_print_mpi+0x1c>
}
 8005b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8005b2c:	f7ff be50 	b.w	80057d0 <mbedtls_debug_print_mpi.part.1>
 8005b30:	bcf0      	pop	{r4, r5, r6, r7}
 8005b32:	4770      	bx	lr
 8005b34:	20002760 	.word	0x20002760

08005b38 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	4698      	mov	r8, r3
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8005b3e:	6803      	ldr	r3, [r0, #0]
{
 8005b40:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
 8005b44:	4605      	mov	r5, r0
 8005b46:	460e      	mov	r6, r1
 8005b48:	4617      	mov	r7, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d054      	beq.n	8005bf8 <mbedtls_debug_print_crt+0xc0>
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d051      	beq.n	8005bf8 <mbedtls_debug_print_crt+0xc0>
 8005b54:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d04d      	beq.n	8005bf8 <mbedtls_debug_print_crt+0xc0>
 8005b5c:	4b50      	ldr	r3, [pc, #320]	; (8005ca0 <mbedtls_debug_print_crt+0x168>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	428b      	cmp	r3, r1
 8005b62:	db49      	blt.n	8005bf8 <mbedtls_debug_print_crt+0xc0>
 8005b64:	2300      	movs	r3, #0
 8005b66:	9302      	str	r3, [sp, #8]
            memcpy( str, start, len );
 8005b68:	ac88      	add	r4, sp, #544	; 0x220

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	4a4d      	ldr	r2, [pc, #308]	; (8005ca4 <mbedtls_debug_print_crt+0x16c>)
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f10d 0920 	add.w	r9, sp, #32
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b7c:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8005b80:	4648      	mov	r0, r9
 8005b82:	f009 fb41 	bl	800f208 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8005b86:	f8cd 9000 	str.w	r9, [sp]
 8005b8a:	4643      	mov	r3, r8
 8005b8c:	463a      	mov	r2, r7
 8005b8e:	4631      	mov	r1, r6
 8005b90:	6828      	ldr	r0, [r5, #0]
 8005b92:	f7ff fe16 	bl	80057c2 <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 8005b96:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005b9a:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8005b9e:	4a42      	ldr	r2, [pc, #264]	; (8005ca8 <mbedtls_debug_print_crt+0x170>)
 8005ba0:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8005ba4:	f008 f8c6 	bl	800dd34 <mbedtls_x509_crt_info>
 8005ba8:	f20d 491f 	addw	r9, sp, #1055	; 0x41f
    start = text;
 8005bac:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
            str[len] = '\0';
 8005bb0:	f04f 0b00 	mov.w	fp, #0
    for( cur = text; *cur != '\0'; cur++ )
 8005bb4:	f899 3001 	ldrb.w	r3, [r9, #1]
 8005bb8:	f109 0a01 	add.w	sl, r9, #1
 8005bbc:	bb03      	cbnz	r3, 8005c00 <mbedtls_debug_print_crt+0xc8>
    memset( items, 0, sizeof( items ) );
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	2224      	movs	r2, #36	; 0x24
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f009 f970 	bl	800eea8 <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8005bc8:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8005bcc:	4621      	mov	r1, r4
 8005bce:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
 8005bd2:	f001 fdd9 	bl	8007788 <mbedtls_pk_debug>
 8005bd6:	b380      	cbz	r0, 8005c3a <mbedtls_debug_print_crt+0x102>
        debug_send_line( ssl, level, file, line,
 8005bd8:	4b34      	ldr	r3, [pc, #208]	; (8005cac <mbedtls_debug_print_crt+0x174>)
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	463a      	mov	r2, r7
 8005bde:	4643      	mov	r3, r8
 8005be0:	4631      	mov	r1, r6
 8005be2:	6828      	ldr	r0, [r5, #0]
 8005be4:	f7ff fded 	bl	80057c2 <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8005be8:	f8dd 384c 	ldr.w	r3, [sp, #2124]	; 0x84c
 8005bec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005bf0:	f8cd 384c 	str.w	r3, [sp, #2124]	; 0x84c
    while( crt != NULL )
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1b8      	bne.n	8005b6a <mbedtls_debug_print_crt+0x32>
    }
}
 8005bf8:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 8005c00:	2b0a      	cmp	r3, #10
 8005c02:	d118      	bne.n	8005c36 <mbedtls_debug_print_crt+0xfe>
            size_t len = cur - start + 1;
 8005c04:	ebaa 0301 	sub.w	r3, sl, r1
 8005c08:	3301      	adds	r3, #1
 8005c0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	bf28      	it	cs
 8005c12:	4613      	movcs	r3, r2
            memcpy( str, start, len );
 8005c14:	461a      	mov	r2, r3
 8005c16:	4620      	mov	r0, r4
 8005c18:	9303      	str	r3, [sp, #12]
 8005c1a:	f009 f920 	bl	800ee5e <memcpy>
            str[len] = '\0';
 8005c1e:	9b03      	ldr	r3, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 8005c20:	6828      	ldr	r0, [r5, #0]
            str[len] = '\0';
 8005c22:	f804 b003 	strb.w	fp, [r4, r3]
            debug_send_line( ssl, level, file, line, str );
 8005c26:	4631      	mov	r1, r6
 8005c28:	9400      	str	r4, [sp, #0]
 8005c2a:	4643      	mov	r3, r8
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	f7ff fdc8 	bl	80057c2 <debug_send_line.isra.0>
 8005c32:	f109 0102 	add.w	r1, r9, #2
    start = text;
 8005c36:	46d1      	mov	r9, sl
 8005c38:	e7bc      	b.n	8005bb4 <mbedtls_debug_print_crt+0x7c>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8005c3a:	4681      	mov	r9, r0
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 8005c3c:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0d1      	beq.n	8005be8 <mbedtls_debug_print_crt+0xb0>
 8005c44:	eb04 0b09 	add.w	fp, r4, r9
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 8005c48:	f10d 0a10 	add.w	sl, sp, #16
 8005c4c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <mbedtls_debug_print_crt+0x178>)
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <mbedtls_debug_print_crt+0x17c>)
 8005c56:	2110      	movs	r1, #16
 8005c58:	4650      	mov	r0, sl
 8005c5a:	f009 fad5 	bl	800f208 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f88a 300f 	strb.w	r3, [sl, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 8005c64:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d110      	bne.n	8005c8e <mbedtls_debug_print_crt+0x156>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8005c6c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	f8cd a000 	str.w	sl, [sp]
 8005c76:	4643      	mov	r3, r8
 8005c78:	463a      	mov	r2, r7
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff ff49 	bl	8005b14 <mbedtls_debug_print_mpi>
 8005c82:	f109 090c 	add.w	r9, r9, #12
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8005c86:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8005c8a:	d1d7      	bne.n	8005c3c <mbedtls_debug_print_crt+0x104>
 8005c8c:	e7ac      	b.n	8005be8 <mbedtls_debug_print_crt+0xb0>
            debug_send_line( ssl, level, file, line,
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <mbedtls_debug_print_crt+0x180>)
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	463a      	mov	r2, r7
 8005c94:	4643      	mov	r3, r8
 8005c96:	4631      	mov	r1, r6
 8005c98:	6828      	ldr	r0, [r5, #0]
 8005c9a:	f7ff fd92 	bl	80057c2 <debug_send_line.isra.0>
 8005c9e:	e7f0      	b.n	8005c82 <mbedtls_debug_print_crt+0x14a>
 8005ca0:	20002760 	.word	0x20002760
 8005ca4:	08010cfa 	.word	0x08010cfa
 8005ca8:	08013087 	.word	0x08013087
 8005cac:	08010d03 	.word	0x08010d03
 8005cb0:	08010d1d 	.word	0x08010d1d
 8005cb4:	08010d17 	.word	0x08010d17
 8005cb8:	08010d22 	.word	0x08010d22

08005cbc <mbedtls_strerror>:
#include "mbedtls/xtea.h"
#endif


void mbedtls_strerror( int ret, char *buf, size_t buflen )
{
 8005cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	4607      	mov	r7, r0
 8005cc2:	460c      	mov	r4, r1
    size_t len;
    int use_ret;

    if( buflen == 0 )
 8005cc4:	4615      	mov	r5, r2
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	f000 8621 	beq.w	800690e <mbedtls_strerror+0xc52>
        return;

    memset( buf, 0x00, buflen );
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f009 f8ea 	bl	800eea8 <memset>
 8005cd4:	2f00      	cmp	r7, #0
 8005cd6:	bfb8      	it	lt
 8005cd8:	427f      	neglt	r7, r7

    if( ret < 0 )
        ret = -ret;

    if( ret & 0xFF80 )
 8005cda:	f64f 7680 	movw	r6, #65408	; 0xff80
 8005cde:	403e      	ands	r6, r7
 8005ce0:	d00f      	beq.n	8005d02 <mbedtls_strerror+0x46>

        // High level error codes
        //
        // BEGIN generated code
#if defined(MBEDTLS_CIPHER_C)
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )
 8005ce2:	f5b6 4fc1 	cmp.w	r6, #24704	; 0x6080
 8005ce6:	d138      	bne.n	8005d5a <mbedtls_strerror+0x9e>
            mbedtls_snprintf( buf, buflen, "CIPHER - The selected feature is not available" );
 8005ce8:	4abe      	ldr	r2, [pc, #760]	; (8005fe4 <mbedtls_strerror+0x328>)
 8005cea:	4629      	mov	r1, r5
 8005cec:	4620      	mov	r0, r4
 8005cee:	f009 fa8b 	bl	800f208 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */
        // END generated code

        if( strlen( buf ) == 0 )
 8005cf2:	7823      	ldrb	r3, [r4, #0]
 8005cf4:	b92b      	cbnz	r3, 8005d02 <mbedtls_strerror+0x46>
            mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 8005cf6:	4633      	mov	r3, r6
 8005cf8:	4abb      	ldr	r2, [pc, #748]	; (8005fe8 <mbedtls_strerror+0x32c>)
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f009 fa83 	bl	800f208 <sniprintf>
    }

    use_ret = ret & ~0xFF80;
 8005d02:	f427 467f 	bic.w	r6, r7, #65280	; 0xff00
 8005d06:	f026 0680 	bic.w	r6, r6, #128	; 0x80

    if( use_ret == 0 )
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	f000 85ff 	beq.w	800690e <mbedtls_strerror+0xc52>
        return;

    // If high level code is present, make a concatenation between both
    // error strings.
    //
    len = strlen( buf );
 8005d10:	4620      	mov	r0, r4
 8005d12:	f7fa fa65 	bl	80001e0 <strlen>

    if( len > 0 )
 8005d16:	4607      	mov	r7, r0
 8005d18:	b158      	cbz	r0, 8005d32 <mbedtls_strerror+0x76>
    {
        if( buflen - len < 5 )
 8005d1a:	1a2d      	subs	r5, r5, r0
 8005d1c:	2d04      	cmp	r5, #4
 8005d1e:	f240 85f6 	bls.w	800690e <mbedtls_strerror+0xc52>
            return;

        mbedtls_snprintf( buf + len, buflen - len, " : " );
 8005d22:	4629      	mov	r1, r5
 8005d24:	1820      	adds	r0, r4, r0
 8005d26:	4ab1      	ldr	r2, [pc, #708]	; (8005fec <mbedtls_strerror+0x330>)
 8005d28:	f009 fa6e 	bl	800f208 <sniprintf>

        buf += len + 3;
 8005d2c:	3703      	adds	r7, #3
 8005d2e:	443c      	add	r4, r7
        buflen -= len + 3;
 8005d30:	3d03      	subs	r5, #3

    // Low level error codes
    //
    // BEGIN generated code
#if defined(MBEDTLS_AES_C)
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )
 8005d32:	2e20      	cmp	r6, #32
 8005d34:	f040 84fc 	bne.w	8006730 <mbedtls_strerror+0xa74>
        mbedtls_snprintf( buf, buflen, "AES - Invalid key length" );
 8005d38:	4aad      	ldr	r2, [pc, #692]	; (8005ff0 <mbedtls_strerror+0x334>)
        mbedtls_snprintf( buf, buflen, "SHA1 - SHA-1 hardware accelerator failed" );
#endif /* MBEDTLS_SHA1_C */

#if defined(MBEDTLS_SHA256_C)
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f009 fa63 	bl	800f208 <sniprintf>
    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )
        mbedtls_snprintf( buf, buflen, "XTEA - XTEA hardware accelerator failed" );
#endif /* MBEDTLS_XTEA_C */
    // END generated code

    if( strlen( buf ) != 0 )
 8005d42:	7823      	ldrb	r3, [r4, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f040 85e2 	bne.w	800690e <mbedtls_strerror+0xc52>
        return;

    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4aa5      	ldr	r2, [pc, #660]	; (8005fe8 <mbedtls_strerror+0x32c>)
}
 8005d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_snprintf( buf, buflen, "UNKNOWN ERROR CODE (%04X)", use_ret );
 8005d56:	f009 ba57 	b.w	800f208 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )
 8005d5a:	f5b6 4fc2 	cmp.w	r6, #24832	; 0x6100
 8005d5e:	d105      	bne.n	8005d6c <mbedtls_strerror+0xb0>
            mbedtls_snprintf( buf, buflen, "CIPHER - Bad input parameters" );
 8005d60:	4aa4      	ldr	r2, [pc, #656]	; (8005ff4 <mbedtls_strerror+0x338>)
 8005d62:	4629      	mov	r1, r5
 8005d64:	4620      	mov	r0, r4
 8005d66:	f009 fa4f 	bl	800f208 <sniprintf>
 8005d6a:	e7c2      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )
 8005d6c:	f5b6 4fc3 	cmp.w	r6, #24960	; 0x6180
 8005d70:	d105      	bne.n	8005d7e <mbedtls_strerror+0xc2>
            mbedtls_snprintf( buf, buflen, "CIPHER - Failed to allocate memory" );
 8005d72:	4aa1      	ldr	r2, [pc, #644]	; (8005ff8 <mbedtls_strerror+0x33c>)
 8005d74:	4629      	mov	r1, r5
 8005d76:	4620      	mov	r0, r4
 8005d78:	f009 fa46 	bl	800f208 <sniprintf>
 8005d7c:	e7b9      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )
 8005d7e:	f5b6 4fc4 	cmp.w	r6, #25088	; 0x6200
 8005d82:	d105      	bne.n	8005d90 <mbedtls_strerror+0xd4>
            mbedtls_snprintf( buf, buflen, "CIPHER - Input data contains invalid padding and is rejected" );
 8005d84:	4a9d      	ldr	r2, [pc, #628]	; (8005ffc <mbedtls_strerror+0x340>)
 8005d86:	4629      	mov	r1, r5
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f009 fa3d 	bl	800f208 <sniprintf>
 8005d8e:	e7b0      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )
 8005d90:	f5b6 4fc5 	cmp.w	r6, #25216	; 0x6280
 8005d94:	d105      	bne.n	8005da2 <mbedtls_strerror+0xe6>
            mbedtls_snprintf( buf, buflen, "CIPHER - Decryption of block requires a full block" );
 8005d96:	4a9a      	ldr	r2, [pc, #616]	; (8006000 <mbedtls_strerror+0x344>)
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f009 fa34 	bl	800f208 <sniprintf>
 8005da0:	e7a7      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )
 8005da2:	f5b6 4fc6 	cmp.w	r6, #25344	; 0x6300
 8005da6:	d105      	bne.n	8005db4 <mbedtls_strerror+0xf8>
            mbedtls_snprintf( buf, buflen, "CIPHER - Authentication failed (for AEAD modes)" );
 8005da8:	4a96      	ldr	r2, [pc, #600]	; (8006004 <mbedtls_strerror+0x348>)
 8005daa:	4629      	mov	r1, r5
 8005dac:	4620      	mov	r0, r4
 8005dae:	f009 fa2b 	bl	800f208 <sniprintf>
 8005db2:	e79e      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )
 8005db4:	f5b6 4fc7 	cmp.w	r6, #25472	; 0x6380
 8005db8:	d105      	bne.n	8005dc6 <mbedtls_strerror+0x10a>
            mbedtls_snprintf( buf, buflen, "CIPHER - The context is invalid. For example, because it was freed" );
 8005dba:	4a93      	ldr	r2, [pc, #588]	; (8006008 <mbedtls_strerror+0x34c>)
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f009 fa22 	bl	800f208 <sniprintf>
 8005dc4:	e795      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )
 8005dc6:	f5b6 4fc8 	cmp.w	r6, #25600	; 0x6400
 8005dca:	d105      	bne.n	8005dd8 <mbedtls_strerror+0x11c>
            mbedtls_snprintf( buf, buflen, "CIPHER - Cipher hardware accelerator failed" );
 8005dcc:	4a8f      	ldr	r2, [pc, #572]	; (800600c <mbedtls_strerror+0x350>)
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f009 fa19 	bl	800f208 <sniprintf>
 8005dd6:	e78c      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )
 8005dd8:	f5b6 4fa1 	cmp.w	r6, #20608	; 0x5080
 8005ddc:	d105      	bne.n	8005dea <mbedtls_strerror+0x12e>
            mbedtls_snprintf( buf, buflen, "MD - The selected feature is not available" );
 8005dde:	4a8c      	ldr	r2, [pc, #560]	; (8006010 <mbedtls_strerror+0x354>)
 8005de0:	4629      	mov	r1, r5
 8005de2:	4620      	mov	r0, r4
 8005de4:	f009 fa10 	bl	800f208 <sniprintf>
 8005de8:	e783      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )
 8005dea:	f5b6 4fa2 	cmp.w	r6, #20736	; 0x5100
 8005dee:	d105      	bne.n	8005dfc <mbedtls_strerror+0x140>
            mbedtls_snprintf( buf, buflen, "MD - Bad input parameters to function" );
 8005df0:	4a88      	ldr	r2, [pc, #544]	; (8006014 <mbedtls_strerror+0x358>)
 8005df2:	4629      	mov	r1, r5
 8005df4:	4620      	mov	r0, r4
 8005df6:	f009 fa07 	bl	800f208 <sniprintf>
 8005dfa:	e77a      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )
 8005dfc:	f5b6 4fa3 	cmp.w	r6, #20864	; 0x5180
 8005e00:	d105      	bne.n	8005e0e <mbedtls_strerror+0x152>
            mbedtls_snprintf( buf, buflen, "MD - Failed to allocate memory" );
 8005e02:	4a85      	ldr	r2, [pc, #532]	; (8006018 <mbedtls_strerror+0x35c>)
 8005e04:	4629      	mov	r1, r5
 8005e06:	4620      	mov	r0, r4
 8005e08:	f009 f9fe 	bl	800f208 <sniprintf>
 8005e0c:	e771      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )
 8005e0e:	f5b6 4fa4 	cmp.w	r6, #20992	; 0x5200
 8005e12:	d105      	bne.n	8005e20 <mbedtls_strerror+0x164>
            mbedtls_snprintf( buf, buflen, "MD - Opening or reading of file failed" );
 8005e14:	4a81      	ldr	r2, [pc, #516]	; (800601c <mbedtls_strerror+0x360>)
 8005e16:	4629      	mov	r1, r5
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f009 f9f5 	bl	800f208 <sniprintf>
 8005e1e:	e768      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )
 8005e20:	f5b6 4fa5 	cmp.w	r6, #21120	; 0x5280
 8005e24:	d105      	bne.n	8005e32 <mbedtls_strerror+0x176>
            mbedtls_snprintf( buf, buflen, "MD - MD hardware accelerator failed" );
 8005e26:	4a7e      	ldr	r2, [pc, #504]	; (8006020 <mbedtls_strerror+0x364>)
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f009 f9ec 	bl	800f208 <sniprintf>
 8005e30:	e75f      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )
 8005e32:	f5b6 5f84 	cmp.w	r6, #4224	; 0x1080
 8005e36:	d105      	bne.n	8005e44 <mbedtls_strerror+0x188>
            mbedtls_snprintf( buf, buflen, "PEM - No PEM header or footer found" );
 8005e38:	4a7a      	ldr	r2, [pc, #488]	; (8006024 <mbedtls_strerror+0x368>)
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f009 f9e3 	bl	800f208 <sniprintf>
 8005e42:	e756      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )
 8005e44:	f5b6 5f88 	cmp.w	r6, #4352	; 0x1100
 8005e48:	d105      	bne.n	8005e56 <mbedtls_strerror+0x19a>
            mbedtls_snprintf( buf, buflen, "PEM - PEM string is not as expected" );
 8005e4a:	4a77      	ldr	r2, [pc, #476]	; (8006028 <mbedtls_strerror+0x36c>)
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f009 f9da 	bl	800f208 <sniprintf>
 8005e54:	e74d      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )
 8005e56:	f5b6 5f8c 	cmp.w	r6, #4480	; 0x1180
 8005e5a:	d105      	bne.n	8005e68 <mbedtls_strerror+0x1ac>
            mbedtls_snprintf( buf, buflen, "PEM - Failed to allocate memory" );
 8005e5c:	4a73      	ldr	r2, [pc, #460]	; (800602c <mbedtls_strerror+0x370>)
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4620      	mov	r0, r4
 8005e62:	f009 f9d1 	bl	800f208 <sniprintf>
 8005e66:	e744      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )
 8005e68:	f5b6 5f90 	cmp.w	r6, #4608	; 0x1200
 8005e6c:	d105      	bne.n	8005e7a <mbedtls_strerror+0x1be>
            mbedtls_snprintf( buf, buflen, "PEM - RSA IV is not in hex-format" );
 8005e6e:	4a70      	ldr	r2, [pc, #448]	; (8006030 <mbedtls_strerror+0x374>)
 8005e70:	4629      	mov	r1, r5
 8005e72:	4620      	mov	r0, r4
 8005e74:	f009 f9c8 	bl	800f208 <sniprintf>
 8005e78:	e73b      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )
 8005e7a:	f5b6 5f94 	cmp.w	r6, #4736	; 0x1280
 8005e7e:	d105      	bne.n	8005e8c <mbedtls_strerror+0x1d0>
            mbedtls_snprintf( buf, buflen, "PEM - Unsupported key encryption algorithm" );
 8005e80:	4a6c      	ldr	r2, [pc, #432]	; (8006034 <mbedtls_strerror+0x378>)
 8005e82:	4629      	mov	r1, r5
 8005e84:	4620      	mov	r0, r4
 8005e86:	f009 f9bf 	bl	800f208 <sniprintf>
 8005e8a:	e732      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )
 8005e8c:	f5b6 5f98 	cmp.w	r6, #4864	; 0x1300
 8005e90:	d105      	bne.n	8005e9e <mbedtls_strerror+0x1e2>
            mbedtls_snprintf( buf, buflen, "PEM - Private key password can't be empty" );
 8005e92:	4a69      	ldr	r2, [pc, #420]	; (8006038 <mbedtls_strerror+0x37c>)
 8005e94:	4629      	mov	r1, r5
 8005e96:	4620      	mov	r0, r4
 8005e98:	f009 f9b6 	bl	800f208 <sniprintf>
 8005e9c:	e729      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )
 8005e9e:	f5b6 5f9c 	cmp.w	r6, #4992	; 0x1380
 8005ea2:	d105      	bne.n	8005eb0 <mbedtls_strerror+0x1f4>
            mbedtls_snprintf( buf, buflen, "PEM - Given private key password does not allow for correct decryption" );
 8005ea4:	4a65      	ldr	r2, [pc, #404]	; (800603c <mbedtls_strerror+0x380>)
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f009 f9ad 	bl	800f208 <sniprintf>
 8005eae:	e720      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )
 8005eb0:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
 8005eb4:	d105      	bne.n	8005ec2 <mbedtls_strerror+0x206>
            mbedtls_snprintf( buf, buflen, "PEM - Unavailable feature, e.g. hashing/encryption combination" );
 8005eb6:	4a62      	ldr	r2, [pc, #392]	; (8006040 <mbedtls_strerror+0x384>)
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f009 f9a4 	bl	800f208 <sniprintf>
 8005ec0:	e717      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )
 8005ec2:	f5b6 5fa4 	cmp.w	r6, #5248	; 0x1480
 8005ec6:	d105      	bne.n	8005ed4 <mbedtls_strerror+0x218>
            mbedtls_snprintf( buf, buflen, "PEM - Bad input parameters to function" );
 8005ec8:	4a5e      	ldr	r2, [pc, #376]	; (8006044 <mbedtls_strerror+0x388>)
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f009 f99b 	bl	800f208 <sniprintf>
 8005ed2:	e70e      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )
 8005ed4:	f5b6 5f7e 	cmp.w	r6, #16256	; 0x3f80
 8005ed8:	d105      	bne.n	8005ee6 <mbedtls_strerror+0x22a>
            mbedtls_snprintf( buf, buflen, "PK - Memory allocation failed" );
 8005eda:	4a5b      	ldr	r2, [pc, #364]	; (8006048 <mbedtls_strerror+0x38c>)
 8005edc:	4629      	mov	r1, r5
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f009 f992 	bl	800f208 <sniprintf>
 8005ee4:	e705      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )
 8005ee6:	f5b6 5f7c 	cmp.w	r6, #16128	; 0x3f00
 8005eea:	d105      	bne.n	8005ef8 <mbedtls_strerror+0x23c>
            mbedtls_snprintf( buf, buflen, "PK - Type mismatch, eg attempt to encrypt with an ECDSA key" );
 8005eec:	4a57      	ldr	r2, [pc, #348]	; (800604c <mbedtls_strerror+0x390>)
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f009 f989 	bl	800f208 <sniprintf>
 8005ef6:	e6fc      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )
 8005ef8:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
 8005efc:	d105      	bne.n	8005f0a <mbedtls_strerror+0x24e>
            mbedtls_snprintf( buf, buflen, "PK - Bad input parameters to function" );
 8005efe:	4a54      	ldr	r2, [pc, #336]	; (8006050 <mbedtls_strerror+0x394>)
 8005f00:	4629      	mov	r1, r5
 8005f02:	4620      	mov	r0, r4
 8005f04:	f009 f980 	bl	800f208 <sniprintf>
 8005f08:	e6f3      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )
 8005f0a:	f5b6 5f78 	cmp.w	r6, #15872	; 0x3e00
 8005f0e:	d105      	bne.n	8005f1c <mbedtls_strerror+0x260>
            mbedtls_snprintf( buf, buflen, "PK - Read/write of file failed" );
 8005f10:	4a50      	ldr	r2, [pc, #320]	; (8006054 <mbedtls_strerror+0x398>)
 8005f12:	4629      	mov	r1, r5
 8005f14:	4620      	mov	r0, r4
 8005f16:	f009 f977 	bl	800f208 <sniprintf>
 8005f1a:	e6ea      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )
 8005f1c:	f5b6 5f76 	cmp.w	r6, #15744	; 0x3d80
 8005f20:	d105      	bne.n	8005f2e <mbedtls_strerror+0x272>
            mbedtls_snprintf( buf, buflen, "PK - Unsupported key version" );
 8005f22:	4a4d      	ldr	r2, [pc, #308]	; (8006058 <mbedtls_strerror+0x39c>)
 8005f24:	4629      	mov	r1, r5
 8005f26:	4620      	mov	r0, r4
 8005f28:	f009 f96e 	bl	800f208 <sniprintf>
 8005f2c:	e6e1      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )
 8005f2e:	f5b6 5f74 	cmp.w	r6, #15616	; 0x3d00
 8005f32:	d105      	bne.n	8005f40 <mbedtls_strerror+0x284>
            mbedtls_snprintf( buf, buflen, "PK - Invalid key tag or value" );
 8005f34:	4a49      	ldr	r2, [pc, #292]	; (800605c <mbedtls_strerror+0x3a0>)
 8005f36:	4629      	mov	r1, r5
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f009 f965 	bl	800f208 <sniprintf>
 8005f3e:	e6d8      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )
 8005f40:	f5b6 5f72 	cmp.w	r6, #15488	; 0x3c80
 8005f44:	d105      	bne.n	8005f52 <mbedtls_strerror+0x296>
            mbedtls_snprintf( buf, buflen, "PK - Key algorithm is unsupported (only RSA and EC are supported)" );
 8005f46:	4a46      	ldr	r2, [pc, #280]	; (8006060 <mbedtls_strerror+0x3a4>)
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f009 f95c 	bl	800f208 <sniprintf>
 8005f50:	e6cf      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )
 8005f52:	f5b6 5f70 	cmp.w	r6, #15360	; 0x3c00
 8005f56:	d105      	bne.n	8005f64 <mbedtls_strerror+0x2a8>
            mbedtls_snprintf( buf, buflen, "PK - Private key password can't be empty" );
 8005f58:	4a42      	ldr	r2, [pc, #264]	; (8006064 <mbedtls_strerror+0x3a8>)
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f009 f953 	bl	800f208 <sniprintf>
 8005f62:	e6c6      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )
 8005f64:	f5b6 5f6e 	cmp.w	r6, #15232	; 0x3b80
 8005f68:	d105      	bne.n	8005f76 <mbedtls_strerror+0x2ba>
            mbedtls_snprintf( buf, buflen, "PK - Given private key password does not allow for correct decryption" );
 8005f6a:	4a3f      	ldr	r2, [pc, #252]	; (8006068 <mbedtls_strerror+0x3ac>)
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f009 f94a 	bl	800f208 <sniprintf>
 8005f74:	e6bd      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )
 8005f76:	f5b6 5f6c 	cmp.w	r6, #15104	; 0x3b00
 8005f7a:	d105      	bne.n	8005f88 <mbedtls_strerror+0x2cc>
            mbedtls_snprintf( buf, buflen, "PK - The pubkey tag or value is invalid (only RSA and EC are supported)" );
 8005f7c:	4a3b      	ldr	r2, [pc, #236]	; (800606c <mbedtls_strerror+0x3b0>)
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f009 f941 	bl	800f208 <sniprintf>
 8005f86:	e6b4      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )
 8005f88:	f5b6 5f6a 	cmp.w	r6, #14976	; 0x3a80
 8005f8c:	d105      	bne.n	8005f9a <mbedtls_strerror+0x2de>
            mbedtls_snprintf( buf, buflen, "PK - The algorithm tag or value is invalid" );
 8005f8e:	4a38      	ldr	r2, [pc, #224]	; (8006070 <mbedtls_strerror+0x3b4>)
 8005f90:	4629      	mov	r1, r5
 8005f92:	4620      	mov	r0, r4
 8005f94:	f009 f938 	bl	800f208 <sniprintf>
 8005f98:	e6ab      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )
 8005f9a:	f5b6 5f68 	cmp.w	r6, #14848	; 0x3a00
 8005f9e:	d105      	bne.n	8005fac <mbedtls_strerror+0x2f0>
            mbedtls_snprintf( buf, buflen, "PK - Elliptic curve is unsupported (only NIST curves are supported)" );
 8005fa0:	4a34      	ldr	r2, [pc, #208]	; (8006074 <mbedtls_strerror+0x3b8>)
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f009 f92f 	bl	800f208 <sniprintf>
 8005faa:	e6a2      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )
 8005fac:	f5b6 5f66 	cmp.w	r6, #14720	; 0x3980
 8005fb0:	d105      	bne.n	8005fbe <mbedtls_strerror+0x302>
            mbedtls_snprintf( buf, buflen, "PK - Unavailable feature, e.g. RSA disabled for RSA key" );
 8005fb2:	4a31      	ldr	r2, [pc, #196]	; (8006078 <mbedtls_strerror+0x3bc>)
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f009 f926 	bl	800f208 <sniprintf>
 8005fbc:	e699      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )
 8005fbe:	f5b6 5f64 	cmp.w	r6, #14592	; 0x3900
 8005fc2:	d105      	bne.n	8005fd0 <mbedtls_strerror+0x314>
            mbedtls_snprintf( buf, buflen, "PK - The signature is valid but its length is less than expected" );
 8005fc4:	4a2d      	ldr	r2, [pc, #180]	; (800607c <mbedtls_strerror+0x3c0>)
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f009 f91d 	bl	800f208 <sniprintf>
 8005fce:	e690      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )
 8005fd0:	f5b6 5f62 	cmp.w	r6, #14464	; 0x3880
 8005fd4:	d156      	bne.n	8006084 <mbedtls_strerror+0x3c8>
            mbedtls_snprintf( buf, buflen, "PK - PK hardware accelerator failed" );
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <mbedtls_strerror+0x3c4>)
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f009 f914 	bl	800f208 <sniprintf>
 8005fe0:	e687      	b.n	8005cf2 <mbedtls_strerror+0x36>
 8005fe2:	bf00      	nop
 8005fe4:	08010d78 	.word	0x08010d78
 8005fe8:	080125fc 	.word	0x080125fc
 8005fec:	08015219 	.word	0x08015219
 8005ff0:	08012616 	.word	0x08012616
 8005ff4:	08010da7 	.word	0x08010da7
 8005ff8:	08010dc5 	.word	0x08010dc5
 8005ffc:	08010de8 	.word	0x08010de8
 8006000:	08010e25 	.word	0x08010e25
 8006004:	08010e58 	.word	0x08010e58
 8006008:	08010e88 	.word	0x08010e88
 800600c:	08010ecb 	.word	0x08010ecb
 8006010:	08010ef7 	.word	0x08010ef7
 8006014:	08010f22 	.word	0x08010f22
 8006018:	08010f48 	.word	0x08010f48
 800601c:	08010f67 	.word	0x08010f67
 8006020:	08010f8e 	.word	0x08010f8e
 8006024:	08010fb2 	.word	0x08010fb2
 8006028:	08010fd6 	.word	0x08010fd6
 800602c:	08010ffa 	.word	0x08010ffa
 8006030:	0801101a 	.word	0x0801101a
 8006034:	0801103c 	.word	0x0801103c
 8006038:	08011067 	.word	0x08011067
 800603c:	08011091 	.word	0x08011091
 8006040:	080110d8 	.word	0x080110d8
 8006044:	08011117 	.word	0x08011117
 8006048:	0801113e 	.word	0x0801113e
 800604c:	0801115c 	.word	0x0801115c
 8006050:	08011198 	.word	0x08011198
 8006054:	080111be 	.word	0x080111be
 8006058:	080111dd 	.word	0x080111dd
 800605c:	080111fa 	.word	0x080111fa
 8006060:	08011218 	.word	0x08011218
 8006064:	0801125a 	.word	0x0801125a
 8006068:	08011283 	.word	0x08011283
 800606c:	080112c9 	.word	0x080112c9
 8006070:	08011311 	.word	0x08011311
 8006074:	0801133c 	.word	0x0801133c
 8006078:	08011380 	.word	0x08011380
 800607c:	080113b8 	.word	0x080113b8
 8006080:	080113f9 	.word	0x080113f9
        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )
 8006084:	f5b6 4f81 	cmp.w	r6, #16512	; 0x4080
 8006088:	d105      	bne.n	8006096 <mbedtls_strerror+0x3da>
            mbedtls_snprintf( buf, buflen, "RSA - Bad input parameters to function" );
 800608a:	4abc      	ldr	r2, [pc, #752]	; (800637c <mbedtls_strerror+0x6c0>)
 800608c:	4629      	mov	r1, r5
 800608e:	4620      	mov	r0, r4
 8006090:	f009 f8ba 	bl	800f208 <sniprintf>
 8006094:	e62d      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )
 8006096:	f5b6 4f82 	cmp.w	r6, #16640	; 0x4100
 800609a:	d105      	bne.n	80060a8 <mbedtls_strerror+0x3ec>
            mbedtls_snprintf( buf, buflen, "RSA - Input data contains invalid padding and is rejected" );
 800609c:	4ab8      	ldr	r2, [pc, #736]	; (8006380 <mbedtls_strerror+0x6c4>)
 800609e:	4629      	mov	r1, r5
 80060a0:	4620      	mov	r0, r4
 80060a2:	f009 f8b1 	bl	800f208 <sniprintf>
 80060a6:	e624      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )
 80060a8:	f5b6 4f83 	cmp.w	r6, #16768	; 0x4180
 80060ac:	d105      	bne.n	80060ba <mbedtls_strerror+0x3fe>
            mbedtls_snprintf( buf, buflen, "RSA - Something failed during generation of a key" );
 80060ae:	4ab5      	ldr	r2, [pc, #724]	; (8006384 <mbedtls_strerror+0x6c8>)
 80060b0:	4629      	mov	r1, r5
 80060b2:	4620      	mov	r0, r4
 80060b4:	f009 f8a8 	bl	800f208 <sniprintf>
 80060b8:	e61b      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )
 80060ba:	f5b6 4f84 	cmp.w	r6, #16896	; 0x4200
 80060be:	d105      	bne.n	80060cc <mbedtls_strerror+0x410>
            mbedtls_snprintf( buf, buflen, "RSA - Key failed to pass the validity check of the library" );
 80060c0:	4ab1      	ldr	r2, [pc, #708]	; (8006388 <mbedtls_strerror+0x6cc>)
 80060c2:	4629      	mov	r1, r5
 80060c4:	4620      	mov	r0, r4
 80060c6:	f009 f89f 	bl	800f208 <sniprintf>
 80060ca:	e612      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )
 80060cc:	f5b6 4f85 	cmp.w	r6, #17024	; 0x4280
 80060d0:	d105      	bne.n	80060de <mbedtls_strerror+0x422>
            mbedtls_snprintf( buf, buflen, "RSA - The public key operation failed" );
 80060d2:	4aae      	ldr	r2, [pc, #696]	; (800638c <mbedtls_strerror+0x6d0>)
 80060d4:	4629      	mov	r1, r5
 80060d6:	4620      	mov	r0, r4
 80060d8:	f009 f896 	bl	800f208 <sniprintf>
 80060dc:	e609      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )
 80060de:	f5b6 4f86 	cmp.w	r6, #17152	; 0x4300
 80060e2:	d105      	bne.n	80060f0 <mbedtls_strerror+0x434>
            mbedtls_snprintf( buf, buflen, "RSA - The private key operation failed" );
 80060e4:	4aaa      	ldr	r2, [pc, #680]	; (8006390 <mbedtls_strerror+0x6d4>)
 80060e6:	4629      	mov	r1, r5
 80060e8:	4620      	mov	r0, r4
 80060ea:	f009 f88d 	bl	800f208 <sniprintf>
 80060ee:	e600      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )
 80060f0:	f5b6 4f87 	cmp.w	r6, #17280	; 0x4380
 80060f4:	d105      	bne.n	8006102 <mbedtls_strerror+0x446>
            mbedtls_snprintf( buf, buflen, "RSA - The PKCS#1 verification failed" );
 80060f6:	4aa7      	ldr	r2, [pc, #668]	; (8006394 <mbedtls_strerror+0x6d8>)
 80060f8:	4629      	mov	r1, r5
 80060fa:	4620      	mov	r0, r4
 80060fc:	f009 f884 	bl	800f208 <sniprintf>
 8006100:	e5f7      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )
 8006102:	f5b6 4f88 	cmp.w	r6, #17408	; 0x4400
 8006106:	d105      	bne.n	8006114 <mbedtls_strerror+0x458>
            mbedtls_snprintf( buf, buflen, "RSA - The output buffer for decryption is not large enough" );
 8006108:	4aa3      	ldr	r2, [pc, #652]	; (8006398 <mbedtls_strerror+0x6dc>)
 800610a:	4629      	mov	r1, r5
 800610c:	4620      	mov	r0, r4
 800610e:	f009 f87b 	bl	800f208 <sniprintf>
 8006112:	e5ee      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )
 8006114:	f5b6 4f89 	cmp.w	r6, #17536	; 0x4480
 8006118:	d105      	bne.n	8006126 <mbedtls_strerror+0x46a>
            mbedtls_snprintf( buf, buflen, "RSA - The random generator failed to generate non-zeros" );
 800611a:	4aa0      	ldr	r2, [pc, #640]	; (800639c <mbedtls_strerror+0x6e0>)
 800611c:	4629      	mov	r1, r5
 800611e:	4620      	mov	r0, r4
 8006120:	f009 f872 	bl	800f208 <sniprintf>
 8006124:	e5e5      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )
 8006126:	f5b6 4f8a 	cmp.w	r6, #17664	; 0x4500
 800612a:	d105      	bne.n	8006138 <mbedtls_strerror+0x47c>
            mbedtls_snprintf( buf, buflen, "RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality" );
 800612c:	4a9c      	ldr	r2, [pc, #624]	; (80063a0 <mbedtls_strerror+0x6e4>)
 800612e:	4629      	mov	r1, r5
 8006130:	4620      	mov	r0, r4
 8006132:	f009 f869 	bl	800f208 <sniprintf>
 8006136:	e5dc      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )
 8006138:	f5b6 4f8b 	cmp.w	r6, #17792	; 0x4580
 800613c:	d105      	bne.n	800614a <mbedtls_strerror+0x48e>
            mbedtls_snprintf( buf, buflen, "RSA - RSA hardware accelerator failed" );
 800613e:	4a99      	ldr	r2, [pc, #612]	; (80063a4 <mbedtls_strerror+0x6e8>)
 8006140:	4629      	mov	r1, r5
 8006142:	4620      	mov	r0, r4
 8006144:	f009 f860 	bl	800f208 <sniprintf>
 8006148:	e5d3      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )
 800614a:	f5b6 4fe1 	cmp.w	r6, #28800	; 0x7080
 800614e:	d105      	bne.n	800615c <mbedtls_strerror+0x4a0>
            mbedtls_snprintf( buf, buflen, "SSL - The requested feature is not available" );
 8006150:	4a95      	ldr	r2, [pc, #596]	; (80063a8 <mbedtls_strerror+0x6ec>)
 8006152:	4629      	mov	r1, r5
 8006154:	4620      	mov	r0, r4
 8006156:	f009 f857 	bl	800f208 <sniprintf>
 800615a:	e5ca      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )
 800615c:	f5b6 4fe2 	cmp.w	r6, #28928	; 0x7100
 8006160:	d105      	bne.n	800616e <mbedtls_strerror+0x4b2>
            mbedtls_snprintf( buf, buflen, "SSL - Bad input parameters to function" );
 8006162:	4a92      	ldr	r2, [pc, #584]	; (80063ac <mbedtls_strerror+0x6f0>)
 8006164:	4629      	mov	r1, r5
 8006166:	4620      	mov	r0, r4
 8006168:	f009 f84e 	bl	800f208 <sniprintf>
 800616c:	e5c1      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )
 800616e:	f5b6 4fe3 	cmp.w	r6, #29056	; 0x7180
 8006172:	d105      	bne.n	8006180 <mbedtls_strerror+0x4c4>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of the message MAC failed" );
 8006174:	4a8e      	ldr	r2, [pc, #568]	; (80063b0 <mbedtls_strerror+0x6f4>)
 8006176:	4629      	mov	r1, r5
 8006178:	4620      	mov	r0, r4
 800617a:	f009 f845 	bl	800f208 <sniprintf>
 800617e:	e5b8      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )
 8006180:	f5b6 4fe4 	cmp.w	r6, #29184	; 0x7200
 8006184:	d105      	bne.n	8006192 <mbedtls_strerror+0x4d6>
            mbedtls_snprintf( buf, buflen, "SSL - An invalid SSL record was received" );
 8006186:	4a8b      	ldr	r2, [pc, #556]	; (80063b4 <mbedtls_strerror+0x6f8>)
 8006188:	4629      	mov	r1, r5
 800618a:	4620      	mov	r0, r4
 800618c:	f009 f83c 	bl	800f208 <sniprintf>
 8006190:	e5af      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )
 8006192:	f5b6 4fe5 	cmp.w	r6, #29312	; 0x7280
 8006196:	d105      	bne.n	80061a4 <mbedtls_strerror+0x4e8>
            mbedtls_snprintf( buf, buflen, "SSL - The connection indicated an EOF" );
 8006198:	4a87      	ldr	r2, [pc, #540]	; (80063b8 <mbedtls_strerror+0x6fc>)
 800619a:	4629      	mov	r1, r5
 800619c:	4620      	mov	r0, r4
 800619e:	f009 f833 	bl	800f208 <sniprintf>
 80061a2:	e5a6      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )
 80061a4:	f5b6 4fe6 	cmp.w	r6, #29440	; 0x7300
 80061a8:	d105      	bne.n	80061b6 <mbedtls_strerror+0x4fa>
            mbedtls_snprintf( buf, buflen, "SSL - An unknown cipher was received" );
 80061aa:	4a84      	ldr	r2, [pc, #528]	; (80063bc <mbedtls_strerror+0x700>)
 80061ac:	4629      	mov	r1, r5
 80061ae:	4620      	mov	r0, r4
 80061b0:	f009 f82a 	bl	800f208 <sniprintf>
 80061b4:	e59d      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )
 80061b6:	f5b6 4fe7 	cmp.w	r6, #29568	; 0x7380
 80061ba:	d105      	bne.n	80061c8 <mbedtls_strerror+0x50c>
            mbedtls_snprintf( buf, buflen, "SSL - The server has no ciphersuites in common with the client" );
 80061bc:	4a80      	ldr	r2, [pc, #512]	; (80063c0 <mbedtls_strerror+0x704>)
 80061be:	4629      	mov	r1, r5
 80061c0:	4620      	mov	r0, r4
 80061c2:	f009 f821 	bl	800f208 <sniprintf>
 80061c6:	e594      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )
 80061c8:	f5b6 4fe8 	cmp.w	r6, #29696	; 0x7400
 80061cc:	d105      	bne.n	80061da <mbedtls_strerror+0x51e>
            mbedtls_snprintf( buf, buflen, "SSL - No RNG was provided to the SSL module" );
 80061ce:	4a7d      	ldr	r2, [pc, #500]	; (80063c4 <mbedtls_strerror+0x708>)
 80061d0:	4629      	mov	r1, r5
 80061d2:	4620      	mov	r0, r4
 80061d4:	f009 f818 	bl	800f208 <sniprintf>
 80061d8:	e58b      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )
 80061da:	f5b6 4fe9 	cmp.w	r6, #29824	; 0x7480
 80061de:	d105      	bne.n	80061ec <mbedtls_strerror+0x530>
            mbedtls_snprintf( buf, buflen, "SSL - No client certification received from the client, but required by the authentication mode" );
 80061e0:	4a79      	ldr	r2, [pc, #484]	; (80063c8 <mbedtls_strerror+0x70c>)
 80061e2:	4629      	mov	r1, r5
 80061e4:	4620      	mov	r0, r4
 80061e6:	f009 f80f 	bl	800f208 <sniprintf>
 80061ea:	e582      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )
 80061ec:	f5b6 4fea 	cmp.w	r6, #29952	; 0x7500
 80061f0:	d105      	bne.n	80061fe <mbedtls_strerror+0x542>
            mbedtls_snprintf( buf, buflen, "SSL - Our own certificate(s) is/are too large to send in an SSL message" );
 80061f2:	4a76      	ldr	r2, [pc, #472]	; (80063cc <mbedtls_strerror+0x710>)
 80061f4:	4629      	mov	r1, r5
 80061f6:	4620      	mov	r0, r4
 80061f8:	f009 f806 	bl	800f208 <sniprintf>
 80061fc:	e579      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )
 80061fe:	f5b6 4feb 	cmp.w	r6, #30080	; 0x7580
 8006202:	d105      	bne.n	8006210 <mbedtls_strerror+0x554>
            mbedtls_snprintf( buf, buflen, "SSL - The own certificate is not set, but needed by the server" );
 8006204:	4a72      	ldr	r2, [pc, #456]	; (80063d0 <mbedtls_strerror+0x714>)
 8006206:	4629      	mov	r1, r5
 8006208:	4620      	mov	r0, r4
 800620a:	f008 fffd 	bl	800f208 <sniprintf>
 800620e:	e570      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )
 8006210:	f5b6 4fec 	cmp.w	r6, #30208	; 0x7600
 8006214:	d105      	bne.n	8006222 <mbedtls_strerror+0x566>
            mbedtls_snprintf( buf, buflen, "SSL - The own private key or pre-shared key is not set, but needed" );
 8006216:	4a6f      	ldr	r2, [pc, #444]	; (80063d4 <mbedtls_strerror+0x718>)
 8006218:	4629      	mov	r1, r5
 800621a:	4620      	mov	r0, r4
 800621c:	f008 fff4 	bl	800f208 <sniprintf>
 8006220:	e567      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )
 8006222:	f5b6 4fed 	cmp.w	r6, #30336	; 0x7680
 8006226:	d105      	bne.n	8006234 <mbedtls_strerror+0x578>
            mbedtls_snprintf( buf, buflen, "SSL - No CA Chain is set, but required to operate" );
 8006228:	4a6b      	ldr	r2, [pc, #428]	; (80063d8 <mbedtls_strerror+0x71c>)
 800622a:	4629      	mov	r1, r5
 800622c:	4620      	mov	r0, r4
 800622e:	f008 ffeb 	bl	800f208 <sniprintf>
 8006232:	e55e      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )
 8006234:	f5b6 4fee 	cmp.w	r6, #30464	; 0x7700
 8006238:	d105      	bne.n	8006246 <mbedtls_strerror+0x58a>
            mbedtls_snprintf( buf, buflen, "SSL - An unexpected message was received from our peer" );
 800623a:	4a68      	ldr	r2, [pc, #416]	; (80063dc <mbedtls_strerror+0x720>)
 800623c:	4629      	mov	r1, r5
 800623e:	4620      	mov	r0, r4
 8006240:	f008 ffe2 	bl	800f208 <sniprintf>
 8006244:	e555      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )
 8006246:	f5b6 4fef 	cmp.w	r6, #30592	; 0x7780
 800624a:	d106      	bne.n	800625a <mbedtls_strerror+0x59e>
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 800624c:	4629      	mov	r1, r5
 800624e:	4620      	mov	r0, r4
 8006250:	4a63      	ldr	r2, [pc, #396]	; (80063e0 <mbedtls_strerror+0x724>)
}
 8006252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            mbedtls_snprintf( buf, buflen, "SSL - A fatal alert message was received from our peer" );
 8006256:	f008 bfd7 	b.w	800f208 <sniprintf>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )
 800625a:	f5b6 4ff0 	cmp.w	r6, #30720	; 0x7800
 800625e:	d105      	bne.n	800626c <mbedtls_strerror+0x5b0>
            mbedtls_snprintf( buf, buflen, "SSL - Verification of our peer failed" );
 8006260:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <mbedtls_strerror+0x728>)
 8006262:	4629      	mov	r1, r5
 8006264:	4620      	mov	r0, r4
 8006266:	f008 ffcf 	bl	800f208 <sniprintf>
 800626a:	e542      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )
 800626c:	f5b6 4ff1 	cmp.w	r6, #30848	; 0x7880
 8006270:	d105      	bne.n	800627e <mbedtls_strerror+0x5c2>
            mbedtls_snprintf( buf, buflen, "SSL - The peer notified us that the connection is going to be closed" );
 8006272:	4a5d      	ldr	r2, [pc, #372]	; (80063e8 <mbedtls_strerror+0x72c>)
 8006274:	4629      	mov	r1, r5
 8006276:	4620      	mov	r0, r4
 8006278:	f008 ffc6 	bl	800f208 <sniprintf>
 800627c:	e539      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )
 800627e:	f5b6 4ff2 	cmp.w	r6, #30976	; 0x7900
 8006282:	d105      	bne.n	8006290 <mbedtls_strerror+0x5d4>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientHello handshake message failed" );
 8006284:	4a59      	ldr	r2, [pc, #356]	; (80063ec <mbedtls_strerror+0x730>)
 8006286:	4629      	mov	r1, r5
 8006288:	4620      	mov	r0, r4
 800628a:	f008 ffbd 	bl	800f208 <sniprintf>
 800628e:	e530      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )
 8006290:	f5b6 4ff3 	cmp.w	r6, #31104	; 0x7980
 8006294:	d105      	bne.n	80062a2 <mbedtls_strerror+0x5e6>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHello handshake message failed" );
 8006296:	4a56      	ldr	r2, [pc, #344]	; (80063f0 <mbedtls_strerror+0x734>)
 8006298:	4629      	mov	r1, r5
 800629a:	4620      	mov	r0, r4
 800629c:	f008 ffb4 	bl	800f208 <sniprintf>
 80062a0:	e527      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )
 80062a2:	f5b6 4ff4 	cmp.w	r6, #31232	; 0x7a00
 80062a6:	d105      	bne.n	80062b4 <mbedtls_strerror+0x5f8>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Certificate handshake message failed" );
 80062a8:	4a52      	ldr	r2, [pc, #328]	; (80063f4 <mbedtls_strerror+0x738>)
 80062aa:	4629      	mov	r1, r5
 80062ac:	4620      	mov	r0, r4
 80062ae:	f008 ffab 	bl	800f208 <sniprintf>
 80062b2:	e51e      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )
 80062b4:	f5b6 4ff5 	cmp.w	r6, #31360	; 0x7a80
 80062b8:	d105      	bne.n	80062c6 <mbedtls_strerror+0x60a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateRequest handshake message failed" );
 80062ba:	4a4f      	ldr	r2, [pc, #316]	; (80063f8 <mbedtls_strerror+0x73c>)
 80062bc:	4629      	mov	r1, r5
 80062be:	4620      	mov	r0, r4
 80062c0:	f008 ffa2 	bl	800f208 <sniprintf>
 80062c4:	e515      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )
 80062c6:	f5b6 4ff6 	cmp.w	r6, #31488	; 0x7b00
 80062ca:	d105      	bne.n	80062d8 <mbedtls_strerror+0x61c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerKeyExchange handshake message failed" );
 80062cc:	4a4b      	ldr	r2, [pc, #300]	; (80063fc <mbedtls_strerror+0x740>)
 80062ce:	4629      	mov	r1, r5
 80062d0:	4620      	mov	r0, r4
 80062d2:	f008 ff99 	bl	800f208 <sniprintf>
 80062d6:	e50c      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )
 80062d8:	f5b6 4ff7 	cmp.w	r6, #31616	; 0x7b80
 80062dc:	d105      	bne.n	80062ea <mbedtls_strerror+0x62e>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ServerHelloDone handshake message failed" );
 80062de:	4a48      	ldr	r2, [pc, #288]	; (8006400 <mbedtls_strerror+0x744>)
 80062e0:	4629      	mov	r1, r5
 80062e2:	4620      	mov	r0, r4
 80062e4:	f008 ff90 	bl	800f208 <sniprintf>
 80062e8:	e503      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )
 80062ea:	f5b6 4ff8 	cmp.w	r6, #31744	; 0x7c00
 80062ee:	d105      	bne.n	80062fc <mbedtls_strerror+0x640>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed" );
 80062f0:	4a44      	ldr	r2, [pc, #272]	; (8006404 <mbedtls_strerror+0x748>)
 80062f2:	4629      	mov	r1, r5
 80062f4:	4620      	mov	r0, r4
 80062f6:	f008 ff87 	bl	800f208 <sniprintf>
 80062fa:	e4fa      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )
 80062fc:	f5b6 4ff9 	cmp.w	r6, #31872	; 0x7c80
 8006300:	d105      	bne.n	800630e <mbedtls_strerror+0x652>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public" );
 8006302:	4a41      	ldr	r2, [pc, #260]	; (8006408 <mbedtls_strerror+0x74c>)
 8006304:	4629      	mov	r1, r5
 8006306:	4620      	mov	r0, r4
 8006308:	f008 ff7e 	bl	800f208 <sniprintf>
 800630c:	e4f1      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )
 800630e:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
 8006312:	d105      	bne.n	8006320 <mbedtls_strerror+0x664>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret" );
 8006314:	4a3d      	ldr	r2, [pc, #244]	; (800640c <mbedtls_strerror+0x750>)
 8006316:	4629      	mov	r1, r5
 8006318:	4620      	mov	r0, r4
 800631a:	f008 ff75 	bl	800f208 <sniprintf>
 800631e:	e4e8      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )
 8006320:	f5b6 4ffb 	cmp.w	r6, #32128	; 0x7d80
 8006324:	d105      	bne.n	8006332 <mbedtls_strerror+0x676>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the CertificateVerify handshake message failed" );
 8006326:	4a3a      	ldr	r2, [pc, #232]	; (8006410 <mbedtls_strerror+0x754>)
 8006328:	4629      	mov	r1, r5
 800632a:	4620      	mov	r0, r4
 800632c:	f008 ff6c 	bl	800f208 <sniprintf>
 8006330:	e4df      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )
 8006332:	f5b6 4ffc 	cmp.w	r6, #32256	; 0x7e00
 8006336:	d105      	bne.n	8006344 <mbedtls_strerror+0x688>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the ChangeCipherSpec handshake message failed" );
 8006338:	4a36      	ldr	r2, [pc, #216]	; (8006414 <mbedtls_strerror+0x758>)
 800633a:	4629      	mov	r1, r5
 800633c:	4620      	mov	r0, r4
 800633e:	f008 ff63 	bl	800f208 <sniprintf>
 8006342:	e4d6      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )
 8006344:	f5b6 4ffd 	cmp.w	r6, #32384	; 0x7e80
 8006348:	d105      	bne.n	8006356 <mbedtls_strerror+0x69a>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the Finished handshake message failed" );
 800634a:	4a33      	ldr	r2, [pc, #204]	; (8006418 <mbedtls_strerror+0x75c>)
 800634c:	4629      	mov	r1, r5
 800634e:	4620      	mov	r0, r4
 8006350:	f008 ff5a 	bl	800f208 <sniprintf>
 8006354:	e4cd      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )
 8006356:	f5b6 4ffe 	cmp.w	r6, #32512	; 0x7f00
 800635a:	d105      	bne.n	8006368 <mbedtls_strerror+0x6ac>
            mbedtls_snprintf( buf, buflen, "SSL - Memory allocation failed" );
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <mbedtls_strerror+0x760>)
 800635e:	4629      	mov	r1, r5
 8006360:	4620      	mov	r0, r4
 8006362:	f008 ff51 	bl	800f208 <sniprintf>
 8006366:	e4c4      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )
 8006368:	f5b6 4fff 	cmp.w	r6, #32640	; 0x7f80
 800636c:	d15a      	bne.n	8006424 <mbedtls_strerror+0x768>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function returned with error" );
 800636e:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <mbedtls_strerror+0x764>)
 8006370:	4629      	mov	r1, r5
 8006372:	4620      	mov	r0, r4
 8006374:	f008 ff48 	bl	800f208 <sniprintf>
 8006378:	e4bb      	b.n	8005cf2 <mbedtls_strerror+0x36>
 800637a:	bf00      	nop
 800637c:	0801141d 	.word	0x0801141d
 8006380:	08011444 	.word	0x08011444
 8006384:	0801147e 	.word	0x0801147e
 8006388:	080114b0 	.word	0x080114b0
 800638c:	080114eb 	.word	0x080114eb
 8006390:	08011511 	.word	0x08011511
 8006394:	08011538 	.word	0x08011538
 8006398:	0801155d 	.word	0x0801155d
 800639c:	08011598 	.word	0x08011598
 80063a0:	080115d0 	.word	0x080115d0
 80063a4:	08011656 	.word	0x08011656
 80063a8:	0801167c 	.word	0x0801167c
 80063ac:	080116a9 	.word	0x080116a9
 80063b0:	080116d0 	.word	0x080116d0
 80063b4:	080116fd 	.word	0x080116fd
 80063b8:	08011726 	.word	0x08011726
 80063bc:	0801174c 	.word	0x0801174c
 80063c0:	08011771 	.word	0x08011771
 80063c4:	080117b0 	.word	0x080117b0
 80063c8:	080117dc 	.word	0x080117dc
 80063cc:	0801183c 	.word	0x0801183c
 80063d0:	08011884 	.word	0x08011884
 80063d4:	080118c3 	.word	0x080118c3
 80063d8:	08011906 	.word	0x08011906
 80063dc:	08011938 	.word	0x08011938
 80063e0:	0801196f 	.word	0x0801196f
 80063e4:	080119a6 	.word	0x080119a6
 80063e8:	080119cc 	.word	0x080119cc
 80063ec:	08011a11 	.word	0x08011a11
 80063f0:	08011a4e 	.word	0x08011a4e
 80063f4:	08011a8b 	.word	0x08011a8b
 80063f8:	08011ac8 	.word	0x08011ac8
 80063fc:	08011b0c 	.word	0x08011b0c
 8006400:	08011b4f 	.word	0x08011b4f
 8006404:	08011b90 	.word	0x08011b90
 8006408:	08011bd3 	.word	0x08011bd3
 800640c:	08011c30 	.word	0x08011c30
 8006410:	08011c92 	.word	0x08011c92
 8006414:	08011cd5 	.word	0x08011cd5
 8006418:	08011d17 	.word	0x08011d17
 800641c:	08011d51 	.word	0x08011d51
 8006420:	08011d70 	.word	0x08011d70
        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )
 8006424:	f5b6 4fdf 	cmp.w	r6, #28544	; 0x6f80
 8006428:	d105      	bne.n	8006436 <mbedtls_strerror+0x77a>
            mbedtls_snprintf( buf, buflen, "SSL - Hardware acceleration function skipped / left alone data" );
 800642a:	4acb      	ldr	r2, [pc, #812]	; (8006758 <mbedtls_strerror+0xa9c>)
 800642c:	4629      	mov	r1, r5
 800642e:	4620      	mov	r0, r4
 8006430:	f008 feea 	bl	800f208 <sniprintf>
 8006434:	e45d      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )
 8006436:	f5b6 4fde 	cmp.w	r6, #28416	; 0x6f00
 800643a:	d105      	bne.n	8006448 <mbedtls_strerror+0x78c>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the compression / decompression failed" );
 800643c:	4ac7      	ldr	r2, [pc, #796]	; (800675c <mbedtls_strerror+0xaa0>)
 800643e:	4629      	mov	r1, r5
 8006440:	4620      	mov	r0, r4
 8006442:	f008 fee1 	bl	800f208 <sniprintf>
 8006446:	e454      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )
 8006448:	f5b6 4fdd 	cmp.w	r6, #28288	; 0x6e80
 800644c:	d105      	bne.n	800645a <mbedtls_strerror+0x79e>
            mbedtls_snprintf( buf, buflen, "SSL - Handshake protocol not within min/max boundaries" );
 800644e:	4ac4      	ldr	r2, [pc, #784]	; (8006760 <mbedtls_strerror+0xaa4>)
 8006450:	4629      	mov	r1, r5
 8006452:	4620      	mov	r0, r4
 8006454:	f008 fed8 	bl	800f208 <sniprintf>
 8006458:	e44b      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )
 800645a:	f5b6 4fdc 	cmp.w	r6, #28160	; 0x6e00
 800645e:	d105      	bne.n	800646c <mbedtls_strerror+0x7b0>
            mbedtls_snprintf( buf, buflen, "SSL - Processing of the NewSessionTicket handshake message failed" );
 8006460:	4ac0      	ldr	r2, [pc, #768]	; (8006764 <mbedtls_strerror+0xaa8>)
 8006462:	4629      	mov	r1, r5
 8006464:	4620      	mov	r0, r4
 8006466:	f008 fecf 	bl	800f208 <sniprintf>
 800646a:	e442      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )
 800646c:	f5b6 4fdb 	cmp.w	r6, #28032	; 0x6d80
 8006470:	d105      	bne.n	800647e <mbedtls_strerror+0x7c2>
            mbedtls_snprintf( buf, buflen, "SSL - Session ticket has expired" );
 8006472:	4abd      	ldr	r2, [pc, #756]	; (8006768 <mbedtls_strerror+0xaac>)
 8006474:	4629      	mov	r1, r5
 8006476:	4620      	mov	r0, r4
 8006478:	f008 fec6 	bl	800f208 <sniprintf>
 800647c:	e439      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )
 800647e:	f5b6 4fda 	cmp.w	r6, #27904	; 0x6d00
 8006482:	d105      	bne.n	8006490 <mbedtls_strerror+0x7d4>
            mbedtls_snprintf( buf, buflen, "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)" );
 8006484:	4ab9      	ldr	r2, [pc, #740]	; (800676c <mbedtls_strerror+0xab0>)
 8006486:	4629      	mov	r1, r5
 8006488:	4620      	mov	r0, r4
 800648a:	f008 febd 	bl	800f208 <sniprintf>
 800648e:	e430      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )
 8006490:	f5b6 4fd9 	cmp.w	r6, #27776	; 0x6c80
 8006494:	d105      	bne.n	80064a2 <mbedtls_strerror+0x7e6>
            mbedtls_snprintf( buf, buflen, "SSL - Unknown identity received (eg, PSK identity)" );
 8006496:	4ab6      	ldr	r2, [pc, #728]	; (8006770 <mbedtls_strerror+0xab4>)
 8006498:	4629      	mov	r1, r5
 800649a:	4620      	mov	r0, r4
 800649c:	f008 feb4 	bl	800f208 <sniprintf>
 80064a0:	e427      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )
 80064a2:	f5b6 4fd8 	cmp.w	r6, #27648	; 0x6c00
 80064a6:	d105      	bne.n	80064b4 <mbedtls_strerror+0x7f8>
            mbedtls_snprintf( buf, buflen, "SSL - Internal error (eg, unexpected failure in lower-level module)" );
 80064a8:	4ab2      	ldr	r2, [pc, #712]	; (8006774 <mbedtls_strerror+0xab8>)
 80064aa:	4629      	mov	r1, r5
 80064ac:	4620      	mov	r0, r4
 80064ae:	f008 feab 	bl	800f208 <sniprintf>
 80064b2:	e41e      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )
 80064b4:	f5b6 4fd7 	cmp.w	r6, #27520	; 0x6b80
 80064b8:	d105      	bne.n	80064c6 <mbedtls_strerror+0x80a>
            mbedtls_snprintf( buf, buflen, "SSL - A counter would wrap (eg, too many messages exchanged)" );
 80064ba:	4aaf      	ldr	r2, [pc, #700]	; (8006778 <mbedtls_strerror+0xabc>)
 80064bc:	4629      	mov	r1, r5
 80064be:	4620      	mov	r0, r4
 80064c0:	f008 fea2 	bl	800f208 <sniprintf>
 80064c4:	e415      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )
 80064c6:	f5b6 4fd6 	cmp.w	r6, #27392	; 0x6b00
 80064ca:	d105      	bne.n	80064d8 <mbedtls_strerror+0x81c>
            mbedtls_snprintf( buf, buflen, "SSL - Unexpected message at ServerHello in renegotiation" );
 80064cc:	4aab      	ldr	r2, [pc, #684]	; (800677c <mbedtls_strerror+0xac0>)
 80064ce:	4629      	mov	r1, r5
 80064d0:	4620      	mov	r0, r4
 80064d2:	f008 fe99 	bl	800f208 <sniprintf>
 80064d6:	e40c      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )
 80064d8:	f5b6 4fd5 	cmp.w	r6, #27264	; 0x6a80
 80064dc:	d105      	bne.n	80064ea <mbedtls_strerror+0x82e>
            mbedtls_snprintf( buf, buflen, "SSL - DTLS client must retry for hello verification" );
 80064de:	4aa8      	ldr	r2, [pc, #672]	; (8006780 <mbedtls_strerror+0xac4>)
 80064e0:	4629      	mov	r1, r5
 80064e2:	4620      	mov	r0, r4
 80064e4:	f008 fe90 	bl	800f208 <sniprintf>
 80064e8:	e403      	b.n	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )
 80064ea:	f5b6 4fd4 	cmp.w	r6, #27136	; 0x6a00
 80064ee:	d106      	bne.n	80064fe <mbedtls_strerror+0x842>
            mbedtls_snprintf( buf, buflen, "SSL - A buffer is too small to receive or write a message" );
 80064f0:	4aa4      	ldr	r2, [pc, #656]	; (8006784 <mbedtls_strerror+0xac8>)
 80064f2:	4629      	mov	r1, r5
 80064f4:	4620      	mov	r0, r4
 80064f6:	f008 fe87 	bl	800f208 <sniprintf>
 80064fa:	f7ff bbfa 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )
 80064fe:	f5b6 4fd3 	cmp.w	r6, #27008	; 0x6980
 8006502:	d106      	bne.n	8006512 <mbedtls_strerror+0x856>
            mbedtls_snprintf( buf, buflen, "SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)" );
 8006504:	4aa0      	ldr	r2, [pc, #640]	; (8006788 <mbedtls_strerror+0xacc>)
 8006506:	4629      	mov	r1, r5
 8006508:	4620      	mov	r0, r4
 800650a:	f008 fe7d 	bl	800f208 <sniprintf>
 800650e:	f7ff bbf0 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )
 8006512:	f5b6 4fd2 	cmp.w	r6, #26880	; 0x6900
 8006516:	d106      	bne.n	8006526 <mbedtls_strerror+0x86a>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a read call" );
 8006518:	4a9c      	ldr	r2, [pc, #624]	; (800678c <mbedtls_strerror+0xad0>)
 800651a:	4629      	mov	r1, r5
 800651c:	4620      	mov	r0, r4
 800651e:	f008 fe73 	bl	800f208 <sniprintf>
 8006522:	f7ff bbe6 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )
 8006526:	f5b6 4fd1 	cmp.w	r6, #26752	; 0x6880
 800652a:	d106      	bne.n	800653a <mbedtls_strerror+0x87e>
            mbedtls_snprintf( buf, buflen, "SSL - Connection requires a write call" );
 800652c:	4a98      	ldr	r2, [pc, #608]	; (8006790 <mbedtls_strerror+0xad4>)
 800652e:	4629      	mov	r1, r5
 8006530:	4620      	mov	r0, r4
 8006532:	f008 fe69 	bl	800f208 <sniprintf>
 8006536:	f7ff bbdc 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )
 800653a:	f5b6 4fd0 	cmp.w	r6, #26624	; 0x6800
 800653e:	d106      	bne.n	800654e <mbedtls_strerror+0x892>
            mbedtls_snprintf( buf, buflen, "SSL - The operation timed out" );
 8006540:	4a94      	ldr	r2, [pc, #592]	; (8006794 <mbedtls_strerror+0xad8>)
 8006542:	4629      	mov	r1, r5
 8006544:	4620      	mov	r0, r4
 8006546:	f008 fe5f 	bl	800f208 <sniprintf>
 800654a:	f7ff bbd2 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )
 800654e:	f5b6 4fcf 	cmp.w	r6, #26496	; 0x6780
 8006552:	d106      	bne.n	8006562 <mbedtls_strerror+0x8a6>
            mbedtls_snprintf( buf, buflen, "SSL - The client initiated a reconnect from the same port" );
 8006554:	4a90      	ldr	r2, [pc, #576]	; (8006798 <mbedtls_strerror+0xadc>)
 8006556:	4629      	mov	r1, r5
 8006558:	4620      	mov	r0, r4
 800655a:	f008 fe55 	bl	800f208 <sniprintf>
 800655e:	f7ff bbc8 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )
 8006562:	f5b6 4fce 	cmp.w	r6, #26368	; 0x6700
 8006566:	d106      	bne.n	8006576 <mbedtls_strerror+0x8ba>
            mbedtls_snprintf( buf, buflen, "SSL - Record header looks valid but is not expected" );
 8006568:	4a8c      	ldr	r2, [pc, #560]	; (800679c <mbedtls_strerror+0xae0>)
 800656a:	4629      	mov	r1, r5
 800656c:	4620      	mov	r0, r4
 800656e:	f008 fe4b 	bl	800f208 <sniprintf>
 8006572:	f7ff bbbe 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )
 8006576:	f5b6 4fcd 	cmp.w	r6, #26240	; 0x6680
 800657a:	d106      	bne.n	800658a <mbedtls_strerror+0x8ce>
            mbedtls_snprintf( buf, buflen, "SSL - The alert message received indicates a non-fatal error" );
 800657c:	4a88      	ldr	r2, [pc, #544]	; (80067a0 <mbedtls_strerror+0xae4>)
 800657e:	4629      	mov	r1, r5
 8006580:	4620      	mov	r0, r4
 8006582:	f008 fe41 	bl	800f208 <sniprintf>
 8006586:	f7ff bbb4 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )
 800658a:	f5b6 4fcc 	cmp.w	r6, #26112	; 0x6600
 800658e:	d106      	bne.n	800659e <mbedtls_strerror+0x8e2>
            mbedtls_snprintf( buf, buflen, "SSL - Couldn't set the hash for verifying CertificateVerify" );
 8006590:	4a84      	ldr	r2, [pc, #528]	; (80067a4 <mbedtls_strerror+0xae8>)
 8006592:	4629      	mov	r1, r5
 8006594:	4620      	mov	r0, r4
 8006596:	f008 fe37 	bl	800f208 <sniprintf>
 800659a:	f7ff bbaa 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )
 800659e:	f5b6 5f02 	cmp.w	r6, #8320	; 0x2080
 80065a2:	d106      	bne.n	80065b2 <mbedtls_strerror+0x8f6>
            mbedtls_snprintf( buf, buflen, "X509 - Unavailable feature, e.g. RSA hashing/encryption combination" );
 80065a4:	4a80      	ldr	r2, [pc, #512]	; (80067a8 <mbedtls_strerror+0xaec>)
 80065a6:	4629      	mov	r1, r5
 80065a8:	4620      	mov	r0, r4
 80065aa:	f008 fe2d 	bl	800f208 <sniprintf>
 80065ae:	f7ff bba0 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )
 80065b2:	f5b6 5f04 	cmp.w	r6, #8448	; 0x2100
 80065b6:	d106      	bne.n	80065c6 <mbedtls_strerror+0x90a>
            mbedtls_snprintf( buf, buflen, "X509 - Requested OID is unknown" );
 80065b8:	4a7c      	ldr	r2, [pc, #496]	; (80067ac <mbedtls_strerror+0xaf0>)
 80065ba:	4629      	mov	r1, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	f008 fe23 	bl	800f208 <sniprintf>
 80065c2:	f7ff bb96 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )
 80065c6:	f5b6 5f06 	cmp.w	r6, #8576	; 0x2180
 80065ca:	d106      	bne.n	80065da <mbedtls_strerror+0x91e>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected" );
 80065cc:	4a78      	ldr	r2, [pc, #480]	; (80067b0 <mbedtls_strerror+0xaf4>)
 80065ce:	4629      	mov	r1, r5
 80065d0:	4620      	mov	r0, r4
 80065d2:	f008 fe19 	bl	800f208 <sniprintf>
 80065d6:	f7ff bb8c 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )
 80065da:	f5b6 5f08 	cmp.w	r6, #8704	; 0x2200
 80065de:	d106      	bne.n	80065ee <mbedtls_strerror+0x932>
            mbedtls_snprintf( buf, buflen, "X509 - The CRT/CRL/CSR version element is invalid" );
 80065e0:	4a74      	ldr	r2, [pc, #464]	; (80067b4 <mbedtls_strerror+0xaf8>)
 80065e2:	4629      	mov	r1, r5
 80065e4:	4620      	mov	r0, r4
 80065e6:	f008 fe0f 	bl	800f208 <sniprintf>
 80065ea:	f7ff bb82 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )
 80065ee:	f5b6 5f0a 	cmp.w	r6, #8832	; 0x2280
 80065f2:	d106      	bne.n	8006602 <mbedtls_strerror+0x946>
            mbedtls_snprintf( buf, buflen, "X509 - The serial tag or value is invalid" );
 80065f4:	4a70      	ldr	r2, [pc, #448]	; (80067b8 <mbedtls_strerror+0xafc>)
 80065f6:	4629      	mov	r1, r5
 80065f8:	4620      	mov	r0, r4
 80065fa:	f008 fe05 	bl	800f208 <sniprintf>
 80065fe:	f7ff bb78 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )
 8006602:	f5b6 5f0c 	cmp.w	r6, #8960	; 0x2300
 8006606:	d106      	bne.n	8006616 <mbedtls_strerror+0x95a>
            mbedtls_snprintf( buf, buflen, "X509 - The algorithm tag or value is invalid" );
 8006608:	4a6c      	ldr	r2, [pc, #432]	; (80067bc <mbedtls_strerror+0xb00>)
 800660a:	4629      	mov	r1, r5
 800660c:	4620      	mov	r0, r4
 800660e:	f008 fdfb 	bl	800f208 <sniprintf>
 8006612:	f7ff bb6e 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )
 8006616:	f5b6 5f0e 	cmp.w	r6, #9088	; 0x2380
 800661a:	d106      	bne.n	800662a <mbedtls_strerror+0x96e>
            mbedtls_snprintf( buf, buflen, "X509 - The name tag or value is invalid" );
 800661c:	4a68      	ldr	r2, [pc, #416]	; (80067c0 <mbedtls_strerror+0xb04>)
 800661e:	4629      	mov	r1, r5
 8006620:	4620      	mov	r0, r4
 8006622:	f008 fdf1 	bl	800f208 <sniprintf>
 8006626:	f7ff bb64 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )
 800662a:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
 800662e:	d106      	bne.n	800663e <mbedtls_strerror+0x982>
            mbedtls_snprintf( buf, buflen, "X509 - The date tag or value is invalid" );
 8006630:	4a64      	ldr	r2, [pc, #400]	; (80067c4 <mbedtls_strerror+0xb08>)
 8006632:	4629      	mov	r1, r5
 8006634:	4620      	mov	r0, r4
 8006636:	f008 fde7 	bl	800f208 <sniprintf>
 800663a:	f7ff bb5a 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )
 800663e:	f5b6 5f12 	cmp.w	r6, #9344	; 0x2480
 8006642:	d106      	bne.n	8006652 <mbedtls_strerror+0x996>
            mbedtls_snprintf( buf, buflen, "X509 - The signature tag or value invalid" );
 8006644:	4a60      	ldr	r2, [pc, #384]	; (80067c8 <mbedtls_strerror+0xb0c>)
 8006646:	4629      	mov	r1, r5
 8006648:	4620      	mov	r0, r4
 800664a:	f008 fddd 	bl	800f208 <sniprintf>
 800664e:	f7ff bb50 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )
 8006652:	f5b6 5f14 	cmp.w	r6, #9472	; 0x2500
 8006656:	d106      	bne.n	8006666 <mbedtls_strerror+0x9aa>
            mbedtls_snprintf( buf, buflen, "X509 - The extension tag or value is invalid" );
 8006658:	4a5c      	ldr	r2, [pc, #368]	; (80067cc <mbedtls_strerror+0xb10>)
 800665a:	4629      	mov	r1, r5
 800665c:	4620      	mov	r0, r4
 800665e:	f008 fdd3 	bl	800f208 <sniprintf>
 8006662:	f7ff bb46 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )
 8006666:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 800666a:	d106      	bne.n	800667a <mbedtls_strerror+0x9be>
            mbedtls_snprintf( buf, buflen, "X509 - CRT/CRL/CSR has an unsupported version number" );
 800666c:	4a58      	ldr	r2, [pc, #352]	; (80067d0 <mbedtls_strerror+0xb14>)
 800666e:	4629      	mov	r1, r5
 8006670:	4620      	mov	r0, r4
 8006672:	f008 fdc9 	bl	800f208 <sniprintf>
 8006676:	f7ff bb3c 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )
 800667a:	f5b6 5f18 	cmp.w	r6, #9728	; 0x2600
 800667e:	d106      	bne.n	800668e <mbedtls_strerror+0x9d2>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithm (oid) is unsupported" );
 8006680:	4a54      	ldr	r2, [pc, #336]	; (80067d4 <mbedtls_strerror+0xb18>)
 8006682:	4629      	mov	r1, r5
 8006684:	4620      	mov	r0, r4
 8006686:	f008 fdbf 	bl	800f208 <sniprintf>
 800668a:	f7ff bb32 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )
 800668e:	f5b6 5f1a 	cmp.w	r6, #9856	; 0x2680
 8006692:	d106      	bne.n	80066a2 <mbedtls_strerror+0x9e6>
            mbedtls_snprintf( buf, buflen, "X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)" );
 8006694:	4a50      	ldr	r2, [pc, #320]	; (80067d8 <mbedtls_strerror+0xb1c>)
 8006696:	4629      	mov	r1, r5
 8006698:	4620      	mov	r0, r4
 800669a:	f008 fdb5 	bl	800f208 <sniprintf>
 800669e:	f7ff bb28 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )
 80066a2:	f5b6 5f1c 	cmp.w	r6, #9984	; 0x2700
 80066a6:	d106      	bne.n	80066b6 <mbedtls_strerror+0x9fa>
            mbedtls_snprintf( buf, buflen, "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed" );
 80066a8:	4a4c      	ldr	r2, [pc, #304]	; (80067dc <mbedtls_strerror+0xb20>)
 80066aa:	4629      	mov	r1, r5
 80066ac:	4620      	mov	r0, r4
 80066ae:	f008 fdab 	bl	800f208 <sniprintf>
 80066b2:	f7ff bb1e 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )
 80066b6:	f5b6 5f1e 	cmp.w	r6, #10112	; 0x2780
 80066ba:	d106      	bne.n	80066ca <mbedtls_strerror+0xa0e>
            mbedtls_snprintf( buf, buflen, "X509 - Format not recognized as DER or PEM" );
 80066bc:	4a48      	ldr	r2, [pc, #288]	; (80067e0 <mbedtls_strerror+0xb24>)
 80066be:	4629      	mov	r1, r5
 80066c0:	4620      	mov	r0, r4
 80066c2:	f008 fda1 	bl	800f208 <sniprintf>
 80066c6:	f7ff bb14 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )
 80066ca:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 80066ce:	d106      	bne.n	80066de <mbedtls_strerror+0xa22>
            mbedtls_snprintf( buf, buflen, "X509 - Input invalid" );
 80066d0:	4a44      	ldr	r2, [pc, #272]	; (80067e4 <mbedtls_strerror+0xb28>)
 80066d2:	4629      	mov	r1, r5
 80066d4:	4620      	mov	r0, r4
 80066d6:	f008 fd97 	bl	800f208 <sniprintf>
 80066da:	f7ff bb0a 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )
 80066de:	f5b6 5f22 	cmp.w	r6, #10368	; 0x2880
 80066e2:	d106      	bne.n	80066f2 <mbedtls_strerror+0xa36>
            mbedtls_snprintf( buf, buflen, "X509 - Allocation of memory failed" );
 80066e4:	4a40      	ldr	r2, [pc, #256]	; (80067e8 <mbedtls_strerror+0xb2c>)
 80066e6:	4629      	mov	r1, r5
 80066e8:	4620      	mov	r0, r4
 80066ea:	f008 fd8d 	bl	800f208 <sniprintf>
 80066ee:	f7ff bb00 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )
 80066f2:	f5b6 5f24 	cmp.w	r6, #10496	; 0x2900
 80066f6:	d106      	bne.n	8006706 <mbedtls_strerror+0xa4a>
            mbedtls_snprintf( buf, buflen, "X509 - Read/write of file failed" );
 80066f8:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <mbedtls_strerror+0xb30>)
 80066fa:	4629      	mov	r1, r5
 80066fc:	4620      	mov	r0, r4
 80066fe:	f008 fd83 	bl	800f208 <sniprintf>
 8006702:	f7ff baf6 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )
 8006706:	f5b6 5f26 	cmp.w	r6, #10624	; 0x2980
 800670a:	d106      	bne.n	800671a <mbedtls_strerror+0xa5e>
            mbedtls_snprintf( buf, buflen, "X509 - Destination buffer is too small" );
 800670c:	4a38      	ldr	r2, [pc, #224]	; (80067f0 <mbedtls_strerror+0xb34>)
 800670e:	4629      	mov	r1, r5
 8006710:	4620      	mov	r0, r4
 8006712:	f008 fd79 	bl	800f208 <sniprintf>
 8006716:	f7ff baec 	b.w	8005cf2 <mbedtls_strerror+0x36>
        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )
 800671a:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 800671e:	f47f aae8 	bne.w	8005cf2 <mbedtls_strerror+0x36>
            mbedtls_snprintf( buf, buflen, "X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed" );
 8006722:	4a34      	ldr	r2, [pc, #208]	; (80067f4 <mbedtls_strerror+0xb38>)
 8006724:	4629      	mov	r1, r5
 8006726:	4620      	mov	r0, r4
 8006728:	f008 fd6e 	bl	800f208 <sniprintf>
 800672c:	f7ff bae1 	b.w	8005cf2 <mbedtls_strerror+0x36>
    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )
 8006730:	2e22      	cmp	r6, #34	; 0x22
 8006732:	d102      	bne.n	800673a <mbedtls_strerror+0xa7e>
        mbedtls_snprintf( buf, buflen, "AES - Invalid data input length" );
 8006734:	4a30      	ldr	r2, [pc, #192]	; (80067f8 <mbedtls_strerror+0xb3c>)
 8006736:	f7ff bb00 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )
 800673a:	2e23      	cmp	r6, #35	; 0x23
 800673c:	d102      	bne.n	8006744 <mbedtls_strerror+0xa88>
        mbedtls_snprintf( buf, buflen, "AES - Feature not available. For example, an unsupported AES key size" );
 800673e:	4a2f      	ldr	r2, [pc, #188]	; (80067fc <mbedtls_strerror+0xb40>)
 8006740:	f7ff bafb 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )
 8006744:	2e25      	cmp	r6, #37	; 0x25
 8006746:	d102      	bne.n	800674e <mbedtls_strerror+0xa92>
        mbedtls_snprintf( buf, buflen, "AES - AES hardware accelerator failed" );
 8006748:	4a2d      	ldr	r2, [pc, #180]	; (8006800 <mbedtls_strerror+0xb44>)
 800674a:	f7ff baf6 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )
 800674e:	2e60      	cmp	r6, #96	; 0x60
 8006750:	d15a      	bne.n	8006808 <mbedtls_strerror+0xb4c>
        mbedtls_snprintf( buf, buflen, "ASN1 - Out of data when parsing an ASN1 data structure" );
 8006752:	4a2c      	ldr	r2, [pc, #176]	; (8006804 <mbedtls_strerror+0xb48>)
 8006754:	f7ff baf1 	b.w	8005d3a <mbedtls_strerror+0x7e>
 8006758:	08011da9 	.word	0x08011da9
 800675c:	08011de8 	.word	0x08011de8
 8006760:	08011e23 	.word	0x08011e23
 8006764:	08011e5a 	.word	0x08011e5a
 8006768:	08011e9c 	.word	0x08011e9c
 800676c:	08011ebd 	.word	0x08011ebd
 8006770:	08011f12 	.word	0x08011f12
 8006774:	08011f45 	.word	0x08011f45
 8006778:	08011f89 	.word	0x08011f89
 800677c:	08011fc6 	.word	0x08011fc6
 8006780:	08011fff 	.word	0x08011fff
 8006784:	08012033 	.word	0x08012033
 8006788:	0801206d 	.word	0x0801206d
 800678c:	080120cf 	.word	0x080120cf
 8006790:	080120f5 	.word	0x080120f5
 8006794:	0801211c 	.word	0x0801211c
 8006798:	0801213a 	.word	0x0801213a
 800679c:	08012174 	.word	0x08012174
 80067a0:	080121a8 	.word	0x080121a8
 80067a4:	080121e5 	.word	0x080121e5
 80067a8:	08012221 	.word	0x08012221
 80067ac:	08012265 	.word	0x08012265
 80067b0:	08012285 	.word	0x08012285
 80067b4:	080122cc 	.word	0x080122cc
 80067b8:	080122fe 	.word	0x080122fe
 80067bc:	08012328 	.word	0x08012328
 80067c0:	08012355 	.word	0x08012355
 80067c4:	0801237d 	.word	0x0801237d
 80067c8:	080123a5 	.word	0x080123a5
 80067cc:	080123cf 	.word	0x080123cf
 80067d0:	080123fc 	.word	0x080123fc
 80067d4:	08012431 	.word	0x08012431
 80067d8:	08012461 	.word	0x08012461
 80067dc:	080124af 	.word	0x080124af
 80067e0:	080124fe 	.word	0x080124fe
 80067e4:	08012529 	.word	0x08012529
 80067e8:	0801253e 	.word	0x0801253e
 80067ec:	08012561 	.word	0x08012561
 80067f0:	08012582 	.word	0x08012582
 80067f4:	080125a9 	.word	0x080125a9
 80067f8:	0801262f 	.word	0x0801262f
 80067fc:	0801264f 	.word	0x0801264f
 8006800:	08012695 	.word	0x08012695
 8006804:	080126bb 	.word	0x080126bb
    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )
 8006808:	2e62      	cmp	r6, #98	; 0x62
 800680a:	d102      	bne.n	8006812 <mbedtls_strerror+0xb56>
        mbedtls_snprintf( buf, buflen, "ASN1 - ASN1 tag was of an unexpected value" );
 800680c:	4a41      	ldr	r2, [pc, #260]	; (8006914 <mbedtls_strerror+0xc58>)
 800680e:	f7ff ba94 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )
 8006812:	2e64      	cmp	r6, #100	; 0x64
 8006814:	d102      	bne.n	800681c <mbedtls_strerror+0xb60>
        mbedtls_snprintf( buf, buflen, "ASN1 - Error when trying to determine the length or invalid length" );
 8006816:	4a40      	ldr	r2, [pc, #256]	; (8006918 <mbedtls_strerror+0xc5c>)
 8006818:	f7ff ba8f 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )
 800681c:	2e66      	cmp	r6, #102	; 0x66
 800681e:	d102      	bne.n	8006826 <mbedtls_strerror+0xb6a>
        mbedtls_snprintf( buf, buflen, "ASN1 - Actual length differs from expected length" );
 8006820:	4a3e      	ldr	r2, [pc, #248]	; (800691c <mbedtls_strerror+0xc60>)
 8006822:	f7ff ba8a 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )
 8006826:	2e68      	cmp	r6, #104	; 0x68
 8006828:	d102      	bne.n	8006830 <mbedtls_strerror+0xb74>
        mbedtls_snprintf( buf, buflen, "ASN1 - Data is invalid. (not used)" );
 800682a:	4a3d      	ldr	r2, [pc, #244]	; (8006920 <mbedtls_strerror+0xc64>)
 800682c:	f7ff ba85 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )
 8006830:	2e6a      	cmp	r6, #106	; 0x6a
 8006832:	d102      	bne.n	800683a <mbedtls_strerror+0xb7e>
        mbedtls_snprintf( buf, buflen, "ASN1 - Memory allocation failed" );
 8006834:	4a3b      	ldr	r2, [pc, #236]	; (8006924 <mbedtls_strerror+0xc68>)
 8006836:	f7ff ba80 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )
 800683a:	2e6c      	cmp	r6, #108	; 0x6c
 800683c:	d102      	bne.n	8006844 <mbedtls_strerror+0xb88>
        mbedtls_snprintf( buf, buflen, "ASN1 - Buffer too small when writing ASN.1 data structure" );
 800683e:	4a3a      	ldr	r2, [pc, #232]	; (8006928 <mbedtls_strerror+0xc6c>)
 8006840:	f7ff ba7b 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )
 8006844:	2e2a      	cmp	r6, #42	; 0x2a
 8006846:	d102      	bne.n	800684e <mbedtls_strerror+0xb92>
        mbedtls_snprintf( buf, buflen, "BASE64 - Output buffer too small" );
 8006848:	4a38      	ldr	r2, [pc, #224]	; (800692c <mbedtls_strerror+0xc70>)
 800684a:	f7ff ba76 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )
 800684e:	2e2c      	cmp	r6, #44	; 0x2c
 8006850:	d102      	bne.n	8006858 <mbedtls_strerror+0xb9c>
        mbedtls_snprintf( buf, buflen, "BASE64 - Invalid character in input" );
 8006852:	4a37      	ldr	r2, [pc, #220]	; (8006930 <mbedtls_strerror+0xc74>)
 8006854:	f7ff ba71 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )
 8006858:	2e02      	cmp	r6, #2
 800685a:	d102      	bne.n	8006862 <mbedtls_strerror+0xba6>
        mbedtls_snprintf( buf, buflen, "BIGNUM - An error occurred while reading from or writing to a file" );
 800685c:	4a35      	ldr	r2, [pc, #212]	; (8006934 <mbedtls_strerror+0xc78>)
 800685e:	f7ff ba6c 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )
 8006862:	2e04      	cmp	r6, #4
 8006864:	d102      	bne.n	800686c <mbedtls_strerror+0xbb0>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Bad input parameters to function" );
 8006866:	4a34      	ldr	r2, [pc, #208]	; (8006938 <mbedtls_strerror+0xc7c>)
 8006868:	f7ff ba67 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )
 800686c:	2e06      	cmp	r6, #6
 800686e:	d102      	bne.n	8006876 <mbedtls_strerror+0xbba>
        mbedtls_snprintf( buf, buflen, "BIGNUM - There is an invalid character in the digit string" );
 8006870:	4a32      	ldr	r2, [pc, #200]	; (800693c <mbedtls_strerror+0xc80>)
 8006872:	f7ff ba62 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )
 8006876:	2e08      	cmp	r6, #8
 8006878:	d102      	bne.n	8006880 <mbedtls_strerror+0xbc4>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The buffer is too small to write to" );
 800687a:	4a31      	ldr	r2, [pc, #196]	; (8006940 <mbedtls_strerror+0xc84>)
 800687c:	f7ff ba5d 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )
 8006880:	2e0a      	cmp	r6, #10
 8006882:	d102      	bne.n	800688a <mbedtls_strerror+0xbce>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are negative or result in illegal output" );
 8006884:	4a2f      	ldr	r2, [pc, #188]	; (8006944 <mbedtls_strerror+0xc88>)
 8006886:	f7ff ba58 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )
 800688a:	2e0c      	cmp	r6, #12
 800688c:	d102      	bne.n	8006894 <mbedtls_strerror+0xbd8>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input argument for division is zero, which is not allowed" );
 800688e:	4a2e      	ldr	r2, [pc, #184]	; (8006948 <mbedtls_strerror+0xc8c>)
 8006890:	f7ff ba53 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )
 8006894:	2e0e      	cmp	r6, #14
 8006896:	d102      	bne.n	800689e <mbedtls_strerror+0xbe2>
        mbedtls_snprintf( buf, buflen, "BIGNUM - The input arguments are not acceptable" );
 8006898:	4a2c      	ldr	r2, [pc, #176]	; (800694c <mbedtls_strerror+0xc90>)
 800689a:	f7ff ba4e 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )
 800689e:	2e10      	cmp	r6, #16
 80068a0:	d102      	bne.n	80068a8 <mbedtls_strerror+0xbec>
        mbedtls_snprintf( buf, buflen, "BIGNUM - Memory allocation failed" );
 80068a2:	4a2b      	ldr	r2, [pc, #172]	; (8006950 <mbedtls_strerror+0xc94>)
 80068a4:	f7ff ba49 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )
 80068a8:	2e34      	cmp	r6, #52	; 0x34
 80068aa:	d102      	bne.n	80068b2 <mbedtls_strerror+0xbf6>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The entropy source failed" );
 80068ac:	4a29      	ldr	r2, [pc, #164]	; (8006954 <mbedtls_strerror+0xc98>)
 80068ae:	f7ff ba44 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )
 80068b2:	2e36      	cmp	r6, #54	; 0x36
 80068b4:	d102      	bne.n	80068bc <mbedtls_strerror+0xc00>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The requested random buffer length is too big" );
 80068b6:	4a28      	ldr	r2, [pc, #160]	; (8006958 <mbedtls_strerror+0xc9c>)
 80068b8:	f7ff ba3f 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )
 80068bc:	2e38      	cmp	r6, #56	; 0x38
 80068be:	d102      	bne.n	80068c6 <mbedtls_strerror+0xc0a>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - The input (entropy + additional data) is too large" );
 80068c0:	4a26      	ldr	r2, [pc, #152]	; (800695c <mbedtls_strerror+0xca0>)
 80068c2:	f7ff ba3a 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )
 80068c6:	2e3a      	cmp	r6, #58	; 0x3a
 80068c8:	d102      	bne.n	80068d0 <mbedtls_strerror+0xc14>
        mbedtls_snprintf( buf, buflen, "CTR_DRBG - Read or write error in file" );
 80068ca:	4a25      	ldr	r2, [pc, #148]	; (8006960 <mbedtls_strerror+0xca4>)
 80068cc:	f7ff ba35 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )
 80068d0:	2e12      	cmp	r6, #18
 80068d2:	d102      	bne.n	80068da <mbedtls_strerror+0xc1e>
        mbedtls_snprintf( buf, buflen, "GCM - Authenticated decryption failed" );
 80068d4:	4a23      	ldr	r2, [pc, #140]	; (8006964 <mbedtls_strerror+0xca8>)
 80068d6:	f7ff ba30 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )
 80068da:	2e13      	cmp	r6, #19
 80068dc:	d102      	bne.n	80068e4 <mbedtls_strerror+0xc28>
        mbedtls_snprintf( buf, buflen, "GCM - GCM hardware accelerator failed" );
 80068de:	4a22      	ldr	r2, [pc, #136]	; (8006968 <mbedtls_strerror+0xcac>)
 80068e0:	f7ff ba2b 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )
 80068e4:	2e14      	cmp	r6, #20
 80068e6:	d102      	bne.n	80068ee <mbedtls_strerror+0xc32>
        mbedtls_snprintf( buf, buflen, "GCM - Bad input parameters to function" );
 80068e8:	4a20      	ldr	r2, [pc, #128]	; (800696c <mbedtls_strerror+0xcb0>)
 80068ea:	f7ff ba26 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )
 80068ee:	2e2e      	cmp	r6, #46	; 0x2e
 80068f0:	d102      	bne.n	80068f8 <mbedtls_strerror+0xc3c>
        mbedtls_snprintf( buf, buflen, "OID - OID is not found" );
 80068f2:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <mbedtls_strerror+0xcb4>)
 80068f4:	f7ff ba21 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )
 80068f8:	2e0b      	cmp	r6, #11
 80068fa:	d102      	bne.n	8006902 <mbedtls_strerror+0xc46>
        mbedtls_snprintf( buf, buflen, "OID - output buffer is too small" );
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <mbedtls_strerror+0xcb8>)
 80068fe:	f7ff ba1c 	b.w	8005d3a <mbedtls_strerror+0x7e>
    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )
 8006902:	2e37      	cmp	r6, #55	; 0x37
 8006904:	f47f aa1d 	bne.w	8005d42 <mbedtls_strerror+0x86>
        mbedtls_snprintf( buf, buflen, "SHA256 - SHA-256 hardware accelerator failed" );
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <mbedtls_strerror+0xcbc>)
 800690a:	f7ff ba16 	b.w	8005d3a <mbedtls_strerror+0x7e>
 800690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006912:	bf00      	nop
 8006914:	080126f2 	.word	0x080126f2
 8006918:	0801271d 	.word	0x0801271d
 800691c:	08012760 	.word	0x08012760
 8006920:	08012792 	.word	0x08012792
 8006924:	080127b5 	.word	0x080127b5
 8006928:	080127d5 	.word	0x080127d5
 800692c:	0801280f 	.word	0x0801280f
 8006930:	08012830 	.word	0x08012830
 8006934:	08012854 	.word	0x08012854
 8006938:	08012897 	.word	0x08012897
 800693c:	080128c1 	.word	0x080128c1
 8006940:	080128fc 	.word	0x080128fc
 8006944:	08012929 	.word	0x08012929
 8006948:	0801296f 	.word	0x0801296f
 800694c:	080129b6 	.word	0x080129b6
 8006950:	080129e6 	.word	0x080129e6
 8006954:	08012a08 	.word	0x08012a08
 8006958:	08012a2d 	.word	0x08012a2d
 800695c:	08012a66 	.word	0x08012a66
 8006960:	08012aa4 	.word	0x08012aa4
 8006964:	08012acb 	.word	0x08012acb
 8006968:	08012af1 	.word	0x08012af1
 800696c:	08012b17 	.word	0x08012b17
 8006970:	08012b3e 	.word	0x08012b3e
 8006974:	08012b55 	.word	0x08012b55
 8006978:	08012b76 	.word	0x08012b76

0800697c <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 800697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8006980:	7bcb      	ldrb	r3, [r1, #15]
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8006982:	f8df c164 	ldr.w	ip, [pc, #356]	; 8006ae8 <gcm_mult+0x16c>
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
{
 800698e:	b093      	sub	sp, #76	; 0x4c
    zh = ctx->HH[lo];
 8006990:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 8006994:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006998:	f101 0310 	add.w	r3, r1, #16
 800699c:	9310      	str	r3, [sp, #64]	; 0x40
        lo = x[i] & 0xf;
 800699e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069a0:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 80069a4:	9310      	str	r3, [sp, #64]	; 0x40
 80069a6:	f00e 030f 	and.w	r3, lr, #15
 80069aa:	9311      	str	r3, [sp, #68]	; 0x44
        if( i != 15 )
 80069ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069ae:	eba3 0801 	sub.w	r8, r3, r1
 80069b2:	f1b8 0f0f 	cmp.w	r8, #15
        hi = x[i] >> 4;
 80069b6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
        if( i != 15 )
 80069ba:	d03a      	beq.n	8006a32 <gcm_mult+0xb6>
            zl = ( zh << 60 ) | ( zl >> 4 );
 80069bc:	0923      	lsrs	r3, r4, #4
 80069be:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	092b      	lsrs	r3, r5, #4
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	0733      	lsls	r3, r6, #28
 80069ca:	9309      	str	r3, [sp, #36]	; 0x24
 80069cc:	2300      	movs	r3, #0
 80069ce:	9308      	str	r3, [sp, #32]
 80069d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
            zh ^= (uint64_t) last4[rem] << 48;
 80069d2:	f004 040f 	and.w	r4, r4, #15
            zl = ( zh << 60 ) | ( zl >> 4 );
 80069d6:	e9dd ab00 	ldrd	sl, fp, [sp]
 80069da:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 80069de:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
            zh = ( zh >> 4 );
 80069e2:	0933      	lsrs	r3, r6, #4
 80069e4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            zh ^= (uint64_t) last4[rem] << 48;
 80069e8:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
            zh = ( zh >> 4 );
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	093b      	lsrs	r3, r7, #4
            zl = ( zh << 60 ) | ( zl >> 4 );
 80069f0:	ea48 080a 	orr.w	r8, r8, sl
 80069f4:	ea49 090b 	orr.w	r9, r9, fp
            zh = ( zh >> 4 );
 80069f8:	9305      	str	r3, [sp, #20]
            zh ^= (uint64_t) last4[rem] << 48;
 80069fa:	0423      	lsls	r3, r4, #16
 80069fc:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
            zl = ( zh << 60 ) | ( zl >> 4 );
 8006a00:	46c2      	mov	sl, r8
 8006a02:	46cb      	mov	fp, r9
            zh ^= (uint64_t) last4[rem] << 48;
 8006a04:	930d      	str	r3, [sp, #52]	; 0x34
 8006a06:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	930c      	str	r3, [sp, #48]	; 0x30
            zh ^= ctx->HH[lo];
 8006a0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a12:	ea89 0907 	eor.w	r9, r9, r7
 8006a16:	464f      	mov	r7, r9
 8006a18:	407c      	eors	r4, r7
 8006a1a:	ea88 0806 	eor.w	r8, r8, r6
 8006a1e:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 8006a20:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 8006a24:	4646      	mov	r6, r8
            zh ^= ctx->HH[lo];
 8006a26:	4073      	eors	r3, r6
 8006a28:	461e      	mov	r6, r3
            zl ^= ctx->HL[lo];
 8006a2a:	ea84 040a 	eor.w	r4, r4, sl
 8006a2e:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8006a32:	0923      	lsrs	r3, r4, #4
 8006a34:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006a38:	9302      	str	r3, [sp, #8]
 8006a3a:	092b      	lsrs	r3, r5, #4
 8006a3c:	9303      	str	r3, [sp, #12]
 8006a3e:	0733      	lsls	r3, r6, #28
 8006a40:	930b      	str	r3, [sp, #44]	; 0x2c
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8006a42:	f004 040f 	and.w	r4, r4, #15
        zl = ( zh << 60 ) | ( zl >> 4 );
 8006a46:	2300      	movs	r3, #0
 8006a48:	930a      	str	r3, [sp, #40]	; 0x28
        zh = ( zh >> 4 );
 8006a4a:	0933      	lsrs	r3, r6, #4
        zl = ( zh << 60 ) | ( zl >> 4 );
 8006a4c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
        zh = ( zh >> 4 );
 8006a50:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
        zl = ( zh << 60 ) | ( zl >> 4 );
 8006a54:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
        zh ^= (uint64_t) last4[rem] << 48;
 8006a58:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
        zh = ( zh >> 4 );
 8006a5c:	9306      	str	r3, [sp, #24]
 8006a5e:	093b      	lsrs	r3, r7, #4
 8006a60:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8006a64:	9307      	str	r3, [sp, #28]
        zh ^= (uint64_t) last4[rem] << 48;
 8006a66:	0423      	lsls	r3, r4, #16
 8006a68:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
        zl = ( zh << 60 ) | ( zl >> 4 );
 8006a6c:	ea48 080a 	orr.w	r8, r8, sl
 8006a70:	ea49 090b 	orr.w	r9, r9, fp
        zh ^= (uint64_t) last4[rem] << 48;
 8006a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a76:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	930e      	str	r3, [sp, #56]	; 0x38
        zh ^= ctx->HH[hi];
 8006a7e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8006a82:	ea8a 0a06 	eor.w	sl, sl, r6
 8006a86:	ea8b 0b07 	eor.w	fp, fp, r7
 8006a8a:	4656      	mov	r6, sl
 8006a8c:	465f      	mov	r7, fp
 8006a8e:	4073      	eors	r3, r6
 8006a90:	407c      	eors	r4, r7
 8006a92:	461e      	mov	r6, r3
 8006a94:	4627      	mov	r7, r4
    for( i = 15; i >= 0; i-- )
 8006a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
        zl ^= ctx->HL[hi];
 8006a98:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
    for( i = 15; i >= 0; i-- )
 8006a9c:	4299      	cmp	r1, r3
        zl ^= ctx->HL[hi];
 8006a9e:	ea84 0408 	eor.w	r4, r4, r8
 8006aa2:	ea85 0509 	eor.w	r5, r5, r9
    for( i = 15; i >= 0; i-- )
 8006aa6:	f47f af7a 	bne.w	800699e <gcm_mult+0x22>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8006aaa:	0e3b      	lsrs	r3, r7, #24
 8006aac:	7013      	strb	r3, [r2, #0]
 8006aae:	0c3b      	lsrs	r3, r7, #16
 8006ab0:	7053      	strb	r3, [r2, #1]
 8006ab2:	0a3b      	lsrs	r3, r7, #8
 8006ab4:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8006ab6:	0e33      	lsrs	r3, r6, #24
 8006ab8:	7113      	strb	r3, [r2, #4]
 8006aba:	0c33      	lsrs	r3, r6, #16
 8006abc:	7153      	strb	r3, [r2, #5]
 8006abe:	0a33      	lsrs	r3, r6, #8
 8006ac0:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8006ac2:	0e2b      	lsrs	r3, r5, #24
 8006ac4:	7213      	strb	r3, [r2, #8]
 8006ac6:	0c2b      	lsrs	r3, r5, #16
 8006ac8:	7253      	strb	r3, [r2, #9]
 8006aca:	0a2b      	lsrs	r3, r5, #8
 8006acc:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8006ace:	0e23      	lsrs	r3, r4, #24
 8006ad0:	7313      	strb	r3, [r2, #12]
 8006ad2:	0c23      	lsrs	r3, r4, #16
 8006ad4:	7353      	strb	r3, [r2, #13]
 8006ad6:	0a23      	lsrs	r3, r4, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8006ad8:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8006ada:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8006adc:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8006ade:	7393      	strb	r3, [r2, #14]
 8006ae0:	73d4      	strb	r4, [r2, #15]
}
 8006ae2:	b013      	add	sp, #76	; 0x4c
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	08012ba8 	.word	0x08012ba8

08006aec <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8006aec:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8006af0:	2100      	movs	r1, #0
 8006af2:	f008 b9d9 	b.w	800eea8 <memset>

08006af6 <mbedtls_gcm_setkey>:
{
 8006af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	b08f      	sub	sp, #60	; 0x3c
 8006afc:	4683      	mov	fp, r0
 8006afe:	9202      	str	r2, [sp, #8]
 8006b00:	4608      	mov	r0, r1
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8006b02:	2201      	movs	r2, #1
 8006b04:	4619      	mov	r1, r3
{
 8006b06:	461f      	mov	r7, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8006b08:	f7fe fbbc 	bl	8005284 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8006b0c:	4682      	mov	sl, r0
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f000 809f 	beq.w	8006c52 <mbedtls_gcm_setkey+0x15c>
    if( cipher_info->block_size != 16 )
 8006b14:	6946      	ldr	r6, [r0, #20]
 8006b16:	2e10      	cmp	r6, #16
 8006b18:	f040 809b 	bne.w	8006c52 <mbedtls_gcm_setkey+0x15c>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8006b1c:	4658      	mov	r0, fp
 8006b1e:	f7fe fbc9 	bl	80052b4 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8006b22:	4651      	mov	r1, sl
 8006b24:	4658      	mov	r0, fp
 8006b26:	f7fe fd65 	bl	80055f4 <mbedtls_cipher_setup>
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f040 808c 	bne.w	8006c4a <mbedtls_gcm_setkey+0x154>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8006b32:	2301      	movs	r3, #1
 8006b34:	463a      	mov	r2, r7
 8006b36:	9902      	ldr	r1, [sp, #8]
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f7fe fbcd 	bl	80052d8 <mbedtls_cipher_setkey>
 8006b3e:	4682      	mov	sl, r0
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f040 8082 	bne.w	8006c4a <mbedtls_gcm_setkey+0x154>
    memset( h, 0, 16 );
 8006b46:	4601      	mov	r1, r0
    size_t olen = 0;
 8006b48:	9009      	str	r0, [sp, #36]	; 0x24
    memset( h, 0, 16 );
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	a80a      	add	r0, sp, #40	; 0x28
 8006b4e:	f008 f9ab 	bl	800eea8 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8006b52:	ab09      	add	r3, sp, #36	; 0x24
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	ab0a      	add	r3, sp, #40	; 0x28
 8006b58:	4632      	mov	r2, r6
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	f7fe fc09 	bl	8005374 <mbedtls_cipher_update>
 8006b62:	4682      	mov	sl, r0
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d170      	bne.n	8006c4a <mbedtls_gcm_setkey+0x154>
 8006b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    vh = (uint64_t) hi << 32 | lo;
 8006b6a:	990a      	ldr	r1, [sp, #40]	; 0x28
    vl = (uint64_t) hi << 32 | lo;
 8006b6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b6e:	ba18      	rev	r0, r3
    vh = (uint64_t) hi << 32 | lo;
 8006b70:	ba0b      	rev	r3, r1
 8006b72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b74:	4652      	mov	r2, sl
 8006b76:	fa91 fe81 	rev.w	lr, r1
 8006b7a:	4302      	orrs	r2, r0
    vl = (uint64_t) hi << 32 | lo;
 8006b7c:	ba31      	rev	r1, r6
 8006b7e:	ea4a 000e 	orr.w	r0, sl, lr
    ctx->HH[8] = vh;
 8006b82:	f50b 7680 	add.w	r6, fp, #256	; 0x100
    ctx->HH[0] = 0;
 8006b86:	2700      	movs	r7, #0
    ctx->HL[8] = vl;
 8006b88:	e9cb 0120 	strd	r0, r1, [fp, #128]	; 0x80
    ctx->HH[8] = vh;
 8006b8c:	e9c6 2300 	strd	r2, r3, [r6]
    ctx->HH[0] = 0;
 8006b90:	2600      	movs	r6, #0
 8006b92:	e9cb 6730 	strd	r6, r7, [fp, #192]	; 0xc0
    ctx->HL[0] = 0;
 8006b96:	e9cb 6710 	strd	r6, r7, [fp, #64]	; 0x40
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8006b9a:	f04f 4e61 	mov.w	lr, #3774873600	; 0xe1000000
    ctx->HL[0] = 0;
 8006b9e:	2603      	movs	r6, #3
    for( i = 4; i > 0; i >>= 1 )
 8006ba0:	2704      	movs	r7, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8006ba2:	f000 0c01 	and.w	ip, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8006ba6:	07d5      	lsls	r5, r2, #31
 8006ba8:	0849      	lsrs	r1, r1, #1
 8006baa:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	ea4f 0232 	mov.w	r2, r2, rrx
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8006bb4:	2400      	movs	r4, #0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8006bb6:	fb0e f90c 	mul.w	r9, lr, ip
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8006bba:	4320      	orrs	r0, r4
 8006bbc:	eb0b 0cc7 	add.w	ip, fp, r7, lsl #3
 8006bc0:	4329      	orrs	r1, r5
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8006bc2:	4062      	eors	r2, r4
 8006bc4:	ea83 0309 	eor.w	r3, r3, r9
    for( i = 4; i > 0; i >>= 1 )
 8006bc8:	3e01      	subs	r6, #1
        ctx->HL[i] = vl;
 8006bca:	e9cc 0110 	strd	r0, r1, [ip, #64]	; 0x40
        ctx->HH[i] = vh;
 8006bce:	e9cc 2330 	strd	r2, r3, [ip, #192]	; 0xc0
    for( i = 4; i > 0; i >>= 1 )
 8006bd2:	ea4f 0767 	mov.w	r7, r7, asr #1
 8006bd6:	d1e4      	bne.n	8006ba2 <mbedtls_gcm_setkey+0xac>
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8006bd8:	f10b 0340 	add.w	r3, fp, #64	; 0x40
    for( i = 4; i > 0; i >>= 1 )
 8006bdc:	2603      	movs	r6, #3
 8006bde:	2402      	movs	r4, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8006be0:	9307      	str	r3, [sp, #28]
 8006be2:	f10b 0ec0 	add.w	lr, fp, #192	; 0xc0
 8006be6:	9b07      	ldr	r3, [sp, #28]
 8006be8:	00e7      	lsls	r7, r4, #3
 8006bea:	19d9      	adds	r1, r3, r7
 8006bec:	eb0e 0307 	add.w	r3, lr, r7
        vh = *HiH;
 8006bf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf4:	e9cd 8902 	strd	r8, r9, [sp, #8]
        vl = *HiL;
 8006bf8:	e9d1 8900 	ldrd	r8, r9, [r1]
 8006bfc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006c00:	f10b 0048 	add.w	r0, fp, #72	; 0x48
 8006c04:	f103 0508 	add.w	r5, r3, #8
 8006c08:	441f      	add	r7, r3
            HiH[j] = vh ^ ctx->HH[j];
 8006c0a:	e9d0 2320 	ldrd	r2, r3, [r0, #128]	; 0x80
 8006c0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c12:	ea88 0802 	eor.w	r8, r8, r2
 8006c16:	ea89 0903 	eor.w	r9, r9, r3
 8006c1a:	4642      	mov	r2, r8
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	e8e5 2302 	strd	r2, r3, [r5], #8
            HiL[j] = vl ^ ctx->HL[j];
 8006c22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c26:	e9d0 2300 	ldrd	r2, r3, [r0]
 8006c2a:	ea88 0802 	eor.w	r8, r8, r2
 8006c2e:	ea89 0903 	eor.w	r9, r9, r3
 8006c32:	4642      	mov	r2, r8
 8006c34:	464b      	mov	r3, r9
        for( j = 1; j < i; j++ )
 8006c36:	42bd      	cmp	r5, r7
            HiL[j] = vl ^ ctx->HL[j];
 8006c38:	f100 0008 	add.w	r0, r0, #8
 8006c3c:	e9e1 2302 	strd	r2, r3, [r1, #8]!
        for( j = 1; j < i; j++ )
 8006c40:	d1e3      	bne.n	8006c0a <mbedtls_gcm_setkey+0x114>
    for( i = 2; i <= 8; i *= 2 )
 8006c42:	3e01      	subs	r6, #1
 8006c44:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006c48:	d1cd      	bne.n	8006be6 <mbedtls_gcm_setkey+0xf0>
}
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	b00f      	add	sp, #60	; 0x3c
 8006c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8006c52:	f06f 0a13 	mvn.w	sl, #19
 8006c56:	e7f8      	b.n	8006c4a <mbedtls_gcm_setkey+0x154>

08006c58 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8006c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8006c5e:	f04f 0900 	mov.w	r9, #0
{
 8006c62:	4604      	mov	r4, r0
 8006c64:	468b      	mov	fp, r1
 8006c66:	4617      	mov	r7, r2
 8006c68:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    size_t use_len, olen = 0;
 8006c6c:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8006c70:	461d      	mov	r5, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8095 	beq.w	8006da2 <mbedtls_gcm_starts+0x14a>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8006c78:	f500 76b0 	add.w	r6, r0, #352	; 0x160
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	4649      	mov	r1, r9
 8006c80:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8006c82:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8006c86:	f008 f90f 	bl	800eea8 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	2210      	movs	r2, #16
 8006c8e:	4650      	mov	r0, sl
 8006c90:	f008 f90a 	bl	800eea8 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 8006c94:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 8006c98:	2000      	movs	r0, #0
 8006c9a:	2100      	movs	r1, #0
    ctx->mode = mode;
 8006c9c:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->add_len = 0;

    if( iv_len == 12 )
 8006ca0:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 8006ca2:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 8006ca6:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8006caa:	e9c3 0100 	strd	r0, r1, [r3]
    if( iv_len == 12 )
 8006cae:	d11f      	bne.n	8006cf0 <mbedtls_gcm_starts+0x98>
    {
        memcpy( ctx->y, iv, iv_len );
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6073      	str	r3, [r6, #4]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8006cc4:	ab05      	add	r3, sp, #20
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2210      	movs	r2, #16
 8006cca:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f7fe fb4f 	bl	8005374 <mbedtls_cipher_update>
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	b930      	cbnz	r0, 8006ce8 <mbedtls_gcm_starts+0x90>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8006cda:	f8c4 8148 	str.w	r8, [r4, #328]	; 0x148
 8006cde:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8006ce2:	f1b8 0f00 	cmp.w	r8, #0
 8006ce6:	d141      	bne.n	8006d6c <mbedtls_gcm_starts+0x114>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 8006ce8:	4628      	mov	r0, r5
 8006cea:	b00b      	add	sp, #44	; 0x2c
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset( work_buf, 0x00, 16 );
 8006cf0:	f10d 0b18 	add.w	fp, sp, #24
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4658      	mov	r0, fp
 8006cfa:	f008 f8d5 	bl	800eea8 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8006cfe:	00eb      	lsls	r3, r5, #3
 8006d00:	0e1a      	lsrs	r2, r3, #24
 8006d02:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8006d06:	0c1a      	lsrs	r2, r3, #16
 8006d08:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8006d0c:	0a1a      	lsrs	r2, r3, #8
 8006d0e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8006d12:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8006d16:	2d10      	cmp	r5, #16
 8006d18:	462b      	mov	r3, r5
 8006d1a:	bf28      	it	cs
 8006d1c:	2310      	movcs	r3, #16
 8006d1e:	463a      	mov	r2, r7
 8006d20:	46b1      	mov	r9, r6
 8006d22:	441f      	add	r7, r3
 8006d24:	4631      	mov	r1, r6
                ctx->y[i] ^= p[i];
 8006d26:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006d2a:	f891 e000 	ldrb.w	lr, [r1]
            for( i = 0; i < use_len; i++ )
 8006d2e:	4297      	cmp	r7, r2
                ctx->y[i] ^= p[i];
 8006d30:	ea80 000e 	eor.w	r0, r0, lr
 8006d34:	f801 0b01 	strb.w	r0, [r1], #1
            for( i = 0; i < use_len; i++ )
 8006d38:	d1f5      	bne.n	8006d26 <mbedtls_gcm_starts+0xce>
            gcm_mult( ctx, ctx->y, ctx->y );
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4620      	mov	r0, r4
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	f7ff fe1b 	bl	800697c <gcm_mult>
        while( iv_len > 0 )
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1aed      	subs	r5, r5, r3
 8006d4a:	d1e4      	bne.n	8006d16 <mbedtls_gcm_starts+0xbe>
            ctx->y[i] ^= work_buf[i];
 8006d4c:	f899 3000 	ldrb.w	r3, [r9]
 8006d50:	f81b 2005 	ldrb.w	r2, [fp, r5]
        for( i = 0; i < 16; i++ )
 8006d54:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 8006d56:	4053      	eors	r3, r2
        for( i = 0; i < 16; i++ )
 8006d58:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8006d5a:	f809 3b01 	strb.w	r3, [r9], #1
        for( i = 0; i < 16; i++ )
 8006d5e:	d1f5      	bne.n	8006d4c <mbedtls_gcm_starts+0xf4>
        gcm_mult( ctx, ctx->y, ctx->y );
 8006d60:	4632      	mov	r2, r6
 8006d62:	4631      	mov	r1, r6
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff fe09 	bl	800697c <gcm_mult>
 8006d6a:	e7ab      	b.n	8006cc4 <mbedtls_gcm_starts+0x6c>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8006d6c:	4646      	mov	r6, r8
 8006d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d70:	2e10      	cmp	r6, #16
 8006d72:	bf28      	it	cs
 8006d74:	2610      	movcs	r6, #16
 8006d76:	4619      	mov	r1, r3
 8006d78:	4431      	add	r1, r6
 8006d7a:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 8006d7e:	9114      	str	r1, [sp, #80]	; 0x50
            ctx->buf[i] ^= p[i];
 8006d80:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006d84:	7810      	ldrb	r0, [r2, #0]
 8006d86:	4041      	eors	r1, r0
 8006d88:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
 8006d8c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	d1f6      	bne.n	8006d80 <mbedtls_gcm_starts+0x128>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8006d92:	4652      	mov	r2, sl
 8006d94:	4651      	mov	r1, sl
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7ff fdf0 	bl	800697c <gcm_mult>
        add_len -= use_len;
 8006d9c:	eba8 0806 	sub.w	r8, r8, r6
 8006da0:	e79f      	b.n	8006ce2 <mbedtls_gcm_starts+0x8a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8006da2:	f06f 0513 	mvn.w	r5, #19
 8006da6:	e79f      	b.n	8006ce8 <mbedtls_gcm_starts+0x90>

08006da8 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	461f      	mov	r7, r3
 8006dae:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8006db0:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 8006db2:	4297      	cmp	r7, r2
{
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 8006dba:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
 8006dbc:	d902      	bls.n	8006dc4 <mbedtls_gcm_update+0x1c>
 8006dbe:	1abb      	subs	r3, r7, r2
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	d364      	bcc.n	8006e8e <mbedtls_gcm_update+0xe6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8006dc4:	f504 7ea0 	add.w	lr, r4, #320	; 0x140
 8006dc8:	e9de 0100 	ldrd	r0, r1, [lr]
 8006dcc:	1942      	adds	r2, r0, r5
 8006dce:	f141 0300 	adc.w	r3, r1, #0
 8006dd2:	428b      	cmp	r3, r1
 8006dd4:	bf08      	it	eq
 8006dd6:	4282      	cmpeq	r2, r0
 8006dd8:	d359      	bcc.n	8006e8e <mbedtls_gcm_update+0xe6>
 8006dda:	210f      	movs	r1, #15
 8006ddc:	f06f 001f 	mvn.w	r0, #31
 8006de0:	4299      	cmp	r1, r3
 8006de2:	bf08      	it	eq
 8006de4:	4290      	cmpeq	r0, r2
 8006de6:	d352      	bcc.n	8006e8e <mbedtls_gcm_update+0xe6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8006de8:	e9ce 2300 	strd	r2, r3, [lr]
 8006dec:	f204 1a6b 	addw	sl, r4, #363	; 0x16b

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8006df0:	f10d 0910 	add.w	r9, sp, #16
 8006df4:	f504 7bb0 	add.w	fp, r4, #352	; 0x160
    while( length > 0 )
 8006df8:	b91d      	cbnz	r5, 8006e02 <mbedtls_gcm_update+0x5a>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8006dfa:	4628      	mov	r0, r5
}
 8006dfc:	b009      	add	sp, #36	; 0x24
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 8006e02:	2d10      	cmp	r5, #16
 8006e04:	46a8      	mov	r8, r5
 8006e06:	f204 126f 	addw	r2, r4, #367	; 0x16f
 8006e0a:	bf28      	it	cs
 8006e0c:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
 8006e10:	7813      	ldrb	r3, [r2, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	f802 3901 	strb.w	r3, [r2], #-1
 8006e1a:	b90b      	cbnz	r3, 8006e20 <mbedtls_gcm_update+0x78>
        for( i = 16; i > 12; i-- )
 8006e1c:	4552      	cmp	r2, sl
 8006e1e:	d1f7      	bne.n	8006e10 <mbedtls_gcm_update+0x68>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	2210      	movs	r2, #16
 8006e26:	464b      	mov	r3, r9
 8006e28:	4659      	mov	r1, fp
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f7fe faa2 	bl	8005374 <mbedtls_cipher_update>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d1e3      	bne.n	8006dfc <mbedtls_gcm_update+0x54>
 8006e34:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8006e38:	469c      	mov	ip, r3
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8006e3a:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 8006e3e:	b929      	cbnz	r1, 8006e4c <mbedtls_gcm_update+0xa4>
                ctx->buf[i] ^= p[i];
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	f816 e000 	ldrb.w	lr, [r6, r0]
 8006e46:	ea81 010e 	eor.w	r1, r1, lr
 8006e4a:	7019      	strb	r1, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 8006e4c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8006e50:	f819 1000 	ldrb.w	r1, [r9, r0]
 8006e54:	ea81 010e 	eor.w	r1, r1, lr
 8006e58:	5439      	strb	r1, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8006e5a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006e5e:	2a01      	cmp	r2, #1
                ctx->buf[i] ^= out_p[i];
 8006e60:	bf08      	it	eq
 8006e62:	f893 e000 	ldrbeq.w	lr, [r3]
        for( i = 0; i < use_len; i++ )
 8006e66:	f100 0001 	add.w	r0, r0, #1
                ctx->buf[i] ^= out_p[i];
 8006e6a:	bf04      	itt	eq
 8006e6c:	ea81 010e 	eoreq.w	r1, r1, lr
 8006e70:	7019      	strbeq	r1, [r3, #0]
        for( i = 0; i < use_len; i++ )
 8006e72:	4580      	cmp	r8, r0
 8006e74:	f103 0301 	add.w	r3, r3, #1
 8006e78:	d1df      	bne.n	8006e3a <mbedtls_gcm_update+0x92>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8006e7a:	4662      	mov	r2, ip
 8006e7c:	4661      	mov	r1, ip
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff fd7c 	bl	800697c <gcm_mult>
        length -= use_len;
 8006e84:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
 8006e88:	4446      	add	r6, r8
        out_p += use_len;
 8006e8a:	4447      	add	r7, r8
 8006e8c:	e7b4      	b.n	8006df8 <mbedtls_gcm_update+0x50>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8006e8e:	f06f 0013 	mvn.w	r0, #19
 8006e92:	e7b3      	b.n	8006dfc <mbedtls_gcm_update+0x54>

08006e94 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8006e9a:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8006e9e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8006ea2:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8006ea4:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
    uint64_t orig_len = ctx->len * 8;
 8006ea8:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8006eac:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8006eae:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8006eb2:	00cf      	lsls	r7, r1, #3
 8006eb4:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 8006eb8:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 8006eba:	1f13      	subs	r3, r2, #4
 8006ebc:	2b0c      	cmp	r3, #12
{
 8006ebe:	4681      	mov	r9, r0
 8006ec0:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 8006ec2:	d85c      	bhi.n	8006f7e <mbedtls_gcm_finish+0xea>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8006ec4:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 8006ec8:	4640      	mov	r0, r8
 8006eca:	f007 ffc8 	bl	800ee5e <memcpy>

    if( orig_len || orig_add_len )
 8006ece:	ea54 0305 	orrs.w	r3, r4, r5
 8006ed2:	d106      	bne.n	8006ee2 <mbedtls_gcm_finish+0x4e>
 8006ed4:	ea56 0307 	orrs.w	r3, r6, r7
 8006ed8:	d103      	bne.n	8006ee2 <mbedtls_gcm_finish+0x4e>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 8006eda:	2000      	movs	r0, #0
}
 8006edc:	b004      	add	sp, #16
 8006ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset( work_buf, 0x00, 16 );
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4668      	mov	r0, sp
 8006ee8:	f007 ffde 	bl	800eea8 <memset>
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8006eec:	0e3b      	lsrs	r3, r7, #24
 8006eee:	f88d 3000 	strb.w	r3, [sp]
 8006ef2:	0c3b      	lsrs	r3, r7, #16
 8006ef4:	f88d 3001 	strb.w	r3, [sp, #1]
 8006ef8:	0a3b      	lsrs	r3, r7, #8
 8006efa:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8006efe:	0e33      	lsrs	r3, r6, #24
 8006f00:	f88d 3004 	strb.w	r3, [sp, #4]
 8006f04:	0c33      	lsrs	r3, r6, #16
 8006f06:	f88d 3005 	strb.w	r3, [sp, #5]
 8006f0a:	0a33      	lsrs	r3, r6, #8
 8006f0c:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8006f10:	0e2b      	lsrs	r3, r5, #24
 8006f12:	f88d 3008 	strb.w	r3, [sp, #8]
 8006f16:	0c2b      	lsrs	r3, r5, #16
 8006f18:	f88d 3009 	strb.w	r3, [sp, #9]
 8006f1c:	0a2b      	lsrs	r3, r5, #8
 8006f1e:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8006f22:	0e23      	lsrs	r3, r4, #24
 8006f24:	f88d 300c 	strb.w	r3, [sp, #12]
 8006f28:	0c23      	lsrs	r3, r4, #16
 8006f2a:	f88d 300d 	strb.w	r3, [sp, #13]
 8006f2e:	f88d 400f 	strb.w	r4, [sp, #15]
 8006f32:	0a23      	lsrs	r3, r4, #8
 8006f34:	f509 74b8 	add.w	r4, r9, #368	; 0x170
 8006f38:	f88d 300e 	strb.w	r3, [sp, #14]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8006f3c:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8006f40:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8006f44:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8006f48:	4622      	mov	r2, r4
        for( i = 0; i < 16; i++ )
 8006f4a:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 8006f4c:	7811      	ldrb	r1, [r2, #0]
 8006f4e:	f81d 0003 	ldrb.w	r0, [sp, r3]
        for( i = 0; i < 16; i++ )
 8006f52:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 8006f54:	4041      	eors	r1, r0
        for( i = 0; i < 16; i++ )
 8006f56:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 8006f58:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < 16; i++ )
 8006f5c:	d1f6      	bne.n	8006f4c <mbedtls_gcm_finish+0xb8>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4622      	mov	r2, r4
 8006f62:	4648      	mov	r0, r9
 8006f64:	f7ff fd0a 	bl	800697c <gcm_mult>
 8006f68:	44c2      	add	sl, r8
 8006f6a:	4641      	mov	r1, r8
            tag[i] ^= ctx->buf[i];
 8006f6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f70:	780a      	ldrb	r2, [r1, #0]
 8006f72:	4053      	eors	r3, r2
 8006f74:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < tag_len; i++ )
 8006f78:	458a      	cmp	sl, r1
 8006f7a:	d1f7      	bne.n	8006f6c <mbedtls_gcm_finish+0xd8>
 8006f7c:	e7ad      	b.n	8006eda <mbedtls_gcm_finish+0x46>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8006f7e:	f06f 0013 	mvn.w	r0, #19
 8006f82:	e7ab      	b.n	8006edc <mbedtls_gcm_finish+0x48>

08006f84 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8006f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f88:	4617      	mov	r7, r2
 8006f8a:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8006f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8006f96:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8006f9a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006f9e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006fa0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006fa2:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8006fa4:	f7ff fe58 	bl	8006c58 <mbedtls_gcm_starts>
 8006fa8:	b970      	cbnz	r0, 8006fc8 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8006faa:	464b      	mov	r3, r9
 8006fac:	4642      	mov	r2, r8
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7ff fef9 	bl	8006da8 <mbedtls_gcm_update>
 8006fb6:	b938      	cbnz	r0, 8006fc8 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8006fb8:	4632      	mov	r2, r6
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8006fbe:	b003      	add	sp, #12
 8006fc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8006fc4:	f7ff bf66 	b.w	8006e94 <mbedtls_gcm_finish>
}
 8006fc8:	b003      	add	sp, #12
 8006fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006fce <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8006fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd0:	b08d      	sub	sp, #52	; 0x34
 8006fd2:	460e      	mov	r6, r1
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8006fd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006fd6:	9103      	str	r1, [sp, #12]
 8006fd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 8006fda:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8006fdc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8006fde:	9102      	str	r1, [sp, #8]
 8006fe0:	ad08      	add	r5, sp, #32
 8006fe2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fe4:	9101      	str	r1, [sp, #4]
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	9506      	str	r5, [sp, #24]
 8006fea:	4613      	mov	r3, r2
 8006fec:	9705      	str	r7, [sp, #20]
 8006fee:	9404      	str	r4, [sp, #16]
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	f7ff ffc6 	bl	8006f84 <mbedtls_gcm_crypt_and_tag>
 8006ff8:	b950      	cbnz	r0, 8007010 <mbedtls_gcm_auth_decrypt+0x42>
 8006ffa:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8006ffc:	42bb      	cmp	r3, r7
 8006ffe:	d109      	bne.n	8007014 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 8007000:	b130      	cbz	r0, 8007010 <mbedtls_gcm_auth_decrypt+0x42>
 8007002:	4426      	add	r6, r4
 8007004:	4623      	mov	r3, r4
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007006:	2200      	movs	r2, #0
 8007008:	429e      	cmp	r6, r3
 800700a:	d10a      	bne.n	8007022 <mbedtls_gcm_auth_decrypt+0x54>
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 800700c:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 8007010:	b00d      	add	sp, #52	; 0x34
 8007012:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 8007014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007016:	5ce9      	ldrb	r1, [r5, r3]
 8007018:	5cd2      	ldrb	r2, [r2, r3]
 800701a:	404a      	eors	r2, r1
 800701c:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
 800701e:	3301      	adds	r3, #1
 8007020:	e7ec      	b.n	8006ffc <mbedtls_gcm_auth_decrypt+0x2e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	e7ef      	b.n	8007008 <mbedtls_gcm_auth_decrypt+0x3a>

08007028 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 8007028:	b510      	push	{r4, lr}
 800702a:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800702c:	f7fe f942 	bl	80052b4 <mbedtls_cipher_free>
 8007030:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007034:	4620      	mov	r0, r4
 8007036:	2200      	movs	r2, #0
 8007038:	4298      	cmp	r0, r3
 800703a:	d100      	bne.n	800703e <mbedtls_gcm_free+0x16>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
}
 800703c:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800703e:	7002      	strb	r2, [r0, #0]
 8007040:	3001      	adds	r0, #1
 8007042:	e7f9      	b.n	8007038 <mbedtls_gcm_free+0x10>

08007044 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 8007044:	2805      	cmp	r0, #5
 8007046:	d004      	beq.n	8007052 <mbedtls_md_info_from_type+0xe>
 8007048:	2806      	cmp	r0, #6
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800704a:	4803      	ldr	r0, [pc, #12]	; (8007058 <mbedtls_md_info_from_type+0x14>)
 800704c:	bf18      	it	ne
 800704e:	2000      	movne	r0, #0
 8007050:	4770      	bx	lr
            return( &mbedtls_sha224_info );
 8007052:	4802      	ldr	r0, [pc, #8]	; (800705c <mbedtls_md_info_from_type+0x18>)
    }
}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	08012c58 	.word	0x08012c58
 800705c:	08012c28 	.word	0x08012c28

08007060 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8007060:	2300      	movs	r3, #0
 8007062:	6003      	str	r3, [r0, #0]
 8007064:	6043      	str	r3, [r0, #4]
 8007066:	6083      	str	r3, [r0, #8]
 8007068:	4770      	bx	lr

0800706a <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800706a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 800706c:	4604      	mov	r4, r0
 800706e:	b1b0      	cbz	r0, 800709e <mbedtls_md_free+0x34>
 8007070:	6803      	ldr	r3, [r0, #0]
 8007072:	b1a3      	cbz	r3, 800709e <mbedtls_md_free+0x34>
        return;

    if( ctx->md_ctx != NULL )
 8007074:	6840      	ldr	r0, [r0, #4]
 8007076:	b108      	cbz	r0, 800707c <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 800707c:	68a3      	ldr	r3, [r4, #8]
 800707e:	b14b      	cbz	r3, 8007094 <mbedtls_md_free+0x2a>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8007080:	6822      	ldr	r2, [r4, #0]
 8007082:	68d2      	ldr	r2, [r2, #12]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007084:	2100      	movs	r1, #0
 8007086:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800708a:	4293      	cmp	r3, r2
 800708c:	d108      	bne.n	80070a0 <mbedtls_md_free+0x36>
        mbedtls_free( ctx->hmac_ctx );
 800708e:	68a0      	ldr	r0, [r4, #8]
 8007090:	f007 fece 	bl	800ee30 <free>
 8007094:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007098:	2200      	movs	r2, #0
 800709a:	429c      	cmp	r4, r3
 800709c:	d103      	bne.n	80070a6 <mbedtls_md_free+0x3c>
 800709e:	bd10      	pop	{r4, pc}
 80070a0:	7019      	strb	r1, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	e7f1      	b.n	800708a <mbedtls_md_free+0x20>
 80070a6:	7022      	strb	r2, [r4, #0]
 80070a8:	3401      	adds	r4, #1
 80070aa:	e7f6      	b.n	800709a <mbedtls_md_free+0x30>

080070ac <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	4605      	mov	r5, r0
 80070b0:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 80070b2:	460c      	mov	r4, r1
 80070b4:	b1a1      	cbz	r1, 80070e0 <mbedtls_md_setup+0x34>
 80070b6:	b198      	cbz	r0, 80070e0 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80070b8:	6a0b      	ldr	r3, [r1, #32]
 80070ba:	4798      	blx	r3
 80070bc:	4606      	mov	r6, r0
 80070be:	6068      	str	r0, [r5, #4]
 80070c0:	b148      	cbz	r0, 80070d6 <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80070c2:	b157      	cbz	r7, 80070da <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80070c4:	68e1      	ldr	r1, [r4, #12]
 80070c6:	2002      	movs	r0, #2
 80070c8:	f007 fe78 	bl	800edbc <calloc>
 80070cc:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 80070ce:	b920      	cbnz	r0, 80070da <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80070d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d2:	4630      	mov	r0, r6
 80070d4:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80070d6:	4803      	ldr	r0, [pc, #12]	; (80070e4 <mbedtls_md_setup+0x38>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 80070d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ctx->md_info = md_info;
 80070da:	602c      	str	r4, [r5, #0]
    return( 0 );
 80070dc:	2000      	movs	r0, #0
 80070de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <mbedtls_md_setup+0x3c>)
 80070e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e4:	ffffae80 	.word	0xffffae80
 80070e8:	ffffaf00 	.word	0xffffaf00

080070ec <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80070ec:	b430      	push	{r4, r5}
 80070ee:	460d      	mov	r5, r1
 80070f0:	4611      	mov	r1, r2
    if( md_info == NULL )
 80070f2:	b128      	cbz	r0, 8007100 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80070f4:	69c4      	ldr	r4, [r0, #28]
 80070f6:	461a      	mov	r2, r3
 80070f8:	4628      	mov	r0, r5
 80070fa:	4623      	mov	r3, r4
}
 80070fc:	bc30      	pop	{r4, r5}
    return( md_info->digest_func( input, ilen, output ) );
 80070fe:	4718      	bx	r3
}
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <mbedtls_md+0x1c>)
 8007102:	bc30      	pop	{r4, r5}
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	ffffaf00 	.word	0xffffaf00

0800710c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007110:	460d      	mov	r5, r1
 8007112:	b088      	sub	sp, #32
 8007114:	4616      	mov	r6, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8007116:	4604      	mov	r4, r0
 8007118:	2800      	cmp	r0, #0
 800711a:	d056      	beq.n	80071ca <mbedtls_md_hmac_starts+0xbe>
 800711c:	6803      	ldr	r3, [r0, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d053      	beq.n	80071ca <mbedtls_md_hmac_starts+0xbe>
 8007122:	6882      	ldr	r2, [r0, #8]
 8007124:	2a00      	cmp	r2, #0
 8007126:	d050      	beq.n	80071ca <mbedtls_md_hmac_starts+0xbe>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	42b2      	cmp	r2, r6
 800712c:	d214      	bcs.n	8007158 <mbedtls_md_hmac_starts+0x4c>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	6840      	ldr	r0, [r0, #4]
 8007132:	4798      	blx	r3
 8007134:	2800      	cmp	r0, #0
 8007136:	d130      	bne.n	800719a <mbedtls_md_hmac_starts+0x8e>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	6860      	ldr	r0, [r4, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4632      	mov	r2, r6
 8007140:	4629      	mov	r1, r5
 8007142:	4798      	blx	r3
 8007144:	bb48      	cbnz	r0, 800719a <mbedtls_md_hmac_starts+0x8e>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	6860      	ldr	r0, [r4, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	4669      	mov	r1, sp
 800714e:	4798      	blx	r3
 8007150:	bb18      	cbnz	r0, 800719a <mbedtls_md_hmac_starts+0x8e>
            goto cleanup;

        keylen = ctx->md_info->size;
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	689e      	ldr	r6, [r3, #8]
        key = sum;
 8007156:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8007158:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 800715a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800715e:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8007160:	2136      	movs	r1, #54	; 0x36
 8007162:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8007164:	eb08 0702 	add.w	r7, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 8007168:	f007 fe9e 	bl	800eea8 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	215c      	movs	r1, #92	; 0x5c
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	4638      	mov	r0, r7
 8007174:	f007 fe98 	bl	800eea8 <memset>
 8007178:	3d01      	subs	r5, #1
 800717a:	4643      	mov	r3, r8
 800717c:	1e78      	subs	r0, r7, #1
 800717e:	4446      	add	r6, r8

    for( i = 0; i < keylen; i++ )
 8007180:	429e      	cmp	r6, r3
 8007182:	d114      	bne.n	80071ae <mbedtls_md_hmac_starts+0xa2>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	6860      	ldr	r0, [r4, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	4798      	blx	r3
 800718c:	b928      	cbnz	r0, 800719a <mbedtls_md_hmac_starts+0x8e>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6860      	ldr	r0, [r4, #4]
 8007192:	695d      	ldr	r5, [r3, #20]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	4641      	mov	r1, r8
 8007198:	47a8      	blx	r5
 800719a:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800719c:	4619      	mov	r1, r3
 800719e:	eb0d 0203 	add.w	r2, sp, r3
 80071a2:	3301      	adds	r3, #1
 80071a4:	2b21      	cmp	r3, #33	; 0x21
 80071a6:	d10e      	bne.n	80071c6 <mbedtls_md_hmac_starts+0xba>

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 80071a8:	b008      	add	sp, #32
 80071aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 80071ae:	7869      	ldrb	r1, [r5, #1]
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	404a      	eors	r2, r1
 80071b4:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80071b8:	7842      	ldrb	r2, [r0, #1]
 80071ba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80071be:	404a      	eors	r2, r1
 80071c0:	f800 2f01 	strb.w	r2, [r0, #1]!
 80071c4:	e7dc      	b.n	8007180 <mbedtls_md_hmac_starts+0x74>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80071c6:	7011      	strb	r1, [r2, #0]
 80071c8:	e7e9      	b.n	800719e <mbedtls_md_hmac_starts+0x92>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80071ca:	4801      	ldr	r0, [pc, #4]	; (80071d0 <mbedtls_md_hmac_starts+0xc4>)
 80071cc:	e7ec      	b.n	80071a8 <mbedtls_md_hmac_starts+0x9c>
 80071ce:	bf00      	nop
 80071d0:	ffffaf00 	.word	0xffffaf00

080071d4 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 80071d4:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80071d6:	b140      	cbz	r0, 80071ea <mbedtls_md_hmac_update+0x16>
 80071d8:	6803      	ldr	r3, [r0, #0]
 80071da:	b133      	cbz	r3, 80071ea <mbedtls_md_hmac_update+0x16>
 80071dc:	6884      	ldr	r4, [r0, #8]
 80071de:	b124      	cbz	r4, 80071ea <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	6840      	ldr	r0, [r0, #4]
}
 80071e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80071e8:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80071ea:	4802      	ldr	r0, [pc, #8]	; (80071f4 <mbedtls_md_hmac_update+0x20>)
}
 80071ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	ffffaf00 	.word	0xffffaf00

080071f8 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	460e      	mov	r6, r1
 80071fe:	b088      	sub	sp, #32
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8007200:	4604      	mov	r4, r0
 8007202:	b330      	cbz	r0, 8007252 <mbedtls_md_hmac_finish+0x5a>
 8007204:	6803      	ldr	r3, [r0, #0]
 8007206:	b323      	cbz	r3, 8007252 <mbedtls_md_hmac_finish+0x5a>
 8007208:	6885      	ldr	r5, [r0, #8]
 800720a:	b315      	cbz	r5, 8007252 <mbedtls_md_hmac_finish+0x5a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800720c:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8007210:	6840      	ldr	r0, [r0, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	4669      	mov	r1, sp
 8007216:	4798      	blx	r3
 8007218:	b9c0      	cbnz	r0, 800724c <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	6860      	ldr	r0, [r4, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	4798      	blx	r3
 8007222:	b998      	cbnz	r0, 800724c <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	6860      	ldr	r0, [r4, #4]
 8007228:	695f      	ldr	r7, [r3, #20]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	eb05 0108 	add.w	r1, r5, r8
 8007230:	47b8      	blx	r7
 8007232:	b958      	cbnz	r0, 800724c <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	6860      	ldr	r0, [r4, #4]
 8007238:	695d      	ldr	r5, [r3, #20]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	4669      	mov	r1, sp
 800723e:	47a8      	blx	r5
 8007240:	b920      	cbnz	r0, 800724c <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	6860      	ldr	r0, [r4, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	4631      	mov	r1, r6
 800724a:	4798      	blx	r3
}
 800724c:	b008      	add	sp, #32
 800724e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007252:	4801      	ldr	r0, [pc, #4]	; (8007258 <mbedtls_md_hmac_finish+0x60>)
 8007254:	e7fa      	b.n	800724c <mbedtls_md_hmac_finish+0x54>
 8007256:	bf00      	nop
 8007258:	ffffaf00 	.word	0xffffaf00

0800725c <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 800725c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800725e:	4604      	mov	r4, r0
 8007260:	b180      	cbz	r0, 8007284 <mbedtls_md_hmac_reset+0x28>
 8007262:	6803      	ldr	r3, [r0, #0]
 8007264:	b173      	cbz	r3, 8007284 <mbedtls_md_hmac_reset+0x28>
 8007266:	6885      	ldr	r5, [r0, #8]
 8007268:	b165      	cbz	r5, 8007284 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	6840      	ldr	r0, [r0, #4]
 800726e:	4798      	blx	r3
 8007270:	b948      	cbnz	r0, 8007286 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	6860      	ldr	r0, [r4, #4]
 8007276:	695e      	ldr	r6, [r3, #20]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	4629      	mov	r1, r5
 800727c:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 800727e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8007282:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007284:	4800      	ldr	r0, [pc, #0]	; (8007288 <mbedtls_md_hmac_reset+0x2c>)
}
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	ffffaf00 	.word	0xffffaf00

0800728c <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 800728c:	b120      	cbz	r0, 8007298 <mbedtls_md_process+0xc>
 800728e:	6803      	ldr	r3, [r0, #0]
 8007290:	b113      	cbz	r3, 8007298 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	6840      	ldr	r0, [r0, #4]
 8007296:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8007298:	4800      	ldr	r0, [pc, #0]	; (800729c <mbedtls_md_process+0x10>)
}
 800729a:	4770      	bx	lr
 800729c:	ffffaf00 	.word	0xffffaf00

080072a0 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80072a0:	b100      	cbz	r0, 80072a4 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80072a2:	6880      	ldr	r0, [r0, #8]
}
 80072a4:	b2c0      	uxtb	r0, r0
 80072a6:	4770      	bx	lr

080072a8 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 80072a8:	f001 bdfc 	b.w	8008ea4 <mbedtls_internal_sha256_process>

080072ac <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 80072ac:	f001 bda5 	b.w	8008dfa <mbedtls_sha256_clone>

080072b0 <sha224_ctx_free>:
{
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80072b4:	f001 fd97 	bl	8008de6 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80072b8:	4620      	mov	r0, r4
}
 80072ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80072be:	f007 bdb7 	b.w	800ee30 <free>

080072c2 <sha224_ctx_alloc>:
{
 80072c2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80072c4:	216c      	movs	r1, #108	; 0x6c
 80072c6:	2001      	movs	r0, #1
 80072c8:	f007 fd78 	bl	800edbc <calloc>
    if( ctx != NULL )
 80072cc:	4604      	mov	r4, r0
 80072ce:	b108      	cbz	r0, 80072d4 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80072d0:	f001 fd85 	bl	8008dde <mbedtls_sha256_init>
}
 80072d4:	4620      	mov	r0, r4
 80072d6:	bd10      	pop	{r4, pc}

080072d8 <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80072d8:	2301      	movs	r3, #1
 80072da:	f002 b9ff 	b.w	80096dc <mbedtls_sha256_ret>

080072de <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80072de:	2300      	movs	r3, #0
 80072e0:	f002 b9fc 	b.w	80096dc <mbedtls_sha256_ret>

080072e4 <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 80072e4:	f002 b974 	b.w	80095d0 <mbedtls_sha256_finish_ret>

080072e8 <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 80072e8:	f002 b96c 	b.w	80095c4 <mbedtls_sha256_update_ret>

080072ec <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80072ec:	2101      	movs	r1, #1
 80072ee:	f001 bd89 	b.w	8008e04 <mbedtls_sha256_starts_ret>

080072f2 <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80072f2:	2100      	movs	r1, #0
 80072f4:	f001 bd86 	b.w	8008e04 <mbedtls_sha256_starts_ret>

080072f8 <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4605      	mov	r5, r0
 80072fc:	b180      	cbz	r0, 8007320 <oid_sig_alg_from_asn1+0x28>
 80072fe:	4c09      	ldr	r4, [pc, #36]	; (8007324 <oid_sig_alg_from_asn1+0x2c>)
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	b910      	cbnz	r0, 800730a <oid_sig_alg_from_asn1+0x12>
 8007304:	4604      	mov	r4, r0
 8007306:	4620      	mov	r0, r4
 8007308:	bd38      	pop	{r3, r4, r5, pc}
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	686b      	ldr	r3, [r5, #4]
 800730e:	429a      	cmp	r2, r3
 8007310:	d104      	bne.n	800731c <oid_sig_alg_from_asn1+0x24>
 8007312:	68a9      	ldr	r1, [r5, #8]
 8007314:	f007 fd94 	bl	800ee40 <memcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	d0f4      	beq.n	8007306 <oid_sig_alg_from_asn1+0xe>
 800731c:	3414      	adds	r4, #20
 800731e:	e7ef      	b.n	8007300 <oid_sig_alg_from_asn1+0x8>
 8007320:	4604      	mov	r4, r0
 8007322:	e7f0      	b.n	8007306 <oid_sig_alg_from_asn1+0xe>
 8007324:	08012d84 	.word	0x08012d84

08007328 <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 800732c:	4605      	mov	r5, r0
 800732e:	b110      	cbz	r0, 8007336 <mbedtls_oid_get_attr_short_name+0xe>
 8007330:	4c09      	ldr	r4, [pc, #36]	; (8007358 <mbedtls_oid_get_attr_short_name+0x30>)
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	b910      	cbnz	r0, 800733c <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8007336:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 800733a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	686b      	ldr	r3, [r5, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d103      	bne.n	800734c <mbedtls_oid_get_attr_short_name+0x24>
 8007344:	68a9      	ldr	r1, [r5, #8]
 8007346:	f007 fd7b 	bl	800ee40 <memcmp>
 800734a:	b108      	cbz	r0, 8007350 <mbedtls_oid_get_attr_short_name+0x28>
 800734c:	3414      	adds	r4, #20
 800734e:	e7f0      	b.n	8007332 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	bf00      	nop
 8007358:	08012e4c 	.word	0x08012e4c

0800735c <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8007360:	4605      	mov	r5, r0
 8007362:	b110      	cbz	r0, 800736a <mbedtls_oid_get_x509_ext_type+0xe>
 8007364:	4c09      	ldr	r4, [pc, #36]	; (800738c <mbedtls_oid_get_x509_ext_type+0x30>)
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	b910      	cbnz	r0, 8007370 <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 800736a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 800736e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8007370:	6862      	ldr	r2, [r4, #4]
 8007372:	686b      	ldr	r3, [r5, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d103      	bne.n	8007380 <mbedtls_oid_get_x509_ext_type+0x24>
 8007378:	68a9      	ldr	r1, [r5, #8]
 800737a:	f007 fd61 	bl	800ee40 <memcmp>
 800737e:	b108      	cbz	r0, 8007384 <mbedtls_oid_get_x509_ext_type+0x28>
 8007380:	3414      	adds	r4, #20
 8007382:	e7f0      	b.n	8007366 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	bd70      	pop	{r4, r5, r6, pc}
 800738a:	bf00      	nop
 800738c:	08012dd4 	.word	0x08012dd4

08007390 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8007394:	4605      	mov	r5, r0
 8007396:	b110      	cbz	r0, 800739e <mbedtls_oid_get_extended_key_usage+0xe>
 8007398:	4c09      	ldr	r4, [pc, #36]	; (80073c0 <mbedtls_oid_get_extended_key_usage+0x30>)
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	b910      	cbnz	r0, 80073a4 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 800739e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 80073a4:	6862      	ldr	r2, [r4, #4]
 80073a6:	686b      	ldr	r3, [r5, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d103      	bne.n	80073b4 <mbedtls_oid_get_extended_key_usage+0x24>
 80073ac:	68a9      	ldr	r1, [r5, #8]
 80073ae:	f007 fd47 	bl	800ee40 <memcmp>
 80073b2:	b108      	cbz	r0, 80073b8 <mbedtls_oid_get_extended_key_usage+0x28>
 80073b4:	3410      	adds	r4, #16
 80073b6:	e7f0      	b.n	800739a <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80073b8:	68e3      	ldr	r3, [r4, #12]
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	bf00      	nop
 80073c0:	08012c88 	.word	0x08012c88

080073c4 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 80073c4:	b510      	push	{r4, lr}
 80073c6:	460c      	mov	r4, r1
 80073c8:	f7ff ff96 	bl	80072f8 <oid_sig_alg_from_asn1>
 80073cc:	b118      	cbz	r0, 80073d6 <mbedtls_oid_get_sig_alg_desc+0x12>
 80073ce:	68c3      	ldr	r3, [r0, #12]
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	2000      	movs	r0, #0
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80073da:	bd10      	pop	{r4, pc}

080073dc <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	460d      	mov	r5, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	f7ff ff89 	bl	80072f8 <oid_sig_alg_from_asn1>
 80073e6:	b128      	cbz	r0, 80073f4 <mbedtls_oid_get_sig_alg+0x18>
 80073e8:	7c03      	ldrb	r3, [r0, #16]
 80073ea:	702b      	strb	r3, [r5, #0]
 80073ec:	7c43      	ldrb	r3, [r0, #17]
 80073ee:	7023      	strb	r3, [r4, #0]
 80073f0:	2000      	movs	r0, #0
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080073fc <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8007400:	4605      	mov	r5, r0
 8007402:	b110      	cbz	r0, 800740a <mbedtls_oid_get_pk_alg+0xe>
 8007404:	4c09      	ldr	r4, [pc, #36]	; (800742c <mbedtls_oid_get_pk_alg+0x30>)
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	b910      	cbnz	r0, 8007410 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 800740a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 800740e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8007410:	6862      	ldr	r2, [r4, #4]
 8007412:	686b      	ldr	r3, [r5, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d103      	bne.n	8007420 <mbedtls_oid_get_pk_alg+0x24>
 8007418:	68a9      	ldr	r1, [r5, #8]
 800741a:	f007 fd11 	bl	800ee40 <memcmp>
 800741e:	b108      	cbz	r0, 8007424 <mbedtls_oid_get_pk_alg+0x28>
 8007420:	3414      	adds	r4, #20
 8007422:	e7f0      	b.n	8007406 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8007424:	7c23      	ldrb	r3, [r4, #16]
 8007426:	7033      	strb	r3, [r6, #0]
 8007428:	bd70      	pop	{r4, r5, r6, pc}
 800742a:	bf00      	nop
 800742c:	08012d34 	.word	0x08012d34

08007430 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	4b08      	ldr	r3, [pc, #32]	; (8007454 <mbedtls_oid_get_oid_by_md+0x24>)
 8007434:	681c      	ldr	r4, [r3, #0]
 8007436:	b914      	cbnz	r4, 800743e <mbedtls_oid_get_oid_by_md+0xe>
 8007438:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 800743c:	bd30      	pop	{r4, r5, pc}
 800743e:	7c1d      	ldrb	r5, [r3, #16]
 8007440:	4285      	cmp	r5, r0
 8007442:	d104      	bne.n	800744e <mbedtls_oid_get_oid_by_md+0x1e>
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	600c      	str	r4, [r1, #0]
 8007448:	2000      	movs	r0, #0
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	bd30      	pop	{r4, r5, pc}
 800744e:	3314      	adds	r3, #20
 8007450:	e7f0      	b.n	8007434 <mbedtls_oid_get_oid_by_md+0x4>
 8007452:	bf00      	nop
 8007454:	08012cf8 	.word	0x08012cf8

08007458 <mbedtls_pem_init>:
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 8007458:	2300      	movs	r3, #0
 800745a:	6003      	str	r3, [r0, #0]
 800745c:	6043      	str	r3, [r0, #4]
 800745e:	6083      	str	r3, [r0, #8]
 8007460:	4770      	bx	lr
	...

08007464 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8007464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007468:	4689      	mov	r9, r1
 800746a:	b085      	sub	sp, #20
 800746c:	4690      	mov	r8, r2
 800746e:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8007470:	4606      	mov	r6, r0
 8007472:	2800      	cmp	r0, #0
 8007474:	d06a      	beq.n	800754c <mbedtls_pem_read_buffer+0xe8>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8007476:	4618      	mov	r0, r3
 8007478:	f007 ff3d 	bl	800f2f6 <strstr>

    if( s1 == NULL )
 800747c:	4604      	mov	r4, r0
 800747e:	2800      	cmp	r0, #0
 8007480:	d066      	beq.n	8007550 <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 8007482:	4641      	mov	r1, r8
 8007484:	4638      	mov	r0, r7
 8007486:	f007 ff36 	bl	800f2f6 <strstr>

    if( s2 == NULL || s2 <= s1 )
 800748a:	4605      	mov	r5, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d05f      	beq.n	8007550 <mbedtls_pem_read_buffer+0xec>
 8007490:	4284      	cmp	r4, r0
 8007492:	d25d      	bcs.n	8007550 <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 8007494:	4648      	mov	r0, r9
 8007496:	f7f8 fea3 	bl	80001e0 <strlen>
    if( *s1 == ' '  ) s1++;
 800749a:	5c22      	ldrb	r2, [r4, r0]
    s1 += strlen( header );
 800749c:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 800749e:	2a20      	cmp	r2, #32
 80074a0:	bf08      	it	eq
 80074a2:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	2a0d      	cmp	r2, #13
 80074a8:	bf08      	it	eq
 80074aa:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 80074ac:	781a      	ldrb	r2, [r3, #0]
 80074ae:	2a0a      	cmp	r2, #10
 80074b0:	d14e      	bne.n	8007550 <mbedtls_pem_read_buffer+0xec>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80074b2:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
 80074b4:	1c5c      	adds	r4, r3, #1
    end += strlen( footer );
 80074b6:	f7f8 fe93 	bl	80001e0 <strlen>
    if( *end == ' '  ) end++;
 80074ba:	5c2a      	ldrb	r2, [r5, r0]
    end += strlen( footer );
 80074bc:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 80074be:	2a20      	cmp	r2, #32
 80074c0:	bf08      	it	eq
 80074c2:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	2a0d      	cmp	r2, #13
 80074c8:	bf08      	it	eq
 80074ca:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 80074cc:	781a      	ldrb	r2, [r3, #0]
 80074ce:	2a0a      	cmp	r2, #10
 80074d0:	bf08      	it	eq
 80074d2:	3301      	addeq	r3, #1
    *use_len = end - data;
 80074d4:	1bdb      	subs	r3, r3, r7
 80074d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80074d8:	1b2f      	subs	r7, r5, r4
 80074da:	2f15      	cmp	r7, #21
    *use_len = end - data;
 80074dc:	6013      	str	r3, [r2, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80074de:	dd05      	ble.n	80074ec <mbedtls_pem_read_buffer+0x88>
 80074e0:	2216      	movs	r2, #22
 80074e2:	4920      	ldr	r1, [pc, #128]	; (8007564 <mbedtls_pem_read_buffer+0x100>)
 80074e4:	4620      	mov	r0, r4
 80074e6:	f007 fcab 	bl	800ee40 <memcmp>
 80074ea:	b398      	cbz	r0, 8007554 <mbedtls_pem_read_buffer+0xf0>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 80074ec:	42a5      	cmp	r5, r4
 80074ee:	d933      	bls.n	8007558 <mbedtls_pem_read_buffer+0xf4>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 80074f0:	2100      	movs	r1, #0
 80074f2:	9700      	str	r7, [sp, #0]
 80074f4:	4623      	mov	r3, r4
 80074f6:	aa03      	add	r2, sp, #12
 80074f8:	4608      	mov	r0, r1
 80074fa:	f7fc f9bd 	bl	8003878 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 80074fe:	302c      	adds	r0, #44	; 0x2c
 8007500:	d02c      	beq.n	800755c <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8007502:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007506:	2001      	movs	r0, #1
 8007508:	4641      	mov	r1, r8
 800750a:	f007 fc57 	bl	800edbc <calloc>
 800750e:	4605      	mov	r5, r0
 8007510:	b330      	cbz	r0, 8007560 <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8007512:	4623      	mov	r3, r4
 8007514:	9700      	str	r7, [sp, #0]
 8007516:	aa03      	add	r2, sp, #12
 8007518:	4641      	mov	r1, r8
 800751a:	f7fc f9ad 	bl	8003878 <mbedtls_base64_decode>
 800751e:	9b03      	ldr	r3, [sp, #12]
 8007520:	4604      	mov	r4, r0
 8007522:	b180      	cbz	r0, 8007546 <mbedtls_pem_read_buffer+0xe2>
 8007524:	442b      	add	r3, r5
    {
        mbedtls_zeroize( buf, len );
 8007526:	462a      	mov	r2, r5
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007528:	2100      	movs	r1, #0
 800752a:	429a      	cmp	r2, r3
 800752c:	d108      	bne.n	8007540 <mbedtls_pem_read_buffer+0xdc>
        mbedtls_free( buf );
 800752e:	4628      	mov	r0, r5
 8007530:	f007 fc7e 	bl	800ee30 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8007534:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 8007538:	4620      	mov	r0, r4
 800753a:	b005      	add	sp, #20
 800753c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007540:	7011      	strb	r1, [r2, #0]
 8007542:	3201      	adds	r2, #1
 8007544:	e7f1      	b.n	800752a <mbedtls_pem_read_buffer+0xc6>
    ctx->buf = buf;
 8007546:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 8007548:	6073      	str	r3, [r6, #4]
    return( 0 );
 800754a:	e7f5      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 800754c:	4c06      	ldr	r4, [pc, #24]	; (8007568 <mbedtls_pem_read_buffer+0x104>)
 800754e:	e7f3      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 8007550:	4c06      	ldr	r4, [pc, #24]	; (800756c <mbedtls_pem_read_buffer+0x108>)
 8007552:	e7f1      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 8007554:	4c06      	ldr	r4, [pc, #24]	; (8007570 <mbedtls_pem_read_buffer+0x10c>)
 8007556:	e7ef      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 8007558:	4c06      	ldr	r4, [pc, #24]	; (8007574 <mbedtls_pem_read_buffer+0x110>)
 800755a:	e7ed      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 800755c:	4c06      	ldr	r4, [pc, #24]	; (8007578 <mbedtls_pem_read_buffer+0x114>)
 800755e:	e7eb      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 8007560:	4c06      	ldr	r4, [pc, #24]	; (800757c <mbedtls_pem_read_buffer+0x118>)
 8007562:	e7e9      	b.n	8007538 <mbedtls_pem_read_buffer+0xd4>
 8007564:	080135f5 	.word	0x080135f5
 8007568:	ffffeb80 	.word	0xffffeb80
 800756c:	ffffef80 	.word	0xffffef80
 8007570:	ffffec00 	.word	0xffffec00
 8007574:	ffffef00 	.word	0xffffef00
 8007578:	ffffeed4 	.word	0xffffeed4
 800757c:	ffffee80 	.word	0xffffee80

08007580 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
 8007580:	6803      	ldr	r3, [r0, #0]
{
 8007582:	b510      	push	{r4, lr}
 8007584:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 8007586:	b95b      	cbnz	r3, 80075a0 <mbedtls_pem_free+0x20>
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	f007 fc51 	bl	800ee30 <free>
    mbedtls_free( ctx->info );
 800758e:	68a0      	ldr	r0, [r4, #8]
 8007590:	f007 fc4e 	bl	800ee30 <free>
 8007594:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8007598:	2200      	movs	r2, #0
 800759a:	429c      	cmp	r4, r3
 800759c:	d108      	bne.n	80075b0 <mbedtls_pem_free+0x30>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
}
 800759e:	bd10      	pop	{r4, pc}
 80075a0:	6842      	ldr	r2, [r0, #4]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80075a2:	2100      	movs	r1, #0
 80075a4:	441a      	add	r2, r3
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d0ee      	beq.n	8007588 <mbedtls_pem_free+0x8>
 80075aa:	7019      	strb	r1, [r3, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	e7fa      	b.n	80075a6 <mbedtls_pem_free+0x26>
 80075b0:	7022      	strb	r2, [r4, #0]
 80075b2:	3401      	adds	r4, #1
 80075b4:	e7f1      	b.n	800759a <mbedtls_pem_free+0x1a>

080075b6 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 80075b6:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 80075b8:	4604      	mov	r4, r0
 80075ba:	b148      	cbz	r0, 80075d0 <mbedtls_pk_free+0x1a>
 80075bc:	6803      	ldr	r3, [r0, #0]
 80075be:	b13b      	cbz	r3, 80075d0 <mbedtls_pk_free+0x1a>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	6840      	ldr	r0, [r0, #4]
 80075c4:	4798      	blx	r3
 80075c6:	f104 0308 	add.w	r3, r4, #8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80075ca:	2200      	movs	r2, #0
 80075cc:	429c      	cmp	r4, r3
 80075ce:	d100      	bne.n	80075d2 <mbedtls_pk_free+0x1c>
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	7022      	strb	r2, [r4, #0]
 80075d4:	3401      	adds	r4, #1
 80075d6:	e7f9      	b.n	80075cc <mbedtls_pk_free+0x16>

080075d8 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 80075d8:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 80075da:	4802      	ldr	r0, [pc, #8]	; (80075e4 <mbedtls_pk_info_from_type+0xc>)
 80075dc:	bf18      	it	ne
 80075de:	2000      	movne	r0, #0
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	08013618 	.word	0x08013618

080075e8 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 80075ec:	4605      	mov	r5, r0
 80075ee:	b148      	cbz	r0, 8007604 <mbedtls_pk_setup+0x1c>
 80075f0:	b141      	cbz	r1, 8007604 <mbedtls_pk_setup+0x1c>
 80075f2:	6804      	ldr	r4, [r0, #0]
 80075f4:	b934      	cbnz	r4, 8007604 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 80075f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80075f8:	4798      	blx	r3
 80075fa:	6068      	str	r0, [r5, #4]
 80075fc:	b120      	cbz	r0, 8007608 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 80075fe:	602e      	str	r6, [r5, #0]

    return( 0 );
 8007600:	4620      	mov	r0, r4
 8007602:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8007604:	4801      	ldr	r0, [pc, #4]	; (800760c <mbedtls_pk_setup+0x24>)
 8007606:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <mbedtls_pk_setup+0x28>)
}
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	ffffc180 	.word	0xffffc180
 8007610:	ffffc080 	.word	0xffffc080

08007614 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 8007614:	b120      	cbz	r0, 8007620 <mbedtls_pk_can_do+0xc>
 8007616:	6803      	ldr	r3, [r0, #0]
 8007618:	b113      	cbz	r3, 8007620 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4608      	mov	r0, r1
 800761e:	4718      	bx	r3
}
 8007620:	2000      	movs	r0, #0
 8007622:	4770      	bx	lr

08007624 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800762c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007630:	460e      	mov	r6, r1
 8007632:	4617      	mov	r7, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8007634:	4604      	mov	r4, r0
 8007636:	b910      	cbnz	r0, 800763e <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8007638:	480f      	ldr	r0, [pc, #60]	; (8007678 <mbedtls_pk_verify+0x54>)
 800763a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 800763e:	6802      	ldr	r2, [r0, #0]
 8007640:	2a00      	cmp	r2, #0
 8007642:	d0f9      	beq.n	8007638 <mbedtls_pk_verify+0x14>
    if( *hash_len != 0 )
 8007644:	b93b      	cbnz	r3, 8007656 <mbedtls_pk_verify+0x32>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8007646:	4608      	mov	r0, r1
 8007648:	f7ff fcfc 	bl	8007044 <mbedtls_md_info_from_type>
 800764c:	2800      	cmp	r0, #0
 800764e:	d0f3      	beq.n	8007638 <mbedtls_pk_verify+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 8007650:	f7ff fe26 	bl	80072a0 <mbedtls_md_get_size>
 8007654:	4603      	mov	r3, r0

    if( ctx->pk_info->verify_func == NULL )
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	6915      	ldr	r5, [r2, #16]
 800765a:	b915      	cbnz	r5, 8007662 <mbedtls_pk_verify+0x3e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800765c:	4807      	ldr	r0, [pc, #28]	; (800767c <mbedtls_pk_verify+0x58>)
 800765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8007662:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007666:	f8cd 8020 	str.w	r8, [sp, #32]
 800766a:	463a      	mov	r2, r7
 800766c:	4631      	mov	r1, r6
 800766e:	6860      	ldr	r0, [r4, #4]
 8007670:	46ac      	mov	ip, r5
                                       sig, sig_len ) );
}
 8007672:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8007676:	4760      	bx	ip
 8007678:	ffffc180 	.word	0xffffc180
 800767c:	ffffc100 	.word	0xffffc100

08007680 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8007680:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	af0a      	add	r7, sp, #40	; 0x28
 8007686:	4605      	mov	r5, r0
 8007688:	468b      	mov	fp, r1
 800768a:	461e      	mov	r6, r3
 800768c:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    if( ctx == NULL || ctx->pk_info == NULL )
 8007690:	4614      	mov	r4, r2
 8007692:	b91a      	cbnz	r2, 800769c <mbedtls_pk_verify_ext+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8007694:	4810      	ldr	r0, [pc, #64]	; (80076d8 <mbedtls_pk_verify_ext+0x58>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 8007696:	b001      	add	sp, #4
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0f8      	beq.n	8007694 <mbedtls_pk_verify_ext+0x14>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 80076a2:	4601      	mov	r1, r0
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7ff ffb5 	bl	8007614 <mbedtls_pk_can_do>
 80076aa:	b188      	cbz	r0, 80076d0 <mbedtls_pk_verify_ext+0x50>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 80076ac:	2d06      	cmp	r5, #6
 80076ae:	d011      	beq.n	80076d4 <mbedtls_pk_verify_ext+0x54>
    if( options != NULL )
 80076b0:	f1bb 0f00 	cmp.w	fp, #0
 80076b4:	d1ee      	bne.n	8007694 <mbedtls_pk_verify_ext+0x14>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80076b6:	4643      	mov	r3, r8
 80076b8:	463a      	mov	r2, r7
 80076ba:	4631      	mov	r1, r6
 80076bc:	4620      	mov	r0, r4
 80076be:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80076c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
}
 80076c6:	b001      	add	sp, #4
 80076c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80076cc:	f7ff bfaa 	b.w	8007624 <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80076d0:	4802      	ldr	r0, [pc, #8]	; (80076dc <mbedtls_pk_verify_ext+0x5c>)
 80076d2:	e7e0      	b.n	8007696 <mbedtls_pk_verify_ext+0x16>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 80076d4:	4802      	ldr	r0, [pc, #8]	; (80076e0 <mbedtls_pk_verify_ext+0x60>)
 80076d6:	e7de      	b.n	8007696 <mbedtls_pk_verify_ext+0x16>
 80076d8:	ffffc180 	.word	0xffffc180
 80076dc:	ffffc100 	.word	0xffffc100
 80076e0:	ffffc680 	.word	0xffffc680

080076e4 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	af08      	add	r7, sp, #32
 80076ea:	460d      	mov	r5, r1
 80076ec:	4616      	mov	r6, r2
 80076ee:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    if( ctx == NULL || ctx->pk_info == NULL ||
 80076f2:	4604      	mov	r4, r0
 80076f4:	b910      	cbnz	r0, 80076fc <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80076f6:	4813      	ldr	r0, [pc, #76]	; (8007744 <mbedtls_pk_sign+0x60>)
 80076f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 80076fc:	6802      	ldr	r2, [r0, #0]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d0f9      	beq.n	80076f6 <mbedtls_pk_sign+0x12>
    if( *hash_len != 0 )
 8007702:	b93b      	cbnz	r3, 8007714 <mbedtls_pk_sign+0x30>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8007704:	4608      	mov	r0, r1
 8007706:	f7ff fc9d 	bl	8007044 <mbedtls_md_info_from_type>
 800770a:	2800      	cmp	r0, #0
 800770c:	d0f3      	beq.n	80076f6 <mbedtls_pk_sign+0x12>
    *hash_len = mbedtls_md_get_size( md_info );
 800770e:	f7ff fdc7 	bl	80072a0 <mbedtls_md_get_size>
 8007712:	4603      	mov	r3, r0

    if( ctx->pk_info->sign_func == NULL )
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	f8d2 e014 	ldr.w	lr, [r2, #20]
 800771a:	f1be 0f00 	cmp.w	lr, #0
 800771e:	d102      	bne.n	8007726 <mbedtls_pk_sign+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8007720:	4809      	ldr	r0, [pc, #36]	; (8007748 <mbedtls_pk_sign+0x64>)
 8007722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8007726:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800772a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800772e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007732:	9708      	str	r7, [sp, #32]
 8007734:	4632      	mov	r2, r6
 8007736:	4629      	mov	r1, r5
 8007738:	6860      	ldr	r0, [r4, #4]
 800773a:	46f4      	mov	ip, lr
                                     sig, sig_len, f_rng, p_rng ) );
}
 800773c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8007740:	4760      	bx	ip
 8007742:	bf00      	nop
 8007744:	ffffc180 	.word	0xffffc180
 8007748:	ffffc100 	.word	0xffffc100

0800774c <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800774c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774e:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 8007752:	b140      	cbz	r0, 8007766 <mbedtls_pk_encrypt+0x1a>
 8007754:	6804      	ldr	r4, [r0, #0]
 8007756:	b134      	cbz	r4, 8007766 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 8007758:	69e4      	ldr	r4, [r4, #28]
 800775a:	b134      	cbz	r4, 800776a <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 800775c:	46a4      	mov	ip, r4
 800775e:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
 8007760:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8007764:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8007766:	4802      	ldr	r0, [pc, #8]	; (8007770 <mbedtls_pk_encrypt+0x24>)
 8007768:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 800776a:	4802      	ldr	r0, [pc, #8]	; (8007774 <mbedtls_pk_encrypt+0x28>)
}
 800776c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776e:	bf00      	nop
 8007770:	ffffc180 	.word	0xffffc180
 8007774:	ffffc100 	.word	0xffffc100

08007778 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8007778:	b120      	cbz	r0, 8007784 <mbedtls_pk_get_bitlen+0xc>
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	b113      	cbz	r3, 8007784 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	6840      	ldr	r0, [r0, #4]
 8007782:	4718      	bx	r3
}
 8007784:	2000      	movs	r0, #0
 8007786:	4770      	bx	lr

08007788 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 8007788:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 800778a:	b138      	cbz	r0, 800779c <mbedtls_pk_debug+0x14>
 800778c:	6803      	ldr	r3, [r0, #0]
 800778e:	b12b      	cbz	r3, 800779c <mbedtls_pk_debug+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	b12b      	cbz	r3, 80077a0 <mbedtls_pk_debug+0x18>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8007794:	6840      	ldr	r0, [r0, #4]
 8007796:	4798      	blx	r3
    return( 0 );
 8007798:	2000      	movs	r0, #0
 800779a:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800779c:	4801      	ldr	r0, [pc, #4]	; (80077a4 <mbedtls_pk_debug+0x1c>)
 800779e:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <mbedtls_pk_debug+0x20>)
}
 80077a2:	bd08      	pop	{r3, pc}
 80077a4:	ffffc180 	.word	0xffffc180
 80077a8:	ffffc100 	.word	0xffffc100

080077ac <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80077ac:	b118      	cbz	r0, 80077b6 <mbedtls_pk_get_name+0xa>
 80077ae:	6803      	ldr	r3, [r0, #0]
 80077b0:	b10b      	cbz	r3, 80077b6 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 80077b2:	6858      	ldr	r0, [r3, #4]
 80077b4:	4770      	bx	lr
        return( "invalid PK" );
 80077b6:	4801      	ldr	r0, [pc, #4]	; (80077bc <mbedtls_pk_get_name+0x10>)
}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	0801360c 	.word	0x0801360c

080077c0 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80077c0:	b110      	cbz	r0, 80077c8 <mbedtls_pk_get_type+0x8>
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	b100      	cbz	r0, 80077c8 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 80077c6:	7800      	ldrb	r0, [r0, #0]
}
 80077c8:	4770      	bx	lr

080077ca <rsa_can_do>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 80077ca:	2801      	cmp	r0, #1
 80077cc:	d002      	beq.n	80077d4 <rsa_can_do+0xa>
 80077ce:	1f83      	subs	r3, r0, #6
 80077d0:	4258      	negs	r0, r3
 80077d2:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 80077d4:	4770      	bx	lr
	...

080077d8 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80077d8:	2301      	movs	r3, #1
    items->name = "rsa.N";
 80077da:	4a06      	ldr	r2, [pc, #24]	; (80077f4 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80077dc:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 80077de:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 80077e0:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80077e2:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 80077e6:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80077e8:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80077ea:	3014      	adds	r0, #20
    items->name = "rsa.E";
 80077ec:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80077ee:	6148      	str	r0, [r1, #20]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	08013648 	.word	0x08013648
 80077f8:	0801364e 	.word	0x0801364e

080077fc <rsa_free_wrap>:
{
 80077fc:	b510      	push	{r4, lr}
 80077fe:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8007800:	f000 ffd8 	bl	80087b4 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8007804:	4620      	mov	r0, r4
}
 8007806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800780a:	f007 bb11 	b.w	800ee30 <free>

0800780e <rsa_alloc_wrap>:
{
 800780e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8007810:	21ac      	movs	r1, #172	; 0xac
 8007812:	2001      	movs	r0, #1
 8007814:	f007 fad2 	bl	800edbc <calloc>
    if( ctx != NULL )
 8007818:	4604      	mov	r4, r0
 800781a:	b118      	cbz	r0, 8007824 <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 800781c:	2200      	movs	r2, #0
 800781e:	4611      	mov	r1, r2
 8007820:	f000 fb40 	bl	8007ea4 <mbedtls_rsa_init>
}
 8007824:	4620      	mov	r0, r4
 8007826:	bd10      	pop	{r4, pc}

08007828 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 8007828:	f000 bba6 	b.w	8007f78 <mbedtls_rsa_check_pub_priv>

0800782c <rsa_get_bitlen>:
{
 800782c:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 800782e:	f000 fb46 	bl	8007ebe <mbedtls_rsa_get_len>
}
 8007832:	00c0      	lsls	r0, r0, #3
 8007834:	bd08      	pop	{r3, pc}
	...

08007838 <rsa_encrypt_wrap>:
{
 8007838:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007840:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8007844:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007846:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007848:	4604      	mov	r4, r0
 800784a:	4688      	mov	r8, r1
 800784c:	4617      	mov	r7, r2
 800784e:	4699      	mov	r9, r3
    *olen = mbedtls_rsa_get_len( rsa );
 8007850:	f000 fb35 	bl	8007ebe <mbedtls_rsa_get_len>
    if( *olen > osize )
 8007854:	4550      	cmp	r0, sl
    *olen = mbedtls_rsa_get_len( rsa );
 8007856:	f8cb 0000 	str.w	r0, [fp]
    if( *olen > osize )
 800785a:	d80d      	bhi.n	8007878 <rsa_encrypt_wrap+0x40>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 800785c:	2300      	movs	r3, #0
 800785e:	4632      	mov	r2, r6
 8007860:	4629      	mov	r1, r5
 8007862:	4620      	mov	r0, r4
 8007864:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007868:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800786c:	970a      	str	r7, [sp, #40]	; 0x28
}
 800786e:	b001      	add	sp, #4
 8007870:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8007874:	f000 be08 	b.w	8008488 <mbedtls_rsa_pkcs1_encrypt>
}
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <rsa_encrypt_wrap+0x48>)
 800787a:	b001      	add	sp, #4
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	ffffbc00 	.word	0xffffbc00

08007884 <rsa_decrypt_wrap>:
{
 8007884:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800788a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800788e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007890:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007892:	4693      	mov	fp, r2
 8007894:	4604      	mov	r4, r0
 8007896:	4688      	mov	r8, r1
 8007898:	4699      	mov	r9, r3
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 800789a:	f000 fb10 	bl	8007ebe <mbedtls_rsa_get_len>
 800789e:	4558      	cmp	r0, fp
 80078a0:	d10f      	bne.n	80078c2 <rsa_decrypt_wrap+0x3e>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 80078a2:	2301      	movs	r3, #1
 80078a4:	4632      	mov	r2, r6
 80078a6:	4629      	mov	r1, r5
 80078a8:	4620      	mov	r0, r4
 80078aa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80078ae:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80078b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80078b6:	970a      	str	r7, [sp, #40]	; 0x28
}
 80078b8:	b001      	add	sp, #4
 80078ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 80078be:	f000 be79 	b.w	80085b4 <mbedtls_rsa_pkcs1_decrypt>
}
 80078c2:	4802      	ldr	r0, [pc, #8]	; (80078cc <rsa_decrypt_wrap+0x48>)
 80078c4:	b001      	add	sp, #4
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	bf00      	nop
 80078cc:	ffffbf80 	.word	0xffffbf80

080078d0 <rsa_sign_wrap>:
{
 80078d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80078d8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80078dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80078e0:	460f      	mov	r7, r1
 80078e2:	4691      	mov	r9, r2
 80078e4:	4698      	mov	r8, r3
 80078e6:	4604      	mov	r4, r0
    *sig_len = mbedtls_rsa_get_len( rsa );
 80078e8:	f000 fae9 	bl	8007ebe <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80078ec:	2301      	movs	r3, #1
    *sig_len = mbedtls_rsa_get_len( rsa );
 80078ee:	f8cb 0000 	str.w	r0, [fp]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80078f2:	4632      	mov	r2, r6
 80078f4:	4629      	mov	r1, r5
 80078f6:	4620      	mov	r0, r4
 80078f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80078fc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007900:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007904:	970a      	str	r7, [sp, #40]	; 0x28
}
 8007906:	b001      	add	sp, #4
 8007908:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 800790c:	f000 bec6 	b.w	800869c <mbedtls_rsa_pkcs1_sign>

08007910 <rsa_verify_wrap>:
{
 8007910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007914:	b085      	sub	sp, #20
 8007916:	4606      	mov	r6, r0
 8007918:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800791a:	460f      	mov	r7, r1
 800791c:	4691      	mov	r9, r2
 800791e:	4698      	mov	r8, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8007920:	f000 facd 	bl	8007ebe <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 8007924:	42a0      	cmp	r0, r4
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8007926:	4605      	mov	r5, r0
    if( sig_len < rsa_len )
 8007928:	d811      	bhi.n	800794e <rsa_verify_wrap+0x3e>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 800792a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800792c:	9303      	str	r3, [sp, #12]
 800792e:	2300      	movs	r3, #0
 8007930:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8007934:	461a      	mov	r2, r3
 8007936:	4619      	mov	r1, r3
 8007938:	4630      	mov	r0, r6
 800793a:	f000 ff2b 	bl	8008794 <mbedtls_rsa_pkcs1_verify>
 800793e:	b918      	cbnz	r0, 8007948 <rsa_verify_wrap+0x38>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <rsa_verify_wrap+0x44>)
 8007942:	42a5      	cmp	r5, r4
 8007944:	bf38      	it	cc
 8007946:	4618      	movcc	r0, r3
}
 8007948:	b005      	add	sp, #20
 800794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 800794e:	4802      	ldr	r0, [pc, #8]	; (8007958 <rsa_verify_wrap+0x48>)
 8007950:	e7fa      	b.n	8007948 <rsa_verify_wrap+0x38>
 8007952:	bf00      	nop
 8007954:	ffffc700 	.word	0xffffc700
 8007958:	ffffbc80 	.word	0xffffbc80

0800795c <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	b08a      	sub	sp, #40	; 0x28
 8007960:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8007962:	2330      	movs	r3, #48	; 0x30
 8007964:	aa09      	add	r2, sp, #36	; 0x24
{
 8007966:	4604      	mov	r4, r0
 8007968:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800796a:	f7fb fe70 	bl	800364e <mbedtls_asn1_get_tag>
 800796e:	b110      	cbz	r0, 8007976 <pk_get_rsapubkey+0x1a>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8007970:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8007974:	e005      	b.n	8007982 <pk_get_rsapubkey+0x26>
    if( *p + len != end )
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800797a:	4413      	add	r3, r2
 800797c:	429d      	cmp	r5, r3
 800797e:	d002      	beq.n	8007986 <pk_get_rsapubkey+0x2a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8007980:	4824      	ldr	r0, [pc, #144]	; (8007a14 <pk_get_rsapubkey+0xb8>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8007982:	b00a      	add	sp, #40	; 0x28
 8007984:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8007986:	2302      	movs	r3, #2
 8007988:	aa09      	add	r2, sp, #36	; 0x24
 800798a:	4629      	mov	r1, r5
 800798c:	4620      	mov	r0, r4
 800798e:	f7fb fe5e 	bl	800364e <mbedtls_asn1_get_tag>
 8007992:	2800      	cmp	r0, #0
 8007994:	d1ec      	bne.n	8007970 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 8007996:	9006      	str	r0, [sp, #24]
 8007998:	9005      	str	r0, [sp, #20]
 800799a:	9004      	str	r0, [sp, #16]
 800799c:	9003      	str	r0, [sp, #12]
 800799e:	9002      	str	r0, [sp, #8]
 80079a0:	9001      	str	r0, [sp, #4]
 80079a2:	9000      	str	r0, [sp, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a8:	6821      	ldr	r1, [r4, #0]
 80079aa:	4630      	mov	r0, r6
 80079ac:	f000 f9a0 	bl	8007cf0 <mbedtls_rsa_import_raw>
 80079b0:	b108      	cbz	r0, 80079b6 <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80079b2:	4819      	ldr	r0, [pc, #100]	; (8007a18 <pk_get_rsapubkey+0xbc>)
 80079b4:	e7e5      	b.n	8007982 <pk_get_rsapubkey+0x26>
    *p += len;
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ba:	4413      	add	r3, r2
 80079bc:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80079be:	aa09      	add	r2, sp, #36	; 0x24
 80079c0:	2302      	movs	r3, #2
 80079c2:	4629      	mov	r1, r5
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7fb fe42 	bl	800364e <mbedtls_asn1_get_tag>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d1d0      	bne.n	8007970 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	9306      	str	r3, [sp, #24]
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	9004      	str	r0, [sp, #16]
 80079d8:	9003      	str	r0, [sp, #12]
 80079da:	9002      	str	r0, [sp, #8]
 80079dc:	9001      	str	r0, [sp, #4]
 80079de:	9000      	str	r0, [sp, #0]
 80079e0:	4603      	mov	r3, r0
 80079e2:	4602      	mov	r2, r0
 80079e4:	4601      	mov	r1, r0
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 f982 	bl	8007cf0 <mbedtls_rsa_import_raw>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d1e0      	bne.n	80079b2 <pk_get_rsapubkey+0x56>
    *p += len;
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f4:	4413      	add	r3, r2
 80079f6:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80079f8:	4630      	mov	r0, r6
 80079fa:	f000 f9bb 	bl	8007d74 <mbedtls_rsa_complete>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d1d7      	bne.n	80079b2 <pk_get_rsapubkey+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8007a02:	4630      	mov	r0, r6
 8007a04:	f000 fa5e 	bl	8007ec4 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d1d2      	bne.n	80079b2 <pk_get_rsapubkey+0x56>
    if( *p != end )
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	d0b7      	beq.n	8007982 <pk_get_rsapubkey+0x26>
 8007a12:	e7b5      	b.n	8007980 <pk_get_rsapubkey+0x24>
 8007a14:	ffffc49a 	.word	0xffffc49a
 8007a18:	ffffc500 	.word	0xffffc500

08007a1c <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8007a1c:	b530      	push	{r4, r5, lr}
 8007a1e:	4615      	mov	r5, r2
 8007a20:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8007a2a:	aa01      	add	r2, sp, #4
{
 8007a2c:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8007a2e:	f7fb fed3 	bl	80037d8 <mbedtls_asn1_get_alg>
 8007a32:	b118      	cbz	r0, 8007a3c <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8007a34:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
    }

    return( 0 );
}
 8007a38:	b005      	add	sp, #20
 8007a3a:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	a801      	add	r0, sp, #4
 8007a40:	f7ff fcdc 	bl	80073fc <mbedtls_oid_get_pk_alg>
 8007a44:	b960      	cbnz	r0, 8007a60 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8007a46:	782b      	ldrb	r3, [r5, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d1f5      	bne.n	8007a38 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8007a4c:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8007a4e:	2b05      	cmp	r3, #5
 8007a50:	d000      	beq.n	8007a54 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8007a52:	b93b      	cbnz	r3, 8007a64 <pk_get_pk_alg+0x48>
 8007a54:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <pk_get_pk_alg+0x4c>)
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	bf18      	it	ne
 8007a5c:	4618      	movne	r0, r3
 8007a5e:	e7eb      	b.n	8007a38 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <pk_get_pk_alg+0x50>)
 8007a62:	e7e9      	b.n	8007a38 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8007a64:	4800      	ldr	r0, [pc, #0]	; (8007a68 <pk_get_pk_alg+0x4c>)
 8007a66:	e7e7      	b.n	8007a38 <pk_get_pk_alg+0x1c>
 8007a68:	ffffc580 	.word	0xffffc580
 8007a6c:	ffffc380 	.word	0xffffc380

08007a70 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8007a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a72:	b087      	sub	sp, #28
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8007a74:	2300      	movs	r3, #0
{
 8007a76:	4617      	mov	r7, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8007a78:	f88d 3007 	strb.w	r3, [sp, #7]
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8007a7c:	aa02      	add	r2, sp, #8
 8007a7e:	2330      	movs	r3, #48	; 0x30
{
 8007a80:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8007a82:	f7fb fde4 	bl	800364e <mbedtls_asn1_get_tag>
 8007a86:	b120      	cbz	r0, 8007a92 <mbedtls_pk_parse_subpubkey+0x22>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8007a88:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	b007      	add	sp, #28
 8007a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = *p + len;
 8007a92:	9b02      	ldr	r3, [sp, #8]
 8007a94:	6835      	ldr	r5, [r6, #0]
 8007a96:	441d      	add	r5, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8007a98:	f10d 0207 	add.w	r2, sp, #7
 8007a9c:	ab03      	add	r3, sp, #12
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ffbb 	bl	8007a1c <pk_get_pk_alg>
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d1ef      	bne.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8007aac:	aa02      	add	r2, sp, #8
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7fb fe3f 	bl	8003734 <mbedtls_asn1_get_bitstring_null>
 8007ab6:	b110      	cbz	r0, 8007abe <mbedtls_pk_parse_subpubkey+0x4e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8007ab8:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 8007abc:	e7e6      	b.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
    if( *p + len != end )
 8007abe:	6833      	ldr	r3, [r6, #0]
 8007ac0:	9a02      	ldr	r2, [sp, #8]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	d11b      	bne.n	8007b00 <mbedtls_pk_parse_subpubkey+0x90>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8007ac8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007acc:	f7ff fd84 	bl	80075d8 <mbedtls_pk_info_from_type>
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	b1b8      	cbz	r0, 8007b04 <mbedtls_pk_parse_subpubkey+0x94>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff fd87 	bl	80075e8 <mbedtls_pk_setup>
 8007ada:	4604      	mov	r4, r0
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d1d5      	bne.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
    if( pk_alg == MBEDTLS_PK_RSA )
 8007ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10f      	bne.n	8007b08 <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4629      	mov	r1, r5
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ff35 	bl	800795c <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 8007af2:	4604      	mov	r4, r0
 8007af4:	b948      	cbnz	r0, 8007b0a <mbedtls_pk_parse_subpubkey+0x9a>
 8007af6:	6833      	ldr	r3, [r6, #0]
 8007af8:	429d      	cmp	r5, r3
 8007afa:	d0c7      	beq.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 8007afc:	4c05      	ldr	r4, [pc, #20]	; (8007b14 <mbedtls_pk_parse_subpubkey+0xa4>)
 8007afe:	e004      	b.n	8007b0a <mbedtls_pk_parse_subpubkey+0x9a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8007b00:	4c04      	ldr	r4, [pc, #16]	; (8007b14 <mbedtls_pk_parse_subpubkey+0xa4>)
 8007b02:	e7c3      	b.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8007b04:	4c04      	ldr	r4, [pc, #16]	; (8007b18 <mbedtls_pk_parse_subpubkey+0xa8>)
 8007b06:	e7c1      	b.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8007b08:	4c03      	ldr	r4, [pc, #12]	; (8007b18 <mbedtls_pk_parse_subpubkey+0xa8>)
        mbedtls_pk_free( pk );
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	f7ff fd53 	bl	80075b6 <mbedtls_pk_free>
 8007b10:	e7bc      	b.n	8007a8c <mbedtls_pk_parse_subpubkey+0x1c>
 8007b12:	bf00      	nop
 8007b14:	ffffc49a 	.word	0xffffc49a
 8007b18:	ffffc380 	.word	0xffffc380

08007b1c <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8007b1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 8007b22:	2300      	movs	r3, #0
{
 8007b24:	460f      	mov	r7, r1
 8007b26:	4691      	mov	r9, r2
 8007b28:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 8007b2a:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 8007b2c:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8007b2e:	4604      	mov	r4, r0
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d061      	beq.n	8007bf8 <rsa_rsassa_pkcs1_v15_encode+0xdc>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8007b34:	f7ff fa86 	bl	8007044 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8007b38:	4607      	mov	r7, r0
 8007b3a:	b920      	cbnz	r0, 8007b46 <rsa_rsassa_pkcs1_v15_encode+0x2a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8007b3c:	4c3d      	ldr	r4, [pc, #244]	; (8007c34 <rsa_rsassa_pkcs1_v15_encode+0x118>)
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 8007b3e:	4620      	mov	r0, r4
 8007b40:	b002      	add	sp, #8
 8007b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8007b46:	4620      	mov	r0, r4
 8007b48:	466a      	mov	r2, sp
 8007b4a:	a901      	add	r1, sp, #4
 8007b4c:	f7ff fc70 	bl	8007430 <mbedtls_oid_get_oid_by_md>
 8007b50:	4604      	mov	r4, r0
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d1f2      	bne.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 8007b56:	4638      	mov	r0, r7
 8007b58:	f7ff fba2 	bl	80072a0 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8007b5c:	9f00      	ldr	r7, [sp, #0]
 8007b5e:	19c3      	adds	r3, r0, r7
 8007b60:	f103 0208 	add.w	r2, r3, #8
 8007b64:	2a7f      	cmp	r2, #127	; 0x7f
        hashlen = mbedtls_md_get_size( md_info );
 8007b66:	4680      	mov	r8, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8007b68:	d8e8      	bhi.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
 8007b6a:	f110 010a 	adds.w	r1, r0, #10
 8007b6e:	d2e5      	bcs.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
            10 + hashlen + oid_size <  10 + hashlen )
 8007b70:	f103 020a 	add.w	r2, r3, #10
            10 + hashlen            <  hashlen      ||
 8007b74:	4291      	cmp	r1, r2
 8007b76:	d8e1      	bhi.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < 10 + hashlen + oid_size )
 8007b78:	4295      	cmp	r5, r2
 8007b7a:	d3df      	bcc.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= 10 + hashlen + oid_size;
 8007b7c:	f1a5 070a 	sub.w	r7, r5, #10
 8007b80:	1aff      	subs	r7, r7, r3
    if( nb_pad < 3 + 8 )
 8007b82:	2f0a      	cmp	r7, #10
 8007b84:	d9da      	bls.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 8007b86:	46b2      	mov	sl, r6
    nb_pad -= 3;
 8007b88:	3f03      	subs	r7, #3
    *p++ = 0;
 8007b8a:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8007b8e:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8007b90:	463a      	mov	r2, r7
    *p++ = MBEDTLS_RSA_SIGN;
 8007b92:	7073      	strb	r3, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8007b94:	21ff      	movs	r1, #255	; 0xff
 8007b96:	4650      	mov	r0, sl
 8007b98:	f007 f986 	bl	800eea8 <memset>
    p += nb_pad;
 8007b9c:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8007ba0:	2130      	movs	r1, #48	; 0x30
    *p++ = 0;
 8007ba2:	f80a 4007 	strb.w	r4, [sl, r7]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8007ba6:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8007ba8:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8007baa:	70d9      	strb	r1, [r3, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8007bac:	f107 0208 	add.w	r2, r7, #8
 8007bb0:	4442      	add	r2, r8
 8007bb2:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
 8007bb4:	b2fa      	uxtb	r2, r7
 8007bb6:	1d11      	adds	r1, r2, #4
    *p++ = (unsigned char) oid_size;
 8007bb8:	f103 0a07 	add.w	sl, r3, #7
    *p++ = (unsigned char)( 0x04 + oid_size );
 8007bbc:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8007bbe:	2106      	movs	r1, #6
 8007bc0:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8007bc2:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8007bc4:	9901      	ldr	r1, [sp, #4]
 8007bc6:	463a      	mov	r2, r7
 8007bc8:	4650      	mov	r0, sl
 8007bca:	f007 f948 	bl	800ee5e <memcpy>
    p += oid_size;
 8007bce:	eb0a 0207 	add.w	r2, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8007bd2:	2305      	movs	r3, #5
 8007bd4:	f80a 3007 	strb.w	r3, [sl, r7]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8007bd8:	2304      	movs	r3, #4
 8007bda:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	f882 8003 	strb.w	r8, [r2, #3]
    *p++ = 0x00;
 8007be2:	7054      	strb	r4, [r2, #1]
    memcpy( p, hash, hashlen );
 8007be4:	4649      	mov	r1, r9
 8007be6:	4642      	mov	r2, r8
 8007be8:	4618      	mov	r0, r3
 8007bea:	f007 f938 	bl	800ee5e <memcpy>
    if( p != dst + dst_len )
 8007bee:	4435      	add	r5, r6
    p += hashlen;
 8007bf0:	4480      	add	r8, r0
    if( p != dst + dst_len )
 8007bf2:	4545      	cmp	r5, r8
 8007bf4:	d0a3      	beq.n	8007b3e <rsa_rsassa_pkcs1_v15_encode+0x22>
 8007bf6:	e01a      	b.n	8007c2e <rsa_rsassa_pkcs1_v15_encode+0x112>
        if( nb_pad < hashlen )
 8007bf8:	428d      	cmp	r5, r1
 8007bfa:	d39f      	bcc.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= hashlen;
 8007bfc:	1a6d      	subs	r5, r5, r1
    if( nb_pad < 3 + 8 )
 8007bfe:	2d0a      	cmp	r5, #10
 8007c00:	d99c      	bls.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 8007c02:	4633      	mov	r3, r6
    nb_pad -= 3;
 8007c04:	3d03      	subs	r5, #3
    *p++ = 0;
 8007c06:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	7072      	strb	r2, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8007c0e:	21ff      	movs	r1, #255	; 0xff
 8007c10:	462a      	mov	r2, r5
 8007c12:	4618      	mov	r0, r3
 8007c14:	f007 f948 	bl	800eea8 <memset>
 8007c18:	4603      	mov	r3, r0
    p += nb_pad;
 8007c1a:	4428      	add	r0, r5
    *p++ = 0;
 8007c1c:	555c      	strb	r4, [r3, r5]
        memcpy( p, hash, hashlen );
 8007c1e:	463a      	mov	r2, r7
 8007c20:	4649      	mov	r1, r9
 8007c22:	3001      	adds	r0, #1
 8007c24:	f007 f91b 	bl	800ee5e <memcpy>
        return( 0 );
 8007c28:	e789      	b.n	8007b3e <rsa_rsassa_pkcs1_v15_encode+0x22>
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8007c2a:	7034      	strb	r4, [r6, #0]
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	42b5      	cmp	r5, r6
 8007c30:	d1fb      	bne.n	8007c2a <rsa_rsassa_pkcs1_v15_encode+0x10e>
 8007c32:	e783      	b.n	8007b3c <rsa_rsassa_pkcs1_v15_encode+0x20>
 8007c34:	ffffbf80 	.word	0xffffbf80

08007c38 <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8007c3a:	f100 0508 	add.w	r5, r0, #8
 8007c3e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8007c40:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8007c42:	4628      	mov	r0, r5
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8007c44:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8007c46:	f7fc f982 	bl	8003f4e <mbedtls_mpi_size>
 8007c4a:	4287      	cmp	r7, r0
 8007c4c:	d001      	beq.n	8007c52 <rsa_check_context.isra.0+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8007c4e:	4827      	ldr	r0, [pc, #156]	; (8007cec <rsa_check_context.isra.0+0xb4>)
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8007c52:	6863      	ldr	r3, [r4, #4]
 8007c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c58:	d8f9      	bhi.n	8007c4e <rsa_check_context.isra.0+0x16>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7fc fb3e 	bl	80042de <mbedtls_mpi_cmp_int>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	ddf3      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8007c66:	2100      	movs	r1, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7fc f926 	bl	8003eba <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0ed      	beq.n	8007c4e <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 8007c72:	b9f6      	cbnz	r6, 8007cb2 <rsa_check_context.isra.0+0x7a>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8007c74:	2100      	movs	r1, #0
 8007c76:	f104 0014 	add.w	r0, r4, #20
 8007c7a:	f7fc fb30 	bl	80042de <mbedtls_mpi_cmp_int>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	dde5      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 8007c82:	b1a6      	cbz	r6, 8007cae <rsa_check_context.isra.0+0x76>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8007c84:	2100      	movs	r1, #0
 8007c86:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8007c8a:	f7fc fb28 	bl	80042de <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	dddd      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8007c92:	2100      	movs	r1, #0
 8007c94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c98:	f7fc fb21 	bl	80042de <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	ddd6      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ca6:	f7fc fb1a 	bl	80042de <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8007caa:	2800      	cmp	r0, #0
 8007cac:	ddcf      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
    return( 0 );
 8007cae:	2000      	movs	r0, #0
 8007cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8007cb2:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7fc fb10 	bl	80042de <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	ddc5      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f7fc f8f8 	bl	8003eba <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d0bf      	beq.n	8007c4e <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8007cce:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f7fc fb02 	bl	80042de <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	ddb7      	ble.n	8007c4e <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f7fc f8ea 	bl	8003eba <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d1c4      	bne.n	8007c74 <rsa_check_context.isra.0+0x3c>
 8007cea:	e7b0      	b.n	8007c4e <rsa_check_context.isra.0+0x16>
 8007cec:	ffffbf80 	.word	0xffffbf80

08007cf0 <mbedtls_rsa_import_raw>:
{
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cf6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4698      	mov	r8, r3
    if( N != NULL )
 8007cfe:	b149      	cbz	r1, 8007d14 <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8007d00:	f100 0908 	add.w	r9, r0, #8
 8007d04:	4648      	mov	r0, r9
 8007d06:	f7fc f928 	bl	8003f5a <mbedtls_mpi_read_binary>
 8007d0a:	b9a0      	cbnz	r0, 8007d36 <mbedtls_rsa_import_raw+0x46>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8007d0c:	4648      	mov	r0, r9
 8007d0e:	f7fc f91e 	bl	8003f4e <mbedtls_mpi_size>
 8007d12:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 8007d14:	f1b8 0f00 	cmp.w	r8, #0
 8007d18:	d105      	bne.n	8007d26 <mbedtls_rsa_import_raw+0x36>
    if( Q != NULL )
 8007d1a:	b987      	cbnz	r7, 8007d3e <mbedtls_rsa_import_raw+0x4e>
    if( D != NULL )
 8007d1c:	b9c6      	cbnz	r6, 8007d50 <mbedtls_rsa_import_raw+0x60>
    if( E != NULL )
 8007d1e:	bb05      	cbnz	r5, 8007d62 <mbedtls_rsa_import_raw+0x72>
    return( 0 );
 8007d20:	2000      	movs	r0, #0
 8007d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 8007d26:	9a08      	ldr	r2, [sp, #32]
 8007d28:	4641      	mov	r1, r8
 8007d2a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8007d2e:	f7fc f914 	bl	8003f5a <mbedtls_mpi_read_binary>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d0f1      	beq.n	8007d1a <mbedtls_rsa_import_raw+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8007d36:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8007d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 8007d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d40:	4639      	mov	r1, r7
 8007d42:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007d46:	f7fc f908 	bl	8003f5a <mbedtls_mpi_read_binary>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d1f3      	bne.n	8007d36 <mbedtls_rsa_import_raw+0x46>
 8007d4e:	e7e5      	b.n	8007d1c <mbedtls_rsa_import_raw+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 8007d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d52:	4631      	mov	r1, r6
 8007d54:	f104 0020 	add.w	r0, r4, #32
 8007d58:	f7fc f8ff 	bl	8003f5a <mbedtls_mpi_read_binary>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d1ea      	bne.n	8007d36 <mbedtls_rsa_import_raw+0x46>
 8007d60:	e7dd      	b.n	8007d1e <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 8007d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d64:	4629      	mov	r1, r5
 8007d66:	f104 0014 	add.w	r0, r4, #20
 8007d6a:	f7fc f8f6 	bl	8003f5a <mbedtls_mpi_read_binary>
    if( ret != 0 )
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0d6      	beq.n	8007d20 <mbedtls_rsa_import_raw+0x30>
 8007d72:	e7e0      	b.n	8007d36 <mbedtls_rsa_import_raw+0x46>

08007d74 <mbedtls_rsa_complete>:
{
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8007d78:	f100 0908 	add.w	r9, r0, #8
{
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	4604      	mov	r4, r0
    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8007d80:	2100      	movs	r1, #0
 8007d82:	4648      	mov	r0, r9
 8007d84:	f7fc faab 	bl	80042de <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8007d88:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8007d8c:	2100      	movs	r1, #0
    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8007d8e:	4683      	mov	fp, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7fc faa4 	bl	80042de <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8007d96:	f104 0738 	add.w	r7, r4, #56	; 0x38
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8007d9a:	9003      	str	r0, [sp, #12]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f7fc fa9d 	bl	80042de <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8007da4:	f104 0820 	add.w	r8, r4, #32
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8007da8:	9002      	str	r0, [sp, #8]
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8007daa:	2100      	movs	r1, #0
 8007dac:	4640      	mov	r0, r8
 8007dae:	f7fc fa96 	bl	80042de <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8007db2:	f104 0a14 	add.w	sl, r4, #20
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8007db6:	4605      	mov	r5, r0
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8007db8:	2100      	movs	r1, #0
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f7fc fa8f 	bl	80042de <mbedtls_mpi_cmp_int>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8007dc0:	9a03      	ldr	r2, [sp, #12]
 8007dc2:	9b02      	ldr	r3, [sp, #8]
 8007dc4:	b16a      	cbz	r2, 8007de2 <mbedtls_rsa_complete+0x6e>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d065      	beq.n	8007e96 <mbedtls_rsa_complete+0x122>
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	d05e      	beq.n	8007e8c <mbedtls_rsa_complete+0x118>
 8007dce:	1c01      	adds	r1, r0, #0
 8007dd0:	bf18      	it	ne
 8007dd2:	2101      	movne	r1, #1
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8007dd4:	f1bb 0f00 	cmp.w	fp, #0
 8007dd8:	d101      	bne.n	8007dde <mbedtls_rsa_complete+0x6a>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8007dda:	b103      	cbz	r3, 8007dde <mbedtls_rsa_complete+0x6a>
 8007ddc:	b15d      	cbz	r5, 8007df6 <mbedtls_rsa_complete+0x82>
 8007dde:	2500      	movs	r5, #0
 8007de0:	e00c      	b.n	8007dfc <mbedtls_rsa_complete+0x88>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8007de2:	f1bb 0f00 	cmp.w	fp, #0
 8007de6:	d003      	beq.n	8007df0 <mbedtls_rsa_complete+0x7c>
 8007de8:	b913      	cbnz	r3, 8007df0 <mbedtls_rsa_complete+0x7c>
 8007dea:	b1d5      	cbz	r5, 8007e22 <mbedtls_rsa_complete+0xae>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d133      	bne.n	8007e58 <mbedtls_rsa_complete+0xe4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8007df0:	482b      	ldr	r0, [pc, #172]	; (8007ea0 <mbedtls_rsa_complete+0x12c>)
 8007df2:	e013      	b.n	8007e1c <mbedtls_rsa_complete+0xa8>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8007df4:	4629      	mov	r1, r5
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8007df6:	1c05      	adds	r5, r0, #0
 8007df8:	bf18      	it	ne
 8007dfa:	2501      	movne	r5, #1
    const int is_priv = n_missing || pq_missing || d_missing;
 8007dfc:	b9d1      	cbnz	r1, 8007e34 <mbedtls_rsa_complete+0xc0>
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	d0f6      	beq.n	8007df0 <mbedtls_rsa_complete+0x7c>
    if( !have_N && have_P && have_Q )
 8007e02:	f1bb 0f00 	cmp.w	fp, #0
 8007e06:	d11b      	bne.n	8007e40 <mbedtls_rsa_complete+0xcc>
 8007e08:	b1d2      	cbz	r2, 8007e40 <mbedtls_rsa_complete+0xcc>
 8007e0a:	b1c3      	cbz	r3, 8007e3e <mbedtls_rsa_complete+0xca>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8007e0c:	463a      	mov	r2, r7
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4648      	mov	r0, r9
 8007e12:	f7fc fb87 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8007e16:	b1d0      	cbz	r0, 8007e4e <mbedtls_rsa_complete+0xda>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8007e18:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8007e1c:	b005      	add	sp, #20
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d0e4      	beq.n	8007df0 <mbedtls_rsa_complete+0x7c>
 8007e26:	4629      	mov	r1, r5
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8007e28:	4620      	mov	r0, r4
}
 8007e2a:	b005      	add	sp, #20
 8007e2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8007e30:	f7ff bf02 	b.w	8007c38 <rsa_check_context.isra.0>
    if( !have_N && have_P && have_Q )
 8007e34:	f1bb 0f00 	cmp.w	fp, #0
 8007e38:	d101      	bne.n	8007e3e <mbedtls_rsa_complete+0xca>
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	d1e5      	bne.n	8007e0a <mbedtls_rsa_complete+0x96>
    else if( d_missing )
 8007e3e:	b1a5      	cbz	r5, 8007e6a <mbedtls_rsa_complete+0xf6>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8007e40:	4643      	mov	r3, r8
 8007e42:	4652      	mov	r2, sl
 8007e44:	4639      	mov	r1, r7
 8007e46:	4630      	mov	r0, r6
 8007e48:	f000 fdde 	bl	8008a08 <mbedtls_rsa_deduce_private_exponent>
 8007e4c:	e00b      	b.n	8007e66 <mbedtls_rsa_complete+0xf2>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8007e4e:	4648      	mov	r0, r9
 8007e50:	f7fc f87d 	bl	8003f4e <mbedtls_mpi_size>
 8007e54:	6060      	str	r0, [r4, #4]
 8007e56:	e7f2      	b.n	8007e3e <mbedtls_rsa_complete+0xca>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 8007e58:	9700      	str	r7, [sp, #0]
 8007e5a:	4633      	mov	r3, r6
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	4651      	mov	r1, sl
 8007e60:	4648      	mov	r0, r9
 8007e62:	f000 fcdf 	bl	8008824 <mbedtls_rsa_deduce_primes>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d1d6      	bne.n	8007e18 <mbedtls_rsa_complete+0xa4>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8007e6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4642      	mov	r2, r8
 8007e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 ff6a 	bl	8008d58 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d1c7      	bne.n	8007e18 <mbedtls_rsa_complete+0xa4>
 8007e88:	2101      	movs	r1, #1
 8007e8a:	e7cd      	b.n	8007e28 <mbedtls_rsa_complete+0xb4>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8007e8c:	f1bb 0f00 	cmp.w	fp, #0
 8007e90:	d1b0      	bne.n	8007df4 <mbedtls_rsa_complete+0x80>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8007e92:	4659      	mov	r1, fp
 8007e94:	e7a1      	b.n	8007dda <mbedtls_rsa_complete+0x66>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8007e96:	f1bb 0f00 	cmp.w	fp, #0
 8007e9a:	d1a9      	bne.n	8007df0 <mbedtls_rsa_complete+0x7c>
    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	e79e      	b.n	8007dde <mbedtls_rsa_complete+0x6a>
 8007ea0:	ffffbf80 	.word	0xffffbf80

08007ea4 <mbedtls_rsa_init>:
{
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	460e      	mov	r6, r1
 8007eaa:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8007eac:	2100      	movs	r1, #0
 8007eae:	22ac      	movs	r2, #172	; 0xac
 8007eb0:	f006 fffa 	bl	800eea8 <memset>
    ctx->padding = padding;
 8007eb4:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 8007eb8:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}

08007ebe <mbedtls_rsa_get_len>:
}
 8007ebe:	6840      	ldr	r0, [r0, #4]
 8007ec0:	4770      	bx	lr
	...

08007ec4 <mbedtls_rsa_check_pubkey>:
{
 8007ec4:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8007ec6:	2100      	movs	r1, #0
{
 8007ec8:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8007eca:	f7ff feb5 	bl	8007c38 <rsa_check_context.isra.0>
 8007ece:	4605      	mov	r5, r0
 8007ed0:	b9b8      	cbnz	r0, 8007f02 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8007ed2:	f104 0608 	add.w	r6, r4, #8
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7fc f817 	bl	8003f0a <mbedtls_mpi_bitlen>
 8007edc:	287f      	cmp	r0, #127	; 0x7f
 8007ede:	d910      	bls.n	8007f02 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8007ee0:	3414      	adds	r4, #20
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7fb ffe8 	bl	8003eba <mbedtls_mpi_get_bit>
 8007eea:	b150      	cbz	r0, 8007f02 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7fc f80c 	bl	8003f0a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8007ef2:	2801      	cmp	r0, #1
 8007ef4:	d905      	bls.n	8007f02 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7fc f9aa 	bl	8004252 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8007efe:	2800      	cmp	r0, #0
 8007f00:	db00      	blt.n	8007f04 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8007f02:	4d01      	ldr	r5, [pc, #4]	; (8007f08 <mbedtls_rsa_check_pubkey+0x44>)
}
 8007f04:	4628      	mov	r0, r5
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	ffffbe00 	.word	0xffffbe00

08007f0c <mbedtls_rsa_check_privkey>:
{
 8007f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8007f12:	f7ff ffd7 	bl	8007ec4 <mbedtls_rsa_check_pubkey>
 8007f16:	b110      	cbz	r0, 8007f1e <mbedtls_rsa_check_privkey+0x12>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8007f18:	4816      	ldr	r0, [pc, #88]	; (8007f74 <mbedtls_rsa_check_privkey+0x68>)
}
 8007f1a:	b005      	add	sp, #20
 8007f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7ff fe89 	bl	8007c38 <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d1f6      	bne.n	8007f18 <mbedtls_rsa_check_privkey+0xc>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8007f2a:	f104 0314 	add.w	r3, r4, #20
 8007f2e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8007f32:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8007f36:	f104 0720 	add.w	r7, r4, #32
 8007f3a:	9002      	str	r0, [sp, #8]
 8007f3c:	9001      	str	r0, [sp, #4]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	4629      	mov	r1, r5
 8007f46:	f104 0008 	add.w	r0, r4, #8
 8007f4a:	f000 fe3f 	bl	8008bcc <mbedtls_rsa_validate_params>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1e2      	bne.n	8007f18 <mbedtls_rsa_check_privkey+0xc>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8007f52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	463a      	mov	r2, r7
 8007f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 fdac 	bl	8008ac4 <mbedtls_rsa_validate_crt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0d4      	beq.n	8007f1a <mbedtls_rsa_check_privkey+0xe>
 8007f70:	e7d2      	b.n	8007f18 <mbedtls_rsa_check_privkey+0xc>
 8007f72:	bf00      	nop
 8007f74:	ffffbe00 	.word	0xffffbe00

08007f78 <mbedtls_rsa_check_pub_priv>:
{
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8007f7e:	f7ff ffa1 	bl	8007ec4 <mbedtls_rsa_check_pubkey>
 8007f82:	b988      	cbnz	r0, 8007fa8 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7ff ffc1 	bl	8007f0c <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8007f8a:	b968      	cbnz	r0, 8007fa8 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8007f8c:	f104 0108 	add.w	r1, r4, #8
 8007f90:	f105 0008 	add.w	r0, r5, #8
 8007f94:	f7fc f95d 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 8007f98:	b930      	cbnz	r0, 8007fa8 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8007f9a:	f104 0114 	add.w	r1, r4, #20
 8007f9e:	f105 0014 	add.w	r0, r5, #20
 8007fa2:	f7fc f956 	bl	8004252 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8007fa6:	b100      	cbz	r0, 8007faa <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8007fa8:	4800      	ldr	r0, [pc, #0]	; (8007fac <mbedtls_rsa_check_pub_priv+0x34>)
}
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	ffffbe00 	.word	0xffffbe00

08007fb0 <mbedtls_rsa_public>:
{
 8007fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	b087      	sub	sp, #28
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8007fb6:	2100      	movs	r1, #0
{
 8007fb8:	4605      	mov	r5, r0
 8007fba:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8007fbc:	f7ff fe3c 	bl	8007c38 <rsa_check_context.isra.0>
 8007fc0:	bb80      	cbnz	r0, 8008024 <mbedtls_rsa_public+0x74>
    mbedtls_mpi_init( &T );
 8007fc2:	a803      	add	r0, sp, #12
 8007fc4:	f7fb fee9 	bl	8003d9a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8007fc8:	4621      	mov	r1, r4
 8007fca:	686a      	ldr	r2, [r5, #4]
 8007fcc:	a803      	add	r0, sp, #12
 8007fce:	f7fb ffc4 	bl	8003f5a <mbedtls_mpi_read_binary>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	b9d0      	cbnz	r0, 800800c <mbedtls_rsa_public+0x5c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8007fd6:	f105 0408 	add.w	r4, r5, #8
 8007fda:	4621      	mov	r1, r4
 8007fdc:	a803      	add	r0, sp, #12
 8007fde:	f7fc f938 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	da1b      	bge.n	800801e <mbedtls_rsa_public+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8007fe6:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8007fea:	a903      	add	r1, sp, #12
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	f105 0214 	add.w	r2, r5, #20
 8007ff2:	4623      	mov	r3, r4
 8007ff4:	4608      	mov	r0, r1
    olen = ctx->len;
 8007ff6:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8007ff8:	f7fc fcf6 	bl	80049e8 <mbedtls_mpi_exp_mod>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	b928      	cbnz	r0, 800800c <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8008000:	463a      	mov	r2, r7
 8008002:	4631      	mov	r1, r6
 8008004:	a803      	add	r0, sp, #12
 8008006:	f7fb ffde 	bl	8003fc6 <mbedtls_mpi_write_binary>
 800800a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 800800c:	a803      	add	r0, sp, #12
 800800e:	f7fb fecb 	bl	8003da8 <mbedtls_mpi_free>
    if( ret != 0 )
 8008012:	b10c      	cbz	r4, 8008018 <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8008014:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 8008018:	4620      	mov	r0, r4
 800801a:	b007      	add	sp, #28
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800801e:	f06f 0403 	mvn.w	r4, #3
 8008022:	e7f3      	b.n	800800c <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008024:	4c00      	ldr	r4, [pc, #0]	; (8008028 <mbedtls_rsa_public+0x78>)
 8008026:	e7f7      	b.n	8008018 <mbedtls_rsa_public+0x68>
 8008028:	ffffbf80 	.word	0xffffbf80

0800802c <mbedtls_rsa_private>:
{
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	460e      	mov	r6, r1
 8008032:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
 8008034:	2101      	movs	r1, #1
{
 8008036:	4604      	mov	r4, r0
 8008038:	4692      	mov	sl, r2
 800803a:	461d      	mov	r5, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
 800803c:	f7ff fdfc 	bl	8007c38 <rsa_check_context.isra.0>
 8008040:	2800      	cmp	r0, #0
 8008042:	f040 81a7 	bne.w	8008394 <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
 8008046:	a804      	add	r0, sp, #16
 8008048:	f7fb fea7 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 800804c:	a807      	add	r0, sp, #28
 800804e:	f7fb fea4 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8008052:	a80a      	add	r0, sp, #40	; 0x28
 8008054:	f7fb fea1 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8008058:	a80d      	add	r0, sp, #52	; 0x34
 800805a:	f7fb fe9e 	bl	8003d9a <mbedtls_mpi_init>
    if( f_rng != NULL )
 800805e:	b12e      	cbz	r6, 800806c <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
 8008060:	a816      	add	r0, sp, #88	; 0x58
 8008062:	f7fb fe9a 	bl	8003d9a <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8008066:	a819      	add	r0, sp, #100	; 0x64
 8008068:	f7fb fe97 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 800806c:	a810      	add	r0, sp, #64	; 0x40
 800806e:	f7fb fe94 	bl	8003d9a <mbedtls_mpi_init>
 8008072:	a813      	add	r0, sp, #76	; 0x4c
 8008074:	f7fb fe91 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 8008078:	a81c      	add	r0, sp, #112	; 0x70
 800807a:	f7fb fe8e 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 800807e:	a81f      	add	r0, sp, #124	; 0x7c
 8008080:	f7fb fe8b 	bl	8003d9a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8008084:	6862      	ldr	r2, [r4, #4]
 8008086:	4629      	mov	r1, r5
 8008088:	a804      	add	r0, sp, #16
 800808a:	f7fb ff66 	bl	8003f5a <mbedtls_mpi_read_binary>
 800808e:	4603      	mov	r3, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	f040 814d 	bne.w	8008330 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8008096:	f104 0508 	add.w	r5, r4, #8
 800809a:	4629      	mov	r1, r5
 800809c:	a804      	add	r0, sp, #16
 800809e:	f7fc f8d8 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f280 816f 	bge.w	8008386 <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80080a8:	a904      	add	r1, sp, #16
 80080aa:	a81c      	add	r0, sp, #112	; 0x70
 80080ac:	f7fb febf 	bl	8003e2e <mbedtls_mpi_copy>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f040 813c 	bne.w	8008330 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
 80080b8:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 80080bc:	f104 0850 	add.w	r8, r4, #80	; 0x50
    if( f_rng != NULL )
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	f000 8090 	beq.w	80081e6 <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
 80080c6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80ee 	beq.w	80082ac <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 80080d0:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 80080d4:	463a      	mov	r2, r7
 80080d6:	4639      	mov	r1, r7
 80080d8:	4638      	mov	r0, r7
 80080da:	f7fc fa23 	bl	8004524 <mbedtls_mpi_mul_mpi>
 80080de:	4603      	mov	r3, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f040 8125 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80080e6:	462a      	mov	r2, r5
 80080e8:	4639      	mov	r1, r7
 80080ea:	4638      	mov	r0, r7
 80080ec:	f7fc fc4a 	bl	8004984 <mbedtls_mpi_mod_mpi>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f040 811c 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80080f8:	f104 0798 	add.w	r7, r4, #152	; 0x98
 80080fc:	463a      	mov	r2, r7
 80080fe:	4639      	mov	r1, r7
 8008100:	4638      	mov	r0, r7
 8008102:	f7fc fa0f 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8008106:	4603      	mov	r3, r0
 8008108:	2800      	cmp	r0, #0
 800810a:	f040 8111 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 800810e:	462a      	mov	r2, r5
 8008110:	4639      	mov	r1, r7
 8008112:	4638      	mov	r0, r7
 8008114:	f7fc fc36 	bl	8004984 <mbedtls_mpi_mod_mpi>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8008118:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 800811a:	2800      	cmp	r0, #0
 800811c:	f040 8108 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8008120:	a904      	add	r1, sp, #16
 8008122:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8008126:	4608      	mov	r0, r1
 8008128:	f7fc f9fc 	bl	8004524 <mbedtls_mpi_mul_mpi>
 800812c:	4603      	mov	r3, r0
 800812e:	2800      	cmp	r0, #0
 8008130:	f040 80fe 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8008134:	a904      	add	r1, sp, #16
 8008136:	462a      	mov	r2, r5
 8008138:	4608      	mov	r0, r1
 800813a:	f7fc fc23 	bl	8004984 <mbedtls_mpi_mod_mpi>
 800813e:	4603      	mov	r3, r0
 8008140:	2800      	cmp	r0, #0
 8008142:	f040 80f5 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8008146:	2201      	movs	r2, #1
 8008148:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800814c:	a807      	add	r0, sp, #28
 800814e:	f7fc f9d3 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008152:	4603      	mov	r3, r0
 8008154:	2800      	cmp	r0, #0
 8008156:	f040 80eb 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 800815a:	2201      	movs	r2, #1
 800815c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008160:	a80a      	add	r0, sp, #40	; 0x28
 8008162:	f7fc f9c9 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008166:	4603      	mov	r3, r0
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 80e1 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 800816e:	4653      	mov	r3, sl
 8008170:	4632      	mov	r2, r6
 8008172:	211c      	movs	r1, #28
 8008174:	a80d      	add	r0, sp, #52	; 0x34
 8008176:	f7fc fef2 	bl	8004f5e <mbedtls_mpi_fill_random>
 800817a:	4603      	mov	r3, r0
 800817c:	2800      	cmp	r0, #0
 800817e:	f040 80d7 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8008182:	aa0d      	add	r2, sp, #52	; 0x34
 8008184:	a907      	add	r1, sp, #28
 8008186:	a816      	add	r0, sp, #88	; 0x58
 8008188:	f7fc f9cc 	bl	8004524 <mbedtls_mpi_mul_mpi>
 800818c:	4603      	mov	r3, r0
 800818e:	2800      	cmp	r0, #0
 8008190:	f040 80ce 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8008194:	a916      	add	r1, sp, #88	; 0x58
 8008196:	464a      	mov	r2, r9
 8008198:	4608      	mov	r0, r1
 800819a:	f7fc f952 	bl	8004442 <mbedtls_mpi_add_mpi>
 800819e:	4603      	mov	r3, r0
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f040 80c5 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80081a6:	4653      	mov	r3, sl
 80081a8:	4632      	mov	r2, r6
 80081aa:	211c      	movs	r1, #28
 80081ac:	a80d      	add	r0, sp, #52	; 0x34
 80081ae:	f7fc fed6 	bl	8004f5e <mbedtls_mpi_fill_random>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f040 80bb 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80081ba:	aa0d      	add	r2, sp, #52	; 0x34
 80081bc:	a90a      	add	r1, sp, #40	; 0x28
 80081be:	a819      	add	r0, sp, #100	; 0x64
 80081c0:	f7fc f9b0 	bl	8004524 <mbedtls_mpi_mul_mpi>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f040 80b2 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80081cc:	a919      	add	r1, sp, #100	; 0x64
 80081ce:	4642      	mov	r2, r8
 80081d0:	4608      	mov	r0, r1
 80081d2:	f7fc f936 	bl	8004442 <mbedtls_mpi_add_mpi>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2800      	cmp	r0, #0
 80081da:	f040 80a9 	bne.w	8008330 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
 80081de:	f10d 0864 	add.w	r8, sp, #100	; 0x64
        DP = &DP_blind;
 80081e2:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80081e6:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80081ea:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	464a      	mov	r2, r9
 80081f2:	4653      	mov	r3, sl
 80081f4:	a904      	add	r1, sp, #16
 80081f6:	a810      	add	r0, sp, #64	; 0x40
 80081f8:	f7fc fbf6 	bl	80049e8 <mbedtls_mpi_exp_mod>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2800      	cmp	r0, #0
 8008200:	f040 8096 	bne.w	8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8008204:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8008208:	f104 0738 	add.w	r7, r4, #56	; 0x38
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	4642      	mov	r2, r8
 8008210:	463b      	mov	r3, r7
 8008212:	a904      	add	r1, sp, #16
 8008214:	a813      	add	r0, sp, #76	; 0x4c
 8008216:	f7fc fbe7 	bl	80049e8 <mbedtls_mpi_exp_mod>
 800821a:	4603      	mov	r3, r0
 800821c:	2800      	cmp	r0, #0
 800821e:	f040 8087 	bne.w	8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8008222:	aa13      	add	r2, sp, #76	; 0x4c
 8008224:	a910      	add	r1, sp, #64	; 0x40
 8008226:	a804      	add	r0, sp, #16
 8008228:	f7fc f92d 	bl	8004486 <mbedtls_mpi_sub_mpi>
 800822c:	4603      	mov	r3, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	d17e      	bne.n	8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8008232:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8008236:	a904      	add	r1, sp, #16
 8008238:	a810      	add	r0, sp, #64	; 0x40
 800823a:	f7fc f973 	bl	8004524 <mbedtls_mpi_mul_mpi>
 800823e:	4603      	mov	r3, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	d175      	bne.n	8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8008244:	4652      	mov	r2, sl
 8008246:	a910      	add	r1, sp, #64	; 0x40
 8008248:	a804      	add	r0, sp, #16
 800824a:	f7fc fb9b 	bl	8004984 <mbedtls_mpi_mod_mpi>
 800824e:	4603      	mov	r3, r0
 8008250:	2800      	cmp	r0, #0
 8008252:	d16d      	bne.n	8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8008254:	463a      	mov	r2, r7
 8008256:	a904      	add	r1, sp, #16
 8008258:	a810      	add	r0, sp, #64	; 0x40
 800825a:	f7fc f963 	bl	8004524 <mbedtls_mpi_mul_mpi>
 800825e:	4603      	mov	r3, r0
 8008260:	2800      	cmp	r0, #0
 8008262:	d165      	bne.n	8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8008264:	aa10      	add	r2, sp, #64	; 0x40
 8008266:	a913      	add	r1, sp, #76	; 0x4c
 8008268:	a804      	add	r0, sp, #16
 800826a:	f7fc f8ea 	bl	8004442 <mbedtls_mpi_add_mpi>
 800826e:	4603      	mov	r3, r0
 8008270:	2800      	cmp	r0, #0
 8008272:	d15d      	bne.n	8008330 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
 8008274:	2e00      	cmp	r6, #0
 8008276:	d14b      	bne.n	8008310 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8008278:	f104 0368 	add.w	r3, r4, #104	; 0x68
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	f104 0214 	add.w	r2, r4, #20
 8008282:	462b      	mov	r3, r5
 8008284:	a904      	add	r1, sp, #16
 8008286:	a81f      	add	r0, sp, #124	; 0x7c
 8008288:	f7fc fbae 	bl	80049e8 <mbedtls_mpi_exp_mod>
 800828c:	4603      	mov	r3, r0
 800828e:	2800      	cmp	r0, #0
 8008290:	d14e      	bne.n	8008330 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8008292:	a91c      	add	r1, sp, #112	; 0x70
 8008294:	a81f      	add	r0, sp, #124	; 0x7c
 8008296:	f7fb ffdc 	bl	8004252 <mbedtls_mpi_cmp_mpi>
 800829a:	2800      	cmp	r0, #0
 800829c:	d178      	bne.n	8008390 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 800829e:	6862      	ldr	r2, [r4, #4]
 80082a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80082a2:	a804      	add	r0, sp, #16
 80082a4:	f7fb fe8f 	bl	8003fc6 <mbedtls_mpi_write_binary>
 80082a8:	4603      	mov	r3, r0
 80082aa:	e041      	b.n	8008330 <mbedtls_rsa_private+0x304>
    if( ctx->Vf.p != NULL )
 80082ac:	230c      	movs	r3, #12
 80082ae:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80082b0:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80082b4:	f104 078c 	add.w	r7, r4, #140	; 0x8c
        if( count++ > 10 )
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	d065      	beq.n	800838c <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80082c0:	6861      	ldr	r1, [r4, #4]
 80082c2:	4653      	mov	r3, sl
 80082c4:	4632      	mov	r2, r6
 80082c6:	3901      	subs	r1, #1
 80082c8:	4658      	mov	r0, fp
 80082ca:	f7fc fe48 	bl	8004f5e <mbedtls_mpi_fill_random>
 80082ce:	4603      	mov	r3, r0
 80082d0:	bb70      	cbnz	r0, 8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80082d2:	462a      	mov	r2, r5
 80082d4:	4659      	mov	r1, fp
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7fc fdbd 	bl	8004e56 <mbedtls_mpi_gcd>
 80082dc:	4603      	mov	r3, r0
 80082de:	bb38      	cbnz	r0, 8008330 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 80082e0:	2101      	movs	r1, #1
 80082e2:	4638      	mov	r0, r7
 80082e4:	f7fb fffb 	bl	80042de <mbedtls_mpi_cmp_int>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d1e5      	bne.n	80082b8 <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80082ec:	462a      	mov	r2, r5
 80082ee:	4659      	mov	r1, fp
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7fc fe56 	bl	8004fa2 <mbedtls_mpi_inv_mod>
 80082f6:	4603      	mov	r3, r0
 80082f8:	b9d0      	cbnz	r0, 8008330 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80082fa:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	f104 0214 	add.w	r2, r4, #20
 8008304:	462b      	mov	r3, r5
 8008306:	4639      	mov	r1, r7
 8008308:	4638      	mov	r0, r7
 800830a:	f7fc fb6d 	bl	80049e8 <mbedtls_mpi_exp_mod>
 800830e:	e703      	b.n	8008118 <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8008310:	a904      	add	r1, sp, #16
 8008312:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8008316:	4608      	mov	r0, r1
 8008318:	f7fc f904 	bl	8004524 <mbedtls_mpi_mul_mpi>
 800831c:	4603      	mov	r3, r0
 800831e:	b938      	cbnz	r0, 8008330 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8008320:	a904      	add	r1, sp, #16
 8008322:	462a      	mov	r2, r5
 8008324:	4608      	mov	r0, r1
 8008326:	f7fc fb2d 	bl	8004984 <mbedtls_mpi_mod_mpi>
 800832a:	4603      	mov	r3, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d0a3      	beq.n	8008278 <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
 8008330:	a807      	add	r0, sp, #28
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	f7fb fd38 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8008338:	a80a      	add	r0, sp, #40	; 0x28
 800833a:	f7fb fd35 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 800833e:	a80d      	add	r0, sp, #52	; 0x34
 8008340:	f7fb fd32 	bl	8003da8 <mbedtls_mpi_free>
    if( f_rng != NULL )
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	b136      	cbz	r6, 8008356 <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
 8008348:	a816      	add	r0, sp, #88	; 0x58
 800834a:	f7fb fd2d 	bl	8003da8 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 800834e:	a819      	add	r0, sp, #100	; 0x64
 8008350:	f7fb fd2a 	bl	8003da8 <mbedtls_mpi_free>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	9303      	str	r3, [sp, #12]
    mbedtls_mpi_free( &T );
 8008358:	a804      	add	r0, sp, #16
 800835a:	f7fb fd25 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 800835e:	a810      	add	r0, sp, #64	; 0x40
 8008360:	f7fb fd22 	bl	8003da8 <mbedtls_mpi_free>
 8008364:	a813      	add	r0, sp, #76	; 0x4c
 8008366:	f7fb fd1f 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 800836a:	a81f      	add	r0, sp, #124	; 0x7c
 800836c:	f7fb fd1c 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8008370:	a81c      	add	r0, sp, #112	; 0x70
 8008372:	f7fb fd19 	bl	8003da8 <mbedtls_mpi_free>
    if( ret != 0 )
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	b10b      	cbz	r3, 800837e <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 800837a:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 800837e:	4618      	mov	r0, r3
 8008380:	b023      	add	sp, #140	; 0x8c
 8008382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8008386:	f06f 0303 	mvn.w	r3, #3
 800838a:	e7d1      	b.n	8008330 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <mbedtls_rsa_private+0x36c>)
 800838e:	e7cf      	b.n	8008330 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <mbedtls_rsa_private+0x370>)
 8008392:	e7cd      	b.n	8008330 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008394:	4b02      	ldr	r3, [pc, #8]	; (80083a0 <mbedtls_rsa_private+0x374>)
 8008396:	e7f2      	b.n	800837e <mbedtls_rsa_private+0x352>
 8008398:	ffffbb80 	.word	0xffffbb80
 800839c:	ffffbc80 	.word	0xffffbc80
 80083a0:	ffffbf80 	.word	0xffffbf80

080083a4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 80083a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80083aa:	f1b9 0f01 	cmp.w	r9, #1
{
 80083ae:	4606      	mov	r6, r0
 80083b0:	4688      	mov	r8, r1
 80083b2:	4693      	mov	fp, r2
 80083b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80083b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80083ba:	d103      	bne.n	80083c4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
 80083bc:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	d158      	bne.n	8008476 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    if( f_rng == NULL || input == NULL || output == NULL )
 80083c4:	f1b8 0f00 	cmp.w	r8, #0
 80083c8:	d055      	beq.n	8008476 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d053      	beq.n	8008476 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	d051      	beq.n	8008476 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80083d2:	f117 010b 	adds.w	r1, r7, #11
    olen = ctx->len;
 80083d6:	6872      	ldr	r2, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80083d8:	d24d      	bcs.n	8008476 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80083da:	428a      	cmp	r2, r1
 80083dc:	d34b      	bcc.n	8008476 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    *p++ = 0;
 80083de:	4628      	mov	r0, r5
    nb_pad = olen - 3 - ilen;
 80083e0:	1bd2      	subs	r2, r2, r7
    *p++ = 0;
 80083e2:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 80083e4:	3a03      	subs	r2, #3
    *p++ = 0;
 80083e6:	f800 1b02 	strb.w	r1, [r0], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80083ea:	f1b9 0f00 	cmp.w	r9, #0
 80083ee:	d12f      	bne.n	8008450 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
        *p++ = MBEDTLS_RSA_CRYPT;
 80083f0:	2102      	movs	r1, #2
 80083f2:	1882      	adds	r2, r0, r2
 80083f4:	4604      	mov	r4, r0
 80083f6:	7069      	strb	r1, [r5, #1]
 80083f8:	9200      	str	r2, [sp, #0]
        while( nb_pad-- > 0 )
 80083fa:	9a00      	ldr	r2, [sp, #0]
 80083fc:	4294      	cmp	r4, r2
 80083fe:	d112      	bne.n	8008426 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    *p++ = 0;
 8008400:	4620      	mov	r0, r4
 8008402:	2200      	movs	r2, #0
 8008404:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8008408:	4619      	mov	r1, r3
 800840a:	463a      	mov	r2, r7
 800840c:	f006 fd27 	bl	800ee5e <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008410:	f1b9 0f00 	cmp.w	r9, #0
 8008414:	d125      	bne.n	8008462 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbe>
 8008416:	462a      	mov	r2, r5
 8008418:	4629      	mov	r1, r5
 800841a:	4630      	mov	r0, r6
}
 800841c:	b003      	add	sp, #12
 800841e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008422:	f7ff bdc5 	b.w	8007fb0 <mbedtls_rsa_public>
 8008426:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 800842a:	2201      	movs	r2, #1
 800842c:	4621      	mov	r1, r4
 800842e:	4658      	mov	r0, fp
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 8008434:	7822      	ldrb	r2, [r4, #0]
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	b9fa      	cbnz	r2, 800847a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
 800843a:	f1ba 0a01 	subs.w	sl, sl, #1
 800843e:	d104      	bne.n	800844a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa6>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8008440:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 8008444:	b003      	add	sp, #12
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } while( *p == 0 && --rng_dl && ret == 0 );
 800844a:	2800      	cmp	r0, #0
 800844c:	d0ed      	beq.n	800842a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x86>
 800844e:	e7f7      	b.n	8008440 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9c>
        *p++ = MBEDTLS_RSA_SIGN;
 8008450:	2101      	movs	r1, #1
 8008452:	1884      	adds	r4, r0, r2
 8008454:	7069      	strb	r1, [r5, #1]
            *p++ = 0xFF;
 8008456:	22ff      	movs	r2, #255	; 0xff
        while( nb_pad-- > 0 )
 8008458:	42a0      	cmp	r0, r4
 800845a:	d0d1      	beq.n	8008400 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
            *p++ = 0xFF;
 800845c:	f800 2b01 	strb.w	r2, [r0], #1
 8008460:	e7fa      	b.n	8008458 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb4>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008462:	462b      	mov	r3, r5
 8008464:	465a      	mov	r2, fp
 8008466:	4641      	mov	r1, r8
 8008468:	4630      	mov	r0, r6
 800846a:	950c      	str	r5, [sp, #48]	; 0x30
}
 800846c:	b003      	add	sp, #12
 800846e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8008472:	f7ff bddb 	b.w	800802c <mbedtls_rsa_private>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8008476:	4803      	ldr	r0, [pc, #12]	; (8008484 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8008478:	e7e4      	b.n	8008444 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa0>
            if( rng_dl == 0 || ret != 0 )
 800847a:	2800      	cmp	r0, #0
 800847c:	d1e0      	bne.n	8008440 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9c>
            p++;
 800847e:	3401      	adds	r4, #1
 8008480:	e7bb      	b.n	80083fa <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
 8008482:	bf00      	nop
 8008484:	ffffbf80 	.word	0xffffbf80

08008488 <mbedtls_rsa_pkcs1_encrypt>:
{
 8008488:	b4f0      	push	{r4, r5, r6, r7}
    switch( ctx->padding )
 800848a:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
 800848e:	b917      	cbnz	r7, 8008496 <mbedtls_rsa_pkcs1_encrypt+0xe>
}
 8008490:	bcf0      	pop	{r4, r5, r6, r7}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8008492:	f7ff bf87 	b.w	80083a4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
}
 8008496:	4801      	ldr	r0, [pc, #4]	; (800849c <mbedtls_rsa_pkcs1_encrypt+0x14>)
 8008498:	bcf0      	pop	{r4, r5, r6, r7}
 800849a:	4770      	bx	lr
 800849c:	ffffbf00 	.word	0xffffbf00

080084a0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 80084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80084a2:	2b01      	cmp	r3, #1
{
 80084a4:	b0c3      	sub	sp, #268	; 0x10c
 80084a6:	461c      	mov	r4, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80084a8:	d103      	bne.n	80084b2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x12>
 80084aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d177      	bne.n	80085a2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
    ilen = ctx->len;
 80084b2:	6846      	ldr	r6, [r0, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 80084b4:	f1a6 0310 	sub.w	r3, r6, #16
 80084b8:	2bf0      	cmp	r3, #240	; 0xf0
 80084ba:	d872      	bhi.n	80085a2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
 80084bc:	ad02      	add	r5, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80084be:	b9bc      	cbnz	r4, 80084f0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x50>
 80084c0:	462a      	mov	r2, r5
 80084c2:	9949      	ldr	r1, [sp, #292]	; 0x124
 80084c4:	f7ff fd74 	bl	8007fb0 <mbedtls_rsa_public>
    if( ret != 0 )
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d13a      	bne.n	8008542 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
    bad |= *p++; /* First byte must be 0 */
 80084cc:	782a      	ldrb	r2, [r5, #0]
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80084ce:	7868      	ldrb	r0, [r5, #1]
    unsigned char *p, bad, pad_done = 0;
 80084d0:	2300      	movs	r3, #0
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80084d2:	f080 0001 	eor.w	r0, r0, #1
 80084d6:	4310      	orrs	r0, r2
    size_t ilen, pad_count = 0, i;
 80084d8:	461c      	mov	r4, r3
        for( i = 0; i < ilen - 3; i++ )
 80084da:	461a      	mov	r2, r3
 80084dc:	1ef1      	subs	r1, r6, #3
 80084de:	428a      	cmp	r2, r1
 80084e0:	d34d      	bcc.n	800857e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xde>
        p += pad_count;
 80084e2:	f10d 030a 	add.w	r3, sp, #10
 80084e6:	1919      	adds	r1, r3, r4
        bad |= *p++; /* Must be zero */
 80084e8:	5d1b      	ldrb	r3, [r3, r4]
 80084ea:	3101      	adds	r1, #1
 80084ec:	4318      	orrs	r0, r3
 80084ee:	e017      	b.n	8008520 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x80>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80084f0:	9500      	str	r5, [sp, #0]
 80084f2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80084f4:	f7ff fd9a 	bl	800802c <mbedtls_rsa_private>
    if( ret != 0 )
 80084f8:	bb18      	cbnz	r0, 8008542 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
    if( mode == MBEDTLS_RSA_PRIVATE )
 80084fa:	2c01      	cmp	r4, #1
    bad |= *p++; /* First byte must be 0 */
 80084fc:	782a      	ldrb	r2, [r5, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 80084fe:	d1e6      	bne.n	80084ce <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x2e>
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8008500:	786c      	ldrb	r4, [r5, #1]
 8008502:	f084 0402 	eor.w	r4, r4, #2
 8008506:	4322      	orrs	r2, r4
        for( i = 0; i < ilen - 3; i++ )
 8008508:	4601      	mov	r1, r0
    size_t ilen, pad_count = 0, i;
 800850a:	4604      	mov	r4, r0
        for( i = 0; i < ilen - 3; i++ )
 800850c:	1ef7      	subs	r7, r6, #3
 800850e:	42b9      	cmp	r1, r7
 8008510:	d321      	bcc.n	8008556 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb6>
        p += pad_count;
 8008512:	f10d 030a 	add.w	r3, sp, #10
 8008516:	1919      	adds	r1, r3, r4
        bad |= *p++; /* Must be zero */
 8008518:	5d1b      	ldrb	r3, [r3, r4]
 800851a:	3101      	adds	r1, #1
 800851c:	ea42 0003 	orr.w	r0, r2, r3
    bad |= ( pad_count < 8 );
 8008520:	2c07      	cmp	r4, #7
 8008522:	bf98      	it	ls
 8008524:	f040 0001 	orrls.w	r0, r0, #1
    if( bad )
 8008528:	b244      	sxtb	r4, r0
 800852a:	bba4      	cbnz	r4, 8008596 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xf6>
    if( ilen - ( p - buf ) > output_max_len )
 800852c:	1b4a      	subs	r2, r1, r5
 800852e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8008530:	1ab2      	subs	r2, r6, r2
 8008532:	429a      	cmp	r2, r3
 8008534:	d831      	bhi.n	800859a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfa>
    *olen = ilen - (p - buf);
 8008536:	9b48      	ldr	r3, [sp, #288]	; 0x120
    memcpy( output, p, *olen );
 8008538:	984a      	ldr	r0, [sp, #296]	; 0x128
    *olen = ilen - (p - buf);
 800853a:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 800853c:	f006 fc8f 	bl	800ee5e <memcpy>
    ret = 0;
 8008540:	4620      	mov	r0, r4
 8008542:	2300      	movs	r3, #0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8008544:	f240 1201 	movw	r2, #257	; 0x101
 8008548:	461c      	mov	r4, r3
 800854a:	18e9      	adds	r1, r5, r3
 800854c:	3301      	adds	r3, #1
 800854e:	4293      	cmp	r3, r2
 8008550:	d125      	bne.n	800859e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfe>
}
 8008552:	b043      	add	sp, #268	; 0x10c
 8008554:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8008556:	186b      	adds	r3, r5, r1
        for( i = 0; i < ilen - 3; i++ )
 8008558:	3101      	adds	r1, #1
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 800855a:	789b      	ldrb	r3, [r3, #2]
 800855c:	f1c3 0e00 	rsb	lr, r3, #0
 8008560:	ea43 030e 	orr.w	r3, r3, lr
 8008564:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008568:	f083 0301 	eor.w	r3, r3, #1
 800856c:	4318      	orrs	r0, r3
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 800856e:	4243      	negs	r3, r0
 8008570:	4303      	orrs	r3, r0
 8008572:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008576:	f083 0301 	eor.w	r3, r3, #1
 800857a:	441c      	add	r4, r3
 800857c:	e7c7      	b.n	800850e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x6e>
            pad_done |= ( p[i] != 0xFF );
 800857e:	18af      	adds	r7, r5, r2
        for( i = 0; i < ilen - 3; i++ )
 8008580:	3201      	adds	r2, #1
            pad_done |= ( p[i] != 0xFF );
 8008582:	78bf      	ldrb	r7, [r7, #2]
 8008584:	2fff      	cmp	r7, #255	; 0xff
 8008586:	bf18      	it	ne
 8008588:	f043 0301 	orrne.w	r3, r3, #1
            pad_count += ( pad_done == 0 );
 800858c:	f083 0701 	eor.w	r7, r3, #1
 8008590:	fa54 f487 	uxtab	r4, r4, r7
 8008594:	e7a3      	b.n	80084de <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x3e>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8008596:	4804      	ldr	r0, [pc, #16]	; (80085a8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x108>)
 8008598:	e7d3      	b.n	8008542 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 800859a:	4804      	ldr	r0, [pc, #16]	; (80085ac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>)
 800859c:	e7d1      	b.n	8008542 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa2>
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800859e:	700c      	strb	r4, [r1, #0]
 80085a0:	e7d3      	b.n	800854a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xaa>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80085a2:	4803      	ldr	r0, [pc, #12]	; (80085b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x110>)
 80085a4:	e7d5      	b.n	8008552 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb2>
 80085a6:	bf00      	nop
 80085a8:	ffffbf00 	.word	0xffffbf00
 80085ac:	ffffbc00 	.word	0xffffbc00
 80085b0:	ffffbf80 	.word	0xffffbf80

080085b4 <mbedtls_rsa_pkcs1_decrypt>:
{
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80085b6:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 80085ba:	f8dd e014 	ldr.w	lr, [sp, #20]
    switch( ctx->padding )
 80085be:	b91c      	cbnz	r4, 80085c8 <mbedtls_rsa_pkcs1_decrypt+0x14>
}
 80085c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 80085c4:	f7ff bf6c 	b.w	80084a0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
}
 80085c8:	4800      	ldr	r0, [pc, #0]	; (80085cc <mbedtls_rsa_pkcs1_decrypt+0x18>)
 80085ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085cc:	ffffbf00 	.word	0xffffbf00

080085d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80085d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80085d4:	2b01      	cmp	r3, #1
{
 80085d6:	4689      	mov	r9, r1
 80085d8:	a90b      	add	r1, sp, #44	; 0x2c
 80085da:	4605      	mov	r5, r0
 80085dc:	4692      	mov	sl, r2
 80085de:	461e      	mov	r6, r3
 80085e0:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80085e4:	c986      	ldmia	r1, {r1, r2, r7}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80085e6:	d103      	bne.n	80085f0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 80085e8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d14e      	bne.n	800868e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbe>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80085f0:	9700      	str	r7, [sp, #0]
 80085f2:	686b      	ldr	r3, [r5, #4]
 80085f4:	f7ff fa92 	bl	8007b1c <rsa_rsassa_pkcs1_v15_encode>
 80085f8:	4604      	mov	r4, r0
 80085fa:	bbd8      	cbnz	r0, 8008674 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 80085fc:	b93e      	cbnz	r6, 800860e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80085fe:	463a      	mov	r2, r7
 8008600:	4639      	mov	r1, r7
 8008602:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8008604:	b002      	add	sp, #8
 8008606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 800860a:	f7ff bcd1 	b.w	8007fb0 <mbedtls_rsa_public>
    sig_try = mbedtls_calloc( 1, ctx->len );
 800860e:	686c      	ldr	r4, [r5, #4]
 8008610:	2001      	movs	r0, #1
 8008612:	4621      	mov	r1, r4
 8008614:	f006 fbd2 	bl	800edbc <calloc>
    if( sig_try == NULL )
 8008618:	4606      	mov	r6, r0
 800861a:	b140      	cbz	r0, 800862e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    verif = mbedtls_calloc( 1, ctx->len );
 800861c:	4621      	mov	r1, r4
 800861e:	2001      	movs	r0, #1
 8008620:	f006 fbcc 	bl	800edbc <calloc>
    if( verif == NULL )
 8008624:	4680      	mov	r8, r0
 8008626:	b928      	cbnz	r0, 8008634 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x64>
        mbedtls_free( sig_try );
 8008628:	4630      	mov	r0, r6
 800862a:	f006 fc01 	bl	800ee30 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800862e:	f06f 040f 	mvn.w	r4, #15
 8008632:	e01f      	b.n	8008674 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8008634:	9600      	str	r6, [sp, #0]
 8008636:	463b      	mov	r3, r7
 8008638:	4652      	mov	r2, sl
 800863a:	4649      	mov	r1, r9
 800863c:	4628      	mov	r0, r5
 800863e:	f7ff fcf5 	bl	800802c <mbedtls_rsa_private>
 8008642:	4604      	mov	r4, r0
 8008644:	b980      	cbnz	r0, 8008668 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8008646:	4642      	mov	r2, r8
 8008648:	4631      	mov	r1, r6
 800864a:	4628      	mov	r0, r5
 800864c:	f7ff fcb0 	bl	8007fb0 <mbedtls_rsa_public>
 8008650:	4604      	mov	r4, r0
 8008652:	b948      	cbnz	r0, 8008668 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8008654:	686a      	ldr	r2, [r5, #4]
    unsigned char diff = 0;
 8008656:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 8008658:	4603      	mov	r3, r0
 800865a:	429a      	cmp	r2, r3
 800865c:	d10e      	bne.n	800867c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xac>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 800865e:	b9a1      	cbnz	r1, 800868a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    memcpy( sig, sig_try, ctx->len );
 8008660:	4631      	mov	r1, r6
 8008662:	4638      	mov	r0, r7
 8008664:	f006 fbfb 	bl	800ee5e <memcpy>
    mbedtls_free( sig_try );
 8008668:	4630      	mov	r0, r6
 800866a:	f006 fbe1 	bl	800ee30 <free>
    mbedtls_free( verif );
 800866e:	4640      	mov	r0, r8
 8008670:	f006 fbde 	bl	800ee30 <free>
}
 8008674:	4620      	mov	r0, r4
 8008676:	b002      	add	sp, #8
 8008678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        diff |= A[i] ^ B[i];
 800867c:	f818 0003 	ldrb.w	r0, [r8, r3]
 8008680:	5cfd      	ldrb	r5, [r7, r3]
 8008682:	4068      	eors	r0, r5
 8008684:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
 8008686:	3301      	adds	r3, #1
 8008688:	e7e7      	b.n	800865a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x8a>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 800868a:	4c02      	ldr	r4, [pc, #8]	; (8008694 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc4>)
 800868c:	e7ec      	b.n	8008668 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800868e:	4c02      	ldr	r4, [pc, #8]	; (8008698 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
 8008690:	e7f0      	b.n	8008674 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
 8008692:	bf00      	nop
 8008694:	ffffbd00 	.word	0xffffbd00
 8008698:	ffffbf80 	.word	0xffffbf80

0800869c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 800869e:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 80086a2:	f89d e014 	ldrb.w	lr, [sp, #20]
    switch( ctx->padding )
 80086a6:	b92c      	cbnz	r4, 80086b4 <mbedtls_rsa_pkcs1_sign+0x18>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 80086a8:	f8cd e014 	str.w	lr, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80086ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 80086b0:	f7ff bf8e 	b.w	80085d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
}
 80086b4:	4800      	ldr	r0, [pc, #0]	; (80086b8 <mbedtls_rsa_pkcs1_sign+0x1c>)
 80086b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b8:	ffffbf00 	.word	0xffffbf00

080086bc <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
{
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80086bc:	2b01      	cmp	r3, #1
{
 80086be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c2:	4680      	mov	r8, r0
 80086c4:	468a      	mov	sl, r1
 80086c6:	4693      	mov	fp, r2
 80086c8:	4699      	mov	r9, r3
    const size_t sig_len = ctx->len;
 80086ca:	6845      	ldr	r5, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80086cc:	d103      	bne.n	80086d6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 80086ce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d152      	bne.n	800877c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80086d6:	4629      	mov	r1, r5
 80086d8:	2001      	movs	r0, #1
 80086da:	f006 fb6f 	bl	800edbc <calloc>
 80086de:	4606      	mov	r6, r0
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d04d      	beq.n	8008780 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>
 80086e4:	4629      	mov	r1, r5
 80086e6:	2001      	movs	r0, #1
 80086e8:	f006 fb68 	bl	800edbc <calloc>
 80086ec:	4607      	mov	r7, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d049      	beq.n	8008786 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80086f2:	9000      	str	r0, [sp, #0]
 80086f4:	462b      	mov	r3, r5
 80086f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086fa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80086fe:	f7ff fa0d 	bl	8007b1c <rsa_rsassa_pkcs1_v15_encode>
 8008702:	4604      	mov	r4, r0
 8008704:	b988      	cbnz	r0, 800872a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8008706:	f1b9 0f00 	cmp.w	r9, #0
 800870a:	d112      	bne.n	8008732 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x76>
 800870c:	4632      	mov	r2, r6
 800870e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008710:	4640      	mov	r0, r8
 8008712:	f7ff fc4d 	bl	8007fb0 <mbedtls_rsa_public>
 8008716:	4604      	mov	r4, r0
    if( ret != 0 )
 8008718:	b938      	cbnz	r0, 800872a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 800871a:	4602      	mov	r2, r0
 800871c:	4603      	mov	r3, r0
    for( i = 0; i < n; i++ )
 800871e:	429d      	cmp	r5, r3
 8008720:	d10f      	bne.n	8008742 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x86>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8008722:	4b1a      	ldr	r3, [pc, #104]	; (800878c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xd0>)
 8008724:	2a00      	cmp	r2, #0
 8008726:	bf18      	it	ne
 8008728:	461c      	movne	r4, r3
 800872a:	1971      	adds	r1, r6, r5
 800872c:	4633      	mov	r3, r6
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800872e:	2200      	movs	r2, #0
 8008730:	e00f      	b.n	8008752 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x96>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8008732:	9600      	str	r6, [sp, #0]
 8008734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008736:	465a      	mov	r2, fp
 8008738:	4651      	mov	r1, sl
 800873a:	4640      	mov	r0, r8
 800873c:	f7ff fc76 	bl	800802c <mbedtls_rsa_private>
 8008740:	e7e9      	b.n	8008716 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        diff |= A[i] ^ B[i];
 8008742:	5cf1      	ldrb	r1, [r6, r3]
 8008744:	5cf8      	ldrb	r0, [r7, r3]
 8008746:	4041      	eors	r1, r0
 8008748:	430a      	orrs	r2, r1
    for( i = 0; i < n; i++ )
 800874a:	3301      	adds	r3, #1
 800874c:	e7e7      	b.n	800871e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	428b      	cmp	r3, r1
 8008754:	d1fb      	bne.n	800874e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x92>
cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
        mbedtls_free( encoded );
 8008756:	4630      	mov	r0, r6
 8008758:	f006 fb6a 	bl	800ee30 <free>
    }

    if( encoded_expected != NULL )
 800875c:	b13f      	cbz	r7, 800876e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
 800875e:	443d      	add	r5, r7
 8008760:	463b      	mov	r3, r7
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8008762:	2200      	movs	r2, #0
 8008764:	42ab      	cmp	r3, r5
 8008766:	d106      	bne.n	8008776 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xba>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
 8008768:	4638      	mov	r0, r7
 800876a:	f006 fb61 	bl	800ee30 <free>
    }

    return( ret );
}
 800876e:	4620      	mov	r0, r4
 8008770:	b003      	add	sp, #12
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8008776:	701a      	strb	r2, [r3, #0]
 8008778:	3301      	adds	r3, #1
 800877a:	e7f3      	b.n	8008764 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 800877c:	4c04      	ldr	r4, [pc, #16]	; (8008790 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xd4>)
 800877e:	e7f6      	b.n	800876e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8008780:	f06f 040f 	mvn.w	r4, #15
 8008784:	e7f3      	b.n	800876e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
 8008786:	f06f 040f 	mvn.w	r4, #15
 800878a:	e7ce      	b.n	800872a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 800878c:	ffffbc80 	.word	0xffffbc80
 8008790:	ffffbf80 	.word	0xffffbf80

08008794 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8008796:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 800879a:	f89d e014 	ldrb.w	lr, [sp, #20]
    switch( ctx->padding )
 800879e:	b92c      	cbnz	r4, 80087ac <mbedtls_rsa_pkcs1_verify+0x18>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80087a0:	f8cd e014 	str.w	lr, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80087a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80087a8:	f7ff bf88 	b.w	80086bc <mbedtls_rsa_rsassa_pkcs1_v15_verify>
}
 80087ac:	4800      	ldr	r0, [pc, #0]	; (80087b0 <mbedtls_rsa_pkcs1_verify+0x1c>)
 80087ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b0:	ffffbf00 	.word	0xffffbf00

080087b4 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80087b4:	b510      	push	{r4, lr}
 80087b6:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 80087b8:	308c      	adds	r0, #140	; 0x8c
 80087ba:	f7fb faf5 	bl	8003da8 <mbedtls_mpi_free>
 80087be:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80087c2:	f7fb faf1 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 80087c6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087ca:	f7fb faed 	bl	8003da8 <mbedtls_mpi_free>
 80087ce:	f104 0020 	add.w	r0, r4, #32
 80087d2:	f7fb fae9 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 80087d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80087da:	f7fb fae5 	bl	8003da8 <mbedtls_mpi_free>
 80087de:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80087e2:	f7fb fae1 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 80087e6:	f104 0014 	add.w	r0, r4, #20
 80087ea:	f7fb fadd 	bl	8003da8 <mbedtls_mpi_free>
 80087ee:	f104 0008 	add.w	r0, r4, #8
 80087f2:	f7fb fad9 	bl	8003da8 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 80087f6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80087fa:	f7fb fad5 	bl	8003da8 <mbedtls_mpi_free>
 80087fe:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8008802:	f7fb fad1 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8008806:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800880a:	f7fb facd 	bl	8003da8 <mbedtls_mpi_free>
 800880e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008812:	f7fb fac9 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8008816:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 800881a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 800881e:	f7fb bac3 	b.w	8003da8 <mbedtls_mpi_free>
	...

08008824 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	b096      	sub	sp, #88	; 0x58
 800882a:	461f      	mov	r7, r3
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 800882c:	4b75      	ldr	r3, [pc, #468]	; (8008a04 <mbedtls_rsa_deduce_primes+0x1e0>)
{
 800882e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008832:	4615      	mov	r5, r2
 8008834:	4606      	mov	r6, r0
 8008836:	4688      	mov	r8, r1
    const unsigned char primes[] = { 2,
 8008838:	aa08      	add	r2, sp, #32
 800883a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	6859      	ldr	r1, [r3, #4]
 8008842:	4614      	mov	r4, r2
 8008844:	c403      	stmia	r4!, {r0, r1}
 8008846:	3308      	adds	r3, #8
 8008848:	4573      	cmp	r3, lr
 800884a:	4622      	mov	r2, r4
 800884c:	d1f7      	bne.n	800883e <mbedtls_rsa_deduce_primes+0x1a>
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	889b      	ldrh	r3, [r3, #4]
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	80a3      	strh	r3, [r4, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8008856:	b92f      	cbnz	r7, 8008864 <mbedtls_rsa_deduce_primes+0x40>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8008858:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 800885c:	4620      	mov	r0, r4
 800885e:	b016      	add	sp, #88	; 0x58
 8008860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8008864:	f1b9 0f00 	cmp.w	r9, #0
 8008868:	d0f6      	beq.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f3      	bne.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
 8008870:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008874:	2900      	cmp	r1, #0
 8008876:	d1ef      	bne.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8008878:	4630      	mov	r0, r6
 800887a:	f7fb fd30 	bl	80042de <mbedtls_mpi_cmp_int>
 800887e:	2800      	cmp	r0, #0
 8008880:	ddea      	ble.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8008882:	2101      	movs	r1, #1
 8008884:	4628      	mov	r0, r5
 8008886:	f7fb fd2a 	bl	80042de <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 800888a:	2800      	cmp	r0, #0
 800888c:	dde4      	ble.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	f7fb fcde 	bl	8004252 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8008896:	2800      	cmp	r0, #0
 8008898:	dade      	bge.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 800889a:	2101      	movs	r1, #1
 800889c:	4640      	mov	r0, r8
 800889e:	f7fb fd1e 	bl	80042de <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80088a2:	2800      	cmp	r0, #0
 80088a4:	ddd8      	ble.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80088a6:	4631      	mov	r1, r6
 80088a8:	4640      	mov	r0, r8
 80088aa:	f7fb fcd2 	bl	8004252 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80088ae:	2800      	cmp	r0, #0
 80088b0:	dad2      	bge.n	8008858 <mbedtls_rsa_deduce_primes+0x34>
    mbedtls_mpi_init( &K );
 80088b2:	a805      	add	r0, sp, #20
 80088b4:	f7fb fa71 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 80088b8:	a802      	add	r0, sp, #8
 80088ba:	f7fb fa6e 	bl	8003d9a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 80088be:	4642      	mov	r2, r8
 80088c0:	4629      	mov	r1, r5
 80088c2:	a802      	add	r0, sp, #8
 80088c4:	f7fb fe2e 	bl	8004524 <mbedtls_mpi_mul_mpi>
 80088c8:	4604      	mov	r4, r0
 80088ca:	b980      	cbnz	r0, 80088ee <mbedtls_rsa_deduce_primes+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 80088cc:	a902      	add	r1, sp, #8
 80088ce:	2201      	movs	r2, #1
 80088d0:	4608      	mov	r0, r1
 80088d2:	f7fb fe11 	bl	80044f8 <mbedtls_mpi_sub_int>
 80088d6:	4604      	mov	r4, r0
 80088d8:	b948      	cbnz	r0, 80088ee <mbedtls_rsa_deduce_primes+0xca>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 80088da:	a802      	add	r0, sp, #8
 80088dc:	f7fb fafd 	bl	8003eda <mbedtls_mpi_lsb>
 80088e0:	fa1f fa80 	uxth.w	sl, r0
 80088e4:	f1ba 0f00 	cmp.w	sl, #0
 80088e8:	d108      	bne.n	80088fc <mbedtls_rsa_deduce_primes+0xd8>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80088ea:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
 80088ee:	a805      	add	r0, sp, #20
 80088f0:	f7fb fa5a 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 80088f4:	a802      	add	r0, sp, #8
 80088f6:	f7fb fa57 	bl	8003da8 <mbedtls_mpi_free>
    return( ret );
 80088fa:	e7af      	b.n	800885c <mbedtls_rsa_deduce_primes+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 80088fc:	b281      	uxth	r1, r0
 80088fe:	a802      	add	r0, sp, #8
 8008900:	f7fb fbd0 	bl	80040a4 <mbedtls_mpi_shift_r>
 8008904:	4604      	mov	r4, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d1f1      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
    if( N->p[0] % 8 == 1 )
 800890a:	68b3      	ldr	r3, [r6, #8]
 800890c:	681d      	ldr	r5, [r3, #0]
 800890e:	f005 0507 	and.w	r5, r5, #7
    for( ; attempt < num_primes; ++attempt )
 8008912:	1e6b      	subs	r3, r5, #1
 8008914:	425d      	negs	r5, r3
 8008916:	415d      	adcs	r5, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
 8008918:	ab16      	add	r3, sp, #88	; 0x58
 800891a:	442b      	add	r3, r5
 800891c:	a805      	add	r0, sp, #20
 800891e:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8008922:	f7fb faae 	bl	8003e82 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8008926:	4632      	mov	r2, r6
 8008928:	a905      	add	r1, sp, #20
 800892a:	4638      	mov	r0, r7
 800892c:	f7fc fa93 	bl	8004e56 <mbedtls_mpi_gcd>
 8008930:	4604      	mov	r4, r0
 8008932:	2800      	cmp	r0, #0
 8008934:	d1db      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 8008936:	2101      	movs	r1, #1
 8008938:	4638      	mov	r0, r7
 800893a:	f7fb fcd0 	bl	80042de <mbedtls_mpi_cmp_int>
 800893e:	b120      	cbz	r0, 800894a <mbedtls_rsa_deduce_primes+0x126>
    for( ; attempt < num_primes; ++attempt )
 8008940:	3501      	adds	r5, #1
 8008942:	b2ad      	uxth	r5, r5
 8008944:	2d36      	cmp	r5, #54	; 0x36
 8008946:	d1e7      	bne.n	8008918 <mbedtls_rsa_deduce_primes+0xf4>
 8008948:	e7cf      	b.n	80088ea <mbedtls_rsa_deduce_primes+0xc6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 800894a:	a905      	add	r1, sp, #20
 800894c:	f8cd 9000 	str.w	r9, [sp]
 8008950:	4633      	mov	r3, r6
 8008952:	aa02      	add	r2, sp, #8
 8008954:	4608      	mov	r0, r1
 8008956:	f7fc f847 	bl	80049e8 <mbedtls_mpi_exp_mod>
 800895a:	4604      	mov	r4, r0
 800895c:	2800      	cmp	r0, #0
 800895e:	d1c6      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
 8008960:	f04f 0801 	mov.w	r8, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8008964:	2101      	movs	r1, #1
 8008966:	a805      	add	r0, sp, #20
 8008968:	f7fb fcb9 	bl	80042de <mbedtls_mpi_cmp_int>
 800896c:	b930      	cbnz	r0, 800897c <mbedtls_rsa_deduce_primes+0x158>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 800896e:	2101      	movs	r1, #1
 8008970:	a805      	add	r0, sp, #20
 8008972:	f7fb fcb4 	bl	80042de <mbedtls_mpi_cmp_int>
 8008976:	2800      	cmp	r0, #0
 8008978:	d0e2      	beq.n	8008940 <mbedtls_rsa_deduce_primes+0x11c>
 800897a:	e7b6      	b.n	80088ea <mbedtls_rsa_deduce_primes+0xc6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 800897c:	a905      	add	r1, sp, #20
 800897e:	2201      	movs	r2, #1
 8008980:	4608      	mov	r0, r1
 8008982:	f7fb fda3 	bl	80044cc <mbedtls_mpi_add_int>
 8008986:	4604      	mov	r4, r0
 8008988:	2800      	cmp	r0, #0
 800898a:	d1b0      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 800898c:	4632      	mov	r2, r6
 800898e:	a905      	add	r1, sp, #20
 8008990:	4638      	mov	r0, r7
 8008992:	f7fc fa60 	bl	8004e56 <mbedtls_mpi_gcd>
 8008996:	4604      	mov	r4, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	d1a8      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 800899c:	2101      	movs	r1, #1
 800899e:	4638      	mov	r0, r7
 80089a0:	f7fb fc9d 	bl	80042de <mbedtls_mpi_cmp_int>
 80089a4:	2801      	cmp	r0, #1
 80089a6:	d10d      	bne.n	80089c4 <mbedtls_rsa_deduce_primes+0x1a0>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 80089a8:	4631      	mov	r1, r6
 80089aa:	4638      	mov	r0, r7
 80089ac:	f7fb fc51 	bl	8004252 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80089b0:	3001      	adds	r0, #1
 80089b2:	d107      	bne.n	80089c4 <mbedtls_rsa_deduce_primes+0x1a0>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 80089b4:	4621      	mov	r1, r4
 80089b6:	463b      	mov	r3, r7
 80089b8:	4632      	mov	r2, r6
 80089ba:	4648      	mov	r0, r9
 80089bc:	f7fb fe2e 	bl	800461c <mbedtls_mpi_div_mpi>
 80089c0:	4604      	mov	r4, r0
 80089c2:	e794      	b.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80089c4:	a905      	add	r1, sp, #20
 80089c6:	2201      	movs	r2, #1
 80089c8:	4608      	mov	r0, r1
 80089ca:	f7fb fd95 	bl	80044f8 <mbedtls_mpi_sub_int>
 80089ce:	4604      	mov	r4, r0
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d18c      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 80089d4:	aa05      	add	r2, sp, #20
 80089d6:	4611      	mov	r1, r2
 80089d8:	4610      	mov	r0, r2
 80089da:	f7fb fda3 	bl	8004524 <mbedtls_mpi_mul_mpi>
 80089de:	4604      	mov	r4, r0
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d184      	bne.n	80088ee <mbedtls_rsa_deduce_primes+0xca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 80089e4:	a905      	add	r1, sp, #20
 80089e6:	4632      	mov	r2, r6
 80089e8:	4608      	mov	r0, r1
 80089ea:	f7fb ffcb 	bl	8004984 <mbedtls_mpi_mod_mpi>
 80089ee:	4604      	mov	r4, r0
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f47f af7c 	bne.w	80088ee <mbedtls_rsa_deduce_primes+0xca>
        for( iter = 1; iter <= order; ++iter )
 80089f6:	f108 0801 	add.w	r8, r8, #1
 80089fa:	fa1f f888 	uxth.w	r8, r8
 80089fe:	45c2      	cmp	sl, r8
 8008a00:	d2b0      	bcs.n	8008964 <mbedtls_rsa_deduce_primes+0x140>
 8008a02:	e7b4      	b.n	800896e <mbedtls_rsa_deduce_primes+0x14a>
 8008a04:	08010288 	.word	0x08010288

08008a08 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	b086      	sub	sp, #24
 8008a10:	460f      	mov	r7, r1
 8008a12:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8008a14:	461d      	mov	r5, r3
 8008a16:	b92b      	cbnz	r3, 8008a24 <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8008a18:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	b006      	add	sp, #24
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8008a24:	2100      	movs	r1, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fb fc59 	bl	80042de <mbedtls_mpi_cmp_int>
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d1f2      	bne.n	8008a18 <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8008a32:	2101      	movs	r1, #1
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7fb fc52 	bl	80042de <mbedtls_mpi_cmp_int>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	ddec      	ble.n	8008a18 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7fb fc4c 	bl	80042de <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8008a46:	2800      	cmp	r0, #0
 8008a48:	dde6      	ble.n	8008a18 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7fb fc46 	bl	80042de <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d0e0      	beq.n	8008a18 <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
 8008a56:	4668      	mov	r0, sp
 8008a58:	f7fb f99f 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8008a5c:	a803      	add	r0, sp, #12
 8008a5e:	f7fb f99c 	bl	8003d9a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8008a62:	4621      	mov	r1, r4
 8008a64:	2201      	movs	r2, #1
 8008a66:	4668      	mov	r0, sp
 8008a68:	f7fb fd46 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	bb10      	cbnz	r0, 8008ab6 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8008a70:	2201      	movs	r2, #1
 8008a72:	4639      	mov	r1, r7
 8008a74:	a803      	add	r0, sp, #12
 8008a76:	f7fb fd3f 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	b9d8      	cbnz	r0, 8008ab6 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8008a7e:	aa03      	add	r2, sp, #12
 8008a80:	4669      	mov	r1, sp
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7fc f9e7 	bl	8004e56 <mbedtls_mpi_gcd>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	b9a0      	cbnz	r0, 8008ab6 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8008a8c:	aa03      	add	r2, sp, #12
 8008a8e:	4669      	mov	r1, sp
 8008a90:	4668      	mov	r0, sp
 8008a92:	f7fb fd47 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8008a96:	4604      	mov	r4, r0
 8008a98:	b968      	cbnz	r0, 8008ab6 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	466a      	mov	r2, sp
 8008aa0:	4668      	mov	r0, sp
 8008aa2:	f7fb fdbb 	bl	800461c <mbedtls_mpi_div_mpi>
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 8008aaa:	466a      	mov	r2, sp
 8008aac:	4631      	mov	r1, r6
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7fc fa77 	bl	8004fa2 <mbedtls_mpi_inv_mod>
 8008ab4:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
 8008ab6:	4668      	mov	r0, sp
 8008ab8:	f7fb f976 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8008abc:	a803      	add	r0, sp, #12
 8008abe:	f7fb f973 	bl	8003da8 <mbedtls_mpi_free>
    return( ret );
 8008ac2:	e7ab      	b.n	8008a1c <mbedtls_rsa_deduce_private_exponent+0x14>

08008ac4 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 8008ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	b087      	sub	sp, #28
 8008aca:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 8008acc:	4668      	mov	r0, sp
{
 8008ace:	4699      	mov	r9, r3
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	4690      	mov	r8, r2
 8008ad4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008ad6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    mbedtls_mpi_init( &K );
 8008ad8:	f7fb f95f 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8008adc:	a803      	add	r0, sp, #12
 8008ade:	f7fb f95c 	bl	8003d9a <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 8008ae2:	f1b9 0f00 	cmp.w	r9, #0
 8008ae6:	d10d      	bne.n	8008b04 <mbedtls_rsa_validate_crt+0x40>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 8008ae8:	bb5f      	cbnz	r7, 8008b42 <mbedtls_rsa_validate_crt+0x7e>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	d144      	bne.n	8008b78 <mbedtls_rsa_validate_crt+0xb4>
{
 8008aee:	2400      	movs	r4, #0
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 8008af0:	4668      	mov	r0, sp
 8008af2:	f7fb f959 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8008af6:	a803      	add	r0, sp, #12
 8008af8:	f7fb f956 	bl	8003da8 <mbedtls_mpi_free>

    return( ret );
}
 8008afc:	4620      	mov	r0, r4
 8008afe:	b007      	add	sp, #28
 8008b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( P == NULL )
 8008b04:	2c00      	cmp	r4, #0
 8008b06:	d05b      	beq.n	8008bc0 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8008b08:	2201      	movs	r2, #1
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4668      	mov	r0, sp
 8008b0e:	f7fb fcf3 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d14b      	bne.n	8008bae <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 8008b16:	4642      	mov	r2, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	a803      	add	r0, sp, #12
 8008b1c:	f7fb fcb3 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d144      	bne.n	8008bae <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8008b24:	a903      	add	r1, sp, #12
 8008b26:	466a      	mov	r2, sp
 8008b28:	4608      	mov	r0, r1
 8008b2a:	f7fb ff2b 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d13d      	bne.n	8008bae <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8008b32:	4601      	mov	r1, r0
 8008b34:	a803      	add	r0, sp, #12
 8008b36:	f7fb fbd2 	bl	80042de <mbedtls_mpi_cmp_int>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d0d4      	beq.n	8008ae8 <mbedtls_rsa_validate_crt+0x24>
{
 8008b3e:	4c21      	ldr	r4, [pc, #132]	; (8008bc4 <mbedtls_rsa_validate_crt+0x100>)
 8008b40:	e7d6      	b.n	8008af0 <mbedtls_rsa_validate_crt+0x2c>
        if( Q == NULL )
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	d03c      	beq.n	8008bc0 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8008b46:	2201      	movs	r2, #1
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4668      	mov	r0, sp
 8008b4c:	f7fb fcd4 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008b50:	bb68      	cbnz	r0, 8008bae <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 8008b52:	4642      	mov	r2, r8
 8008b54:	4639      	mov	r1, r7
 8008b56:	a803      	add	r0, sp, #12
 8008b58:	f7fb fc95 	bl	8004486 <mbedtls_mpi_sub_mpi>
 8008b5c:	bb38      	cbnz	r0, 8008bae <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8008b5e:	a903      	add	r1, sp, #12
 8008b60:	466a      	mov	r2, sp
 8008b62:	4608      	mov	r0, r1
 8008b64:	f7fb ff0e 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008b68:	bb08      	cbnz	r0, 8008bae <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	a803      	add	r0, sp, #12
 8008b6e:	f7fb fbb6 	bl	80042de <mbedtls_mpi_cmp_int>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d1e3      	bne.n	8008b3e <mbedtls_rsa_validate_crt+0x7a>
 8008b76:	e7b8      	b.n	8008aea <mbedtls_rsa_validate_crt+0x26>
        if( P == NULL || Q == NULL )
 8008b78:	b314      	cbz	r4, 8008bc0 <mbedtls_rsa_validate_crt+0xfc>
 8008b7a:	b30d      	cbz	r5, 8008bc0 <mbedtls_rsa_validate_crt+0xfc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4668      	mov	r0, sp
 8008b82:	f7fb fccf 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8008b86:	b990      	cbnz	r0, 8008bae <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8008b88:	2201      	movs	r2, #1
 8008b8a:	4669      	mov	r1, sp
 8008b8c:	4668      	mov	r0, sp
 8008b8e:	f7fb fcb3 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008b92:	b960      	cbnz	r0, 8008bae <mbedtls_rsa_validate_crt+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 8008b94:	4622      	mov	r2, r4
 8008b96:	4669      	mov	r1, sp
 8008b98:	4668      	mov	r0, sp
 8008b9a:	f7fb fef3 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008b9e:	b930      	cbnz	r0, 8008bae <mbedtls_rsa_validate_crt+0xea>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	4668      	mov	r0, sp
 8008ba4:	f7fb fb9b 	bl	80042de <mbedtls_mpi_cmp_int>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d1c8      	bne.n	8008b3e <mbedtls_rsa_validate_crt+0x7a>
 8008bac:	e79f      	b.n	8008aee <mbedtls_rsa_validate_crt+0x2a>
    if( ret != 0 &&
 8008bae:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 8008bb2:	d0c4      	beq.n	8008b3e <mbedtls_rsa_validate_crt+0x7a>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 8008bb4:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 8008bb8:	d002      	beq.n	8008bc0 <mbedtls_rsa_validate_crt+0xfc>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8008bba:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 8008bbe:	e797      	b.n	8008af0 <mbedtls_rsa_validate_crt+0x2c>
{
 8008bc0:	4c01      	ldr	r4, [pc, #4]	; (8008bc8 <mbedtls_rsa_validate_crt+0x104>)
 8008bc2:	e795      	b.n	8008af0 <mbedtls_rsa_validate_crt+0x2c>
 8008bc4:	ffffbe00 	.word	0xffffbe00
 8008bc8:	ffffbf80 	.word	0xffffbf80

08008bcc <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8008bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	b087      	sub	sp, #28
 8008bd2:	4606      	mov	r6, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 8008bd4:	4668      	mov	r0, sp
{
 8008bd6:	4688      	mov	r8, r1
 8008bd8:	4691      	mov	r9, r2
 8008bda:	461d      	mov	r5, r3
 8008bdc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    mbedtls_mpi_init( &K );
 8008bde:	f7fb f8dc 	bl	8003d9a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8008be2:	a803      	add	r0, sp, #12
 8008be4:	f7fb f8d9 	bl	8003d9a <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 8008be8:	f1b8 0f00 	cmp.w	r8, #0
 8008bec:	d046      	beq.n	8008c7c <mbedtls_rsa_validate_params+0xb0>
 8008bee:	f1b9 0f00 	cmp.w	r9, #0
 8008bf2:	d043      	beq.n	8008c7c <mbedtls_rsa_validate_params+0xb0>
 8008bf4:	b996      	cbnz	r6, 8008c1c <mbedtls_rsa_validate_params+0x50>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	d14a      	bne.n	8008c90 <mbedtls_rsa_validate_params+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8008bfa:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 8008bfc:	4668      	mov	r0, sp
 8008bfe:	f7fb f8d3 	bl	8003da8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8008c02:	a803      	add	r0, sp, #12
 8008c04:	f7fb f8d0 	bl	8003da8 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 8008c08:	b124      	cbz	r4, 8008c14 <mbedtls_rsa_validate_params+0x48>
 8008c0a:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 8008c0e:	d001      	beq.n	8008c14 <mbedtls_rsa_validate_params+0x48>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8008c10:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
 8008c14:	4620      	mov	r0, r4
 8008c16:	b007      	add	sp, #28
 8008c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 8008c1c:	464a      	mov	r2, r9
 8008c1e:	4641      	mov	r1, r8
 8008c20:	4668      	mov	r0, sp
 8008c22:	f7fb fc7f 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8008c26:	4604      	mov	r4, r0
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1e7      	bne.n	8008bfc <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7fb fb55 	bl	80042de <mbedtls_mpi_cmp_int>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	dd1f      	ble.n	8008c78 <mbedtls_rsa_validate_params+0xac>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 8008c38:	4631      	mov	r1, r6
 8008c3a:	4668      	mov	r0, sp
 8008c3c:	f7fb fb09 	bl	8004252 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8008c40:	b9d0      	cbnz	r0, 8008c78 <mbedtls_rsa_validate_params+0xac>
    if( N != NULL && D != NULL && E != NULL )
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	d0d9      	beq.n	8008bfa <mbedtls_rsa_validate_params+0x2e>
 8008c46:	b1e7      	cbz	r7, 8008c82 <mbedtls_rsa_validate_params+0xb6>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8008c48:	2101      	movs	r1, #1
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7fb fb47 	bl	80042de <mbedtls_mpi_cmp_int>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	dd11      	ble.n	8008c78 <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8008c54:	2101      	movs	r1, #1
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7fb fb41 	bl	80042de <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	dd0b      	ble.n	8008c78 <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8008c60:	4631      	mov	r1, r6
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7fb faf5 	bl	8004252 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	da05      	bge.n	8008c78 <mbedtls_rsa_validate_params+0xac>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f7fb faef 	bl	8004252 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8008c74:	2800      	cmp	r0, #0
 8008c76:	db04      	blt.n	8008c82 <mbedtls_rsa_validate_params+0xb6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8008c78:	4c36      	ldr	r4, [pc, #216]	; (8008d54 <mbedtls_rsa_validate_params+0x188>)
            goto cleanup;
 8008c7a:	e7bf      	b.n	8008bfc <mbedtls_rsa_validate_params+0x30>
    if( N != NULL && D != NULL && E != NULL )
 8008c7c:	b10e      	cbz	r6, 8008c82 <mbedtls_rsa_validate_params+0xb6>
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	d1e1      	bne.n	8008c46 <mbedtls_rsa_validate_params+0x7a>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8008c82:	f1b8 0f00 	cmp.w	r8, #0
 8008c86:	d0b8      	beq.n	8008bfa <mbedtls_rsa_validate_params+0x2e>
 8008c88:	f1b9 0f00 	cmp.w	r9, #0
 8008c8c:	d0b5      	beq.n	8008bfa <mbedtls_rsa_validate_params+0x2e>
 8008c8e:	e7b2      	b.n	8008bf6 <mbedtls_rsa_validate_params+0x2a>
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	d0b2      	beq.n	8008bfa <mbedtls_rsa_validate_params+0x2e>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8008c94:	2101      	movs	r1, #1
 8008c96:	4640      	mov	r0, r8
 8008c98:	f7fb fb21 	bl	80042de <mbedtls_mpi_cmp_int>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	ddeb      	ble.n	8008c78 <mbedtls_rsa_validate_params+0xac>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	4648      	mov	r0, r9
 8008ca4:	f7fb fb1b 	bl	80042de <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	dde5      	ble.n	8008c78 <mbedtls_rsa_validate_params+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8008cac:	463a      	mov	r2, r7
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4668      	mov	r0, sp
 8008cb2:	f7fb fc37 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d19f      	bne.n	8008bfc <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	4669      	mov	r1, sp
 8008cc0:	4668      	mov	r0, sp
 8008cc2:	f7fb fc19 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d197      	bne.n	8008bfc <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4641      	mov	r1, r8
 8008cd0:	a803      	add	r0, sp, #12
 8008cd2:	f7fb fc11 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d18f      	bne.n	8008bfc <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8008cdc:	aa03      	add	r2, sp, #12
 8008cde:	4669      	mov	r1, sp
 8008ce0:	4668      	mov	r0, sp
 8008ce2:	f7fb fe4f 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d187      	bne.n	8008bfc <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8008cec:	4601      	mov	r1, r0
 8008cee:	4668      	mov	r0, sp
 8008cf0:	f7fb faf5 	bl	80042de <mbedtls_mpi_cmp_int>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1bf      	bne.n	8008c78 <mbedtls_rsa_validate_params+0xac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8008cf8:	463a      	mov	r2, r7
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4668      	mov	r0, sp
 8008cfe:	f7fb fc11 	bl	8004524 <mbedtls_mpi_mul_mpi>
 8008d02:	4604      	mov	r4, r0
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f47f af79 	bne.w	8008bfc <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4669      	mov	r1, sp
 8008d0e:	4668      	mov	r0, sp
 8008d10:	f7fb fbf2 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008d14:	4604      	mov	r4, r0
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f47f af70 	bne.w	8008bfc <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	4649      	mov	r1, r9
 8008d20:	a803      	add	r0, sp, #12
 8008d22:	f7fb fbe9 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008d26:	4604      	mov	r4, r0
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	f47f af67 	bne.w	8008bfc <mbedtls_rsa_validate_params+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8008d2e:	aa03      	add	r2, sp, #12
 8008d30:	4669      	mov	r1, sp
 8008d32:	4668      	mov	r0, sp
 8008d34:	f7fb fe26 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008d38:	4604      	mov	r4, r0
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f47f af5e 	bne.w	8008bfc <mbedtls_rsa_validate_params+0x30>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8008d40:	4601      	mov	r1, r0
 8008d42:	4668      	mov	r0, sp
 8008d44:	f7fb facb 	bl	80042de <mbedtls_mpi_cmp_int>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f af56 	beq.w	8008bfc <mbedtls_rsa_validate_params+0x30>
 8008d50:	e792      	b.n	8008c78 <mbedtls_rsa_validate_params+0xac>
 8008d52:	bf00      	nop
 8008d54:	ffffbe00 	.word	0xffffbe00

08008d58 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 8008d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 8008d60:	a801      	add	r0, sp, #4
{
 8008d62:	460e      	mov	r6, r1
 8008d64:	4691      	mov	r9, r2
 8008d66:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8008d6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mbedtls_mpi_init( &K );
 8008d6c:	f7fb f815 	bl	8003d9a <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 8008d70:	f1ba 0f00 	cmp.w	sl, #0
 8008d74:	d105      	bne.n	8008d82 <mbedtls_rsa_deduce_crt+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 8008d76:	f1b8 0f00 	cmp.w	r8, #0
 8008d7a:	d118      	bne.n	8008dae <mbedtls_rsa_deduce_crt+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 8008d7c:	bb45      	cbnz	r5, 8008dd0 <mbedtls_rsa_deduce_crt+0x78>
 8008d7e:	462c      	mov	r4, r5
 8008d80:	e00e      	b.n	8008da0 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 8008d82:	2201      	movs	r2, #1
 8008d84:	4639      	mov	r1, r7
 8008d86:	a801      	add	r0, sp, #4
 8008d88:	f7fb fbb6 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	b938      	cbnz	r0, 8008da0 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8008d90:	aa01      	add	r2, sp, #4
 8008d92:	4649      	mov	r1, r9
 8008d94:	4650      	mov	r0, sl
 8008d96:	f7fb fdf5 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d0ea      	beq.n	8008d76 <mbedtls_rsa_deduce_crt+0x1e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
    mbedtls_mpi_free( &K );
 8008da0:	a801      	add	r0, sp, #4
 8008da2:	f7fb f801 	bl	8003da8 <mbedtls_mpi_free>

    return( ret );
}
 8008da6:	4620      	mov	r0, r4
 8008da8:	b004      	add	sp, #16
 8008daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 8008dae:	2201      	movs	r2, #1
 8008db0:	4631      	mov	r1, r6
 8008db2:	a801      	add	r0, sp, #4
 8008db4:	f7fb fba0 	bl	80044f8 <mbedtls_mpi_sub_int>
 8008db8:	4604      	mov	r4, r0
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d1f0      	bne.n	8008da0 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8008dbe:	aa01      	add	r2, sp, #4
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f7fb fdde 	bl	8004984 <mbedtls_mpi_mod_mpi>
 8008dc8:	4604      	mov	r4, r0
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d0d6      	beq.n	8008d7c <mbedtls_rsa_deduce_crt+0x24>
 8008dce:	e7e7      	b.n	8008da0 <mbedtls_rsa_deduce_crt+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f7fc f8e4 	bl	8004fa2 <mbedtls_mpi_inv_mod>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	e7e0      	b.n	8008da0 <mbedtls_rsa_deduce_crt+0x48>

08008dde <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8008dde:	226c      	movs	r2, #108	; 0x6c
 8008de0:	2100      	movs	r1, #0
 8008de2:	f006 b861 	b.w	800eea8 <memset>

08008de6 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8008de6:	b120      	cbz	r0, 8008df2 <mbedtls_sha256_free+0xc>
 8008de8:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8008dec:	2200      	movs	r2, #0
 8008dee:	4298      	cmp	r0, r3
 8008df0:	d100      	bne.n	8008df4 <mbedtls_sha256_free+0xe>
 8008df2:	4770      	bx	lr
 8008df4:	7002      	strb	r2, [r0, #0]
 8008df6:	3001      	adds	r0, #1
 8008df8:	e7f9      	b.n	8008dee <mbedtls_sha256_free+0x8>

08008dfa <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8008dfa:	b508      	push	{r3, lr}
    *dst = *src;
 8008dfc:	226c      	movs	r2, #108	; 0x6c
 8008dfe:	f006 f82e 	bl	800ee5e <memcpy>
 8008e02:	bd08      	pop	{r3, pc}

08008e04 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8008e08:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8008e0a:	b9b9      	cbnz	r1, 8008e3c <mbedtls_sha256_starts_ret+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8008e0c:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <mbedtls_sha256_starts_ret+0x6c>)
 8008e0e:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8008e10:	4b18      	ldr	r3, [pc, #96]	; (8008e74 <mbedtls_sha256_starts_ret+0x70>)
 8008e12:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8008e14:	4b18      	ldr	r3, [pc, #96]	; (8008e78 <mbedtls_sha256_starts_ret+0x74>)
 8008e16:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8008e18:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <mbedtls_sha256_starts_ret+0x78>)
 8008e1a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8008e1c:	4b18      	ldr	r3, [pc, #96]	; (8008e80 <mbedtls_sha256_starts_ret+0x7c>)
 8008e1e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 8008e20:	4b18      	ldr	r3, [pc, #96]	; (8008e84 <mbedtls_sha256_starts_ret+0x80>)
 8008e22:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <mbedtls_sha256_starts_ret+0x84>)
 8008e26:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8008e28:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8008e2c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8008e30:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 8008e34:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8008e36:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8008e38:	2000      	movs	r0, #0
 8008e3a:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
 8008e3c:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <mbedtls_sha256_starts_ret+0x88>)
 8008e3e:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8008e40:	4b13      	ldr	r3, [pc, #76]	; (8008e90 <mbedtls_sha256_starts_ret+0x8c>)
 8008e42:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 8008e44:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8008e48:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008e4c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8008e50:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8008e52:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <mbedtls_sha256_starts_ret+0x90>)
 8008e54:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 8008e56:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <mbedtls_sha256_starts_ret+0x94>)
 8008e58:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8008e5a:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8008e5e:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8008e62:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008e66:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <mbedtls_sha256_starts_ret+0x98>)
 8008e6a:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <mbedtls_sha256_starts_ret+0x9c>)
 8008e6e:	e7e1      	b.n	8008e34 <mbedtls_sha256_starts_ret+0x30>
 8008e70:	6a09e667 	.word	0x6a09e667
 8008e74:	bb67ae85 	.word	0xbb67ae85
 8008e78:	3c6ef372 	.word	0x3c6ef372
 8008e7c:	a54ff53a 	.word	0xa54ff53a
 8008e80:	510e527f 	.word	0x510e527f
 8008e84:	9b05688c 	.word	0x9b05688c
 8008e88:	1f83d9ab 	.word	0x1f83d9ab
 8008e8c:	c1059ed8 	.word	0xc1059ed8
 8008e90:	367cd507 	.word	0x367cd507
 8008e94:	f70e5939 	.word	0xf70e5939
 8008e98:	ffc00b31 	.word	0xffc00b31
 8008e9c:	64f98fa7 	.word	0x64f98fa7
 8008ea0:	befa4fa4 	.word	0xbefa4fa4

08008ea4 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	b0cf      	sub	sp, #316	; 0x13c
 8008eaa:	f100 0308 	add.w	r3, r0, #8
 8008eae:	9305      	str	r3, [sp, #20]
 8008eb0:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8008eb2:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8008eb4:	ac06      	add	r4, sp, #24
 8008eb6:	f852 0b04 	ldr.w	r0, [r2], #4
 8008eba:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d1f7      	bne.n	8008eb4 <mbedtls_internal_sha256_process+0x10>
 8008ec4:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8008ec6:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8008eca:	784b      	ldrb	r3, [r1, #1]
 8008ecc:	7808      	ldrb	r0, [r1, #0]
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008ed4:	78c8      	ldrb	r0, [r1, #3]
 8008ed6:	4303      	orrs	r3, r0
 8008ed8:	7888      	ldrb	r0, [r1, #2]
 8008eda:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008ede:	f84b 3022 	str.w	r3, [fp, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	2a10      	cmp	r2, #16
 8008ee6:	f101 0104 	add.w	r1, r1, #4
 8008eea:	d1ee      	bne.n	8008eca <mbedtls_internal_sha256_process+0x26>
 8008eec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008eee:	9101      	str	r1, [sp, #4]
 8008ef0:	4998      	ldr	r1, [pc, #608]	; (8009154 <mbedtls_internal_sha256_process+0x2b0>)
 8008ef2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8008ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008efc:	9b08      	ldr	r3, [sp, #32]
 8008efe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008f00:	9e07      	ldr	r6, [sp, #28]
 8008f02:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008f06:	9102      	str	r1, [sp, #8]
 8008f08:	46de      	mov	lr, fp
 8008f0a:	460d      	mov	r5, r1

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8008f0c:	9901      	ldr	r1, [sp, #4]
 8008f0e:	f8de 0000 	ldr.w	r0, [lr]
 8008f12:	ea4f 24f1 	mov.w	r4, r1, ror #11
 8008f16:	ea84 14b1 	eor.w	r4, r4, r1, ror #6
 8008f1a:	ea84 6471 	eor.w	r4, r4, r1, ror #25
 8008f1e:	6829      	ldr	r1, [r5, #0]
 8008f20:	4401      	add	r1, r0
 8008f22:	9801      	ldr	r0, [sp, #4]
 8008f24:	440c      	add	r4, r1
 8008f26:	ea87 010a 	eor.w	r1, r7, sl
 8008f2a:	4001      	ands	r1, r0
 8008f2c:	ea81 010a 	eor.w	r1, r1, sl
 8008f30:	440c      	add	r4, r1
 8008f32:	ea46 0009 	orr.w	r0, r6, r9
 8008f36:	ea4f 3179 	mov.w	r1, r9, ror #13
 8008f3a:	44a0      	add	r8, r4
 8008f3c:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 8008f40:	ea06 0409 	and.w	r4, r6, r9
 8008f44:	4018      	ands	r0, r3
 8008f46:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 8008f4a:	4320      	orrs	r0, r4
 8008f4c:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8008f4e:	686c      	ldr	r4, [r5, #4]
 8008f50:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008f54:	440c      	add	r4, r1
 8008f56:	9901      	ldr	r1, [sp, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8008f58:	4442      	add	r2, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8008f5a:	44a2      	add	sl, r4
 8008f5c:	ea87 0401 	eor.w	r4, r7, r1
 8008f60:	4014      	ands	r4, r2
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8008f62:	4480      	add	r8, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8008f64:	ea84 0007 	eor.w	r0, r4, r7
 8008f68:	eb0a 0400 	add.w	r4, sl, r0
 8008f6c:	ea4f 2af2 	mov.w	sl, r2, ror #11
 8008f70:	ea8a 1ab2 	eor.w	sl, sl, r2, ror #6
 8008f74:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8008f78:	44a2      	add	sl, r4
 8008f7a:	ea48 0109 	orr.w	r1, r8, r9
 8008f7e:	ea4f 3478 	mov.w	r4, r8, ror #13
 8008f82:	ea08 0009 	and.w	r0, r8, r9
 8008f86:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 8008f8a:	4031      	ands	r1, r6
 8008f8c:	4301      	orrs	r1, r0
 8008f8e:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8008f92:	68a8      	ldr	r0, [r5, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8008f94:	440c      	add	r4, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8008f96:	f8de 1008 	ldr.w	r1, [lr, #8]
 8008f9a:	4408      	add	r0, r1
 8008f9c:	9901      	ldr	r1, [sp, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8008f9e:	4453      	add	r3, sl
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8008fa0:	4407      	add	r7, r0
 8008fa2:	ea82 0001 	eor.w	r0, r2, r1
 8008fa6:	4018      	ands	r0, r3
 8008fa8:	ea80 0c01 	eor.w	ip, r0, r1
 8008fac:	eb07 000c 	add.w	r0, r7, ip
 8008fb0:	ea4f 27f3 	mov.w	r7, r3, ror #11
 8008fb4:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8008fb8:	4454      	add	r4, sl
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8008fba:	ea87 6773 	eor.w	r7, r7, r3, ror #25
 8008fbe:	4407      	add	r7, r0
 8008fc0:	ea48 0104 	orr.w	r1, r8, r4
 8008fc4:	ea4f 3074 	mov.w	r0, r4, ror #13
 8008fc8:	eb07 0c06 	add.w	ip, r7, r6
 8008fcc:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8008fd0:	ea08 0604 	and.w	r6, r8, r4
 8008fd4:	ea01 0109 	and.w	r1, r1, r9
 8008fd8:	4331      	orrs	r1, r6
 8008fda:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8008fde:	f8de 600c 	ldr.w	r6, [lr, #12]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8008fe2:	4408      	add	r0, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8008fe4:	68e9      	ldr	r1, [r5, #12]
 8008fe6:	4431      	add	r1, r6
 8008fe8:	9e01      	ldr	r6, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8008fea:	4438      	add	r0, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8008fec:	ea82 0703 	eor.w	r7, r2, r3
 8008ff0:	4431      	add	r1, r6
 8008ff2:	ea07 070c 	and.w	r7, r7, ip
 8008ff6:	ea4f 26fc 	mov.w	r6, ip, ror #11
 8008ffa:	4057      	eors	r7, r2
 8008ffc:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 8009000:	4439      	add	r1, r7
 8009002:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 8009006:	440e      	add	r6, r1
 8009008:	ea44 0700 	orr.w	r7, r4, r0
 800900c:	ea4f 3170 	mov.w	r1, r0, ror #13
 8009010:	ea04 0a00 	and.w	sl, r4, r0
 8009014:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8009018:	ea07 0708 	and.w	r7, r7, r8
 800901c:	ea47 070a 	orr.w	r7, r7, sl
 8009020:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8009024:	4439      	add	r1, r7
 8009026:	4431      	add	r1, r6
 8009028:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 800902a:	f8de 7010 	ldr.w	r7, [lr, #16]
 800902e:	692e      	ldr	r6, [r5, #16]
 8009030:	ea83 0a0c 	eor.w	sl, r3, ip
 8009034:	443e      	add	r6, r7
 8009036:	4432      	add	r2, r6
 8009038:	ea0a 0a09 	and.w	sl, sl, r9
 800903c:	ea4f 26f9 	mov.w	r6, r9, ror #11
 8009040:	ea8a 0a03 	eor.w	sl, sl, r3
 8009044:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 8009048:	4452      	add	r2, sl
 800904a:	ea86 6679 	eor.w	r6, r6, r9, ror #25
 800904e:	4416      	add	r6, r2
 8009050:	ea40 0701 	orr.w	r7, r0, r1
 8009054:	ea4f 3271 	mov.w	r2, r1, ror #13
 8009058:	ea00 0a01 	and.w	sl, r0, r1
 800905c:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8009060:	4027      	ands	r7, r4
 8009062:	ea47 070a 	orr.w	r7, r7, sl
 8009066:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 800906a:	443a      	add	r2, r7
 800906c:	4432      	add	r2, r6
 800906e:	44b0      	add	r8, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8009070:	f8de 7014 	ldr.w	r7, [lr, #20]
 8009074:	696e      	ldr	r6, [r5, #20]
 8009076:	ea8c 0a09 	eor.w	sl, ip, r9
 800907a:	443e      	add	r6, r7
 800907c:	4433      	add	r3, r6
 800907e:	ea0a 0a08 	and.w	sl, sl, r8
 8009082:	ea4f 26f8 	mov.w	r6, r8, ror #11
 8009086:	ea8a 0a0c 	eor.w	sl, sl, ip
 800908a:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 800908e:	4453      	add	r3, sl
 8009090:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8009094:	441e      	add	r6, r3
 8009096:	eb04 0a06 	add.w	sl, r4, r6
 800909a:	ea4f 3372 	mov.w	r3, r2, ror #13
 800909e:	ea41 0402 	orr.w	r4, r1, r2
 80090a2:	ea01 0702 	and.w	r7, r1, r2
 80090a6:	4004      	ands	r4, r0
 80090a8:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 80090ac:	433c      	orrs	r4, r7
 80090ae:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 80090b2:	4423      	add	r3, r4
 80090b4:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80090b6:	69ac      	ldr	r4, [r5, #24]
 80090b8:	f8de 6018 	ldr.w	r6, [lr, #24]
 80090bc:	ea89 0708 	eor.w	r7, r9, r8
 80090c0:	4434      	add	r4, r6
 80090c2:	ea07 070a 	and.w	r7, r7, sl
 80090c6:	ea4f 26fa 	mov.w	r6, sl, ror #11
 80090ca:	ea87 0709 	eor.w	r7, r7, r9
 80090ce:	44a4      	add	ip, r4
 80090d0:	ea86 16ba 	eor.w	r6, r6, sl, ror #6
 80090d4:	44bc      	add	ip, r7
 80090d6:	ea86 667a 	eor.w	r6, r6, sl, ror #25
 80090da:	44b4      	add	ip, r6
 80090dc:	eb00 070c 	add.w	r7, r0, ip
 80090e0:	ea4f 3673 	mov.w	r6, r3, ror #13
 80090e4:	ea42 0003 	orr.w	r0, r2, r3
 80090e8:	4008      	ands	r0, r1
 80090ea:	ea02 0403 	and.w	r4, r2, r3
 80090ee:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 80090f2:	4320      	orrs	r0, r4
 80090f4:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80090f8:	f8de 401c 	ldr.w	r4, [lr, #28]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80090fc:	4406      	add	r6, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80090fe:	69e8      	ldr	r0, [r5, #28]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8009100:	4466      	add	r6, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8009102:	4420      	add	r0, r4
 8009104:	ea88 0c0a 	eor.w	ip, r8, sl
 8009108:	4481      	add	r9, r0
 800910a:	ea0c 0c07 	and.w	ip, ip, r7
 800910e:	ea4f 20f7 	mov.w	r0, r7, ror #11
 8009112:	ea8c 0c08 	eor.w	ip, ip, r8
 8009116:	ea80 10b7 	eor.w	r0, r0, r7, ror #6
 800911a:	ea80 6077 	eor.w	r0, r0, r7, ror #25
 800911e:	44e1      	add	r9, ip
 8009120:	4481      	add	r9, r0
 8009122:	4449      	add	r1, r9
 8009124:	9101      	str	r1, [sp, #4]
 8009126:	ea43 0006 	orr.w	r0, r3, r6
 800912a:	ea4f 3176 	mov.w	r1, r6, ror #13
 800912e:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 8009132:	4010      	ands	r0, r2
 8009134:	ea03 0406 	and.w	r4, r3, r6
 8009138:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 800913c:	4320      	orrs	r0, r4
 800913e:	4408      	add	r0, r1
    for( i = 0; i < 16; i += 8 )
 8009140:	4905      	ldr	r1, [pc, #20]	; (8009158 <mbedtls_internal_sha256_process+0x2b4>)
 8009142:	3520      	adds	r5, #32
 8009144:	42a9      	cmp	r1, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8009146:	4481      	add	r9, r0
 8009148:	f10e 0e20 	add.w	lr, lr, #32
    for( i = 0; i < 16; i += 8 )
 800914c:	f47f aede 	bne.w	8008f0c <mbedtls_internal_sha256_process+0x68>
 8009150:	e004      	b.n	800915c <mbedtls_internal_sha256_process+0x2b8>
 8009152:	bf00      	nop
 8009154:	08013654 	.word	0x08013654
 8009158:	08013694 	.word	0x08013694
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800915c:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38
 8009160:	f8db 5004 	ldr.w	r5, [fp, #4]
 8009164:	f8db 0000 	ldr.w	r0, [fp]
 8009168:	ea4f 44f1 	mov.w	r4, r1, ror #19
 800916c:	ea84 4471 	eor.w	r4, r4, r1, ror #17
 8009170:	ea84 2491 	eor.w	r4, r4, r1, lsr #10
 8009174:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 8009178:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 800917c:	4401      	add	r1, r0
 800917e:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 8009182:	ea8e 0ed5 	eor.w	lr, lr, r5, lsr #3
 8009186:	440c      	add	r4, r1
 8009188:	eb04 010e 	add.w	r1, r4, lr
 800918c:	9104      	str	r1, [sp, #16]
 800918e:	9901      	ldr	r1, [sp, #4]
 8009190:	9c01      	ldr	r4, [sp, #4]
 8009192:	ea4f 20f1 	mov.w	r0, r1, ror #11
 8009196:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 800919a:	ea80 6171 	eor.w	r1, r0, r1, ror #25
 800919e:	ea87 000a 	eor.w	r0, r7, sl
 80091a2:	4020      	ands	r0, r4
 80091a4:	ea80 000a 	eor.w	r0, r0, sl
 80091a8:	4408      	add	r0, r1
 80091aa:	9902      	ldr	r1, [sp, #8]
 80091ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091ae:	4401      	add	r1, r0
 80091b0:	9804      	ldr	r0, [sp, #16]
 80091b2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80091b6:	4401      	add	r1, r0
 80091b8:	4488      	add	r8, r1
 80091ba:	eb08 0c02 	add.w	ip, r8, r2
 80091be:	ea46 0109 	orr.w	r1, r6, r9
 80091c2:	ea4f 3279 	mov.w	r2, r9, ror #13
 80091c6:	ea06 0009 	and.w	r0, r6, r9
 80091ca:	ea82 02b9 	eor.w	r2, r2, r9, ror #2
 80091ce:	4019      	ands	r1, r3
 80091d0:	ea82 52b9 	eor.w	r2, r2, r9, ror #22
 80091d4:	4301      	orrs	r1, r0
 80091d6:	4411      	add	r1, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80091d8:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 80091dc:	f8db 0008 	ldr.w	r0, [fp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80091e0:	4488      	add	r8, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80091e2:	ea4f 41f2 	mov.w	r1, r2, ror #19
 80091e6:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 80091ea:	ea81 2192 	eor.w	r1, r1, r2, lsr #10
 80091ee:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80091f2:	442a      	add	r2, r5
 80091f4:	440a      	add	r2, r1
 80091f6:	ea4f 41b0 	mov.w	r1, r0, ror #18
 80091fa:	ea81 11f0 	eor.w	r1, r1, r0, ror #7
 80091fe:	ea81 01d0 	eor.w	r1, r1, r0, lsr #3
 8009202:	440a      	add	r2, r1
 8009204:	9902      	ldr	r1, [sp, #8]
 8009206:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 800920a:	ea87 0504 	eor.w	r5, r7, r4
 800920e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8009210:	4454      	add	r4, sl
 8009212:	18a1      	adds	r1, r4, r2
 8009214:	ea05 050c 	and.w	r5, r5, ip
 8009218:	ea4f 24fc 	mov.w	r4, ip, ror #11
 800921c:	407d      	eors	r5, r7
 800921e:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 8009222:	ea84 647c 	eor.w	r4, r4, ip, ror #25
 8009226:	440d      	add	r5, r1
 8009228:	1961      	adds	r1, r4, r5
 800922a:	eb01 0a03 	add.w	sl, r1, r3
 800922e:	ea4f 3478 	mov.w	r4, r8, ror #13
 8009232:	ea48 0309 	orr.w	r3, r8, r9
 8009236:	ea08 0509 	and.w	r5, r8, r9
 800923a:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 800923e:	4033      	ands	r3, r6
 8009240:	432b      	orrs	r3, r5
 8009242:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 8009246:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8009248:	9b04      	ldr	r3, [sp, #16]
 800924a:	f8db 500c 	ldr.w	r5, [fp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800924e:	440c      	add	r4, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8009250:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8009254:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8009258:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 800925c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8009260:	4403      	add	r3, r0
 8009262:	ea4f 40b5 	mov.w	r0, r5, ror #18
 8009266:	440b      	add	r3, r1
 8009268:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
 800926c:	9902      	ldr	r1, [sp, #8]
 800926e:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
 8009272:	4403      	add	r3, r0
 8009274:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8009276:	9901      	ldr	r1, [sp, #4]
 8009278:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
 800927c:	ea8c 0e01 	eor.w	lr, ip, r1
 8009280:	4438      	add	r0, r7
 8009282:	ea0e 0e0a 	and.w	lr, lr, sl
 8009286:	4418      	add	r0, r3
 8009288:	ea8e 0e01 	eor.w	lr, lr, r1
 800928c:	4486      	add	lr, r0
 800928e:	ea4f 20fa 	mov.w	r0, sl, ror #11
 8009292:	ea80 10ba 	eor.w	r0, r0, sl, ror #6
 8009296:	ea80 607a 	eor.w	r0, r0, sl, ror #25
 800929a:	eb00 010e 	add.w	r1, r0, lr
 800929e:	1988      	adds	r0, r1, r6
 80092a0:	9003      	str	r0, [sp, #12]
 80092a2:	ea4f 3774 	mov.w	r7, r4, ror #13
 80092a6:	ea48 0004 	orr.w	r0, r8, r4
 80092aa:	ea08 0604 	and.w	r6, r8, r4
 80092ae:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 80092b2:	ea00 0009 	and.w	r0, r0, r9
 80092b6:	ea87 57b4 	eor.w	r7, r7, r4, ror #22
 80092ba:	4330      	orrs	r0, r6
 80092bc:	4438      	add	r0, r7
 80092be:	4408      	add	r0, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80092c0:	ea4f 41f2 	mov.w	r1, r2, ror #19
 80092c4:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 80092c8:	ea81 2292 	eor.w	r2, r1, r2, lsr #10
 80092cc:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
 80092d0:	f8db 7010 	ldr.w	r7, [fp, #16]
 80092d4:	440d      	add	r5, r1
 80092d6:	442a      	add	r2, r5
 80092d8:	ea4f 45b7 	mov.w	r5, r7, ror #18
 80092dc:	ea85 15f7 	eor.w	r5, r5, r7, ror #7
 80092e0:	ea85 05d7 	eor.w	r5, r5, r7, lsr #3
 80092e4:	4415      	add	r5, r2
 80092e6:	9a02      	ldr	r2, [sp, #8]
 80092e8:	9903      	ldr	r1, [sp, #12]
 80092ea:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
 80092ec:	9a01      	ldr	r2, [sp, #4]
 80092ee:	f8cb 504c 	str.w	r5, [fp, #76]	; 0x4c
 80092f2:	4416      	add	r6, r2
 80092f4:	ea8c 020a 	eor.w	r2, ip, sl
 80092f8:	400a      	ands	r2, r1
 80092fa:	442e      	add	r6, r5
 80092fc:	ea82 020c 	eor.w	r2, r2, ip
 8009300:	4432      	add	r2, r6
 8009302:	9e03      	ldr	r6, [sp, #12]
 8009304:	ea4f 21f1 	mov.w	r1, r1, ror #11
 8009308:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 800930c:	ea81 6176 	eor.w	r1, r1, r6, ror #25
 8009310:	188e      	adds	r6, r1, r2
 8009312:	ea44 0200 	orr.w	r2, r4, r0
 8009316:	ea4f 3170 	mov.w	r1, r0, ror #13
 800931a:	ea04 0e00 	and.w	lr, r4, r0
 800931e:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8009322:	ea02 0208 	and.w	r2, r2, r8
 8009326:	ea42 020e 	orr.w	r2, r2, lr
 800932a:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 800932e:	4411      	add	r1, r2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8009330:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8009334:	ea82 4273 	eor.w	r2, r2, r3, ror #17
 8009338:	ea82 2393 	eor.w	r3, r2, r3, lsr #10
 800933c:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8009340:	4431      	add	r1, r6
 8009342:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8009344:	f8db 6014 	ldr.w	r6, [fp, #20]
 8009348:	4417      	add	r7, r2
 800934a:	443b      	add	r3, r7
 800934c:	ea4f 47b6 	mov.w	r7, r6, ror #18
 8009350:	ea87 17f6 	eor.w	r7, r7, r6, ror #7
 8009354:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8009358:	441f      	add	r7, r3
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	f8cb 7050 	str.w	r7, [fp, #80]	; 0x50
 8009360:	ea8a 0e03 	eor.w	lr, sl, r3
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009368:	ea0e 0e09 	and.w	lr, lr, r9
 800936c:	443b      	add	r3, r7
 800936e:	ea4f 22f9 	mov.w	r2, r9, ror #11
 8009372:	4463      	add	r3, ip
 8009374:	ea8e 0e0a 	eor.w	lr, lr, sl
 8009378:	ea82 12b9 	eor.w	r2, r2, r9, ror #6
 800937c:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 8009380:	449e      	add	lr, r3
 8009382:	eb02 030e 	add.w	r3, r2, lr
 8009386:	ea40 0e01 	orr.w	lr, r0, r1
 800938a:	ea4f 3271 	mov.w	r2, r1, ror #13
 800938e:	ea00 0c01 	and.w	ip, r0, r1
 8009392:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8009396:	ea0e 0e04 	and.w	lr, lr, r4
 800939a:	ea4e 0e0c 	orr.w	lr, lr, ip
 800939e:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 80093a2:	4472      	add	r2, lr
 80093a4:	441a      	add	r2, r3
 80093a6:	4498      	add	r8, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80093a8:	ea4f 43f5 	mov.w	r3, r5, ror #19
 80093ac:	ea83 4375 	eor.w	r3, r3, r5, ror #17
 80093b0:	f8db e018 	ldr.w	lr, [fp, #24]
 80093b4:	ea83 2595 	eor.w	r5, r3, r5, lsr #10
 80093b8:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80093bc:	441e      	add	r6, r3
 80093be:	ea4f 43be 	mov.w	r3, lr, ror #18
 80093c2:	ea83 13fe 	eor.w	r3, r3, lr, ror #7
 80093c6:	ea83 03de 	eor.w	r3, r3, lr, lsr #3
 80093ca:	4435      	add	r5, r6
 80093cc:	441d      	add	r5, r3
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	f8cb 5054 	str.w	r5, [fp, #84]	; 0x54
 80093d4:	ea83 0c09 	eor.w	ip, r3, r9
 80093d8:	ea0c 0c08 	and.w	ip, ip, r8
 80093dc:	ea8c 0c03 	eor.w	ip, ip, r3
 80093e0:	9b02      	ldr	r3, [sp, #8]
 80093e2:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 80093e4:	ea4f 23f8 	mov.w	r3, r8, ror #11
 80093e8:	442e      	add	r6, r5
 80093ea:	4456      	add	r6, sl
 80093ec:	ea83 13b8 	eor.w	r3, r3, r8, ror #6
 80093f0:	44b4      	add	ip, r6
 80093f2:	ea83 6378 	eor.w	r3, r3, r8, ror #25
 80093f6:	eb03 060c 	add.w	r6, r3, ip
 80093fa:	eb04 0a06 	add.w	sl, r4, r6
 80093fe:	ea4f 3372 	mov.w	r3, r2, ror #13
 8009402:	ea41 0402 	orr.w	r4, r1, r2
 8009406:	ea01 0c02 	and.w	ip, r1, r2
 800940a:	4004      	ands	r4, r0
 800940c:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 8009410:	ea44 040c 	orr.w	r4, r4, ip
 8009414:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8009418:	4423      	add	r3, r4
 800941a:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800941c:	ea4f 46f7 	mov.w	r6, r7, ror #19
 8009420:	ea86 4677 	eor.w	r6, r6, r7, ror #17
 8009424:	f8db 401c 	ldr.w	r4, [fp, #28]
 8009428:	ea86 2797 	eor.w	r7, r6, r7, lsr #10
 800942c:	f8db 603c 	ldr.w	r6, [fp, #60]	; 0x3c
 8009430:	44b6      	add	lr, r6
 8009432:	ea4f 46b4 	mov.w	r6, r4, ror #18
 8009436:	ea86 16f4 	eor.w	r6, r6, r4, ror #7
 800943a:	ea86 06d4 	eor.w	r6, r6, r4, lsr #3
 800943e:	4477      	add	r7, lr
 8009440:	4437      	add	r7, r6
 8009442:	9e02      	ldr	r6, [sp, #8]
 8009444:	f8cb 7058 	str.w	r7, [fp, #88]	; 0x58
 8009448:	6db6      	ldr	r6, [r6, #88]	; 0x58
 800944a:	ea89 0c08 	eor.w	ip, r9, r8
 800944e:	eb06 0e07 	add.w	lr, r6, r7
 8009452:	9e03      	ldr	r6, [sp, #12]
 8009454:	ea0c 0c0a 	and.w	ip, ip, sl
 8009458:	ea8c 0c09 	eor.w	ip, ip, r9
 800945c:	4476      	add	r6, lr
 800945e:	4466      	add	r6, ip
 8009460:	ea4f 2cfa 	mov.w	ip, sl, ror #11
 8009464:	ea8c 1cba 	eor.w	ip, ip, sl, ror #6
 8009468:	ea8c 6c7a 	eor.w	ip, ip, sl, ror #25
 800946c:	44b4      	add	ip, r6
 800946e:	eb00 070c 	add.w	r7, r0, ip
 8009472:	ea4f 3673 	mov.w	r6, r3, ror #13
 8009476:	ea42 0003 	orr.w	r0, r2, r3
 800947a:	4008      	ands	r0, r1
 800947c:	ea02 0e03 	and.w	lr, r2, r3
 8009480:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 8009484:	ea40 000e 	orr.w	r0, r0, lr
 8009488:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
 800948c:	4406      	add	r6, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800948e:	ea4f 40f5 	mov.w	r0, r5, ror #19
 8009492:	ea80 4075 	eor.w	r0, r0, r5, ror #17
 8009496:	f8db e020 	ldr.w	lr, [fp, #32]
 800949a:	ea80 2595 	eor.w	r5, r0, r5, lsr #10
 800949e:	9804      	ldr	r0, [sp, #16]
 80094a0:	4404      	add	r4, r0
 80094a2:	ea4f 40be 	mov.w	r0, lr, ror #18
 80094a6:	ea80 10fe 	eor.w	r0, r0, lr, ror #7
 80094aa:	ea80 0ede 	eor.w	lr, r0, lr, lsr #3
 80094ae:	9802      	ldr	r0, [sp, #8]
 80094b0:	4425      	add	r5, r4
 80094b2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80094b4:	4475      	add	r5, lr
 80094b6:	ea88 040a 	eor.w	r4, r8, sl
 80094ba:	4428      	add	r0, r5
 80094bc:	403c      	ands	r4, r7
 80094be:	4481      	add	r9, r0
 80094c0:	ea84 0408 	eor.w	r4, r4, r8
 80094c4:	444c      	add	r4, r9
 80094c6:	ea4f 29f7 	mov.w	r9, r7, ror #11
 80094ca:	ea89 19b7 	eor.w	r9, r9, r7, ror #6
 80094ce:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 80094d2:	44a1      	add	r9, r4
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80094d4:	4466      	add	r6, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80094d6:	4449      	add	r1, r9
 80094d8:	9101      	str	r1, [sp, #4]
 80094da:	ea43 0006 	orr.w	r0, r3, r6
 80094de:	ea4f 3176 	mov.w	r1, r6, ror #13
 80094e2:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 80094e6:	4010      	ands	r0, r2
 80094e8:	ea03 0406 	and.w	r4, r3, r6
 80094ec:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 80094f0:	4320      	orrs	r0, r4
 80094f2:	4401      	add	r1, r0
 80094f4:	4489      	add	r9, r1
 80094f6:	9902      	ldr	r1, [sp, #8]
 80094f8:	f8cb 505c 	str.w	r5, [fp, #92]	; 0x5c
 80094fc:	3120      	adds	r1, #32
 80094fe:	9102      	str	r1, [sp, #8]
 8009500:	f10b 0b20 	add.w	fp, fp, #32
    for( i = 16; i < 64; i += 8 )
 8009504:	a93e      	add	r1, sp, #248	; 0xf8
 8009506:	4559      	cmp	r1, fp
 8009508:	f47f ae28 	bne.w	800915c <mbedtls_internal_sha256_process+0x2b8>
 800950c:	9901      	ldr	r1, [sp, #4]
 800950e:	9308      	str	r3, [sp, #32]
 8009510:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8009514:	910a      	str	r1, [sp, #40]	; 0x28
 8009516:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800951a:	970b      	str	r7, [sp, #44]	; 0x2c
 800951c:	f8cd 9018 	str.w	r9, [sp, #24]
 8009520:	9607      	str	r6, [sp, #28]
 8009522:	9209      	str	r2, [sp, #36]	; 0x24
 8009524:	2300      	movs	r3, #0
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8009526:	9a05      	ldr	r2, [sp, #20]
 8009528:	a906      	add	r1, sp, #24
 800952a:	6812      	ldr	r2, [r2, #0]
 800952c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009530:	440a      	add	r2, r1
 8009532:	9905      	ldr	r1, [sp, #20]
    for( i = 0; i < 8; i++ )
 8009534:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8009536:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
 800953a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 800953c:	9105      	str	r1, [sp, #20]
    for( i = 0; i < 8; i++ )
 800953e:	d1f2      	bne.n	8009526 <mbedtls_internal_sha256_process+0x682>

    return( 0 );
}
 8009540:	2000      	movs	r0, #0
 8009542:	b04f      	add	sp, #316	; 0x13c
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009548 <mbedtls_sha256_update_ret.part.0>:
    uint32_t left;

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8009548:	6803      	ldr	r3, [r0, #0]
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
 800954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954e:	4605      	mov	r5, r0
    left = ctx->total[0] & 0x3F;
 8009550:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8009554:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8009556:	429a      	cmp	r2, r3
    ctx->total[0] += (uint32_t) ilen;
 8009558:	602b      	str	r3, [r5, #0]
        ctx->total[1]++;
 800955a:	bf84      	itt	hi
 800955c:	686b      	ldrhi	r3, [r5, #4]
 800955e:	3301      	addhi	r3, #1
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
 8009560:	460f      	mov	r7, r1
 8009562:	4614      	mov	r4, r2
        ctx->total[1]++;
 8009564:	bf88      	it	hi
 8009566:	606b      	strhi	r3, [r5, #4]

    if( left && ilen >= fill )
 8009568:	b308      	cbz	r0, 80095ae <mbedtls_sha256_update_ret.part.0+0x66>
    fill = 64 - left;
 800956a:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
    if( left && ilen >= fill )
 800956e:	4296      	cmp	r6, r2
 8009570:	d813      	bhi.n	800959a <mbedtls_sha256_update_ret.part.0+0x52>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8009572:	f105 0828 	add.w	r8, r5, #40	; 0x28
 8009576:	4632      	mov	r2, r6
 8009578:	4440      	add	r0, r8
 800957a:	f005 fc70 	bl	800ee5e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800957e:	4641      	mov	r1, r8
 8009580:	4628      	mov	r0, r5
 8009582:	f7ff fc8f 	bl	8008ea4 <mbedtls_internal_sha256_process>
 8009586:	b9d8      	cbnz	r0, 80095c0 <mbedtls_sha256_update_ret.part.0+0x78>
            return( ret );

        input += fill;
 8009588:	4437      	add	r7, r6
        ilen  -= fill;
 800958a:	1ba6      	subs	r6, r4, r6
    if( left && ilen >= fill )
 800958c:	4634      	mov	r4, r6
 800958e:	1b31      	subs	r1, r6, r4
        left = 0;
    }

    while( ilen >= 64 )
 8009590:	2c3f      	cmp	r4, #63	; 0x3f
 8009592:	4439      	add	r1, r7
 8009594:	d80d      	bhi.n	80095b2 <mbedtls_sha256_update_ret.part.0+0x6a>
 8009596:	460f      	mov	r7, r1
 8009598:	2000      	movs	r0, #0

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 800959a:	b184      	cbz	r4, 80095be <mbedtls_sha256_update_ret.part.0+0x76>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800959c:	3528      	adds	r5, #40	; 0x28
 800959e:	4622      	mov	r2, r4
 80095a0:	4639      	mov	r1, r7
 80095a2:	4428      	add	r0, r5
 80095a4:	f005 fc5b 	bl	800ee5e <memcpy>

    return( 0 );
 80095a8:	2000      	movs	r0, #0
 80095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( left && ilen >= fill )
 80095ae:	4616      	mov	r6, r2
 80095b0:	e7ec      	b.n	800958c <mbedtls_sha256_update_ret.part.0+0x44>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80095b2:	4628      	mov	r0, r5
 80095b4:	f7ff fc76 	bl	8008ea4 <mbedtls_internal_sha256_process>
 80095b8:	b910      	cbnz	r0, 80095c0 <mbedtls_sha256_update_ret.part.0+0x78>
        ilen  -= 64;
 80095ba:	3c40      	subs	r4, #64	; 0x40
 80095bc:	e7e7      	b.n	800958e <mbedtls_sha256_update_ret.part.0+0x46>
    return( 0 );
 80095be:	4620      	mov	r0, r4
}
 80095c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095c4 <mbedtls_sha256_update_ret>:
    if( ilen == 0 )
 80095c4:	b10a      	cbz	r2, 80095ca <mbedtls_sha256_update_ret+0x6>
 80095c6:	f7ff bfbf 	b.w	8009548 <mbedtls_sha256_update_ret.part.0>
}
 80095ca:	4610      	mov	r0, r2
 80095cc:	4770      	bx	lr
	...

080095d0 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80095d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
 80095d2:	6802      	ldr	r2, [r0, #0]
{
 80095d4:	460d      	mov	r5, r1
         | ( ctx->total[1] <<  3 );
 80095d6:	6841      	ldr	r1, [r0, #4]
    high = ( ctx->total[0] >> 29 )
 80095d8:	0f53      	lsrs	r3, r2, #29
 80095da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
{
 80095de:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 80095e0:	0e18      	lsrs	r0, r3, #24
    low  = ( ctx->total[0] <<  3 );
 80095e2:	00d1      	lsls	r1, r2, #3
    PUT_UINT32_BE( high, msglen, 0 );
 80095e4:	f88d 0000 	strb.w	r0, [sp]
 80095e8:	0c18      	lsrs	r0, r3, #16
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 80095ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    PUT_UINT32_BE( high, msglen, 0 );
 80095ee:	f88d 0001 	strb.w	r0, [sp, #1]
 80095f2:	f88d 3003 	strb.w	r3, [sp, #3]
 80095f6:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( low,  msglen, 4 );
 80095f8:	0e0b      	lsrs	r3, r1, #24
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80095fa:	2a37      	cmp	r2, #55	; 0x37
    PUT_UINT32_BE( low,  msglen, 4 );
 80095fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8009600:	ea4f 4311 	mov.w	r3, r1, lsr #16
    PUT_UINT32_BE( high, msglen, 0 );
 8009604:	f88d 0002 	strb.w	r0, [sp, #2]
    PUT_UINT32_BE( low,  msglen, 4 );
 8009608:	f88d 3005 	strb.w	r3, [sp, #5]
 800960c:	f88d 1007 	strb.w	r1, [sp, #7]
 8009610:	ea4f 2311 	mov.w	r3, r1, lsr #8
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8009614:	bf94      	ite	ls
 8009616:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 800961a:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 800961e:	492e      	ldr	r1, [pc, #184]	; (80096d8 <mbedtls_sha256_finish_ret+0x108>)
    PUT_UINT32_BE( low,  msglen, 4 );
 8009620:	f88d 3006 	strb.w	r3, [sp, #6]
    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff ffcd 	bl	80095c4 <mbedtls_sha256_update_ret>
 800962a:	2800      	cmp	r0, #0
 800962c:	d152      	bne.n	80096d4 <mbedtls_sha256_finish_ret+0x104>
 800962e:	2208      	movs	r2, #8
 8009630:	4669      	mov	r1, sp
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff ff88 	bl	8009548 <mbedtls_sha256_update_ret.part.0>
        return( ret );

    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )
 8009638:	2800      	cmp	r0, #0
 800963a:	d14b      	bne.n	80096d4 <mbedtls_sha256_finish_ret+0x104>
        return( ret );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 800963c:	7ae3      	ldrb	r3, [r4, #11]
 800963e:	702b      	strb	r3, [r5, #0]
 8009640:	8963      	ldrh	r3, [r4, #10]
 8009642:	706b      	strb	r3, [r5, #1]
 8009644:	68a3      	ldr	r3, [r4, #8]
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	70ab      	strb	r3, [r5, #2]
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 800964e:	7be3      	ldrb	r3, [r4, #15]
 8009650:	712b      	strb	r3, [r5, #4]
 8009652:	89e3      	ldrh	r3, [r4, #14]
 8009654:	716b      	strb	r3, [r5, #5]
 8009656:	68e3      	ldr	r3, [r4, #12]
 8009658:	0a1b      	lsrs	r3, r3, #8
 800965a:	71ab      	strb	r3, [r5, #6]
 800965c:	68e3      	ldr	r3, [r4, #12]
 800965e:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8009660:	7ce3      	ldrb	r3, [r4, #19]
 8009662:	722b      	strb	r3, [r5, #8]
 8009664:	8a63      	ldrh	r3, [r4, #18]
 8009666:	726b      	strb	r3, [r5, #9]
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	72ab      	strb	r3, [r5, #10]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8009672:	7de3      	ldrb	r3, [r4, #23]
 8009674:	732b      	strb	r3, [r5, #12]
 8009676:	8ae3      	ldrh	r3, [r4, #22]
 8009678:	736b      	strb	r3, [r5, #13]
 800967a:	6963      	ldr	r3, [r4, #20]
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	73ab      	strb	r3, [r5, #14]
 8009680:	6963      	ldr	r3, [r4, #20]
 8009682:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8009684:	7ee3      	ldrb	r3, [r4, #27]
 8009686:	742b      	strb	r3, [r5, #16]
 8009688:	8b63      	ldrh	r3, [r4, #26]
 800968a:	746b      	strb	r3, [r5, #17]
 800968c:	69a3      	ldr	r3, [r4, #24]
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	74ab      	strb	r3, [r5, #18]
 8009692:	69a3      	ldr	r3, [r4, #24]
 8009694:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8009696:	7fe3      	ldrb	r3, [r4, #31]
 8009698:	752b      	strb	r3, [r5, #20]
 800969a:	8be3      	ldrh	r3, [r4, #30]
 800969c:	756b      	strb	r3, [r5, #21]
 800969e:	69e3      	ldr	r3, [r4, #28]
 80096a0:	0a1b      	lsrs	r3, r3, #8
 80096a2:	75ab      	strb	r3, [r5, #22]
 80096a4:	69e3      	ldr	r3, [r4, #28]
 80096a6:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80096a8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80096ac:	762b      	strb	r3, [r5, #24]
 80096ae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80096b0:	766b      	strb	r3, [r5, #25]
 80096b2:	6a23      	ldr	r3, [r4, #32]
 80096b4:	0a1b      	lsrs	r3, r3, #8
 80096b6:	76ab      	strb	r3, [r5, #26]
 80096b8:	6a23      	ldr	r3, [r4, #32]
 80096ba:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 80096bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80096be:	b94b      	cbnz	r3, 80096d4 <mbedtls_sha256_finish_ret+0x104>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80096c0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80096c4:	772b      	strb	r3, [r5, #28]
 80096c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80096c8:	776b      	strb	r3, [r5, #29]
 80096ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096cc:	0a1b      	lsrs	r3, r3, #8
 80096ce:	77ab      	strb	r3, [r5, #30]
 80096d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d2:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 80096d4:	b003      	add	sp, #12
 80096d6:	bd30      	pop	{r4, r5, pc}
 80096d8:	08013754 	.word	0x08013754

080096dc <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80096dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096de:	b09d      	sub	sp, #116	; 0x74
 80096e0:	461f      	mov	r7, r3
 80096e2:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80096e4:	a801      	add	r0, sp, #4
{
 80096e6:	460e      	mov	r6, r1
 80096e8:	4614      	mov	r4, r2
    mbedtls_sha256_init( &ctx );
 80096ea:	f7ff fb78 	bl	8008dde <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80096ee:	4639      	mov	r1, r7
 80096f0:	a801      	add	r0, sp, #4
 80096f2:	f7ff fb87 	bl	8008e04 <mbedtls_sha256_starts_ret>
 80096f6:	4601      	mov	r1, r0
 80096f8:	b958      	cbnz	r0, 8009712 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80096fa:	4629      	mov	r1, r5
 80096fc:	4632      	mov	r2, r6
 80096fe:	a801      	add	r0, sp, #4
 8009700:	f7ff ff60 	bl	80095c4 <mbedtls_sha256_update_ret>
 8009704:	4601      	mov	r1, r0
 8009706:	b920      	cbnz	r0, 8009712 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8009708:	4621      	mov	r1, r4
 800970a:	a801      	add	r0, sp, #4
 800970c:	f7ff ff60 	bl	80095d0 <mbedtls_sha256_finish_ret>
 8009710:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 8009712:	a801      	add	r0, sp, #4
 8009714:	f7ff fb67 	bl	8008de6 <mbedtls_sha256_free>

    return( ret );
}
 8009718:	4608      	mov	r0, r1
 800971a:	b01d      	add	sp, #116	; 0x74
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009720 <mbedtls_ssl_list_ciphersuites>:

#if defined(MBEDTLS_SSL_CIPHERSUITES)
const int *mbedtls_ssl_list_ciphersuites( void )
{
    return( ciphersuite_preference );
}
 8009720:	4800      	ldr	r0, [pc, #0]	; (8009724 <mbedtls_ssl_list_ciphersuites+0x4>)
 8009722:	4770      	bx	lr
 8009724:	08013814 	.word	0x08013814

08009728 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 8009728:	4b04      	ldr	r3, [pc, #16]	; (800973c <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	b912      	cbnz	r2, 8009734 <mbedtls_ssl_ciphersuite_from_id+0xc>
            return( cur );

        cur++;
    }

    return( NULL );
 800972e:	4613      	mov	r3, r2
}
 8009730:	4618      	mov	r0, r3
 8009732:	4770      	bx	lr
        if( cur->id == ciphersuite )
 8009734:	4282      	cmp	r2, r0
 8009736:	d0fb      	beq.n	8009730 <mbedtls_ssl_ciphersuite_from_id+0x8>
        cur++;
 8009738:	3320      	adds	r3, #32
 800973a:	e7f6      	b.n	800972a <mbedtls_ssl_ciphersuite_from_id+0x2>
 800973c:	08013794 	.word	0x08013794

08009740 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 8009740:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 8009742:	f7ff fff1 	bl	8009728 <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 8009746:	b108      	cbz	r0, 800974c <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 8009748:	6840      	ldr	r0, [r0, #4]
 800974a:	bd08      	pop	{r3, pc}
        return( "unknown" );
 800974c:	4800      	ldr	r0, [pc, #0]	; (8009750 <mbedtls_ssl_get_ciphersuite_name+0x10>)
}
 800974e:	bd08      	pop	{r3, pc}
 8009750:	0801227d 	.word	0x0801227d

08009754 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8009754:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009756:	b10b      	cbz	r3, 800975c <mbedtls_ssl_own_key+0x8>
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	b913      	cbnz	r3, 8009762 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 800975c:	6803      	ldr	r3, [r0, #0]
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38

    return( key_cert == NULL ? NULL : key_cert->key );
 8009760:	b10b      	cbz	r3, 8009766 <mbedtls_ssl_own_key+0x12>
 8009762:	6858      	ldr	r0, [r3, #4]
 8009764:	4770      	bx	lr
 8009766:	4618      	mov	r0, r3
}
 8009768:	4770      	bx	lr
	...

0800976c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8009770:	6843      	ldr	r3, [r0, #4]
 8009772:	2b10      	cmp	r3, #16
{
 8009774:	b099      	sub	sp, #100	; 0x64
 8009776:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8009778:	d05b      	beq.n	8009832 <mbedtls_ssl_handshake_client_step+0xc6>
 800977a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800977c:	2900      	cmp	r1, #0
 800977e:	d058      	beq.n	8009832 <mbedtls_ssl_handshake_client_step+0xc6>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    printf("handshake: %d \r\n", ssl->handshake);
 8009780:	48aa      	ldr	r0, [pc, #680]	; (8009a2c <mbedtls_ssl_handshake_client_step+0x2c0>)
 8009782:	f005 fc53 	bl	800f02c <iprintf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 8009786:	6863      	ldr	r3, [r4, #4]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	4ba9      	ldr	r3, [pc, #676]	; (8009a30 <mbedtls_ssl_handshake_client_step+0x2c4>)
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	4aa9      	ldr	r2, [pc, #676]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8009790:	f640 5308 	movw	r3, #3336	; 0xd08
 8009794:	2102      	movs	r1, #2
 8009796:	4620      	mov	r0, r4
 8009798:	f7fc f8c0 	bl	800591c <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 800979c:	4620      	mov	r0, r4
 800979e:	f001 fc07 	bl	800afb0 <mbedtls_ssl_flush_output>
 80097a2:	4605      	mov	r5, r0
 80097a4:	b9c0      	cbnz	r0, 80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	2b0f      	cmp	r3, #15
 80097aa:	f200 86b3 	bhi.w	800a514 <mbedtls_ssl_handshake_client_step+0xda8>
 80097ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80097b2:	0010      	.short	0x0010
 80097b4:	00fe0017 	.word	0x00fe0017
 80097b8:	039a0395 	.word	0x039a0395
 80097bc:	04d303f9 	.word	0x04d303f9
 80097c0:	051a0516 	.word	0x051a0516
 80097c4:	068f05be 	.word	0x068f05be
 80097c8:	06970693 	.word	0x06970693
 80097cc:	069f069b 	.word	0x069f069b
 80097d0:	06ac      	.short	0x06ac
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 80097d2:	2201      	movs	r2, #1
 80097d4:	6062      	str	r2, [r4, #4]
            break;
 80097d6:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 80097d8:	4628      	mov	r0, r5
 80097da:	b019      	add	sp, #100	; 0x64
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 80097e0:	4b95      	ldr	r3, [pc, #596]	; (8009a38 <mbedtls_ssl_handshake_client_step+0x2cc>)
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	2102      	movs	r1, #2
 80097e6:	f240 23da 	movw	r3, #730	; 0x2da
 80097ea:	4a92      	ldr	r2, [pc, #584]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 80097ec:	4620      	mov	r0, r4
 80097ee:	f7fc f895 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->conf->f_rng == NULL )
 80097f2:	6821      	ldr	r1, [r4, #0]
 80097f4:	698b      	ldr	r3, [r1, #24]
 80097f6:	b953      	cbnz	r3, 800980e <mbedtls_ssl_handshake_client_step+0xa2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 80097f8:	4b90      	ldr	r3, [pc, #576]	; (8009a3c <mbedtls_ssl_handshake_client_step+0x2d0>)
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4a8d      	ldr	r2, [pc, #564]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80097fe:	4d90      	ldr	r5, [pc, #576]	; (8009a40 <mbedtls_ssl_handshake_client_step+0x2d4>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 8009800:	f240 23de 	movw	r3, #734	; 0x2de
 8009804:	2101      	movs	r1, #1
 8009806:	4620      	mov	r0, r4
 8009808:	f7fc f888 	bl	800591c <mbedtls_debug_print_msg>
 800980c:	e7e4      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
        ssl->major_ver = ssl->conf->min_major_ver;
 800980e:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
 8009812:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 8009814:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
 8009818:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
 800981a:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 800981e:	b950      	cbnz	r0, 8009836 <mbedtls_ssl_handshake_client_step+0xca>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 8009820:	4b88      	ldr	r3, [pc, #544]	; (8009a44 <mbedtls_ssl_handshake_client_step+0x2d8>)
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	4a83      	ldr	r2, [pc, #524]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8009826:	f240 23ed 	movw	r3, #749	; 0x2ed
 800982a:	2101      	movs	r1, #1
 800982c:	4620      	mov	r0, r4
 800982e:	f7fc f875 	bl	800591c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8009832:	4d85      	ldr	r5, [pc, #532]	; (8009a48 <mbedtls_ssl_handshake_client_step+0x2dc>)
 8009834:	e7d0      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    buf = ssl->out_msg;
 8009836:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
                       ssl->conf->transport, p );
 800983a:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800983e:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
 8009842:	f108 0304 	add.w	r3, r8, #4
 8009846:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800984a:	f003 fcab 	bl	800d1a4 <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 800984e:	f898 3005 	ldrb.w	r3, [r8, #5]
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	f898 3004 	ldrb.w	r3, [r8, #4]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	4b7c      	ldr	r3, [pc, #496]	; (8009a4c <mbedtls_ssl_handshake_client_step+0x2e0>)
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4a75      	ldr	r2, [pc, #468]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8009860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009864:	2103      	movs	r1, #3
 8009866:	4620      	mov	r0, r4
 8009868:	f7fc f858 	bl	800591c <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 800986c:	6823      	ldr	r3, [r4, #0]
    unsigned char *p = ssl->handshake->randbytes;
 800986e:	6b26      	ldr	r6, [r4, #48]	; 0x30
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 8009870:	699d      	ldr	r5, [r3, #24]
 8009872:	69d8      	ldr	r0, [r3, #28]
 8009874:	2204      	movs	r2, #4
 8009876:	f106 0188 	add.w	r1, r6, #136	; 0x88
 800987a:	47a8      	blx	r5
 800987c:	4605      	mov	r5, r0
 800987e:	b950      	cbnz	r0, 8009896 <mbedtls_ssl_handshake_client_step+0x12a>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	221c      	movs	r2, #28
 8009884:	699d      	ldr	r5, [r3, #24]
 8009886:	69d8      	ldr	r0, [r3, #28]
 8009888:	f106 018c 	add.w	r1, r6, #140	; 0x8c
 800988c:	47a8      	blx	r5
 800988e:	4605      	mov	r5, r0
 8009890:	2800      	cmp	r0, #0
 8009892:	f000 864b 	beq.w	800a52c <mbedtls_ssl_handshake_client_step+0xdc0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 8009896:	4b6e      	ldr	r3, [pc, #440]	; (8009a50 <mbedtls_ssl_handshake_client_step+0x2e4>)
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	9501      	str	r5, [sp, #4]
 800989c:	f44f 7341 	mov.w	r3, #772	; 0x304
 80098a0:	e063      	b.n	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
        n = 0;
 80098a2:	2600      	movs	r6, #0
 80098a4:	f000 be68 	b.w	800a578 <mbedtls_ssl_handshake_client_step+0xe0c>
        *p++ = ssl->session_negotiate->id[i];
 80098a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098aa:	441a      	add	r2, r3
 80098ac:	7b12      	ldrb	r2, [r2, #12]
 80098ae:	54ea      	strb	r2, [r5, r3]
    for( i = 0; i < n; i++ )
 80098b0:	3301      	adds	r3, #1
 80098b2:	f000 be66 	b.w	800a582 <mbedtls_ssl_handshake_client_step+0xe16>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff ff36 	bl	8009728 <mbedtls_ssl_ciphersuite_from_id>
        if( ciphersuite_info == NULL )
 80098bc:	b308      	cbz	r0, 8009902 <mbedtls_ssl_handshake_client_step+0x196>
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	6901      	ldr	r1, [r0, #16]
 80098c2:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80098c6:	4291      	cmp	r1, r2
 80098c8:	dc1b      	bgt.n	8009902 <mbedtls_ssl_handshake_client_step+0x196>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 80098ca:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 80098ce:	6982      	ldr	r2, [r0, #24]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	db16      	blt.n	8009902 <mbedtls_ssl_handshake_client_step+0x196>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 80098d4:	f8d9 3000 	ldr.w	r3, [r9]
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	4b5e      	ldr	r3, [pc, #376]	; (8009a54 <mbedtls_ssl_handshake_client_step+0x2e8>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	465a      	mov	r2, fp
 80098e0:	f240 3382 	movw	r3, #898	; 0x382
 80098e4:	2103      	movs	r1, #3
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7fc f818 	bl	800591c <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80098ec:	f8d9 3000 	ldr.w	r3, [r9]
 80098f0:	121a      	asrs	r2, r3, #8
 80098f2:	4633      	mov	r3, r6
        n++;
 80098f4:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80098f6:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 80098fa:	f8d9 2000 	ldr.w	r2, [r9]
 80098fe:	7072      	strb	r2, [r6, #1]
 8009900:	461e      	mov	r6, r3
 8009902:	f109 0904 	add.w	r9, r9, #4
 8009906:	f000 be5f 	b.w	800a5c8 <mbedtls_ssl_handshake_client_step+0xe5c>
        sig_alg_len += 2;
 800990a:	3302      	adds	r3, #2
 800990c:	f000 beaa 	b.w	800a664 <mbedtls_ssl_handshake_client_step+0xef8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 8009910:	4b51      	ldr	r3, [pc, #324]	; (8009a58 <mbedtls_ssl_handshake_client_step+0x2ec>)
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4a47      	ldr	r2, [pc, #284]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8009916:	23cb      	movs	r3, #203	; 0xcb
 8009918:	2101      	movs	r1, #1
 800991a:	4620      	mov	r0, r4
 800991c:	f7fb fffe 	bl	800591c <mbedtls_debug_print_msg>
    *olen = 0;
 8009920:	2500      	movs	r5, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 8009922:	4b4e      	ldr	r3, [pc, #312]	; (8009a5c <mbedtls_ssl_handshake_client_step+0x2f0>)
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	9501      	str	r5, [sp, #4]
 8009928:	f240 430f 	movw	r3, #1039	; 0x40f
 800992c:	4a41      	ldr	r2, [pc, #260]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 800992e:	2103      	movs	r1, #3
 8009930:	4620      	mov	r0, r4
 8009932:	f7fb fff3 	bl	800591c <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 8009936:	bb5d      	cbnz	r5, 8009990 <mbedtls_ssl_handshake_client_step+0x224>
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8009938:	1d35      	adds	r5, r6, #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800993a:	2316      	movs	r3, #22
 800993c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8009940:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = p - buf;
 8009944:	eba5 0508 	sub.w	r5, r5, r8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8009948:	2601      	movs	r6, #1
    ssl->out_msglen  = p - buf;
 800994a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 800994e:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 8009950:	6863      	ldr	r3, [r4, #4]
 8009952:	4433      	add	r3, r6
 8009954:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8009956:	4620      	mov	r0, r4
 8009958:	f001 fbba 	bl	800b0d0 <mbedtls_ssl_write_record>
 800995c:	4605      	mov	r5, r0
 800995e:	b1e0      	cbz	r0, 800999a <mbedtls_ssl_handshake_client_step+0x22e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8009960:	4b3f      	ldr	r3, [pc, #252]	; (8009a60 <mbedtls_ssl_handshake_client_step+0x2f4>)
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	9001      	str	r0, [sp, #4]
 8009966:	f240 4325 	movw	r3, #1061	; 0x425
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 800996a:	4a32      	ldr	r2, [pc, #200]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 800996c:	2101      	movs	r1, #1
 800996e:	4620      	mov	r0, r4
 8009970:	f7fc f804 	bl	800597c <mbedtls_debug_print_ret>
 8009974:	e730      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
 8009976:	9308      	str	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8009978:	f003 fc0b 	bl	800d192 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 800997c:	eb0b 0209 	add.w	r2, fp, r9
 8009980:	9b08      	ldr	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8009982:	f80b 0005 	strb.w	r0, [fp, r5]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 8009986:	464d      	mov	r5, r9
 8009988:	f802 3c01 	strb.w	r3, [r2, #-1]
 800998c:	f000 be7c 	b.w	800a688 <mbedtls_ssl_handshake_client_step+0xf1c>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8009990:	0a2b      	lsrs	r3, r5, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8009992:	7175      	strb	r5, [r6, #5]
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8009994:	7133      	strb	r3, [r6, #4]
        p += ext_len;
 8009996:	443d      	add	r5, r7
 8009998:	e7cf      	b.n	800993a <mbedtls_ssl_handshake_client_step+0x1ce>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 800999a:	4b32      	ldr	r3, [pc, #200]	; (8009a64 <mbedtls_ssl_handshake_client_step+0x2f8>)
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	f240 4329 	movw	r3, #1065	; 0x429
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 80099a2:	4a24      	ldr	r2, [pc, #144]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 80099a4:	2102      	movs	r1, #2
 80099a6:	4620      	mov	r0, r4
 80099a8:	f7fb ffb8 	bl	800591c <mbedtls_debug_print_msg>
 80099ac:	e714      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 80099ae:	4b2e      	ldr	r3, [pc, #184]	; (8009a68 <mbedtls_ssl_handshake_client_step+0x2fc>)
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	4a20      	ldr	r2, [pc, #128]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 80099b4:	f240 53b2 	movw	r3, #1458	; 0x5b2
 80099b8:	2102      	movs	r1, #2
 80099ba:	4620      	mov	r0, r4
 80099bc:	f7fb ffae 	bl	800591c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80099c0:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 80099c2:	6e67      	ldr	r7, [r4, #100]	; 0x64
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80099c4:	f002 fad2 	bl	800bf6c <mbedtls_ssl_read_record>
 80099c8:	4605      	mov	r5, r0
 80099ca:	b128      	cbz	r0, 80099d8 <mbedtls_ssl_handshake_client_step+0x26c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80099cc:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <mbedtls_ssl_handshake_client_step+0x300>)
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	9001      	str	r0, [sp, #4]
 80099d2:	f240 53b9 	movw	r3, #1465	; 0x5b9
 80099d6:	e7c8      	b.n	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80099d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80099da:	2b16      	cmp	r3, #22
 80099dc:	d00f      	beq.n	80099fe <mbedtls_ssl_handshake_client_step+0x292>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80099de:	4b24      	ldr	r3, [pc, #144]	; (8009a70 <mbedtls_ssl_handshake_client_step+0x304>)
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	f240 53d3 	movw	r3, #1491	; 0x5d3
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 80099e6:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 80099e8:	2101      	movs	r1, #1
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7fb ff96 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80099f0:	220a      	movs	r2, #10
 80099f2:	2102      	movs	r1, #2
 80099f4:	4620      	mov	r0, r4
 80099f6:	f001 fecd 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80099fa:	4d1e      	ldr	r5, [pc, #120]	; (8009a74 <mbedtls_ssl_handshake_client_step+0x308>)
 80099fc:	e6ec      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 80099fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009a00:	2b29      	cmp	r3, #41	; 0x29
 8009a02:	d902      	bls.n	8009a0a <mbedtls_ssl_handshake_client_step+0x29e>
 8009a04:	783b      	ldrb	r3, [r7, #0]
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d038      	beq.n	8009a7c <mbedtls_ssl_handshake_client_step+0x310>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009a0a:	4b19      	ldr	r3, [pc, #100]	; (8009a70 <mbedtls_ssl_handshake_client_step+0x304>)
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	f240 53ef 	movw	r3, #1519	; 0x5ef
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009a12:	4a08      	ldr	r2, [pc, #32]	; (8009a34 <mbedtls_ssl_handshake_client_step+0x2c8>)
 8009a14:	2101      	movs	r1, #1
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7fb ff80 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009a1c:	2232      	movs	r2, #50	; 0x32
 8009a1e:	2102      	movs	r1, #2
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 feb7 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8009a26:	4d14      	ldr	r5, [pc, #80]	; (8009a78 <mbedtls_ssl_handshake_client_step+0x30c>)
 8009a28:	e6d6      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
 8009a2a:	bf00      	nop
 8009a2c:	08013887 	.word	0x08013887
 8009a30:	080138d9 	.word	0x080138d9
 8009a34:	08013898 	.word	0x08013898
 8009a38:	080138ea 	.word	0x080138ea
 8009a3c:	08013900 	.word	0x08013900
 8009a40:	ffff8c00 	.word	0xffff8c00
 8009a44:	08013910 	.word	0x08013910
 8009a48:	ffff8f00 	.word	0xffff8f00
 8009a4c:	08013966 	.word	0x08013966
 8009a50:	080140be 	.word	0x080140be
 8009a54:	080139c4 	.word	0x080139c4
 8009a58:	0801281f 	.word	0x0801281f
 8009a5c:	08013ab5 	.word	0x08013ab5
 8009a60:	08013ade 	.word	0x08013ade
 8009a64:	08013af7 	.word	0x08013af7
 8009a68:	08013b0d 	.word	0x08013b0d
 8009a6c:	08013b23 	.word	0x08013b23
 8009a70:	08013b3b 	.word	0x08013b3b
 8009a74:	ffff8900 	.word	0xffff8900
 8009a78:	ffff8680 	.word	0xffff8680
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 8009a7c:	f107 0a04 	add.w	sl, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 8009a80:	9302      	str	r3, [sp, #8]
 8009a82:	4bba      	ldr	r3, [pc, #744]	; (8009d6c <mbedtls_ssl_handshake_client_step+0x600>)
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4aba      	ldr	r2, [pc, #744]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009a88:	f8cd a004 	str.w	sl, [sp, #4]
 8009a8c:	f240 6302 	movw	r3, #1538	; 0x602
 8009a90:	2103      	movs	r1, #3
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7fb ffa0 	bl	80059d8 <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 8009a98:	4621      	mov	r1, r4
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8009a9a:	f104 0008 	add.w	r0, r4, #8
                      ssl->conf->transport, buf + 0 );
 8009a9e:	f851 3b0c 	ldr.w	r3, [r1], #12
 8009aa2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8009aa6:	4653      	mov	r3, sl
 8009aa8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8009aac:	f003 fb7d 	bl	800d1aa <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	68a2      	ldr	r2, [r4, #8]
 8009ab4:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 8009ab8:	68e1      	ldr	r1, [r4, #12]
 8009aba:	f893 604d 	ldrb.w	r6, [r3, #77]	; 0x4d
 8009abe:	4282      	cmp	r2, r0
 8009ac0:	db09      	blt.n	8009ad6 <mbedtls_ssl_handshake_client_step+0x36a>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8009ac2:	f893 e04f 	ldrb.w	lr, [r3, #79]	; 0x4f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8009ac6:	4571      	cmp	r1, lr
 8009ac8:	db05      	blt.n	8009ad6 <mbedtls_ssl_handshake_client_step+0x36a>
        ssl->major_ver > ssl->conf->max_major_ver ||
 8009aca:	f893 e04c 	ldrb.w	lr, [r3, #76]	; 0x4c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8009ace:	4572      	cmp	r2, lr
 8009ad0:	dc01      	bgt.n	8009ad6 <mbedtls_ssl_handshake_client_step+0x36a>
        ssl->major_ver > ssl->conf->max_major_ver ||
 8009ad2:	42b1      	cmp	r1, r6
 8009ad4:	dd19      	ble.n	8009b0a <mbedtls_ssl_handshake_client_step+0x39e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 8009ad6:	9606      	str	r6, [sp, #24]
 8009ad8:	f893 504c 	ldrb.w	r5, [r3, #76]	; 0x4c
 8009adc:	9505      	str	r5, [sp, #20]
 8009ade:	9104      	str	r1, [sp, #16]
 8009ae0:	9203      	str	r2, [sp, #12]
 8009ae2:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	4ba2      	ldr	r3, [pc, #648]	; (8009d74 <mbedtls_ssl_handshake_client_step+0x608>)
 8009aea:	9001      	str	r0, [sp, #4]
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	4aa0      	ldr	r2, [pc, #640]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 8009af0:	4da1      	ldr	r5, [pc, #644]	; (8009d78 <mbedtls_ssl_handshake_client_step+0x60c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 8009af2:	f240 630f 	movw	r3, #1551	; 0x60f
 8009af6:	2101      	movs	r1, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7fb ff0f 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009afe:	2246      	movs	r2, #70	; 0x46
 8009b00:	2102      	movs	r1, #2
 8009b02:	4620      	mov	r0, r4
 8009b04:	f001 fe46 	bl	800b794 <mbedtls_ssl_send_alert_message>
 8009b08:	e666      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	79ba      	ldrb	r2, [r7, #6]
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009b14:	7a7a      	ldrb	r2, [r7, #9]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	7a3a      	ldrb	r2, [r7, #8]
 8009b1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	4b96      	ldr	r3, [pc, #600]	; (8009d7c <mbedtls_ssl_handshake_client_step+0x610>)
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	4a92      	ldr	r2, [pc, #584]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009b26:	f240 631b 	movw	r3, #1563	; 0x61b
 8009b2a:	2103      	movs	r1, #3
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7fb fef5 	bl	800591c <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 8009b32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b34:	1db9      	adds	r1, r7, #6
 8009b36:	460a      	mov	r2, r1
 8009b38:	33a8      	adds	r3, #168	; 0xa8
 8009b3a:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8009b3e:	f852 6b04 	ldr.w	r6, [r2], #4
 8009b42:	f843 6b04 	str.w	r6, [r3], #4
 8009b46:	4282      	cmp	r2, r0
 8009b48:	d1f9      	bne.n	8009b3e <mbedtls_ssl_handshake_client_step+0x3d2>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 8009b4a:	2320      	movs	r3, #32
    n = buf[34];
 8009b4c:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 8009b50:	9302      	str	r3, [sp, #8]
 8009b52:	4b8b      	ldr	r3, [pc, #556]	; (8009d80 <mbedtls_ssl_handshake_client_step+0x614>)
 8009b54:	9101      	str	r1, [sp, #4]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	4a85      	ldr	r2, [pc, #532]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009b5a:	f240 6321 	movw	r3, #1569	; 0x621
 8009b5e:	2103      	movs	r1, #3
 8009b60:	4620      	mov	r0, r4
 8009b62:	f7fb ff39 	bl	80059d8 <mbedtls_debug_print_buf>
    if( n > 32 )
 8009b66:	2e20      	cmp	r6, #32
 8009b68:	d904      	bls.n	8009b74 <mbedtls_ssl_handshake_client_step+0x408>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009b6a:	4b86      	ldr	r3, [pc, #536]	; (8009d84 <mbedtls_ssl_handshake_client_step+0x618>)
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	f240 6325 	movw	r3, #1573	; 0x625
 8009b72:	e74e      	b.n	8009a12 <mbedtls_ssl_handshake_client_step+0x2a6>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 8009b74:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009b76:	f106 032b 	add.w	r3, r6, #43	; 0x2b
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d915      	bls.n	8009baa <mbedtls_ssl_handshake_client_step+0x43e>
        ext_len = ( ( buf[38 + n] <<  8 )
 8009b7e:	eb0a 0306 	add.w	r3, sl, r6
 8009b82:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 8009b86:	f893 8027 	ldrb.w	r8, [r3, #39]	; 0x27
 8009b8a:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 8009b8e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d904      	bls.n	8009ba0 <mbedtls_ssl_handshake_client_step+0x434>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 8009b96:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 8009b9a:	4443      	add	r3, r8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d00f      	beq.n	8009bc0 <mbedtls_ssl_handshake_client_step+0x454>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009ba0:	4b78      	ldr	r3, [pc, #480]	; (8009d84 <mbedtls_ssl_handshake_client_step+0x618>)
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	f240 6333 	movw	r3, #1587	; 0x633
 8009ba8:	e733      	b.n	8009a12 <mbedtls_ssl_handshake_client_step+0x2a6>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 8009baa:	f106 032a 	add.w	r3, r6, #42	; 0x2a
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d004      	beq.n	8009bbc <mbedtls_ssl_handshake_client_step+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009bb2:	4b74      	ldr	r3, [pc, #464]	; (8009d84 <mbedtls_ssl_handshake_client_step+0x618>)
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	f240 633f 	movw	r3, #1599	; 0x63f
 8009bba:	e72a      	b.n	8009a12 <mbedtls_ssl_handshake_client_step+0x2a6>
        ext_len = 0;
 8009bbc:	f04f 0800 	mov.w	r8, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8009bc0:	eb0a 0306 	add.w	r3, sl, r6
 8009bc4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009bc8:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
    comp = buf[37 + n];
 8009bcc:	f106 0325 	add.w	r3, r6, #37	; 0x25
 8009bd0:	9308      	str	r3, [sp, #32]
 8009bd2:	f81a 3003 	ldrb.w	r3, [sl, r3]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 8009bd6:	ea4b 2b02 	orr.w	fp, fp, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 8009bda:	b183      	cbz	r3, 8009bfe <mbedtls_ssl_handshake_client_step+0x492>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	4b6a      	ldr	r3, [pc, #424]	; (8009d88 <mbedtls_ssl_handshake_client_step+0x61c>)
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	4a63      	ldr	r2, [pc, #396]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 8009be4:	4d69      	ldr	r5, [pc, #420]	; (8009d8c <mbedtls_ssl_handshake_client_step+0x620>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 8009be6:	f240 635c 	movw	r3, #1628	; 0x65c
 8009bea:	2101      	movs	r1, #1
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7fb fe95 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009bf2:	222f      	movs	r2, #47	; 0x2f
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f001 fdcc 	bl	800b794 <mbedtls_ssl_send_alert_message>
 8009bfc:	e5ec      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 8009bfe:	4658      	mov	r0, fp
 8009c00:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 8009c04:	f7ff fd90 	bl	8009728 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 8009c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 8009c0a:	f8c9 0000 	str.w	r0, [r9]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	b981      	cbnz	r1, 8009c34 <mbedtls_ssl_handshake_client_step+0x4c8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 8009c12:	4b5f      	ldr	r3, [pc, #380]	; (8009d90 <mbedtls_ssl_handshake_client_step+0x624>)
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4620      	mov	r0, r4
 8009c18:	f8cd b004 	str.w	fp, [sp, #4]
 8009c1c:	f240 6369 	movw	r3, #1641	; 0x669
 8009c20:	4a53      	ldr	r2, [pc, #332]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009c22:	2101      	movs	r1, #1
 8009c24:	f7fb fe7a 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009c28:	2250      	movs	r2, #80	; 0x50
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f001 fdb1 	bl	800b794 <mbedtls_ssl_send_alert_message>
 8009c32:	e5fe      	b.n	8009832 <mbedtls_ssl_handshake_client_step+0xc6>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 8009c34:	4620      	mov	r0, r4
 8009c36:	f002 fd11 	bl	800c65c <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 8009c3a:	4b56      	ldr	r3, [pc, #344]	; (8009d94 <mbedtls_ssl_handshake_client_step+0x628>)
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4a4c      	ldr	r2, [pc, #304]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009c40:	9601      	str	r6, [sp, #4]
 8009c42:	f240 6371 	movw	r3, #1649	; 0x671
 8009c46:	2103      	movs	r1, #3
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7fb fe67 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 8009c4e:	3727      	adds	r7, #39	; 0x27
 8009c50:	4b51      	ldr	r3, [pc, #324]	; (8009d98 <mbedtls_ssl_handshake_client_step+0x62c>)
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4a46      	ldr	r2, [pc, #280]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009c56:	9602      	str	r6, [sp, #8]
 8009c58:	f240 6372 	movw	r3, #1650	; 0x672
 8009c5c:	9701      	str	r7, [sp, #4]
 8009c5e:	2103      	movs	r1, #3
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7fb feb9 	bl	80059d8 <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 8009c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c68:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8009c6c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8009c70:	b1aa      	cbz	r2, 8009c9e <mbedtls_ssl_handshake_client_step+0x532>
 8009c72:	b1a6      	cbz	r6, 8009c9e <mbedtls_ssl_handshake_client_step+0x532>
 8009c74:	f8d9 2000 	ldr.w	r2, [r9]
 8009c78:	4593      	cmp	fp, r2
 8009c7a:	d110      	bne.n	8009c9e <mbedtls_ssl_handshake_client_step+0x532>
        ssl->session_negotiate->ciphersuite != i ||
 8009c7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009c80:	b96a      	cbnz	r2, 8009c9e <mbedtls_ssl_handshake_client_step+0x532>
        ssl->session_negotiate->compression != comp ||
 8009c82:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009c86:	4296      	cmp	r6, r2
 8009c88:	d109      	bne.n	8009c9e <mbedtls_ssl_handshake_client_step+0x532>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 8009c8a:	4632      	mov	r2, r6
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	f109 000c 	add.w	r0, r9, #12
 8009c92:	9309      	str	r3, [sp, #36]	; 0x24
 8009c94:	f005 f8d4 	bl	800ee40 <memcmp>
        ssl->session_negotiate->id_len != n ||
 8009c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d04c      	beq.n	8009d38 <mbedtls_ssl_handshake_client_step+0x5cc>
        ssl->state++;
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 8009caa:	4639      	mov	r1, r7
        ssl->session_negotiate->compression = comp;
 8009cac:	f8c9 2004 	str.w	r2, [r9, #4]
        ssl->session_negotiate->ciphersuite = i;
 8009cb0:	f8c9 b000 	str.w	fp, [r9]
        ssl->session_negotiate->id_len = n;
 8009cb4:	f8c9 6008 	str.w	r6, [r9, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 8009cb8:	4632      	mov	r2, r6
 8009cba:	f109 000c 	add.w	r0, r9, #12
 8009cbe:	f005 f8ce 	bl	800ee5e <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 8009cc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009cc4:	4a35      	ldr	r2, [pc, #212]	; (8009d9c <mbedtls_ssl_handshake_client_step+0x630>)
 8009cc6:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8009cca:	4b35      	ldr	r3, [pc, #212]	; (8009da0 <mbedtls_ssl_handshake_client_step+0x634>)
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	bf08      	it	eq
 8009cd0:	4613      	moveq	r3, r2
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	4b33      	ldr	r3, [pc, #204]	; (8009da4 <mbedtls_ssl_handshake_client_step+0x638>)
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4a25      	ldr	r2, [pc, #148]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009cda:	f44f 63d3 	mov.w	r3, #1688	; 0x698
 8009cde:	2103      	movs	r1, #3
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7fb fe1b 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 8009ce6:	4b30      	ldr	r3, [pc, #192]	; (8009da8 <mbedtls_ssl_handshake_client_step+0x63c>)
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	4a21      	ldr	r2, [pc, #132]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009cec:	f8cd b004 	str.w	fp, [sp, #4]
 8009cf0:	f240 639a 	movw	r3, #1690	; 0x69a
 8009cf4:	2103      	movs	r1, #3
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7fb fe10 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 8009cfc:	9b08      	ldr	r3, [sp, #32]
 8009cfe:	4a1c      	ldr	r2, [pc, #112]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009d00:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	4b29      	ldr	r3, [pc, #164]	; (8009dac <mbedtls_ssl_handshake_client_step+0x640>)
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f240 639b 	movw	r3, #1691	; 0x69b
 8009d10:	2103      	movs	r1, #3
 8009d12:	f7fb fe03 	bl	800591c <mbedtls_debug_print_msg>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 8009d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	f7ff fd05 	bl	8009728 <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d148      	bne.n	8009db4 <mbedtls_ssl_handshake_client_step+0x648>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009d22:	4b18      	ldr	r3, [pc, #96]	; (8009d84 <mbedtls_ssl_handshake_client_step+0x618>)
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	f240 63a5 	movw	r3, #1701	; 0x6a5
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009d2a:	4a11      	ldr	r2, [pc, #68]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f7fb fdf4 	bl	800591c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009d34:	222f      	movs	r2, #47	; 0x2f
 8009d36:	e672      	b.n	8009a1e <mbedtls_ssl_handshake_client_step+0x2b2>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 8009d38:	230c      	movs	r3, #12
 8009d3a:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fe4b 	bl	800a9d8 <mbedtls_ssl_derive_keys>
 8009d42:	4607      	mov	r7, r0
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d0bc      	beq.n	8009cc2 <mbedtls_ssl_handshake_client_step+0x556>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8009d48:	4b19      	ldr	r3, [pc, #100]	; (8009db0 <mbedtls_ssl_handshake_client_step+0x644>)
 8009d4a:	9001      	str	r0, [sp, #4]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	4a08      	ldr	r2, [pc, #32]	; (8009d70 <mbedtls_ssl_handshake_client_step+0x604>)
 8009d50:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8009d54:	2101      	movs	r1, #1
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7fb fe10 	bl	800597c <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009d5c:	2250      	movs	r2, #80	; 0x50
 8009d5e:	2102      	movs	r1, #2
 8009d60:	4620      	mov	r0, r4
 8009d62:	f001 fd17 	bl	800b794 <mbedtls_ssl_send_alert_message>
 8009d66:	463d      	mov	r5, r7
 8009d68:	e536      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
 8009d6a:	bf00      	nop
 8009d6c:	08013b54 	.word	0x08013b54
 8009d70:	08013898 	.word	0x08013898
 8009d74:	08013b6a 	.word	0x08013b6a
 8009d78:	ffff9180 	.word	0xffff9180
 8009d7c:	08013bb6 	.word	0x08013bb6
 8009d80:	08013bd6 	.word	0x08013bd6
 8009d84:	08013b3b 	.word	0x08013b3b
 8009d88:	08013bf1 	.word	0x08013bf1
 8009d8c:	ffff8f80 	.word	0xffff8f80
 8009d90:	08013c13 	.word	0x08013c13
 8009d94:	08013c37 	.word	0x08013c37
 8009d98:	08013c59 	.word	0x08013c59
 8009d9c:	08013884 	.word	0x08013884
 8009da0:	080146ba 	.word	0x080146ba
 8009da4:	08013c8a 	.word	0x08013c8a
 8009da8:	08013ca6 	.word	0x08013ca6
 8009dac:	08013ccd 	.word	0x08013ccd
 8009db0:	08013c72 	.word	0x08013c72
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 8009db4:	6843      	ldr	r3, [r0, #4]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	4bae      	ldr	r3, [pc, #696]	; (800a074 <mbedtls_ssl_handshake_client_step+0x908>)
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	4aae      	ldr	r2, [pc, #696]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
 8009dbe:	f240 63ab 	movw	r3, #1707	; 0x6ab
 8009dc2:	2103      	movs	r1, #3
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7fb fda9 	bl	800591c <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	68e2      	ldr	r2, [r4, #12]
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8009dd8:	b921      	cbnz	r1, 8009de4 <mbedtls_ssl_handshake_client_step+0x678>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009dda:	4ba8      	ldr	r3, [pc, #672]	; (800a07c <mbedtls_ssl_handshake_client_step+0x910>)
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8009de2:	e7a2      	b.n	8009d2a <mbedtls_ssl_handshake_client_step+0x5be>
            ssl->session_negotiate->ciphersuite )
 8009de4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 8009de6:	6810      	ldr	r0, [r2, #0]
 8009de8:	4281      	cmp	r1, r0
 8009dea:	d1f3      	bne.n	8009dd4 <mbedtls_ssl_handshake_client_step+0x668>
    ssl->session_negotiate->compression = comp;
 8009dec:	2300      	movs	r3, #0
 8009dee:	6053      	str	r3, [r2, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 8009df0:	4ba3      	ldr	r3, [pc, #652]	; (800a080 <mbedtls_ssl_handshake_client_step+0x914>)
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	f8cd 8004 	str.w	r8, [sp, #4]
 8009df8:	f240 63ce 	movw	r3, #1742	; 0x6ce
 8009dfc:	4a9e      	ldr	r2, [pc, #632]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 8009dfe:	4f9e      	ldr	r7, [pc, #632]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 8009e00:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800a0d0 <mbedtls_ssl_handshake_client_step+0x964>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 8009e04:	2102      	movs	r1, #2
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7fb fd88 	bl	800591c <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 8009e0c:	3628      	adds	r6, #40	; 0x28
 8009e0e:	44b2      	add	sl, r6
    while( ext_len )
 8009e10:	f1b8 0f00 	cmp.w	r8, #0
 8009e14:	d111      	bne.n	8009e3a <mbedtls_ssl_handshake_client_step+0x6ce>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8009e16:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 844b 	bne.w	800a6b6 <mbedtls_ssl_handshake_client_step+0xf4a>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8009e26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e2a:	2b20      	cmp	r3, #32
 8009e2c:	f040 8443 	bne.w	800a6b6 <mbedtls_ssl_handshake_client_step+0xf4a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 8009e30:	4b94      	ldr	r3, [pc, #592]	; (800a084 <mbedtls_ssl_handshake_client_step+0x918>)
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	f240 7369 	movw	r3, #1897	; 0x769
 8009e38:	e02a      	b.n	8009e90 <mbedtls_ssl_handshake_client_step+0x724>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 8009e3a:	f89a 2000 	ldrb.w	r2, [sl]
                                | ( ext[1]       ) );
 8009e3e:	f89a 3001 	ldrb.w	r3, [sl, #1]
                                | ( ext[3]       ) );
 8009e42:	f89a 6003 	ldrb.w	r6, [sl, #3]
                                | ( ext[1]       ) );
 8009e46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
 8009e4a:	f89a 2002 	ldrb.w	r2, [sl, #2]
                                | ( ext[3]       ) );
 8009e4e:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
        if( ext_size + 4 > ext_len )
 8009e52:	f106 0904 	add.w	r9, r6, #4
 8009e56:	45c1      	cmp	r9, r8
 8009e58:	d904      	bls.n	8009e64 <mbedtls_ssl_handshake_client_step+0x6f8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009e5a:	4b88      	ldr	r3, [pc, #544]	; (800a07c <mbedtls_ssl_handshake_client_step+0x910>)
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	f240 63d9 	movw	r3, #1753	; 0x6d9
 8009e62:	e5d6      	b.n	8009a12 <mbedtls_ssl_handshake_client_step+0x2a6>
        switch( ext_id )
 8009e64:	f64f 7201 	movw	r2, #65281	; 0xff01
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d12c      	bne.n	8009ec6 <mbedtls_ssl_handshake_client_step+0x75a>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 8009e6c:	f8cd b000 	str.w	fp, [sp]
 8009e70:	f240 63e2 	movw	r3, #1762	; 0x6e2
 8009e74:	463a      	mov	r2, r7
 8009e76:	2103      	movs	r1, #3
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7fb fd4f 	bl	800591c <mbedtls_debug_print_msg>
        if( len != 1 || buf[0] != 0x00 )
 8009e7e:	2e01      	cmp	r6, #1
 8009e80:	d102      	bne.n	8009e88 <mbedtls_ssl_handshake_client_step+0x71c>
 8009e82:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8009e86:	b153      	cbz	r3, 8009e9e <mbedtls_ssl_handshake_client_step+0x732>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 8009e88:	4b7f      	ldr	r3, [pc, #508]	; (800a088 <mbedtls_ssl_handshake_client_step+0x91c>)
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	f44f 6389 	mov.w	r3, #1096	; 0x448
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 8009e90:	4a79      	ldr	r2, [pc, #484]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
 8009e92:	2101      	movs	r1, #1
 8009e94:	4620      	mov	r0, r4
 8009e96:	f7fb fd41 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8009e9a:	2228      	movs	r2, #40	; 0x28
 8009e9c:	e5bf      	b.n	8009a1e <mbedtls_ssl_handshake_client_step+0x2b2>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8009e9e:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
        ext_len -= 4 + ext_size;
 8009ea2:	eba8 0606 	sub.w	r6, r8, r6
 8009ea6:	f1a6 0804 	sub.w	r8, r6, #4
        if( ext_len > 0 && ext_len < 4 )
 8009eaa:	3e05      	subs	r6, #5
 8009eac:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 8009eae:	44ca      	add	sl, r9
        if( ext_len > 0 && ext_len < 4 )
 8009eb0:	d8ae      	bhi.n	8009e10 <mbedtls_ssl_handshake_client_step+0x6a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8009eb2:	4b72      	ldr	r3, [pc, #456]	; (800a07c <mbedtls_ssl_handshake_client_step+0x910>)
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	4a70      	ldr	r2, [pc, #448]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
 8009eb8:	f240 735e 	movw	r3, #1886	; 0x75e
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f7fb fd2c 	bl	800591c <mbedtls_debug_print_msg>
 8009ec4:	e5af      	b.n	8009a26 <mbedtls_ssl_handshake_client_step+0x2ba>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	4b70      	ldr	r3, [pc, #448]	; (800a08c <mbedtls_ssl_handshake_client_step+0x920>)
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	463a      	mov	r2, r7
 8009ece:	f240 7356 	movw	r3, #1878	; 0x756
 8009ed2:	2103      	movs	r1, #3
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7fb fd21 	bl	800591c <mbedtls_debug_print_msg>
 8009eda:	e7e2      	b.n	8009ea2 <mbedtls_ssl_handshake_client_step+0x736>
           ret = mbedtls_ssl_parse_certificate( ssl );
 8009edc:	4620      	mov	r0, r4
 8009ede:	f002 f963 	bl	800c1a8 <mbedtls_ssl_parse_certificate>
           ret = mbedtls_ssl_parse_finished( ssl );
 8009ee2:	4605      	mov	r5, r0
           break;
 8009ee4:	e478      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8009ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 8009ee8:	4a63      	ldr	r2, [pc, #396]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8009eea:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 8009eec:	4b68      	ldr	r3, [pc, #416]	; (800a090 <mbedtls_ssl_handshake_client_step+0x924>)
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	2102      	movs	r1, #2
 8009ef2:	f640 03e6 	movw	r3, #2278	; 0x8e6
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f7fb fd10 	bl	800591c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8009efc:	7ab3      	ldrb	r3, [r6, #10]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d10b      	bne.n	8009f1a <mbedtls_ssl_handshake_client_step+0x7ae>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 8009f02:	4b64      	ldr	r3, [pc, #400]	; (800a094 <mbedtls_ssl_handshake_client_step+0x928>)
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	f640 03eb 	movw	r3, #2283	; 0x8eb
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 8009f0a:	4a5b      	ldr	r2, [pc, #364]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f7fb fd04 	bl	800591c <mbedtls_debug_print_msg>
        ssl->state++;
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	3301      	adds	r3, #1
 8009f18:	e2f4      	b.n	800a504 <mbedtls_ssl_handshake_client_step+0xd98>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f002 f826 	bl	800bf6c <mbedtls_ssl_read_record>
 8009f20:	4605      	mov	r5, r0
 8009f22:	b128      	cbz	r0, 8009f30 <mbedtls_ssl_handshake_client_step+0x7c4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8009f24:	4b5c      	ldr	r3, [pc, #368]	; (800a098 <mbedtls_ssl_handshake_client_step+0x92c>)
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	9001      	str	r0, [sp, #4]
 8009f2a:	f640 130b 	movw	r3, #2315	; 0x90b
 8009f2e:	e51c      	b.n	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8009f30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009f32:	2b16      	cmp	r3, #22
 8009f34:	d004      	beq.n	8009f40 <mbedtls_ssl_handshake_client_step+0x7d4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8009f36:	4b59      	ldr	r3, [pc, #356]	; (800a09c <mbedtls_ssl_handshake_client_step+0x930>)
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	f640 1311 	movw	r3, #2321	; 0x911
 8009f3e:	e552      	b.n	80099e6 <mbedtls_ssl_handshake_client_step+0x27a>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 8009f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f42:	781a      	ldrb	r2, [r3, #0]
 8009f44:	2a0c      	cmp	r2, #12
 8009f46:	d014      	beq.n	8009f72 <mbedtls_ssl_handshake_client_step+0x806>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8009f48:	7ab3      	ldrb	r3, [r6, #10]
 8009f4a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8009f4e:	2b05      	cmp	r3, #5
 8009f50:	d10a      	bne.n	8009f68 <mbedtls_ssl_handshake_client_step+0x7fc>
            ssl->keep_current_message = 1;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ssl->state++;
 8009f58:	6863      	ldr	r3, [r4, #4]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 8009f5e:	4b50      	ldr	r3, [pc, #320]	; (800a0a0 <mbedtls_ssl_handshake_client_step+0x934>)
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	f640 2314 	movw	r3, #2580	; 0xa14
 8009f66:	e51c      	b.n	80099a2 <mbedtls_ssl_handshake_client_step+0x236>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 8009f68:	4b4e      	ldr	r3, [pc, #312]	; (800a0a4 <mbedtls_ssl_handshake_client_step+0x938>)
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	f640 1327 	movw	r3, #2343	; 0x927
 8009f70:	e539      	b.n	80099e6 <mbedtls_ssl_handshake_client_step+0x27a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 8009f72:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 8009f74:	3304      	adds	r3, #4
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 8009f76:	3a04      	subs	r2, #4
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	4b4b      	ldr	r3, [pc, #300]	; (800a0a8 <mbedtls_ssl_handshake_client_step+0x93c>)
 8009f7c:	9202      	str	r2, [sp, #8]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	4a3d      	ldr	r2, [pc, #244]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
 8009f82:	f44f 6313 	mov.w	r3, #2352	; 0x930
 8009f86:	2103      	movs	r1, #3
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f7fb fd25 	bl	80059d8 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009f8e:	4b47      	ldr	r3, [pc, #284]	; (800a0ac <mbedtls_ssl_handshake_client_step+0x940>)
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	f640 137d 	movw	r3, #2429	; 0x97d
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009f96:	4a38      	ldr	r2, [pc, #224]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8009f98:	4d45      	ldr	r5, [pc, #276]	; (800a0b0 <mbedtls_ssl_handshake_client_step+0x944>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f7fb fcbd 	bl	800591c <mbedtls_debug_print_msg>
 8009fa2:	e419      	b.n	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8009fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 8009fa6:	4a34      	ldr	r2, [pc, #208]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8009fa8:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 8009faa:	4b42      	ldr	r3, [pc, #264]	; (800a0b4 <mbedtls_ssl_handshake_client_step+0x948>)
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	2102      	movs	r1, #2
 8009fb0:	f640 2335 	movw	r3, #2613	; 0xa35
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f7fb fcb1 	bl	800591c <mbedtls_debug_print_msg>
 8009fba:	7ab3      	ldrb	r3, [r6, #10]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b09      	cmp	r3, #9
 8009fc2:	f200 837e 	bhi.w	800a6c2 <mbedtls_ssl_handshake_client_step+0xf56>
 8009fc6:	2701      	movs	r7, #1
 8009fc8:	fa07 f303 	lsl.w	r3, r7, r3
 8009fcc:	f240 320f 	movw	r2, #783	; 0x30f
 8009fd0:	4213      	tst	r3, r2
 8009fd2:	f000 8376 	beq.w	800a6c2 <mbedtls_ssl_handshake_client_step+0xf56>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f001 ffc8 	bl	800bf6c <mbedtls_ssl_read_record>
 8009fdc:	4605      	mov	r5, r0
 8009fde:	b128      	cbz	r0, 8009fec <mbedtls_ssl_handshake_client_step+0x880>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8009fe0:	4b2d      	ldr	r3, [pc, #180]	; (800a098 <mbedtls_ssl_handshake_client_step+0x92c>)
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	9501      	str	r5, [sp, #4]
 8009fe6:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8009fea:	e4be      	b.n	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8009fec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009fee:	2b16      	cmp	r3, #22
 8009ff0:	d004      	beq.n	8009ffc <mbedtls_ssl_handshake_client_step+0x890>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8009ff2:	4b31      	ldr	r3, [pc, #196]	; (800a0b8 <mbedtls_ssl_handshake_client_step+0x94c>)
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	f640 2346 	movw	r3, #2630	; 0xa46
 8009ffa:	e4f4      	b.n	80099e6 <mbedtls_ssl_handshake_client_step+0x27a>
    ssl->state++;
 8009ffc:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 8009ffe:	4a2f      	ldr	r2, [pc, #188]	; (800a0bc <mbedtls_ssl_handshake_client_step+0x950>)
    ssl->state++;
 800a000:	3301      	adds	r3, #1
 800a002:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 800a004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b0d      	cmp	r3, #13
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 800a014:	4b2a      	ldr	r3, [pc, #168]	; (800a0c0 <mbedtls_ssl_handshake_client_step+0x954>)
 800a016:	bf18      	it	ne
 800a018:	4613      	movne	r3, r2
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	4b29      	ldr	r3, [pc, #164]	; (800a0c4 <mbedtls_ssl_handshake_client_step+0x958>)
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	4a15      	ldr	r2, [pc, #84]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
 800a022:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 800a026:	2103      	movs	r1, #3
 800a028:	4620      	mov	r0, r4
 800a02a:	f7fb fc77 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 800a02e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a032:	b933      	cbnz	r3, 800a042 <mbedtls_ssl_handshake_client_step+0x8d6>
        ssl->keep_current_message = 1;
 800a034:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 800a038:	4b23      	ldr	r3, [pc, #140]	; (800a0c8 <mbedtls_ssl_handshake_client_step+0x95c>)
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a040:	e4af      	b.n	80099a2 <mbedtls_ssl_handshake_client_step+0x236>
    buf = ssl->in_msg;
 800a042:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 800a046:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 800a048:	f898 6004 	ldrb.w	r6, [r8, #4]
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 800a04c:	1db3      	adds	r3, r6, #6
 800a04e:	429a      	cmp	r2, r3
 800a050:	d240      	bcs.n	800a0d4 <mbedtls_ssl_handshake_client_step+0x968>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800a052:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <mbedtls_ssl_handshake_client_step+0x94c>)
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	f640 2379 	movw	r3, #2681	; 0xa79
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800a05a:	4a07      	ldr	r2, [pc, #28]	; (800a078 <mbedtls_ssl_handshake_client_step+0x90c>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 800a05c:	4d1b      	ldr	r5, [pc, #108]	; (800a0cc <mbedtls_ssl_handshake_client_step+0x960>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800a05e:	2101      	movs	r1, #1
 800a060:	4620      	mov	r0, r4
 800a062:	f7fb fc5b 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a066:	2232      	movs	r2, #50	; 0x32
 800a068:	2102      	movs	r1, #2
 800a06a:	4620      	mov	r0, r4
 800a06c:	f001 fb92 	bl	800b794 <mbedtls_ssl_send_alert_message>
 800a070:	f7ff bbb2 	b.w	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
 800a074:	08013ced 	.word	0x08013ced
 800a078:	08013898 	.word	0x08013898
 800a07c:	08013b3b 	.word	0x08013b3b
 800a080:	08013d12 	.word	0x08013d12
 800a084:	08013da3 	.word	0x08013da3
 800a088:	08013d59 	.word	0x08013d59
 800a08c:	08013d7c 	.word	0x08013d7c
 800a090:	08013dd0 	.word	0x08013dd0
 800a094:	08013ded 	.word	0x08013ded
 800a098:	08013b23 	.word	0x08013b23
 800a09c:	08013e0f 	.word	0x08013e0f
 800a0a0:	08013e2f 	.word	0x08013e2f
 800a0a4:	08013e4c 	.word	0x08013e4c
 800a0a8:	08013e38 	.word	0x08013e38
 800a0ac:	08013e7c 	.word	0x08013e7c
 800a0b0:	ffff9400 	.word	0xffff9400
 800a0b4:	08013e90 	.word	0x08013e90
 800a0b8:	08013ead 	.word	0x08013ead
 800a0bc:	08013884 	.word	0x08013884
 800a0c0:	080146ba 	.word	0x080146ba
 800a0c4:	08013ecd 	.word	0x08013ecd
 800a0c8:	08013f13 	.word	0x08013f13
 800a0cc:	ffff8580 	.word	0xffff8580
 800a0d0:	08013d3b 	.word	0x08013d3b
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 800a0d4:	68e2      	ldr	r2, [r4, #12]
 800a0d6:	2a03      	cmp	r2, #3
 800a0d8:	d12c      	bne.n	800a134 <mbedtls_ssl_handshake_client_step+0x9c8>
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800a0da:	eb08 0206 	add.w	r2, r8, r6
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800a0de:	f818 7003 	ldrb.w	r7, [r8, r3]
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800a0e2:	7952      	ldrb	r2, [r2, #5]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 800a0e4:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 800a0e8:	f106 0a07 	add.w	sl, r6, #7
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800a0ec:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 800a0f0:	44c2      	add	sl, r8
        for( i = 0; i < sig_alg_len; i += 2 )
 800a0f2:	46a9      	mov	r9, r5
 800a0f4:	454f      	cmp	r7, r9
 800a0f6:	d80a      	bhi.n	800a10e <mbedtls_ssl_handshake_client_step+0x9a2>
        n += 2 + sig_alg_len;
 800a0f8:	4437      	add	r7, r6
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 800a0fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        n += 2 + sig_alg_len;
 800a0fc:	1cbe      	adds	r6, r7, #2
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 800a0fe:	3708      	adds	r7, #8
 800a100:	42bb      	cmp	r3, r7
 800a102:	d217      	bcs.n	800a134 <mbedtls_ssl_handshake_client_step+0x9c8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800a104:	4ba4      	ldr	r3, [pc, #656]	; (800a398 <mbedtls_ssl_handshake_client_step+0xc2c>)
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	f640 2394 	movw	r3, #2708	; 0xa94
 800a10c:	e7a5      	b.n	800a05a <mbedtls_ssl_handshake_client_step+0x8ee>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 800a10e:	eb0a 0309 	add.w	r3, sl, r9
 800a112:	465a      	mov	r2, fp
 800a114:	785b      	ldrb	r3, [r3, #1]
 800a116:	9302      	str	r3, [sp, #8]
 800a118:	f81a 3009 	ldrb.w	r3, [sl, r9]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	4b9f      	ldr	r3, [pc, #636]	; (800a39c <mbedtls_ssl_handshake_client_step+0xc30>)
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	2103      	movs	r1, #3
 800a124:	f640 238c 	movw	r3, #2700	; 0xa8c
 800a128:	4620      	mov	r0, r4
 800a12a:	f7fb fbf7 	bl	800591c <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 800a12e:	f109 0902 	add.w	r9, r9, #2
 800a132:	e7df      	b.n	800a0f4 <mbedtls_ssl_handshake_client_step+0x988>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800a134:	44b0      	add	r8, r6
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 800a136:	3607      	adds	r6, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 800a138:	f898 2005 	ldrb.w	r2, [r8, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 800a13c:	f898 3006 	ldrb.w	r3, [r8, #6]
 800a140:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 800a144:	441e      	add	r6, r3
 800a146:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a148:	42b3      	cmp	r3, r6
 800a14a:	f43f af75 	beq.w	800a038 <mbedtls_ssl_handshake_client_step+0x8cc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 800a14e:	4b92      	ldr	r3, [pc, #584]	; (800a398 <mbedtls_ssl_handshake_client_step+0xc2c>)
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	f640 23a3 	movw	r3, #2723	; 0xaa3
 800a156:	e780      	b.n	800a05a <mbedtls_ssl_handshake_client_step+0x8ee>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 800a158:	4b91      	ldr	r3, [pc, #580]	; (800a3a0 <mbedtls_ssl_handshake_client_step+0xc34>)
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	4a91      	ldr	r2, [pc, #580]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
 800a15e:	f640 23b4 	movw	r3, #2740	; 0xab4
 800a162:	2102      	movs	r1, #2
 800a164:	4620      	mov	r0, r4
 800a166:	f7fb fbd9 	bl	800591c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800a16a:	4620      	mov	r0, r4
 800a16c:	f001 fefe 	bl	800bf6c <mbedtls_ssl_read_record>
 800a170:	4605      	mov	r5, r0
 800a172:	b130      	cbz	r0, 800a182 <mbedtls_ssl_handshake_client_step+0xa16>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800a174:	4b8c      	ldr	r3, [pc, #560]	; (800a3a8 <mbedtls_ssl_handshake_client_step+0xc3c>)
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	9001      	str	r0, [sp, #4]
 800a17a:	f640 23b8 	movw	r3, #2744	; 0xab8
 800a17e:	f7ff bbf4 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800a182:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a184:	2b16      	cmp	r3, #22
 800a186:	d009      	beq.n	800a19c <mbedtls_ssl_handshake_client_step+0xa30>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800a188:	4b88      	ldr	r3, [pc, #544]	; (800a3ac <mbedtls_ssl_handshake_client_step+0xc40>)
 800a18a:	4a86      	ldr	r2, [pc, #536]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	2101      	movs	r1, #1
 800a190:	f640 23be 	movw	r3, #2750	; 0xabe
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 800a194:	4620      	mov	r0, r4
 800a196:	f7fb fbc1 	bl	800591c <mbedtls_debug_print_msg>
 800a19a:	e42e      	b.n	80099fa <mbedtls_ssl_handshake_client_step+0x28e>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 800a19c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d103      	bne.n	800a1aa <mbedtls_ssl_handshake_client_step+0xa3e>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 800a1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b0e      	cmp	r3, #14
 800a1a8:	d010      	beq.n	800a1cc <mbedtls_ssl_handshake_client_step+0xa60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800a1aa:	4b80      	ldr	r3, [pc, #512]	; (800a3ac <mbedtls_ssl_handshake_client_step+0xc40>)
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	4a7d      	ldr	r2, [pc, #500]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 800a1b0:	4d7f      	ldr	r5, [pc, #508]	; (800a3b0 <mbedtls_ssl_handshake_client_step+0xc44>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 800a1b2:	f640 23c5 	movw	r3, #2757	; 0xac5
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7fb fbaf 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800a1be:	2232      	movs	r2, #50	; 0x32
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f001 fae6 	bl	800b794 <mbedtls_ssl_send_alert_message>
 800a1c8:	f7ff bb06 	b.w	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    ssl->state++;
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 800a1d2:	4b78      	ldr	r3, [pc, #480]	; (800a3b4 <mbedtls_ssl_handshake_client_step+0xc48>)
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	f640 23d2 	movw	r3, #2770	; 0xad2
 800a1da:	f7ff bbe2 	b.w	80099a2 <mbedtls_ssl_handshake_client_step+0x236>
           ret = mbedtls_ssl_write_certificate( ssl );
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f001 ff1a 	bl	800c018 <mbedtls_ssl_write_certificate>
 800a1e4:	e67d      	b.n	8009ee2 <mbedtls_ssl_handshake_client_step+0x776>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800a1e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 800a1e8:	4a6e      	ldr	r2, [pc, #440]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800a1ea:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 800a1ec:	4b72      	ldr	r3, [pc, #456]	; (800a3b8 <mbedtls_ssl_handshake_client_step+0xc4c>)
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	f640 23de 	movw	r3, #2782	; 0xade
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7fb fb90 	bl	800591c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 800a1fc:	7aae      	ldrb	r6, [r5, #10]
 800a1fe:	2e01      	cmp	r6, #1
 800a200:	f040 808a 	bne.w	800a318 <mbedtls_ssl_handshake_client_step+0xbac>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800a204:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 800a206:	6b25      	ldr	r5, [r4, #48]	; 0x30
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 800a208:	68e3      	ldr	r3, [r4, #12]
                       ssl->conf->transport, p );
 800a20a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800a20e:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 800a212:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 800a216:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 800a21a:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800a21c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800a220:	4643      	mov	r3, r8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 800a222:	bf0c      	ite	eq
 800a224:	2700      	moveq	r7, #0
 800a226:	2702      	movne	r7, #2
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 800a228:	f002 ffbc 	bl	800d1a4 <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	f105 01ca 	add.w	r1, r5, #202	; 0xca
 800a232:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800a236:	69d8      	ldr	r0, [r3, #28]
 800a238:	222e      	movs	r2, #46	; 0x2e
 800a23a:	47c8      	blx	r9
 800a23c:	4605      	mov	r5, r0
 800a23e:	b130      	cbz	r0, 800a24e <mbedtls_ssl_handshake_client_step+0xae2>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 800a240:	4b5e      	ldr	r3, [pc, #376]	; (800a3bc <mbedtls_ssl_handshake_client_step+0xc50>)
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	9001      	str	r0, [sp, #4]
 800a246:	f640 0348 	movw	r3, #2120	; 0x848
 800a24a:	f7ff bb8e 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    ssl->handshake->pmslen = 48;
 800a24e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a250:	2230      	movs	r2, #48	; 0x30
 800a252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if( ssl->session_negotiate->peer_cert == NULL )
 800a256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a258:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a25a:	b930      	cbnz	r0, 800a26a <mbedtls_ssl_handshake_client_step+0xafe>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 800a25c:	4b58      	ldr	r3, [pc, #352]	; (800a3c0 <mbedtls_ssl_handshake_client_step+0xc54>)
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4a50      	ldr	r2, [pc, #320]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
 800a262:	f44f 6305 	mov.w	r3, #2128	; 0x850
 800a266:	2102      	movs	r1, #2
 800a268:	e794      	b.n	800a194 <mbedtls_ssl_handshake_client_step+0xa28>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 800a26a:	4631      	mov	r1, r6
 800a26c:	30bc      	adds	r0, #188	; 0xbc
 800a26e:	f7fd f9d1 	bl	8007614 <mbedtls_pk_can_do>
 800a272:	b958      	cbnz	r0, 800a28c <mbedtls_ssl_handshake_client_step+0xb20>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 800a274:	4b53      	ldr	r3, [pc, #332]	; (800a3c4 <mbedtls_ssl_handshake_client_step+0xc58>)
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4a4a      	ldr	r2, [pc, #296]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 800a27a:	4d53      	ldr	r5, [pc, #332]	; (800a3c8 <mbedtls_ssl_handshake_client_step+0xc5c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 800a27c:	f640 035a 	movw	r3, #2138	; 0x85a
 800a280:	4631      	mov	r1, r6
 800a282:	4620      	mov	r0, r4
 800a284:	f7fb fb4a 	bl	800591c <mbedtls_debug_print_msg>
 800a288:	f7ff baa6 	b.w	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 800a28c:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 800a28e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a290:	69d5      	ldr	r5, [r2, #28]
 800a292:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800a294:	9503      	str	r5, [sp, #12]
 800a296:	6995      	ldr	r5, [r2, #24]
 800a298:	9502      	str	r5, [sp, #8]
 800a29a:	f5c7 657f 	rsb	r5, r7, #4080	; 0xff0
 800a29e:	350c      	adds	r5, #12
 800a2a0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a2a4:	9501      	str	r5, [sp, #4]
 800a2a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a2a8:	ad0c      	add	r5, sp, #48	; 0x30
 800a2aa:	9500      	str	r5, [sp, #0]
    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 800a2ac:	1d3b      	adds	r3, r7, #4
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 800a2ae:	440b      	add	r3, r1
 800a2b0:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 800a2b4:	4641      	mov	r1, r8
 800a2b6:	30bc      	adds	r0, #188	; 0xbc
 800a2b8:	f7fd fa48 	bl	800774c <mbedtls_pk_encrypt>
 800a2bc:	4605      	mov	r5, r0
 800a2be:	b130      	cbz	r0, 800a2ce <mbedtls_ssl_handshake_client_step+0xb62>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 800a2c0:	4b42      	ldr	r3, [pc, #264]	; (800a3cc <mbedtls_ssl_handshake_client_step+0xc60>)
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	9001      	str	r0, [sp, #4]
 800a2c6:	f640 0364 	movw	r3, #2148	; 0x864
 800a2ca:	f7ff bb4e 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    if( len_bytes == 2 )
 800a2ce:	b14f      	cbz	r7, 800a2e4 <mbedtls_ssl_handshake_client_step+0xb78>
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 800a2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a2d6:	0a19      	lsrs	r1, r3, #8
 800a2d8:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 800a2da:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a2de:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	930c      	str	r3, [sp, #48]	; 0x30
    ssl->out_msglen  = i + n;
 800a2e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800a2ec:	2316      	movs	r3, #22
 800a2ee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 800a2f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fee5 	bl	800b0d0 <mbedtls_ssl_write_record>
 800a306:	4605      	mov	r5, r0
 800a308:	b158      	cbz	r0, 800a322 <mbedtls_ssl_handshake_client_step+0xbb6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <mbedtls_ssl_handshake_client_step+0xc64>)
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	9501      	str	r5, [sp, #4]
 800a310:	f640 33cc 	movw	r3, #3020	; 0xbcc
 800a314:	f7ff bb29 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800a318:	4b2e      	ldr	r3, [pc, #184]	; (800a3d4 <mbedtls_ssl_handshake_client_step+0xc68>)
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800a320:	e639      	b.n	8009f96 <mbedtls_ssl_handshake_client_step+0x82a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 800a322:	4b2d      	ldr	r3, [pc, #180]	; (800a3d8 <mbedtls_ssl_handshake_client_step+0xc6c>)
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	f44f 633d 	mov.w	r3, #3024	; 0xbd0
 800a32a:	f7ff bb3a 	b.w	80099a2 <mbedtls_ssl_handshake_client_step+0x236>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800a32e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 800a330:	4a1c      	ldr	r2, [pc, #112]	; (800a3a4 <mbedtls_ssl_handshake_client_step+0xc38>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 800a332:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	930b      	str	r3, [sp, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 800a338:	4b28      	ldr	r3, [pc, #160]	; (800a3dc <mbedtls_ssl_handshake_client_step+0xc70>)
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	2102      	movs	r1, #2
 800a33e:	f640 4303 	movw	r3, #3075	; 0xc03
 800a342:	4620      	mov	r0, r4
 800a344:	f7fb faea 	bl	800591c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fb45 	bl	800a9d8 <mbedtls_ssl_derive_keys>
 800a34e:	4605      	mov	r5, r0
 800a350:	b130      	cbz	r0, 800a360 <mbedtls_ssl_handshake_client_step+0xbf4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 800a352:	4b23      	ldr	r3, [pc, #140]	; (800a3e0 <mbedtls_ssl_handshake_client_step+0xc74>)
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	9001      	str	r0, [sp, #4]
 800a358:	f640 4307 	movw	r3, #3079	; 0xc07
 800a35c:	f7ff bb05 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800a360:	7ab3      	ldrb	r3, [r6, #10]
 800a362:	1f5a      	subs	r2, r3, #5
 800a364:	2a03      	cmp	r2, #3
 800a366:	d901      	bls.n	800a36c <mbedtls_ssl_handshake_client_step+0xc00>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 800a368:	2b0b      	cmp	r3, #11
 800a36a:	d104      	bne.n	800a376 <mbedtls_ssl_handshake_client_step+0xc0a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 800a36c:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <mbedtls_ssl_handshake_client_step+0xc78>)
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	f640 4311 	movw	r3, #3089	; 0xc11
 800a374:	e5c9      	b.n	8009f0a <mbedtls_ssl_handshake_client_step+0x79e>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 800a376:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a37a:	b143      	cbz	r3, 800a38e <mbedtls_ssl_handshake_client_step+0xc22>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800a37c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800a37e:	b10e      	cbz	r6, 800a384 <mbedtls_ssl_handshake_client_step+0xc18>
 800a380:	6873      	ldr	r3, [r6, #4]
 800a382:	b913      	cbnz	r3, 800a38a <mbedtls_ssl_handshake_client_step+0xc1e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38

    return( key_cert == NULL ? NULL : key_cert->cert );
 800a388:	b10b      	cbz	r3, 800a38e <mbedtls_ssl_handshake_client_step+0xc22>
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	bb63      	cbnz	r3, 800a3e8 <mbedtls_ssl_handshake_client_step+0xc7c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 800a38e:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <mbedtls_ssl_handshake_client_step+0xc78>)
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	f640 4318 	movw	r3, #3096	; 0xc18
 800a396:	e5b8      	b.n	8009f0a <mbedtls_ssl_handshake_client_step+0x79e>
 800a398:	08013ead 	.word	0x08013ead
 800a39c:	08013ee8 	.word	0x08013ee8
 800a3a0:	08013f30 	.word	0x08013f30
 800a3a4:	08013898 	.word	0x08013898
 800a3a8:	08013b23 	.word	0x08013b23
 800a3ac:	08013f4b 	.word	0x08013f4b
 800a3b0:	ffff8480 	.word	0xffff8480
 800a3b4:	08013f69 	.word	0x08013f69
 800a3b8:	08013f84 	.word	0x08013f84
 800a3bc:	08013fa1 	.word	0x08013fa1
 800a3c0:	08013fa7 	.word	0x08013fa7
 800a3c4:	08013fbc 	.word	0x08013fbc
 800a3c8:	ffff9300 	.word	0xffff9300
 800a3cc:	08013fda 	.word	0x08013fda
 800a3d0:	08013ade 	.word	0x08013ade
 800a3d4:	08013e7c 	.word	0x08013e7c
 800a3d8:	08013ff4 	.word	0x08013ff4
 800a3dc:	08014011 	.word	0x08014011
 800a3e0:	08013c72 	.word	0x08013c72
 800a3e4:	0801402d 	.word	0x0801402d
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff f9b3 	bl	8009754 <mbedtls_ssl_own_key>
 800a3ee:	b958      	cbnz	r0, 800a408 <mbedtls_ssl_handshake_client_step+0xc9c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 800a3f0:	4bb6      	ldr	r3, [pc, #728]	; (800a6cc <mbedtls_ssl_handshake_client_step+0xf60>)
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	4ab6      	ldr	r2, [pc, #728]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 800a3f6:	4db7      	ldr	r5, [pc, #732]	; (800a6d4 <mbedtls_ssl_handshake_client_step+0xf68>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 800a3f8:	f640 431f 	movw	r3, #3103	; 0xc1f
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4620      	mov	r0, r4
 800a400:	f7fb fa8c 	bl	800591c <mbedtls_debug_print_msg>
 800a404:	f7ff b9e8 	b.w	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
    ssl->handshake->calc_verify( ssl, hash );
 800a408:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 800a40a:	a90c      	add	r1, sp, #48	; 0x30
 800a40c:	4620      	mov	r0, r4
 800a40e:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 800a410:	68e3      	ldr	r3, [r4, #12]
 800a412:	2b03      	cmp	r3, #3
 800a414:	d130      	bne.n	800a478 <mbedtls_ssl_handshake_client_step+0xd0c>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 800a416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	7a5d      	ldrb	r5, [r3, #9]
 800a41c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a420:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 800a422:	bf0b      	itete	eq
 800a424:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 800a426:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 800a428:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 800a42a:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 800a42c:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
 800a42e:	bf18      	it	ne
 800a430:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 800a432:	f7ff f98f 	bl	8009754 <mbedtls_ssl_own_key>
 800a436:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 800a43a:	f002 fea2 	bl	800d182 <mbedtls_ssl_sig_from_pk>
 800a43e:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff f987 	bl	8009754 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 800a446:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 800a448:	69da      	ldr	r2, [r3, #28]
 800a44a:	9203      	str	r2, [sp, #12]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	9302      	str	r3, [sp, #8]
 800a450:	ab0b      	add	r3, sp, #44	; 0x2c
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a458:	3308      	adds	r3, #8
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	4629      	mov	r1, r5
 800a45e:	2300      	movs	r3, #0
 800a460:	aa0c      	add	r2, sp, #48	; 0x30
 800a462:	f7fd f93f 	bl	80076e4 <mbedtls_pk_sign>
 800a466:	4605      	mov	r5, r0
 800a468:	b158      	cbz	r0, 800a482 <mbedtls_ssl_handshake_client_step+0xd16>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 800a46a:	4b9b      	ldr	r3, [pc, #620]	; (800a6d8 <mbedtls_ssl_handshake_client_step+0xf6c>)
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	9001      	str	r0, [sp, #4]
 800a470:	f640 4376 	movw	r3, #3190	; 0xc76
 800a474:	f7ff ba79 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800a478:	4b98      	ldr	r3, [pc, #608]	; (800a6dc <mbedtls_ssl_handshake_client_step+0xf70>)
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	f640 436e 	movw	r3, #3182	; 0xc6e
 800a480:	e589      	b.n	8009f96 <mbedtls_ssl_handshake_client_step+0x82a>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a488:	0a19      	lsrs	r1, r3, #8
 800a48a:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 800a48c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a490:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 800a492:	3308      	adds	r3, #8
 800a494:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800a498:	2316      	movs	r3, #22
 800a49a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 800a49e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a4a2:	220f      	movs	r2, #15
 800a4a4:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800a4a6:	6863      	ldr	r3, [r4, #4]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fe0f 	bl	800b0d0 <mbedtls_ssl_write_record>
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	b130      	cbz	r0, 800a4c4 <mbedtls_ssl_handshake_client_step+0xd58>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800a4b6:	4b8a      	ldr	r3, [pc, #552]	; (800a6e0 <mbedtls_ssl_handshake_client_step+0xf74>)
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	9001      	str	r0, [sp, #4]
 800a4bc:	f640 4385 	movw	r3, #3205	; 0xc85
 800a4c0:	f7ff ba53 	b.w	800996a <mbedtls_ssl_handshake_client_step+0x1fe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 800a4c4:	4b87      	ldr	r3, [pc, #540]	; (800a6e4 <mbedtls_ssl_handshake_client_step+0xf78>)
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	f640 4389 	movw	r3, #3209	; 0xc89
 800a4cc:	f7ff ba69 	b.w	80099a2 <mbedtls_ssl_handshake_client_step+0x236>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f002 f80b 	bl	800c4ec <mbedtls_ssl_write_change_cipher_spec>
 800a4d6:	e504      	b.n	8009ee2 <mbedtls_ssl_handshake_client_step+0x776>
           ret = mbedtls_ssl_write_finished( ssl );
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f002 f8d9 	bl	800c690 <mbedtls_ssl_write_finished>
 800a4de:	e500      	b.n	8009ee2 <mbedtls_ssl_handshake_client_step+0x776>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f002 f83d 	bl	800c560 <mbedtls_ssl_parse_change_cipher_spec>
 800a4e6:	e4fc      	b.n	8009ee2 <mbedtls_ssl_handshake_client_step+0x776>
           ret = mbedtls_ssl_parse_finished( ssl );
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f002 f947 	bl	800c77c <mbedtls_ssl_parse_finished>
 800a4ee:	e4f8      	b.n	8009ee2 <mbedtls_ssl_handshake_client_step+0x776>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 800a4f0:	4b7d      	ldr	r3, [pc, #500]	; (800a6e8 <mbedtls_ssl_handshake_client_step+0xf7c>)
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	4a76      	ldr	r2, [pc, #472]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a4f6:	f640 5377 	movw	r3, #3447	; 0xd77
 800a4fa:	2102      	movs	r1, #2
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f7fb fa0d 	bl	800591c <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 800a502:	230f      	movs	r3, #15
        ssl->state++;
 800a504:	6063      	str	r3, [r4, #4]
 800a506:	f7ff b967 	b.w	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
           mbedtls_ssl_handshake_wrapup( ssl );
 800a50a:	4620      	mov	r0, r4
 800a50c:	f002 fc52 	bl	800cdb4 <mbedtls_ssl_handshake_wrapup>
           break;
 800a510:	f7ff b962 	b.w	80097d8 <mbedtls_ssl_handshake_client_step+0x6c>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	4b75      	ldr	r3, [pc, #468]	; (800a6ec <mbedtls_ssl_handshake_client_step+0xf80>)
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4a6d      	ldr	r2, [pc, #436]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a51c:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 800a520:	2101      	movs	r1, #1
 800a522:	4620      	mov	r0, r4
 800a524:	f7fb f9fa 	bl	800591c <mbedtls_debug_print_msg>
 800a528:	f7ff b983 	b.w	8009832 <mbedtls_ssl_handshake_client_step+0xc6>
    memcpy( p, ssl->handshake->randbytes, 32 );
 800a52c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p += 2;
 800a52e:	f108 0106 	add.w	r1, r8, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 800a532:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800a536:	4608      	mov	r0, r1
 800a538:	33a8      	adds	r3, #168	; 0xa8
 800a53a:	f852 5b04 	ldr.w	r5, [r2], #4
 800a53e:	f840 5b04 	str.w	r5, [r0], #4
 800a542:	429a      	cmp	r2, r3
 800a544:	d1f9      	bne.n	800a53a <mbedtls_ssl_handshake_client_step+0xdce>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 800a546:	2320      	movs	r3, #32
 800a548:	9302      	str	r3, [sp, #8]
 800a54a:	4b69      	ldr	r3, [pc, #420]	; (800a6f0 <mbedtls_ssl_handshake_client_step+0xf84>)
 800a54c:	9101      	str	r1, [sp, #4]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4a5f      	ldr	r2, [pc, #380]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a552:	f240 3309 	movw	r3, #777	; 0x309
 800a556:	2103      	movs	r1, #3
 800a558:	4620      	mov	r0, r4
 800a55a:	f7fb fa3d 	bl	80059d8 <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 800a55e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a560:	689e      	ldr	r6, [r3, #8]
    if( n < 16 || n > 32 ||
 800a562:	f1a6 0310 	sub.w	r3, r6, #16
 800a566:	2b10      	cmp	r3, #16
 800a568:	f63f a99b 	bhi.w	80098a2 <mbedtls_ssl_handshake_client_step+0x136>
        ssl->handshake->resume == 0 )
 800a56c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if( n < 16 || n > 32 ||
 800a56e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
        n = 0;
 800a572:	2b00      	cmp	r3, #0
 800a574:	bf08      	it	eq
 800a576:	2600      	moveq	r6, #0
    *p++ = (unsigned char) n;
 800a578:	f108 0527 	add.w	r5, r8, #39	; 0x27
 800a57c:	f888 6026 	strb.w	r6, [r8, #38]	; 0x26
    for( i = 0; i < n; i++ )
 800a580:	2300      	movs	r3, #0
 800a582:	429e      	cmp	r6, r3
 800a584:	f47f a990 	bne.w	80098a8 <mbedtls_ssl_handshake_client_step+0x13c>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 800a588:	4b5a      	ldr	r3, [pc, #360]	; (800a6f4 <mbedtls_ssl_handshake_client_step+0xf88>)
 800a58a:	9601      	str	r6, [sp, #4]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	4a50      	ldr	r2, [pc, #320]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 800a590:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 800a594:	f240 333e 	movw	r3, #830	; 0x33e
 800a598:	2103      	movs	r1, #3
 800a59a:	4620      	mov	r0, r4
 800a59c:	f7fb f9be 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 800a5a0:	4b55      	ldr	r3, [pc, #340]	; (800a6f8 <mbedtls_ssl_handshake_client_step+0xf8c>)
 800a5a2:	9602      	str	r6, [sp, #8]
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	4a4a      	ldr	r2, [pc, #296]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a5a8:	9501      	str	r5, [sp, #4]
 800a5aa:	f240 333f 	movw	r3, #831	; 0x33f
 800a5ae:	2103      	movs	r1, #3
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f7fb fa11 	bl	80059d8 <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	68e2      	ldr	r2, [r4, #12]
 800a5ba:	eb05 0a06 	add.w	sl, r5, r6
 800a5be:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
    p += 2;
 800a5c2:	f10a 0602 	add.w	r6, sl, #2
    n = 0;
 800a5c6:	2700      	movs	r7, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
 800a5c8:	f8d9 5000 	ldr.w	r5, [r9]
 800a5cc:	2d00      	cmp	r5, #0
 800a5ce:	f47f a972 	bne.w	80098b6 <mbedtls_ssl_handshake_client_step+0x14a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 800a5d2:	4b4a      	ldr	r3, [pc, #296]	; (800a6fc <mbedtls_ssl_handshake_client_step+0xf90>)
 800a5d4:	9701      	str	r7, [sp, #4]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4a3d      	ldr	r2, [pc, #244]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a5da:	f240 3389 	movw	r3, #905	; 0x389
 800a5de:	2103      	movs	r1, #3
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7fb f99b 	bl	800591c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 800a5e6:	4b46      	ldr	r3, [pc, #280]	; (800a700 <mbedtls_ssl_handshake_client_step+0xf94>)
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4a39      	ldr	r2, [pc, #228]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a5ec:	f240 3392 	movw	r3, #914	; 0x392
 800a5f0:	2103      	movs	r1, #3
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7fb f992 	bl	800591c <mbedtls_debug_print_msg>
        n++;
 800a5f8:	3701      	adds	r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 800a5fa:	23ff      	movs	r3, #255	; 0xff
 800a5fc:	7073      	strb	r3, [r6, #1]
    *q++ = (unsigned char)( n >> 7 );
 800a5fe:	09fb      	lsrs	r3, r7, #7
    *q++ = (unsigned char)( n << 1 );
 800a600:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 800a602:	7035      	strb	r5, [r6, #0]
    *q++ = (unsigned char)( n >> 7 );
 800a604:	f88a 3000 	strb.w	r3, [sl]
    *q++ = (unsigned char)( n << 1 );
 800a608:	f88a 7001 	strb.w	r7, [sl, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 800a60c:	4b3d      	ldr	r3, [pc, #244]	; (800a704 <mbedtls_ssl_handshake_client_step+0xf98>)
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	2701      	movs	r7, #1
 800a612:	9701      	str	r7, [sp, #4]
 800a614:	f240 33c3 	movw	r3, #963	; 0x3c3
 800a618:	4a2d      	ldr	r2, [pc, #180]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a61a:	2103      	movs	r1, #3
 800a61c:	4620      	mov	r0, r4
 800a61e:	f7fb f97d 	bl	800591c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 800a622:	4b39      	ldr	r3, [pc, #228]	; (800a708 <mbedtls_ssl_handshake_client_step+0xf9c>)
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	2103      	movs	r1, #3
 800a628:	f240 33c5 	movw	r3, #965	; 0x3c5
 800a62c:	9501      	str	r5, [sp, #4]
 800a62e:	4a28      	ldr	r2, [pc, #160]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
 800a630:	4620      	mov	r0, r4
 800a632:	f7fb f973 	bl	800591c <mbedtls_debug_print_msg>
        *p++ = 1;
 800a636:	70b7      	strb	r7, [r6, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 800a638:	70f5      	strb	r5, [r6, #3]
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 800a640:	2903      	cmp	r1, #3
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 800a642:	f106 0706 	add.w	r7, r6, #6
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 800a646:	f47f a96c 	bne.w	8009922 <mbedtls_ssl_handshake_client_step+0x1b6>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 800a64a:	4b30      	ldr	r3, [pc, #192]	; (800a70c <mbedtls_ssl_handshake_client_step+0xfa0>)
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	4a20      	ldr	r2, [pc, #128]	; (800a6d0 <mbedtls_ssl_handshake_client_step+0xf64>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 800a650:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 800a654:	23bd      	movs	r3, #189	; 0xbd
 800a656:	4620      	mov	r0, r4
 800a658:	f7fb f960 	bl	800591c <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
    size_t sig_alg_len = 0;
 800a662:	462b      	mov	r3, r5
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 800a664:	f85a 5013 	ldr.w	r5, [sl, r3, lsl #1]
 800a668:	2d00      	cmp	r5, #0
 800a66a:	f47f a94e 	bne.w	800990a <mbedtls_ssl_handshake_client_step+0x19e>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 800a66e:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 800a672:	4297      	cmp	r7, r2
 800a674:	f63f a94c 	bhi.w	8009910 <mbedtls_ssl_handshake_client_step+0x1a4>
 800a678:	1bd2      	subs	r2, r2, r7
 800a67a:	3306      	adds	r3, #6
 800a67c:	429a      	cmp	r2, r3
 800a67e:	f4ff a947 	bcc.w	8009910 <mbedtls_ssl_handshake_client_step+0x1a4>
    unsigned char *sig_alg_list = buf + 6;
 800a682:	f106 0b0c 	add.w	fp, r6, #12
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 800a686:	2301      	movs	r3, #1
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 800a688:	f85a 0015 	ldr.w	r0, [sl, r5, lsl #1]
 800a68c:	f105 0902 	add.w	r9, r5, #2
 800a690:	2800      	cmp	r0, #0
 800a692:	f47f a970 	bne.w	8009976 <mbedtls_ssl_handshake_client_step+0x20a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 800a696:	230d      	movs	r3, #13
 800a698:	71f3      	strb	r3, [r6, #7]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 800a69a:	b2eb      	uxtb	r3, r5
 800a69c:	1c9a      	adds	r2, r3, #2
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 800a69e:	ea4f 2919 	mov.w	r9, r9, lsr #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 800a6a2:	7272      	strb	r2, [r6, #9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 800a6a4:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 800a6a6:	71b0      	strb	r0, [r6, #6]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 800a6a8:	f886 9008 	strb.w	r9, [r6, #8]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 800a6ac:	72b2      	strb	r2, [r6, #10]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 800a6ae:	72f3      	strb	r3, [r6, #11]
    *olen = 6 + sig_alg_len;
 800a6b0:	3506      	adds	r5, #6
 800a6b2:	f7ff b936 	b.w	8009922 <mbedtls_ssl_handshake_client_step+0x1b6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 800a6b6:	4b16      	ldr	r3, [pc, #88]	; (800a710 <mbedtls_ssl_handshake_client_step+0xfa4>)
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	f240 738b 	movw	r3, #1931	; 0x78b
 800a6be:	f7ff b970 	b.w	80099a2 <mbedtls_ssl_handshake_client_step+0x236>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 800a6c2:	4b14      	ldr	r3, [pc, #80]	; (800a714 <mbedtls_ssl_handshake_client_step+0xfa8>)
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	f640 2339 	movw	r3, #2617	; 0xa39
 800a6ca:	e41e      	b.n	8009f0a <mbedtls_ssl_handshake_client_step+0x79e>
 800a6cc:	0801404e 	.word	0x0801404e
 800a6d0:	08013898 	.word	0x08013898
 800a6d4:	ffff8a00 	.word	0xffff8a00
 800a6d8:	08014071 	.word	0x08014071
 800a6dc:	08013e7c 	.word	0x08013e7c
 800a6e0:	08013ade 	.word	0x08013ade
 800a6e4:	08014081 	.word	0x08014081
 800a6e8:	0801409d 	.word	0x0801409d
 800a6ec:	080140ad 	.word	0x080140ad
 800a6f0:	080140d2 	.word	0x080140d2
 800a6f4:	08013989 	.word	0x08013989
 800a6f8:	080139ab 	.word	0x080139ab
 800a6fc:	080139e8 	.word	0x080139e8
 800a700:	08013a1c 	.word	0x08013a1c
 800a704:	08013a41 	.word	0x08013a41
 800a708:	08013a61 	.word	0x08013a61
 800a70c:	08013a81 	.word	0x08013a81
 800a710:	080140ed 	.word	0x080140ed
 800a714:	08014103 	.word	0x08014103

0800a718 <mbedtls_zeroize>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800a718:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	4288      	cmp	r0, r1
 800a71e:	d100      	bne.n	800a722 <mbedtls_zeroize+0xa>
}
 800a720:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800a722:	7003      	strb	r3, [r0, #0]
 800a724:	3001      	adds	r0, #1
 800a726:	e7f9      	b.n	800a71c <mbedtls_zeroize+0x4>

0800a728 <ssl_set_timer>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 800a728:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 800a72a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 800a730:	b17b      	cbz	r3, 800a752 <ssl_set_timer+0x2a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <ssl_set_timer+0x30>)
 800a734:	9101      	str	r1, [sp, #4]
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	4a08      	ldr	r2, [pc, #32]	; (800a75c <ssl_set_timer+0x34>)
 800a73a:	2352      	movs	r3, #82	; 0x52
 800a73c:	2103      	movs	r1, #3
 800a73e:	f7fb f8ed 	bl	800591c <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 800a742:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a744:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a746:	462a      	mov	r2, r5
 800a748:	08a9      	lsrs	r1, r5, #2
}
 800a74a:	b003      	add	sp, #12
 800a74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 800a750:	4718      	bx	r3
}
 800a752:	b003      	add	sp, #12
 800a754:	bd30      	pop	{r4, r5, pc}
 800a756:	bf00      	nop
 800a758:	08014fe1 	.word	0x08014fe1
 800a75c:	08014fa0 	.word	0x08014fa0

0800a760 <ssl_calc_finished_tls_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 800a760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 800a764:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
{
 800a766:	b0a8      	sub	sp, #160	; 0xa0
 800a768:	4604      	mov	r4, r0
 800a76a:	4688      	mov	r8, r1
 800a76c:	4691      	mov	r9, r2
    if( !session )
 800a76e:	b906      	cbnz	r6, 800a772 <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 800a770:	6a86      	ldr	r6, [r0, #40]	; 0x28
#if !defined(MBEDTLS_SHA256_ALT)
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800a772:	4f2a      	ldr	r7, [pc, #168]	; (800a81c <ssl_calc_finished_tls_sha256+0xbc>)
    mbedtls_sha256_init( &sha256 );
 800a774:	a80d      	add	r0, sp, #52	; 0x34
 800a776:	f7fe fb32 	bl	8008dde <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 800a77a:	4b29      	ldr	r3, [pc, #164]	; (800a820 <ssl_calc_finished_tls_sha256+0xc0>)
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	4a29      	ldr	r2, [pc, #164]	; (800a824 <ssl_calc_finished_tls_sha256+0xc4>)
 800a780:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800a784:	4620      	mov	r0, r4
 800a786:	2102      	movs	r1, #2
 800a788:	f7fb f8c8 	bl	800591c <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 800a78c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a78e:	a80d      	add	r0, sp, #52	; 0x34
 800a790:	3108      	adds	r1, #8
 800a792:	f7fe fb32 	bl	8008dfa <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 800a796:	ab0f      	add	r3, sp, #60	; 0x3c
 800a798:	2520      	movs	r5, #32
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	4b22      	ldr	r3, [pc, #136]	; (800a828 <ssl_calc_finished_tls_sha256+0xc8>)
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f241 4304 	movw	r3, #5124	; 0x1404
 800a7a6:	9502      	str	r5, [sp, #8]
 800a7a8:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <ssl_calc_finished_tls_sha256+0xc4>)
 800a7aa:	2104      	movs	r1, #4
 800a7ac:	f7fb f914 	bl	80059d8 <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800a7b0:	4a1e      	ldr	r2, [pc, #120]	; (800a82c <ssl_calc_finished_tls_sha256+0xcc>)
             ? "client finished"
             : "server finished";

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 800a7b2:	a905      	add	r1, sp, #20
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 800a7b4:	f1b9 0f00 	cmp.w	r9, #0
 800a7b8:	bf18      	it	ne
 800a7ba:	4617      	movne	r7, r2
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 800a7bc:	a80d      	add	r0, sp, #52	; 0x34

    ssl->handshake->tls_prf( session->master, 48, sender,
 800a7be:	f04f 090c 	mov.w	r9, #12
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 800a7c2:	f7fe ff05 	bl	80095d0 <mbedtls_sha256_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
 800a7c6:	e88d 0320 	stmia.w	sp, {r5, r8, r9}
 800a7ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a7cc:	463a      	mov	r2, r7
 800a7ce:	f8d3 a080 	ldr.w	sl, [r3, #128]	; 0x80
 800a7d2:	2130      	movs	r1, #48	; 0x30
 800a7d4:	ab05      	add	r3, sp, #20
 800a7d6:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 800a7da:	47d0      	blx	sl
                             padbuf, 32, buf, len );

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 800a7dc:	4b14      	ldr	r3, [pc, #80]	; (800a830 <ssl_calc_finished_tls_sha256+0xd0>)
 800a7de:	4a11      	ldr	r2, [pc, #68]	; (800a824 <ssl_calc_finished_tls_sha256+0xc4>)
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	2103      	movs	r1, #3
 800a7e4:	f241 4310 	movw	r3, #5136	; 0x1410
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7ee:	f8cd 8004 	str.w	r8, [sp, #4]
 800a7f2:	f7fb f8f1 	bl	80059d8 <mbedtls_debug_print_buf>

    mbedtls_sha256_free( &sha256 );
 800a7f6:	a80d      	add	r0, sp, #52	; 0x34
 800a7f8:	f7fe faf5 	bl	8008de6 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	a805      	add	r0, sp, #20
 800a800:	f7ff ff8a 	bl	800a718 <mbedtls_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 800a804:	4b0b      	ldr	r3, [pc, #44]	; (800a834 <ssl_calc_finished_tls_sha256+0xd4>)
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	4a06      	ldr	r2, [pc, #24]	; (800a824 <ssl_calc_finished_tls_sha256+0xc4>)
 800a80a:	f241 4316 	movw	r3, #5142	; 0x1416
 800a80e:	2102      	movs	r1, #2
 800a810:	4620      	mov	r0, r4
 800a812:	f7fb f883 	bl	800591c <mbedtls_debug_print_msg>
}
 800a816:	b028      	add	sp, #160	; 0xa0
 800a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81c:	08014ec7 	.word	0x08014ec7
 800a820:	08014ee7 	.word	0x08014ee7
 800a824:	08014fa0 	.word	0x08014fa0
 800a828:	08014f04 	.word	0x08014f04
 800a82c:	08014ed7 	.word	0x08014ed7
 800a830:	08014f18 	.word	0x08014f18
 800a834:	08014f2d 	.word	0x08014f2d

0800a838 <ssl_calc_verify_tls_sha256>:
{
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	b0a0      	sub	sp, #128	; 0x80
 800a83c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 800a83e:	4d18      	ldr	r5, [pc, #96]	; (800a8a0 <ssl_calc_verify_tls_sha256+0x68>)
    mbedtls_sha256_init( &sha256 );
 800a840:	a805      	add	r0, sp, #20
{
 800a842:	460e      	mov	r6, r1
    mbedtls_sha256_init( &sha256 );
 800a844:	f7fe facb 	bl	8008dde <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 800a848:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <ssl_calc_verify_tls_sha256+0x6c>)
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	f240 432d 	movw	r3, #1069	; 0x42d
 800a852:	4620      	mov	r0, r4
 800a854:	2102      	movs	r1, #2
 800a856:	f7fb f861 	bl	800591c <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 800a85a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a85c:	a805      	add	r0, sp, #20
 800a85e:	3108      	adds	r1, #8
 800a860:	f7fe facb 	bl	8008dfa <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 800a864:	4631      	mov	r1, r6
 800a866:	a805      	add	r0, sp, #20
 800a868:	f7fe feb2 	bl	80095d0 <mbedtls_sha256_finish_ret>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 800a86c:	2320      	movs	r3, #32
 800a86e:	9302      	str	r3, [sp, #8]
 800a870:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <ssl_calc_verify_tls_sha256+0x70>)
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	462a      	mov	r2, r5
 800a876:	4620      	mov	r0, r4
 800a878:	9601      	str	r6, [sp, #4]
 800a87a:	f240 4332 	movw	r3, #1074	; 0x432
 800a87e:	2103      	movs	r1, #3
 800a880:	f7fb f8aa 	bl	80059d8 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 800a884:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <ssl_calc_verify_tls_sha256+0x74>)
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	462a      	mov	r2, r5
 800a88a:	f240 4333 	movw	r3, #1075	; 0x433
 800a88e:	2102      	movs	r1, #2
 800a890:	4620      	mov	r0, r4
 800a892:	f7fb f843 	bl	800591c <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 800a896:	a805      	add	r0, sp, #20
 800a898:	f7fe faa5 	bl	8008de6 <mbedtls_sha256_free>
}
 800a89c:	b020      	add	sp, #128	; 0x80
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	08014fa0 	.word	0x08014fa0
 800a8a4:	08014f3f 	.word	0x08014f3f
 800a8a8:	08014f55 	.word	0x08014f55
 800a8ac:	08014f6e 	.word	0x08014f6e

0800a8b0 <ssl_update_checksum_sha256>:
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 800a8b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a8b2:	3008      	adds	r0, #8
 800a8b4:	f7fe be86 	b.w	80095c4 <mbedtls_sha256_update_ret>

0800a8b8 <ssl_update_checksum_start>:
 800a8b8:	f7ff bffa 	b.w	800a8b0 <ssl_update_checksum_sha256>

0800a8bc <tls_prf_sha256>:
{
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	b0af      	sub	sp, #188	; 0xbc
 800a8c2:	e88d 0003 	stmia.w	sp, {r0, r1}
    mbedtls_md_init( &md_ctx );
 800a8c6:	a803      	add	r0, sp, #12
{
 800a8c8:	4691      	mov	r9, r2
 800a8ca:	469b      	mov	fp, r3
 800a8cc:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
    mbedtls_md_init( &md_ctx );
 800a8ce:	f7fc fbc7 	bl	8007060 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 800a8d2:	2006      	movs	r0, #6
 800a8d4:	f7fc fbb6 	bl	8007044 <mbedtls_md_info_from_type>
 800a8d8:	4682      	mov	sl, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d074      	beq.n	800a9c8 <tls_prf_sha256+0x10c>
    md_len = mbedtls_md_get_size( md_info );
 800a8de:	f7fc fcdf 	bl	80072a0 <mbedtls_md_get_size>
 800a8e2:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 800a8e4:	4648      	mov	r0, r9
 800a8e6:	f7f5 fc7b 	bl	80001e0 <strlen>
 800a8ea:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800a8ec:	1827      	adds	r7, r4, r0
 800a8ee:	19da      	adds	r2, r3, r7
 800a8f0:	2a80      	cmp	r2, #128	; 0x80
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	d86a      	bhi.n	800a9cc <tls_prf_sha256+0x110>
    memcpy( tmp + md_len, label, nb );
 800a8f6:	ab0e      	add	r3, sp, #56	; 0x38
 800a8f8:	eb03 0804 	add.w	r8, r3, r4
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	4649      	mov	r1, r9
 800a900:	4640      	mov	r0, r8
 800a902:	f004 faac 	bl	800ee5e <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 800a906:	ab0e      	add	r3, sp, #56	; 0x38
 800a908:	19d8      	adds	r0, r3, r7
 800a90a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800a90c:	4659      	mov	r1, fp
 800a90e:	f004 faa6 	bl	800ee5e <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 800a912:	2201      	movs	r2, #1
 800a914:	4651      	mov	r1, sl
 800a916:	a803      	add	r0, sp, #12
 800a918:	f7fc fbc8 	bl	80070ac <mbedtls_md_setup>
 800a91c:	4607      	mov	r7, r0
 800a91e:	bb00      	cbnz	r0, 800a962 <tls_prf_sha256+0xa6>
    nb += rlen;
 800a920:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 800a922:	e89d 0006 	ldmia.w	sp, {r1, r2}
    nb += rlen;
 800a926:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 800a928:	a803      	add	r0, sp, #12
 800a92a:	f7fc fbef 	bl	800710c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 800a92e:	462a      	mov	r2, r5
 800a930:	4641      	mov	r1, r8
 800a932:	a803      	add	r0, sp, #12
 800a934:	f7fc fc4e 	bl	80071d4 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 800a938:	a90e      	add	r1, sp, #56	; 0x38
 800a93a:	a803      	add	r0, sp, #12
 800a93c:	f7fc fc5c 	bl	80071f8 <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 800a940:	46b8      	mov	r8, r7
 800a942:	f10d 0a18 	add.w	sl, sp, #24
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 800a946:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 800a948:	4546      	cmp	r6, r8
        mbedtls_md_hmac_reset ( &md_ctx );
 800a94a:	a803      	add	r0, sp, #12
    for( i = 0; i < dlen; i += md_len )
 800a94c:	d80d      	bhi.n	800a96a <tls_prf_sha256+0xae>
    mbedtls_md_free( &md_ctx );
 800a94e:	f7fc fb8c 	bl	800706a <mbedtls_md_free>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 800a952:	2180      	movs	r1, #128	; 0x80
 800a954:	a80e      	add	r0, sp, #56	; 0x38
 800a956:	f7ff fedf 	bl	800a718 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 800a95a:	2120      	movs	r1, #32
 800a95c:	4650      	mov	r0, sl
 800a95e:	f7ff fedb 	bl	800a718 <mbedtls_zeroize>
}
 800a962:	4638      	mov	r0, r7
 800a964:	b02f      	add	sp, #188	; 0xbc
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 800a96a:	f7fc fc77 	bl	800725c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 800a96e:	462a      	mov	r2, r5
 800a970:	a90e      	add	r1, sp, #56	; 0x38
 800a972:	a803      	add	r0, sp, #12
 800a974:	f7fc fc2e 	bl	80071d4 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 800a978:	4651      	mov	r1, sl
 800a97a:	a803      	add	r0, sp, #12
 800a97c:	f7fc fc3c 	bl	80071f8 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 800a980:	a803      	add	r0, sp, #12
 800a982:	f7fc fc6b 	bl	800725c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 800a986:	4622      	mov	r2, r4
 800a988:	a90e      	add	r1, sp, #56	; 0x38
 800a98a:	a803      	add	r0, sp, #12
 800a98c:	f7fc fc22 	bl	80071d4 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 800a990:	a90e      	add	r1, sp, #56	; 0x38
 800a992:	a803      	add	r0, sp, #12
 800a994:	f7fc fc30 	bl	80071f8 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800a998:	eb04 0108 	add.w	r1, r4, r8
            dstbuf[i + j]  = h_i[j];
 800a99c:	9839      	ldr	r0, [sp, #228]	; 0xe4
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800a99e:	428e      	cmp	r6, r1
 800a9a0:	bf2c      	ite	cs
 800a9a2:	4622      	movcs	r2, r4
 800a9a4:	fbb6 f2f4 	udivcc	r2, r6, r4
        for( j = 0; j < k; j++ )
 800a9a8:	f04f 0300 	mov.w	r3, #0
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800a9ac:	bf38      	it	cc
 800a9ae:	fb04 6212 	mlscc	r2, r4, r2, r6
            dstbuf[i + j]  = h_i[j];
 800a9b2:	4480      	add	r8, r0
        for( j = 0; j < k; j++ )
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d101      	bne.n	800a9bc <tls_prf_sha256+0x100>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 800a9b8:	4688      	mov	r8, r1
 800a9ba:	e7c5      	b.n	800a948 <tls_prf_sha256+0x8c>
            dstbuf[i + j]  = h_i[j];
 800a9bc:	f81a 0003 	ldrb.w	r0, [sl, r3]
 800a9c0:	f808 0003 	strb.w	r0, [r8, r3]
        for( j = 0; j < k; j++ )
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	e7f5      	b.n	800a9b4 <tls_prf_sha256+0xf8>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800a9c8:	4f01      	ldr	r7, [pc, #4]	; (800a9d0 <tls_prf_sha256+0x114>)
 800a9ca:	e7ca      	b.n	800a962 <tls_prf_sha256+0xa6>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800a9cc:	4f01      	ldr	r7, [pc, #4]	; (800a9d4 <tls_prf_sha256+0x118>)
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 800a9ce:	e7c8      	b.n	800a962 <tls_prf_sha256+0xa6>
 800a9d0:	ffff9400 	.word	0xffff9400
 800a9d4:	ffff8f00 	.word	0xffff8f00

0800a9d8 <mbedtls_ssl_derive_keys>:
{
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 800a9de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 800a9e0:	6c04      	ldr	r4, [r0, #64]	; 0x40
    mbedtls_ssl_session *session = ssl->session_negotiate;
 800a9e2:	9306      	str	r3, [sp, #24]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 800a9e4:	4b96      	ldr	r3, [pc, #600]	; (800ac40 <mbedtls_ssl_derive_keys+0x268>)
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 800a9e6:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 800a9ea:	4a96      	ldr	r2, [pc, #600]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	f240 2301 	movw	r3, #513	; 0x201
{
 800a9f4:	4606      	mov	r6, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 800a9f6:	f7fa ff91 	bl	800591c <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	7a18      	ldrb	r0, [r3, #8]
 800a9fe:	f7fa fc33 	bl	8005268 <mbedtls_cipher_info_from_type>
 800aa02:	6823      	ldr	r3, [r4, #0]
    if( cipher_info == NULL )
 800aa04:	4681      	mov	r9, r0
 800aa06:	b978      	cbnz	r0, 800aa28 <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 800aa08:	7a1b      	ldrb	r3, [r3, #8]
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	4b8e      	ldr	r3, [pc, #568]	; (800ac48 <mbedtls_ssl_derive_keys+0x270>)
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	f240 2307 	movw	r3, #519	; 0x207
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 800aa14:	4a8b      	ldr	r2, [pc, #556]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800aa16:	4d8d      	ldr	r5, [pc, #564]	; (800ac4c <mbedtls_ssl_derive_keys+0x274>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 800aa18:	2101      	movs	r1, #1
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7fa ff7e 	bl	800591c <mbedtls_debug_print_msg>
}
 800aa20:	4628      	mov	r0, r5
 800aa22:	b059      	add	sp, #356	; 0x164
 800aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 800aa28:	7a58      	ldrb	r0, [r3, #9]
 800aa2a:	f7fc fb0b 	bl	8007044 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 800aa2e:	4683      	mov	fp, r0
 800aa30:	b938      	cbnz	r0, 800aa42 <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	7a5b      	ldrb	r3, [r3, #9]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	4b85      	ldr	r3, [pc, #532]	; (800ac50 <mbedtls_ssl_derive_keys+0x278>)
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	f240 230f 	movw	r3, #527	; 0x20f
 800aa40:	e7e8      	b.n	800aa14 <mbedtls_ssl_derive_keys+0x3c>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 800aa42:	68f1      	ldr	r1, [r6, #12]
 800aa44:	2903      	cmp	r1, #3
 800aa46:	d116      	bne.n	800aa76 <mbedtls_ssl_derive_keys+0x9e>
        handshake->tls_prf = tls_prf_sha256;
 800aa48:	4b82      	ldr	r3, [pc, #520]	; (800ac54 <mbedtls_ssl_derive_keys+0x27c>)
 800aa4a:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 800aa4e:	4b82      	ldr	r3, [pc, #520]	; (800ac58 <mbedtls_ssl_derive_keys+0x280>)
 800aa50:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 800aa54:	4b81      	ldr	r3, [pc, #516]	; (800ac5c <mbedtls_ssl_derive_keys+0x284>)
 800aa56:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
    if( handshake->resume == 0 )
 800aa5a:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 800aa5e:	f108 07c8 	add.w	r7, r8, #200	; 0xc8
 800aa62:	b19b      	cbz	r3, 800aa8c <mbedtls_ssl_derive_keys+0xb4>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 800aa64:	4b7e      	ldr	r3, [pc, #504]	; (800ac60 <mbedtls_ssl_derive_keys+0x288>)
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	4a76      	ldr	r2, [pc, #472]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800aa6a:	f44f 7322 	mov.w	r3, #648	; 0x288
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7fa ff54 	bl	800591c <mbedtls_debug_print_msg>
 800aa74:	e039      	b.n	800aaea <mbedtls_ssl_derive_keys+0x112>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800aa76:	4b7b      	ldr	r3, [pc, #492]	; (800ac64 <mbedtls_ssl_derive_keys+0x28c>)
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	f240 233e 	movw	r3, #574	; 0x23e
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800aa7e:	4a71      	ldr	r2, [pc, #452]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800aa80:	4d79      	ldr	r5, [pc, #484]	; (800ac68 <mbedtls_ssl_derive_keys+0x290>)
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800aa82:	2101      	movs	r1, #1
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7fa ff49 	bl	800591c <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800aa8a:	e7c9      	b.n	800aa20 <mbedtls_ssl_derive_keys+0x48>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 800aa8c:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800aa90:	9302      	str	r3, [sp, #8]
 800aa92:	4b76      	ldr	r3, [pc, #472]	; (800ac6c <mbedtls_ssl_derive_keys+0x294>)
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	4a6b      	ldr	r2, [pc, #428]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800aa98:	9701      	str	r7, [sp, #4]
 800aa9a:	f240 234f 	movw	r3, #591	; 0x24f
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f7fa ff9a 	bl	80059d8 <mbedtls_debug_print_buf>
                                  session->master, 48 );
 800aaa4:	9b06      	ldr	r3, [sp, #24]
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 800aaa6:	4a72      	ldr	r2, [pc, #456]	; (800ac70 <mbedtls_ssl_derive_keys+0x298>)
                                  session->master, 48 );
 800aaa8:	332c      	adds	r3, #44	; 0x2c
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	f8cd a008 	str.w	sl, [sp, #8]
 800aab8:	f8d8 5080 	ldr.w	r5, [r8, #128]	; 0x80
 800aabc:	f8d8 1084 	ldr.w	r1, [r8, #132]	; 0x84
 800aac0:	f108 0388 	add.w	r3, r8, #136	; 0x88
 800aac4:	4638      	mov	r0, r7
 800aac6:	47a8      	blx	r5
        if( ret != 0 )
 800aac8:	4605      	mov	r5, r0
 800aaca:	b150      	cbz	r0, 800aae2 <mbedtls_ssl_derive_keys+0x10a>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 800aacc:	4b69      	ldr	r3, [pc, #420]	; (800ac74 <mbedtls_ssl_derive_keys+0x29c>)
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	9001      	str	r0, [sp, #4]
 800aad2:	f240 2381 	movw	r3, #641	; 0x281
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800aad6:	4a5b      	ldr	r2, [pc, #364]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800aad8:	2101      	movs	r1, #1
 800aada:	4630      	mov	r0, r6
 800aadc:	f7fa ff4e 	bl	800597c <mbedtls_debug_print_ret>
        return( ret );
 800aae0:	e79e      	b.n	800aa20 <mbedtls_ssl_derive_keys+0x48>
        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 800aae2:	4651      	mov	r1, sl
 800aae4:	4638      	mov	r0, r7
 800aae6:	f7ff fe17 	bl	800a718 <mbedtls_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 800aaea:	f108 0388 	add.w	r3, r8, #136	; 0x88
 800aaee:	ad08      	add	r5, sp, #32
 800aaf0:	469a      	mov	sl, r3
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	6859      	ldr	r1, [r3, #4]
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	c203      	stmia	r2!, {r0, r1}
 800aafa:	3308      	adds	r3, #8
 800aafc:	42bb      	cmp	r3, r7
 800aafe:	4615      	mov	r5, r2
 800ab00:	d1f7      	bne.n	800aaf2 <mbedtls_ssl_derive_keys+0x11a>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 800ab02:	ad10      	add	r5, sp, #64	; 0x40
 800ab04:	4652      	mov	r2, sl
 800ab06:	af18      	add	r7, sp, #96	; 0x60
 800ab08:	462b      	mov	r3, r5
 800ab0a:	cb03      	ldmia	r3!, {r0, r1}
 800ab0c:	42bb      	cmp	r3, r7
 800ab0e:	6010      	str	r0, [r2, #0]
 800ab10:	6051      	str	r1, [r2, #4]
 800ab12:	461d      	mov	r5, r3
 800ab14:	f102 0208 	add.w	r2, r2, #8
 800ab18:	d1f6      	bne.n	800ab08 <mbedtls_ssl_derive_keys+0x130>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 800ab1a:	ad08      	add	r5, sp, #32
 800ab1c:	f108 02a8 	add.w	r2, r8, #168	; 0xa8
 800ab20:	af10      	add	r7, sp, #64	; 0x40
 800ab22:	462b      	mov	r3, r5
 800ab24:	cb03      	ldmia	r3!, {r0, r1}
 800ab26:	42bb      	cmp	r3, r7
 800ab28:	6010      	str	r0, [r2, #0]
 800ab2a:	6051      	str	r1, [r2, #4]
 800ab2c:	461d      	mov	r5, r3
 800ab2e:	f102 0208 	add.w	r2, r2, #8
 800ab32:	d1f6      	bne.n	800ab22 <mbedtls_ssl_derive_keys+0x14a>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 800ab34:	2140      	movs	r1, #64	; 0x40
 800ab36:	a808      	add	r0, sp, #32
 800ab38:	f7ff fdee 	bl	800a718 <mbedtls_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	4a4e      	ldr	r2, [pc, #312]	; (800ac78 <mbedtls_ssl_derive_keys+0x2a0>)
 800ab40:	332c      	adds	r3, #44	; 0x2c
 800ab42:	9307      	str	r3, [sp, #28]
 800ab44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab48:	9302      	str	r3, [sp, #8]
 800ab4a:	2740      	movs	r7, #64	; 0x40
 800ab4c:	ab18      	add	r3, sp, #96	; 0x60
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	9700      	str	r7, [sp, #0]
 800ab52:	f8d8 5080 	ldr.w	r5, [r8, #128]	; 0x80
 800ab56:	9807      	ldr	r0, [sp, #28]
 800ab58:	4653      	mov	r3, sl
 800ab5a:	2130      	movs	r1, #48	; 0x30
 800ab5c:	47a8      	blx	r5
    if( ret != 0 )
 800ab5e:	4605      	mov	r5, r0
 800ab60:	b128      	cbz	r0, 800ab6e <mbedtls_ssl_derive_keys+0x196>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 800ab62:	4b44      	ldr	r3, [pc, #272]	; (800ac74 <mbedtls_ssl_derive_keys+0x29c>)
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	9001      	str	r0, [sp, #4]
 800ab68:	f240 23a2 	movw	r3, #674	; 0x2a2
 800ab6c:	e7b3      	b.n	800aad6 <mbedtls_ssl_derive_keys+0xfe>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 800ab6e:	9b06      	ldr	r3, [sp, #24]
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	f7fe fde5 	bl	8009740 <mbedtls_ssl_get_ciphersuite_name>
 800ab76:	4b41      	ldr	r3, [pc, #260]	; (800ac7c <mbedtls_ssl_derive_keys+0x2a4>)
 800ab78:	9001      	str	r0, [sp, #4]
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	4a31      	ldr	r2, [pc, #196]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800ab7e:	f240 23a7 	movw	r3, #679	; 0x2a7
 800ab82:	2103      	movs	r1, #3
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7fa fec9 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 800ab8a:	2330      	movs	r3, #48	; 0x30
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	9b07      	ldr	r3, [sp, #28]
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	4b37      	ldr	r3, [pc, #220]	; (800ac70 <mbedtls_ssl_derive_keys+0x298>)
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	4a2b      	ldr	r2, [pc, #172]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800ab98:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 800ab9c:	2103      	movs	r1, #3
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7fa ff1a 	bl	80059d8 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 800aba4:	4b36      	ldr	r3, [pc, #216]	; (800ac80 <mbedtls_ssl_derive_keys+0x2a8>)
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800abaa:	9702      	str	r7, [sp, #8]
 800abac:	f240 23a9 	movw	r3, #681	; 0x2a9
 800abb0:	2104      	movs	r1, #4
 800abb2:	4630      	mov	r0, r6
 800abb4:	f8cd a004 	str.w	sl, [sp, #4]
 800abb8:	f7fa ff0e 	bl	80059d8 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 800abbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	ab18      	add	r3, sp, #96	; 0x60
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	4b2f      	ldr	r3, [pc, #188]	; (800ac84 <mbedtls_ssl_derive_keys+0x2ac>)
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	4a1e      	ldr	r2, [pc, #120]	; (800ac44 <mbedtls_ssl_derive_keys+0x26c>)
 800abcc:	f240 23aa 	movw	r3, #682	; 0x2aa
 800abd0:	2104      	movs	r1, #4
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7fa ff00 	bl	80059d8 <mbedtls_debug_print_buf>
    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 800abd8:	4639      	mov	r1, r7
 800abda:	4650      	mov	r0, sl
 800abdc:	f7ff fd9c 	bl	800a718 <mbedtls_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 800abe0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800abe4:	08db      	lsrs	r3, r3, #3
 800abe6:	6063      	str	r3, [r4, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 800abe8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800abec:	2b06      	cmp	r3, #6
 800abee:	d001      	beq.n	800abf4 <mbedtls_ssl_derive_keys+0x21c>
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d10e      	bne.n	800ac12 <mbedtls_ssl_derive_keys+0x23a>
        transform->ivlen = 12;
 800abf4:	230c      	movs	r3, #12
 800abf6:	60e3      	str	r3, [r4, #12]
        transform->fixed_ivlen = 4;
 800abf8:	2304      	movs	r3, #4
 800abfa:	6123      	str	r3, [r4, #16]
        transform->maclen = 0;
 800abfc:	2500      	movs	r5, #0
                            + ( transform->ciphersuite_info->flags &
 800abfe:	6823      	ldr	r3, [r4, #0]
        transform->maclen = 0;
 800ac00:	6165      	str	r5, [r4, #20]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 800ac02:	7f1b      	ldrb	r3, [r3, #28]
 800ac04:	f013 0f02 	tst.w	r3, #2
                            + ( transform->ciphersuite_info->flags &
 800ac08:	bf14      	ite	ne
 800ac0a:	2310      	movne	r3, #16
 800ac0c:	2318      	moveq	r3, #24
                transform->minlen += transform->ivlen;
 800ac0e:	60a3      	str	r3, [r4, #8]
 800ac10:	e049      	b.n	800aca6 <mbedtls_ssl_derive_keys+0x2ce>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 800ac12:	2201      	movs	r2, #1
 800ac14:	4659      	mov	r1, fp
 800ac16:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ac1a:	f7fc fa47 	bl	80070ac <mbedtls_md_setup>
 800ac1e:	4605      	mov	r5, r0
 800ac20:	b938      	cbnz	r0, 800ac32 <mbedtls_ssl_derive_keys+0x25a>
 800ac22:	2201      	movs	r2, #1
 800ac24:	4659      	mov	r1, fp
 800ac26:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800ac2a:	f7fc fa3f 	bl	80070ac <mbedtls_md_setup>
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b360      	cbz	r0, 800ac8c <mbedtls_ssl_derive_keys+0x2b4>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 800ac32:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <mbedtls_ssl_derive_keys+0x2b0>)
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	9501      	str	r5, [sp, #4]
 800ac38:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 800ac3c:	e74b      	b.n	800aad6 <mbedtls_ssl_derive_keys+0xfe>
 800ac3e:	bf00      	nop
 800ac40:	08014170 	.word	0x08014170
 800ac44:	08014fa0 	.word	0x08014fa0
 800ac48:	0801417f 	.word	0x0801417f
 800ac4c:	ffff8f00 	.word	0xffff8f00
 800ac50:	0801419c 	.word	0x0801419c
 800ac54:	0800a8bd 	.word	0x0800a8bd
 800ac58:	0800a839 	.word	0x0800a839
 800ac5c:	0800a761 	.word	0x0800a761
 800ac60:	080141d2 	.word	0x080141d2
 800ac64:	08013e7c 	.word	0x08013e7c
 800ac68:	ffff9400 	.word	0xffff9400
 800ac6c:	080141bd 	.word	0x080141bd
 800ac70:	080141c0 	.word	0x080141c0
 800ac74:	080141ce 	.word	0x080141ce
 800ac78:	080141f1 	.word	0x080141f1
 800ac7c:	080141ff 	.word	0x080141ff
 800ac80:	08013be4 	.word	0x08013be4
 800ac84:	08014210 	.word	0x08014210
 800ac88:	0801421a 	.word	0x0801421a
        mac_key_len = mbedtls_md_get_size( md_info );
 800ac8c:	4658      	mov	r0, fp
 800ac8e:	f7fc fb07 	bl	80072a0 <mbedtls_md_get_size>
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 800ac92:	f899 3001 	ldrb.w	r3, [r9, #1]
        transform->ivlen = cipher_info->iv_size;
 800ac96:	f8d9 200c 	ldr.w	r2, [r9, #12]
        transform->maclen = mac_key_len;
 800ac9a:	6160      	str	r0, [r4, #20]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 800ac9c:	2b07      	cmp	r3, #7
        mac_key_len = mbedtls_md_get_size( md_info );
 800ac9e:	4605      	mov	r5, r0
        transform->ivlen = cipher_info->iv_size;
 800aca0:	60e2      	str	r2, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 800aca2:	d13c      	bne.n	800ad1e <mbedtls_ssl_derive_keys+0x346>
            transform->minlen = transform->maclen;
 800aca4:	60a0      	str	r0, [r4, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 800aca6:	6963      	ldr	r3, [r4, #20]
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	68e3      	ldr	r3, [r4, #12]
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	68a3      	ldr	r3, [r4, #8]
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	6863      	ldr	r3, [r4, #4]
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	4b64      	ldr	r3, [pc, #400]	; (800ae48 <mbedtls_ssl_derive_keys+0x470>)
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	4a64      	ldr	r2, [pc, #400]	; (800ae4c <mbedtls_ssl_derive_keys+0x474>)
 800acbc:	f240 3316 	movw	r3, #790	; 0x316
 800acc0:	2103      	movs	r1, #3
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7fa fe2a 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800acc8:	6833      	ldr	r3, [r6, #0]
 800acca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acce:	07db      	lsls	r3, r3, #31
 800acd0:	d437      	bmi.n	800ad42 <mbedtls_ssl_derive_keys+0x36a>
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 800acd2:	f8d4 8004 	ldr.w	r8, [r4, #4]
        key1 = keyblk + mac_key_len * 2;
 800acd6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 800acda:	ab18      	add	r3, sp, #96	; 0x60
 800acdc:	eb0a 0708 	add.w	r7, sl, r8
 800ace0:	441f      	add	r7, r3
        mac_dec = keyblk + mac_key_len;
 800ace2:	eb03 0b05 	add.w	fp, r3, r5
        iv_copy_len = ( transform->fixed_ivlen ) ?
 800ace6:	6923      	ldr	r3, [r4, #16]
                            transform->fixed_ivlen : transform->ivlen;
 800ace8:	b903      	cbnz	r3, 800acec <mbedtls_ssl_derive_keys+0x314>
 800acea:	68e3      	ldr	r3, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 800acec:	9306      	str	r3, [sp, #24]
 800acee:	461a      	mov	r2, r3
 800acf0:	eb07 0108 	add.w	r1, r7, r8
 800acf4:	f104 0018 	add.w	r0, r4, #24
 800acf8:	f004 f8b1 	bl	800ee5e <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	eb03 0108 	add.w	r1, r3, r8
 800ad02:	461a      	mov	r2, r3
 800ad04:	4439      	add	r1, r7
 800ad06:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad0a:	f004 f8a8 	bl	800ee5e <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800ad0e:	68f3      	ldr	r3, [r6, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc1b      	bgt.n	800ad4c <mbedtls_ssl_derive_keys+0x374>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ad14:	4b4e      	ldr	r3, [pc, #312]	; (800ae50 <mbedtls_ssl_derive_keys+0x478>)
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	f44f 7358 	mov.w	r3, #864	; 0x360
 800ad1c:	e6af      	b.n	800aa7e <mbedtls_ssl_derive_keys+0xa6>
                                  + cipher_info->block_size
 800ad1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
                                  - transform->maclen % cipher_info->block_size;
 800ad22:	fbb0 f1f3 	udiv	r1, r0, r3
 800ad26:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 800ad2a:	68f1      	ldr	r1, [r6, #12]
                transform->minlen = transform->maclen
 800ad2c:	60a3      	str	r3, [r4, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 800ad2e:	3902      	subs	r1, #2
 800ad30:	2901      	cmp	r1, #1
 800ad32:	d801      	bhi.n	800ad38 <mbedtls_ssl_derive_keys+0x360>
                transform->minlen += transform->ivlen;
 800ad34:	4413      	add	r3, r2
 800ad36:	e76a      	b.n	800ac0e <mbedtls_ssl_derive_keys+0x236>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ad38:	4b45      	ldr	r3, [pc, #276]	; (800ae50 <mbedtls_ssl_derive_keys+0x478>)
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	f240 330e 	movw	r3, #782	; 0x30e
 800ad40:	e69d      	b.n	800aa7e <mbedtls_ssl_derive_keys+0xa6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ad42:	4b43      	ldr	r3, [pc, #268]	; (800ae50 <mbedtls_ssl_derive_keys+0x478>)
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	f44f 7351 	mov.w	r3, #836	; 0x344
 800ad4a:	e698      	b.n	800aa7e <mbedtls_ssl_derive_keys+0xa6>
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	a918      	add	r1, sp, #96	; 0x60
 800ad50:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ad54:	f7fc f9da 	bl	800710c <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 800ad58:	f104 0850 	add.w	r8, r4, #80	; 0x50
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4659      	mov	r1, fp
 800ad60:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800ad64:	f7fc f9d2 	bl	800710c <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	f7fa fc42 	bl	80055f4 <mbedtls_cipher_setup>
 800ad70:	4605      	mov	r5, r0
 800ad72:	b128      	cbz	r0, 800ad80 <mbedtls_ssl_derive_keys+0x3a8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 800ad74:	4b37      	ldr	r3, [pc, #220]	; (800ae54 <mbedtls_ssl_derive_keys+0x47c>)
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	9001      	str	r0, [sp, #4]
 800ad7a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800ad7e:	e6aa      	b.n	800aad6 <mbedtls_ssl_derive_keys+0xfe>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 800ad80:	3490      	adds	r4, #144	; 0x90
 800ad82:	4649      	mov	r1, r9
 800ad84:	4620      	mov	r0, r4
 800ad86:	f7fa fc35 	bl	80055f4 <mbedtls_cipher_setup>
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	b128      	cbz	r0, 800ad9a <mbedtls_ssl_derive_keys+0x3c2>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 800ad8e:	4b31      	ldr	r3, [pc, #196]	; (800ae54 <mbedtls_ssl_derive_keys+0x47c>)
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	9001      	str	r0, [sp, #4]
 800ad94:	f240 338b 	movw	r3, #907	; 0x38b
 800ad98:	e69d      	b.n	800aad6 <mbedtls_ssl_derive_keys+0xfe>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 800ad9a:	a918      	add	r1, sp, #96	; 0x60
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ada2:	4451      	add	r1, sl
 800ada4:	4640      	mov	r0, r8
 800ada6:	f7fa fa97 	bl	80052d8 <mbedtls_cipher_setkey>
 800adaa:	4605      	mov	r5, r0
 800adac:	b128      	cbz	r0, 800adba <mbedtls_ssl_derive_keys+0x3e2>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800adae:	4b2a      	ldr	r3, [pc, #168]	; (800ae58 <mbedtls_ssl_derive_keys+0x480>)
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	9001      	str	r0, [sp, #4]
 800adb4:	f240 3393 	movw	r3, #915	; 0x393
 800adb8:	e68d      	b.n	800aad6 <mbedtls_ssl_derive_keys+0xfe>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 800adba:	4603      	mov	r3, r0
 800adbc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800adc0:	4639      	mov	r1, r7
 800adc2:	4620      	mov	r0, r4
 800adc4:	f7fa fa88 	bl	80052d8 <mbedtls_cipher_setkey>
 800adc8:	4605      	mov	r5, r0
 800adca:	b128      	cbz	r0, 800add8 <mbedtls_ssl_derive_keys+0x400>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 800adcc:	4b22      	ldr	r3, [pc, #136]	; (800ae58 <mbedtls_ssl_derive_keys+0x480>)
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	9001      	str	r0, [sp, #4]
 800add2:	f240 339b 	movw	r3, #923	; 0x39b
 800add6:	e67e      	b.n	800aad6 <mbedtls_ssl_derive_keys+0xfe>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 800add8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800addc:	2b02      	cmp	r3, #2
 800adde:	d123      	bne.n	800ae28 <mbedtls_ssl_derive_keys+0x450>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 800ade0:	2104      	movs	r1, #4
 800ade2:	4640      	mov	r0, r8
 800ade4:	f7fa fbee 	bl	80055c4 <mbedtls_cipher_set_padding_mode>
 800ade8:	4607      	mov	r7, r0
 800adea:	b158      	cbz	r0, 800ae04 <mbedtls_ssl_derive_keys+0x42c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 800adec:	4b1b      	ldr	r3, [pc, #108]	; (800ae5c <mbedtls_ssl_derive_keys+0x484>)
 800adee:	9001      	str	r0, [sp, #4]
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	4a16      	ldr	r2, [pc, #88]	; (800ae4c <mbedtls_ssl_derive_keys+0x474>)
 800adf4:	f240 33a5 	movw	r3, #933	; 0x3a5
 800adf8:	2101      	movs	r1, #1
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7fa fdbe 	bl	800597c <mbedtls_debug_print_ret>
            return( ret );
 800ae00:	463d      	mov	r5, r7
 800ae02:	e60d      	b.n	800aa20 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 800ae04:	4620      	mov	r0, r4
 800ae06:	2104      	movs	r1, #4
 800ae08:	f7fa fbdc 	bl	80055c4 <mbedtls_cipher_set_padding_mode>
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	b158      	cbz	r0, 800ae28 <mbedtls_ssl_derive_keys+0x450>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 800ae10:	4b12      	ldr	r3, [pc, #72]	; (800ae5c <mbedtls_ssl_derive_keys+0x484>)
 800ae12:	9001      	str	r0, [sp, #4]
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	4a0d      	ldr	r2, [pc, #52]	; (800ae4c <mbedtls_ssl_derive_keys+0x474>)
 800ae18:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7fa fdac 	bl	800597c <mbedtls_debug_print_ret>
            return( ret );
 800ae24:	4625      	mov	r5, r4
 800ae26:	e5fb      	b.n	800aa20 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 800ae28:	a818      	add	r0, sp, #96	; 0x60
 800ae2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae2e:	f7ff fc73 	bl	800a718 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 800ae32:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <mbedtls_ssl_derive_keys+0x488>)
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	4a05      	ldr	r2, [pc, #20]	; (800ae4c <mbedtls_ssl_derive_keys+0x474>)
 800ae38:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800ae3c:	2102      	movs	r1, #2
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f7fa fd6c 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800ae44:	e5ec      	b.n	800aa20 <mbedtls_ssl_derive_keys+0x48>
 800ae46:	bf00      	nop
 800ae48:	0801422b 	.word	0x0801422b
 800ae4c:	08014fa0 	.word	0x08014fa0
 800ae50:	08013e7c 	.word	0x08013e7c
 800ae54:	08014259 	.word	0x08014259
 800ae58:	0801426e 	.word	0x0801426e
 800ae5c:	08014284 	.word	0x08014284
 800ae60:	080142a4 	.word	0x080142a4

0800ae64 <mbedtls_ssl_fetch_input>:
{
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 800ae6c:	4b45      	ldr	r3, [pc, #276]	; (800af84 <mbedtls_ssl_fetch_input+0x120>)
 800ae6e:	9300      	str	r3, [sp, #0]
{
 800ae70:	460e      	mov	r6, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 800ae72:	f640 03c6 	movw	r3, #2246	; 0x8c6
 800ae76:	4a44      	ldr	r2, [pc, #272]	; (800af88 <mbedtls_ssl_fetch_input+0x124>)
 800ae78:	2102      	movs	r1, #2
 800ae7a:	f7fa fd4f 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 800ae7e:	6963      	ldr	r3, [r4, #20]
 800ae80:	b97b      	cbnz	r3, 800aea2 <mbedtls_ssl_fetch_input+0x3e>
 800ae82:	69a3      	ldr	r3, [r4, #24]
 800ae84:	b96b      	cbnz	r3, 800aea2 <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800ae86:	4b41      	ldr	r3, [pc, #260]	; (800af8c <mbedtls_ssl_fetch_input+0x128>)
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	f640 03cb 	movw	r3, #2251	; 0x8cb
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 800ae8e:	4a3e      	ldr	r2, [pc, #248]	; (800af88 <mbedtls_ssl_fetch_input+0x124>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800ae90:	4d3f      	ldr	r5, [pc, #252]	; (800af90 <mbedtls_ssl_fetch_input+0x12c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 800ae92:	2101      	movs	r1, #1
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7fa fd41 	bl	800591c <mbedtls_debug_print_msg>
}
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	b005      	add	sp, #20
 800ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 800aea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aea4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 800aeac:	331d      	adds	r3, #29
 800aeae:	42b3      	cmp	r3, r6
 800aeb0:	d204      	bcs.n	800aebc <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 800aeb2:	4b38      	ldr	r3, [pc, #224]	; (800af94 <mbedtls_ssl_fetch_input+0x130>)
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	f640 03d1 	movw	r3, #2257	; 0x8d1
 800aeba:	e7e8      	b.n	800ae8e <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 800aebc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aebe:	4f36      	ldr	r7, [pc, #216]	; (800af98 <mbedtls_ssl_fetch_input+0x134>)
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	9602      	str	r6, [sp, #8]
 800aec4:	9700      	str	r7, [sp, #0]
 800aec6:	f640 1364 	movw	r3, #2404	; 0x964
 800aeca:	4a2f      	ldr	r2, [pc, #188]	; (800af88 <mbedtls_ssl_fetch_input+0x124>)
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 800aecc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800afa8 <mbedtls_ssl_fetch_input+0x144>
 800aed0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800af88 <mbedtls_ssl_fetch_input+0x124>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 800aed4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800afac <mbedtls_ssl_fetch_input+0x148>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 800aed8:	2102      	movs	r1, #2
 800aeda:	4620      	mov	r0, r4
 800aedc:	f7fa fd1e 	bl	800591c <mbedtls_debug_print_msg>
        while( ssl->in_left < nb_want )
 800aee0:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800aee2:	42ae      	cmp	r6, r5
 800aee4:	d80a      	bhi.n	800aefc <mbedtls_ssl_fetch_input+0x98>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 800aee6:	4b2d      	ldr	r3, [pc, #180]	; (800af9c <mbedtls_ssl_fetch_input+0x138>)
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	4a27      	ldr	r2, [pc, #156]	; (800af88 <mbedtls_ssl_fetch_input+0x124>)
 800aeec:	f640 1389 	movw	r3, #2441	; 0x989
 800aef0:	2102      	movs	r1, #2
 800aef2:	4620      	mov	r0, r4
 800aef4:	f7fa fd12 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800aef8:	2500      	movs	r5, #0
 800aefa:	e7ce      	b.n	800ae9a <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 800aefc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            len = nb_want - ssl->in_left;
 800aefe:	1b75      	subs	r5, r6, r5
    if( ssl->f_get_timer == NULL )
 800af00:	2b00      	cmp	r3, #0
 800af02:	d032      	beq.n	800af6a <mbedtls_ssl_fetch_input+0x106>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 800af04:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800af06:	4798      	blx	r3
 800af08:	2802      	cmp	r0, #2
 800af0a:	d12e      	bne.n	800af6a <mbedtls_ssl_fetch_input+0x106>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 800af0c:	f8cd 9000 	str.w	r9, [sp]
 800af10:	2360      	movs	r3, #96	; 0x60
 800af12:	4642      	mov	r2, r8
 800af14:	2103      	movs	r1, #3
 800af16:	4620      	mov	r0, r4
 800af18:	f7fa fd00 	bl	800591c <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 800af1c:	4655      	mov	r5, sl
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 800af1e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	4642      	mov	r2, r8
 800af24:	f640 137c 	movw	r3, #2428	; 0x97c
 800af28:	2102      	movs	r1, #2
 800af2a:	4620      	mov	r0, r4
 800af2c:	9602      	str	r6, [sp, #8]
 800af2e:	9700      	str	r7, [sp, #0]
 800af30:	f7fa fcf4 	bl	800591c <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 800af34:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <mbedtls_ssl_fetch_input+0x13c>)
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	9501      	str	r5, [sp, #4]
 800af3a:	f640 137d 	movw	r3, #2429	; 0x97d
 800af3e:	4642      	mov	r2, r8
 800af40:	2102      	movs	r1, #2
 800af42:	4620      	mov	r0, r4
 800af44:	f7fa fd1a 	bl	800597c <mbedtls_debug_print_ret>
            if( ret == 0 )
 800af48:	2d00      	cmp	r5, #0
 800af4a:	d00c      	beq.n	800af66 <mbedtls_ssl_fetch_input+0x102>
            if( ret < 0 )
 800af4c:	dba5      	blt.n	800ae9a <mbedtls_ssl_fetch_input+0x36>
            ssl->in_left += ret;
 800af4e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800af50:	441d      	add	r5, r3
 800af52:	6765      	str	r5, [r4, #116]	; 0x74
 800af54:	e7c4      	b.n	800aee0 <mbedtls_ssl_fetch_input+0x7c>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	4401      	add	r1, r0
 800af5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af5c:	69e0      	ldr	r0, [r4, #28]
 800af5e:	462a      	mov	r2, r5
 800af60:	47d8      	blx	fp
                    ret = ssl->f_recv( ssl->p_bio,
 800af62:	4605      	mov	r5, r0
 800af64:	e7db      	b.n	800af1e <mbedtls_ssl_fetch_input+0xba>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 800af66:	4d0f      	ldr	r5, [pc, #60]	; (800afa4 <mbedtls_ssl_fetch_input+0x140>)
 800af68:	e797      	b.n	800ae9a <mbedtls_ssl_fetch_input+0x36>
                if( ssl->f_recv_timeout != NULL )
 800af6a:	f8d4 b018 	ldr.w	fp, [r4, #24]
 800af6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af70:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800af72:	f1bb 0f00 	cmp.w	fp, #0
 800af76:	d1ee      	bne.n	800af56 <mbedtls_ssl_fetch_input+0xf2>
                    ret = ssl->f_recv( ssl->p_bio,
 800af78:	4401      	add	r1, r0
 800af7a:	6963      	ldr	r3, [r4, #20]
 800af7c:	69e0      	ldr	r0, [r4, #28]
 800af7e:	462a      	mov	r2, r5
 800af80:	4798      	blx	r3
 800af82:	e7ee      	b.n	800af62 <mbedtls_ssl_fetch_input+0xfe>
 800af84:	080142b3 	.word	0x080142b3
 800af88:	08014fa0 	.word	0x08014fa0
 800af8c:	080142c2 	.word	0x080142c2
 800af90:	ffff8f00 	.word	0xffff8f00
 800af94:	080142fe 	.word	0x080142fe
 800af98:	0801431d 	.word	0x0801431d
 800af9c:	0801435a 	.word	0x0801435a
 800afa0:	08014344 	.word	0x08014344
 800afa4:	ffff8d80 	.word	0xffff8d80
 800afa8:	08014336 	.word	0x08014336
 800afac:	ffff9800 	.word	0xffff9800

0800afb0 <mbedtls_ssl_flush_output>:
{
 800afb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800afb4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 800afb6:	4b3d      	ldr	r3, [pc, #244]	; (800b0ac <mbedtls_ssl_flush_output+0xfc>)
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	4a3d      	ldr	r2, [pc, #244]	; (800b0b0 <mbedtls_ssl_flush_output+0x100>)
 800afbc:	f640 1396 	movw	r3, #2454	; 0x996
 800afc0:	2102      	movs	r1, #2
 800afc2:	f7fa fcab 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	b96b      	cbnz	r3, 800afe6 <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800afca:	4b3a      	ldr	r3, [pc, #232]	; (800b0b4 <mbedtls_ssl_flush_output+0x104>)
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	4a38      	ldr	r2, [pc, #224]	; (800b0b0 <mbedtls_ssl_flush_output+0x100>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800afd0:	4d39      	ldr	r5, [pc, #228]	; (800b0b8 <mbedtls_ssl_flush_output+0x108>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 800afd2:	f640 139b 	movw	r3, #2459	; 0x99b
 800afd6:	2101      	movs	r1, #1
 800afd8:	4620      	mov	r0, r4
 800afda:	f7fa fc9f 	bl	800591c <mbedtls_debug_print_msg>
}
 800afde:	4628      	mov	r0, r5
 800afe0:	b004      	add	sp, #16
 800afe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 800afe6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800afea:	2d00      	cmp	r5, #0
 800afec:	d049      	beq.n	800b082 <mbedtls_ssl_flush_output+0xd2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 800afee:	4f33      	ldr	r7, [pc, #204]	; (800b0bc <mbedtls_ssl_flush_output+0x10c>)
 800aff0:	4e2f      	ldr	r6, [pc, #188]	; (800b0b0 <mbedtls_ssl_flush_output+0x100>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 800aff2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800b0cc <mbedtls_ssl_flush_output+0x11c>
    while( ssl->out_left > 0 )
 800aff6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800affa:	b9b3      	cbnz	r3, 800b02a <mbedtls_ssl_flush_output+0x7a>
 800affc:	2207      	movs	r2, #7
        if( ++ssl->out_ctr[i - 1] != 0 )
 800affe:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b002:	5c8b      	ldrb	r3, [r1, r2]
 800b004:	3301      	adds	r3, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	548b      	strb	r3, [r1, r2]
 800b00a:	3a01      	subs	r2, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d142      	bne.n	800b096 <mbedtls_ssl_flush_output+0xe6>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 800b010:	1c53      	adds	r3, r2, #1
 800b012:	d1f4      	bne.n	800affe <mbedtls_ssl_flush_output+0x4e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 800b014:	4b2a      	ldr	r3, [pc, #168]	; (800b0c0 <mbedtls_ssl_flush_output+0x110>)
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	4a25      	ldr	r2, [pc, #148]	; (800b0b0 <mbedtls_ssl_flush_output+0x100>)
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 800b01a:	4d2a      	ldr	r5, [pc, #168]	; (800b0c4 <mbedtls_ssl_flush_output+0x114>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 800b01c:	f640 13be 	movw	r3, #2494	; 0x9be
 800b020:	2101      	movs	r1, #1
 800b022:	4620      	mov	r0, r4
 800b024:	f7fa fc7a 	bl	800591c <mbedtls_debug_print_msg>
 800b028:	e7d9      	b.n	800afde <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 800b02a:	9302      	str	r3, [sp, #8]
 800b02c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b030:	9700      	str	r7, [sp, #0]
 800b032:	3305      	adds	r3, #5
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	4632      	mov	r2, r6
 800b038:	f640 13a9 	movw	r3, #2473	; 0x9a9
 800b03c:	2102      	movs	r1, #2
 800b03e:	4620      	mov	r0, r4
 800b040:	f7fa fc6c 	bl	800591c <mbedtls_debug_print_msg>
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 800b044:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
              ssl->out_msglen - ssl->out_left;
 800b048:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 800b04c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 800b050:	6923      	ldr	r3, [r4, #16]
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 800b052:	3105      	adds	r1, #5
              ssl->out_msglen - ssl->out_left;
 800b054:	1a89      	subs	r1, r1, r2
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 800b056:	4401      	add	r1, r0
 800b058:	69e0      	ldr	r0, [r4, #28]
 800b05a:	4798      	blx	r3
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 800b05c:	f8cd 8000 	str.w	r8, [sp]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 800b060:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 800b062:	9001      	str	r0, [sp, #4]
 800b064:	f640 13af 	movw	r3, #2479	; 0x9af
 800b068:	4632      	mov	r2, r6
 800b06a:	2102      	movs	r1, #2
 800b06c:	4620      	mov	r0, r4
 800b06e:	f7fa fc85 	bl	800597c <mbedtls_debug_print_ret>
        if( ret <= 0 )
 800b072:	2d00      	cmp	r5, #0
 800b074:	ddb3      	ble.n	800afde <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 800b076:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b07a:	1b5d      	subs	r5, r3, r5
 800b07c:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800b080:	e7b9      	b.n	800aff6 <mbedtls_ssl_flush_output+0x46>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 800b082:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <mbedtls_ssl_flush_output+0x118>)
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	4a0a      	ldr	r2, [pc, #40]	; (800b0b0 <mbedtls_ssl_flush_output+0x100>)
 800b088:	f640 13a2 	movw	r3, #2466	; 0x9a2
 800b08c:	2102      	movs	r1, #2
 800b08e:	4620      	mov	r0, r4
 800b090:	f7fa fc44 	bl	800591c <mbedtls_debug_print_msg>
        return( 0 );
 800b094:	e7a3      	b.n	800afde <mbedtls_ssl_flush_output+0x2e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <mbedtls_ssl_flush_output+0x118>)
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	4a05      	ldr	r2, [pc, #20]	; (800b0b0 <mbedtls_ssl_flush_output+0x100>)
 800b09c:	f640 13c2 	movw	r3, #2498	; 0x9c2
 800b0a0:	2102      	movs	r1, #2
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7fa fc3a 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	e798      	b.n	800afde <mbedtls_ssl_flush_output+0x2e>
 800b0ac:	08014369 	.word	0x08014369
 800b0b0:	08014fa0 	.word	0x08014fa0
 800b0b4:	080142c2 	.word	0x080142c2
 800b0b8:	ffff8f00 	.word	0xffff8f00
 800b0bc:	08014379 	.word	0x08014379
 800b0c0:	080143b6 	.word	0x080143b6
 800b0c4:	ffff9480 	.word	0xffff9480
 800b0c8:	080143a6 	.word	0x080143a6
 800b0cc:	0801439a 	.word	0x0801439a

0800b0d0 <mbedtls_ssl_write_record>:
{
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	b093      	sub	sp, #76	; 0x4c
 800b0d6:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 800b0d8:	4b94      	ldr	r3, [pc, #592]	; (800b32c <mbedtls_ssl_write_record+0x25c>)
    size_t len = ssl->out_msglen;
 800b0da:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 800b0de:	4a94      	ldr	r2, [pc, #592]	; (800b330 <mbedtls_ssl_write_record+0x260>)
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	2102      	movs	r1, #2
 800b0e4:	f640 23b3 	movw	r3, #2739	; 0xab3
 800b0e8:	f7fa fc18 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800b0ec:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b0f0:	2b16      	cmp	r3, #22
 800b0f2:	d125      	bne.n	800b140 <mbedtls_ssl_write_record+0x70>
        out_msg_type = ssl->out_msg[0];
 800b0f4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800b0f8:	780a      	ldrb	r2, [r1, #0]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 800b0fa:	b17a      	cbz	r2, 800b11c <mbedtls_ssl_write_record+0x4c>
 800b0fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0fe:	b96b      	cbnz	r3, 800b11c <mbedtls_ssl_write_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b100:	4b8c      	ldr	r3, [pc, #560]	; (800b334 <mbedtls_ssl_write_record+0x264>)
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	4a8a      	ldr	r2, [pc, #552]	; (800b330 <mbedtls_ssl_write_record+0x260>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800b106:	4d8c      	ldr	r5, [pc, #560]	; (800b338 <mbedtls_ssl_write_record+0x268>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b108:	f640 23c5 	movw	r3, #2757	; 0xac5
 800b10c:	2101      	movs	r1, #1
 800b10e:	4620      	mov	r0, r4
 800b110:	f7fa fc04 	bl	800591c <mbedtls_debug_print_msg>
}
 800b114:	4628      	mov	r0, r5
 800b116:	b013      	add	sp, #76	; 0x4c
 800b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 800b11c:	1f2b      	subs	r3, r5, #4
 800b11e:	0c18      	lsrs	r0, r3, #16
 800b120:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 800b122:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800b126:	0a18      	lsrs	r0, r3, #8
 800b128:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 800b12a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800b12e:	70cb      	strb	r3, [r1, #3]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 800b130:	b132      	cbz	r2, 800b140 <mbedtls_ssl_write_record+0x70>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 800b132:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b134:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800b138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b13a:	462a      	mov	r2, r5
 800b13c:	4620      	mov	r0, r4
 800b13e:	4798      	blx	r3
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 800b140:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b144:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800b148:	701a      	strb	r2, [r3, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 800b14a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 800b14e:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 800b150:	68a1      	ldr	r1, [r4, #8]
 800b152:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 800b154:	709a      	strb	r2, [r3, #2]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 800b156:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b15a:	0a2a      	lsrs	r2, r5, #8
 800b15c:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 800b15e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b162:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 800b164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b166:	2b00      	cmp	r3, #0
 800b168:	f000 81fb 	beq.w	800b562 <mbedtls_ssl_write_record+0x492>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 800b16c:	4b73      	ldr	r3, [pc, #460]	; (800b33c <mbedtls_ssl_write_record+0x26c>)
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	4a6f      	ldr	r2, [pc, #444]	; (800b330 <mbedtls_ssl_write_record+0x260>)
 800b172:	f240 5304 	movw	r3, #1284	; 0x504
 800b176:	2102      	movs	r1, #2
 800b178:	4620      	mov	r0, r4
 800b17a:	f7fa fbcf 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 800b17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b180:	b10b      	cbz	r3, 800b186 <mbedtls_ssl_write_record+0xb6>
 800b182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b184:	b953      	cbnz	r3, 800b19c <mbedtls_ssl_write_record+0xcc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b186:	4b6b      	ldr	r3, [pc, #428]	; (800b334 <mbedtls_ssl_write_record+0x264>)
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	f44f 63a1 	mov.w	r3, #1288	; 0x508
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b18e:	4a68      	ldr	r2, [pc, #416]	; (800b330 <mbedtls_ssl_write_record+0x260>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800b190:	4d69      	ldr	r5, [pc, #420]	; (800b338 <mbedtls_ssl_write_record+0x268>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b192:	2101      	movs	r1, #1
 800b194:	4620      	mov	r0, r4
 800b196:	f7fa fbc1 	bl	800591c <mbedtls_debug_print_msg>
 800b19a:	e024      	b.n	800b1e6 <mbedtls_ssl_write_record+0x116>
    if( NULL == ctx || NULL == ctx->cipher_info )
 800b19c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800b19e:	b105      	cbz	r5, 800b1a2 <mbedtls_ssl_write_record+0xd2>
    return ctx->cipher_info->mode;
 800b1a0:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 800b1a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b1a6:	9302      	str	r3, [sp, #8]
 800b1a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	4b64      	ldr	r3, [pc, #400]	; (800b340 <mbedtls_ssl_write_record+0x270>)
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	4a5f      	ldr	r2, [pc, #380]	; (800b330 <mbedtls_ssl_write_record+0x260>)
 800b1b4:	f240 530f 	movw	r3, #1295	; 0x50f
 800b1b8:	2104      	movs	r1, #4
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7fa fc0c 	bl	80059d8 <mbedtls_debug_print_buf>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 800b1c0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c8:	d913      	bls.n	800b1f2 <mbedtls_ssl_write_record+0x122>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 800b1ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	4b5c      	ldr	r3, [pc, #368]	; (800b344 <mbedtls_ssl_write_record+0x274>)
 800b1d2:	9202      	str	r2, [sp, #8]
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	4a56      	ldr	r2, [pc, #344]	; (800b330 <mbedtls_ssl_write_record+0x260>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800b1d8:	4d5b      	ldr	r5, [pc, #364]	; (800b348 <mbedtls_ssl_write_record+0x278>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
 800b1da:	f240 5315 	movw	r3, #1301	; 0x515
 800b1de:	2101      	movs	r1, #1
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f7fa fb9b 	bl	800591c <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 800b1e6:	4b59      	ldr	r3, [pc, #356]	; (800b34c <mbedtls_ssl_write_record+0x27c>)
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	9501      	str	r5, [sp, #4]
 800b1ec:	f640 3337 	movw	r3, #2871	; 0xb37
 800b1f0:	e1ee      	b.n	800b5d0 <mbedtls_ssl_write_record+0x500>
    if( mode == MBEDTLS_MODE_STREAM ||
 800b1f2:	2d07      	cmp	r5, #7
 800b1f4:	d002      	beq.n	800b1fc <mbedtls_ssl_write_record+0x12c>
 800b1f6:	2d02      	cmp	r5, #2
 800b1f8:	f040 8095 	bne.w	800b326 <mbedtls_ssl_write_record+0x256>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800b1fc:	68e3      	ldr	r3, [r4, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f340 808c 	ble.w	800b31c <mbedtls_ssl_write_record+0x24c>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 800b204:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b206:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b20a:	2208      	movs	r2, #8
 800b20c:	3038      	adds	r0, #56	; 0x38
 800b20e:	f7fb ffe1 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 800b212:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b214:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b218:	2203      	movs	r2, #3
 800b21a:	3038      	adds	r0, #56	; 0x38
 800b21c:	f7fb ffda 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 800b220:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b222:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b226:	2202      	movs	r2, #2
 800b228:	3038      	adds	r0, #56	; 0x38
 800b22a:	f7fb ffd3 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 800b22e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b230:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800b234:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800b238:	3038      	adds	r0, #56	; 0x38
 800b23a:	f7fb ffcb 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 800b23e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b240:	a90a      	add	r1, sp, #40	; 0x28
 800b242:	3038      	adds	r0, #56	; 0x38
 800b244:	f7fb ffd8 	bl	80071f8 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 800b248:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b24a:	3038      	adds	r0, #56	; 0x38
 800b24c:	f7fc f806 	bl	800725c <mbedtls_md_hmac_reset>
            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 800b250:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b254:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800b258:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b25a:	a90a      	add	r1, sp, #40	; 0x28
 800b25c:	6952      	ldr	r2, [r2, #20]
 800b25e:	4418      	add	r0, r3
 800b260:	f003 fdfd 	bl	800ee5e <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 800b264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b266:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	9302      	str	r3, [sp, #8]
 800b26e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b272:	4413      	add	r3, r2
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	4b36      	ldr	r3, [pc, #216]	; (800b350 <mbedtls_ssl_write_record+0x280>)
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4a2d      	ldr	r2, [pc, #180]	; (800b330 <mbedtls_ssl_write_record+0x260>)
 800b27c:	f240 534c 	movw	r3, #1356	; 0x54c
 800b280:	2104      	movs	r1, #4
 800b282:	4620      	mov	r0, r4
 800b284:	f7fa fba8 	bl	80059d8 <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 800b288:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b28a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b28e:	6952      	ldr	r2, [r2, #20]
 800b290:	4413      	add	r3, r2
 800b292:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 800b296:	2701      	movs	r7, #1
    if( mode == MBEDTLS_MODE_GCM ||
 800b298:	2d06      	cmp	r5, #6
 800b29a:	d002      	beq.n	800b2a2 <mbedtls_ssl_write_record+0x1d2>
 800b29c:	2d08      	cmp	r5, #8
 800b29e:	f040 80d9 	bne.w	800b454 <mbedtls_ssl_write_record+0x384>
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 800b2a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        memcpy( add_data, ssl->out_ctr, 8 );
 800b2a4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 800b2a8:	681b      	ldr	r3, [r3, #0]
        memcpy( add_data, ssl->out_ctr, 8 );
 800b2aa:	6810      	ldr	r0, [r2, #0]
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 800b2ac:	7f1b      	ldrb	r3, [r3, #28]
        memcpy( add_data, ssl->out_ctr, 8 );
 800b2ae:	6851      	ldr	r1, [r2, #4]
        ver[0] = (unsigned char) major;
 800b2b0:	68a2      	ldr	r2, [r4, #8]
        memcpy( add_data, ssl->out_ctr, 8 );
 800b2b2:	ad0a      	add	r5, sp, #40	; 0x28
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 800b2b4:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 800b2bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b2c0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 800b2c4:	68e3      	ldr	r3, [r4, #12]
        ver[1] = (unsigned char) minor;
 800b2c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 800b2ca:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        ver[0] = (unsigned char) major;
 800b2ce:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        add_data[12] = ssl->out_msglen & 0xFF;
 800b2d2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 800b2d6:	ea4f 2213 	mov.w	r2, r3, lsr #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 800b2da:	f04f 0b0d 	mov.w	fp, #13
 800b2de:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <mbedtls_ssl_write_record+0x284>)
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 800b2e0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	4a12      	ldr	r2, [pc, #72]	; (800b330 <mbedtls_ssl_write_record+0x260>)
 800b2e8:	f8cd b008 	str.w	fp, [sp, #8]
 800b2ec:	f240 5385 	movw	r3, #1413	; 0x585
 800b2f0:	f04f 0104 	mov.w	r1, #4
 800b2f4:	9501      	str	r5, [sp, #4]
 800b2f6:	4620      	mov	r0, r4
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 800b2f8:	bf0c      	ite	eq
 800b2fa:	f04f 0810 	moveq.w	r8, #16
 800b2fe:	f04f 0808 	movne.w	r8, #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 800b302:	f7fa fb69 	bl	80059d8 <mbedtls_debug_print_buf>
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 800b306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b308:	6919      	ldr	r1, [r3, #16]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	1a52      	subs	r2, r2, r1
 800b30e:	2a08      	cmp	r2, #8
 800b310:	d022      	beq.n	800b358 <mbedtls_ssl_write_record+0x288>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b312:	4b08      	ldr	r3, [pc, #32]	; (800b334 <mbedtls_ssl_write_record+0x264>)
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	f240 538d 	movw	r3, #1421	; 0x58d
 800b31a:	e738      	b.n	800b18e <mbedtls_ssl_write_record+0xbe>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <mbedtls_ssl_write_record+0x264>)
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	f240 5346 	movw	r3, #1350	; 0x546
 800b324:	e733      	b.n	800b18e <mbedtls_ssl_write_record+0xbe>
    int auth_done = 0;
 800b326:	2700      	movs	r7, #0
 800b328:	e7b6      	b.n	800b298 <mbedtls_ssl_write_record+0x1c8>
 800b32a:	bf00      	nop
 800b32c:	08014cbf 	.word	0x08014cbf
 800b330:	08014fa0 	.word	0x08014fa0
 800b334:	08013e7c 	.word	0x08013e7c
 800b338:	ffff9400 	.word	0xffff9400
 800b33c:	08014ccf 	.word	0x08014ccf
 800b340:	08014cde 	.word	0x08014cde
 800b344:	08014cfd 	.word	0x08014cfd
 800b348:	ffff8f00 	.word	0xffff8f00
 800b34c:	08014eb7 	.word	0x08014eb7
 800b350:	08014d25 	.word	0x08014d25
 800b354:	08014d32 	.word	0x08014d32
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 800b358:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800b35c:	3318      	adds	r3, #24
 800b35e:	6802      	ldr	r2, [r0, #0]
 800b360:	505a      	str	r2, [r3, r1]
 800b362:	185e      	adds	r6, r3, r1
 800b364:	6842      	ldr	r2, [r0, #4]
 800b366:	6072      	str	r2, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 800b368:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b36c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800b370:	680b      	ldr	r3, [r1, #0]
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	684b      	ldr	r3, [r1, #4]
 800b376:	6053      	str	r3, [r2, #4]
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 800b378:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b37a:	68d3      	ldr	r3, [r2, #12]
 800b37c:	6912      	ldr	r2, [r2, #16]
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	9302      	str	r3, [sp, #8]
 800b382:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	4b9c      	ldr	r3, [pc, #624]	; (800b5fc <mbedtls_ssl_write_record+0x52c>)
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	4a9c      	ldr	r2, [pc, #624]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b38e:	f240 5396 	movw	r3, #1430	; 0x596
 800b392:	2104      	movs	r1, #4
 800b394:	4620      	mov	r0, r4
 800b396:	f7fa fb1f 	bl	80059d8 <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->ivlen -
 800b39a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        enc_msglen = ssl->out_msglen;
 800b39c:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
 800b3a0:	68d3      	ldr	r3, [r2, #12]
 800b3a2:	6912      	ldr	r2, [r2, #16]
        enc_msg = ssl->out_msg;
 800b3a4:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
        ssl->out_msglen += ssl->transform_out->ivlen -
 800b3a8:	4433      	add	r3, r6
 800b3aa:	1a9b      	subs	r3, r3, r2
 800b3ac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	9301      	str	r3, [sp, #4]
 800b3b4:	4b93      	ldr	r3, [pc, #588]	; (800b604 <mbedtls_ssl_write_record+0x534>)
 800b3b6:	9202      	str	r2, [sp, #8]
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	4a91      	ldr	r2, [pc, #580]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b3bc:	f240 53a2 	movw	r3, #1442	; 0x5a2
 800b3c0:	2103      	movs	r1, #3
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f7fa faaa 	bl	800591c <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 800b3c8:	eb09 0a06 	add.w	sl, r9, r6
 800b3cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b3ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3d2:	ab09      	add	r3, sp, #36	; 0x24
 800b3d4:	9304      	str	r3, [sp, #16]
 800b3d6:	f8cd a014 	str.w	sl, [sp, #20]
 800b3da:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3de:	9602      	str	r6, [sp, #8]
 800b3e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3e4:	f8cd b000 	str.w	fp, [sp]
 800b3e8:	462b      	mov	r3, r5
 800b3ea:	68c2      	ldr	r2, [r0, #12]
 800b3ec:	f100 0118 	add.w	r1, r0, #24
 800b3f0:	3050      	adds	r0, #80	; 0x50
 800b3f2:	f7fa f93f 	bl	8005674 <mbedtls_cipher_auth_encrypt>
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	b150      	cbz	r0, 800b410 <mbedtls_ssl_write_record+0x340>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 800b3fa:	4b83      	ldr	r3, [pc, #524]	; (800b608 <mbedtls_ssl_write_record+0x538>)
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	9001      	str	r0, [sp, #4]
 800b400:	f240 53af 	movw	r3, #1455	; 0x5af
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 800b404:	4a7e      	ldr	r2, [pc, #504]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b406:	2101      	movs	r1, #1
 800b408:	4620      	mov	r0, r4
 800b40a:	f7fa fab7 	bl	800597c <mbedtls_debug_print_ret>
 800b40e:	e6ea      	b.n	800b1e6 <mbedtls_ssl_write_record+0x116>
        if( olen != enc_msglen )
 800b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b412:	429e      	cmp	r6, r3
 800b414:	d004      	beq.n	800b420 <mbedtls_ssl_write_record+0x350>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b416:	4b7d      	ldr	r3, [pc, #500]	; (800b60c <mbedtls_ssl_write_record+0x53c>)
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	f240 53b5 	movw	r3, #1461	; 0x5b5
 800b41e:	e6b6      	b.n	800b18e <mbedtls_ssl_write_record+0xbe>
        ssl->out_msglen += taglen;
 800b420:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 800b424:	f8cd 8008 	str.w	r8, [sp, #8]
        ssl->out_msglen += taglen;
 800b428:	4443      	add	r3, r8
 800b42a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 800b42e:	4b78      	ldr	r3, [pc, #480]	; (800b610 <mbedtls_ssl_write_record+0x540>)
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	f8cd a004 	str.w	sl, [sp, #4]
 800b436:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800b43a:	4a71      	ldr	r2, [pc, #452]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b43c:	2104      	movs	r1, #4
 800b43e:	4620      	mov	r0, r4
        auth_done++;
 800b440:	3701      	adds	r7, #1
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 800b442:	f7fa fac9 	bl	80059d8 <mbedtls_debug_print_buf>
    if( auth_done != 1 )
 800b446:	2f01      	cmp	r7, #1
 800b448:	d079      	beq.n	800b53e <mbedtls_ssl_write_record+0x46e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b44a:	4b70      	ldr	r3, [pc, #448]	; (800b60c <mbedtls_ssl_write_record+0x53c>)
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	f240 633e 	movw	r3, #1598	; 0x63e
 800b452:	e69c      	b.n	800b18e <mbedtls_ssl_write_record+0xbe>
    if( mode == MBEDTLS_MODE_CBC )
 800b454:	2d02      	cmp	r5, #2
 800b456:	d16d      	bne.n	800b534 <mbedtls_ssl_write_record+0x464>
        size_t enc_msglen, padlen, olen = 0, i;
 800b458:	2300      	movs	r3, #0
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 800b45a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        size_t enc_msglen, padlen, olen = 0, i;
 800b45c:	930a      	str	r3, [sp, #40]	; 0x28
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 800b45e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800b462:	68d2      	ldr	r2, [r2, #12]
 800b464:	1c48      	adds	r0, r1, #1
 800b466:	fbb0 f6f2 	udiv	r6, r0, r2
 800b46a:	fb02 0616 	mls	r6, r2, r6, r0
 800b46e:	1b96      	subs	r6, r2, r6
        if( padlen == ssl->transform_out->ivlen )
 800b470:	42b2      	cmp	r2, r6
 800b472:	f000 80bd 	beq.w	800b5f0 <mbedtls_ssl_write_record+0x520>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800b476:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800b47a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800b47e:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 800b480:	3301      	adds	r3, #1
 800b482:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800b484:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 800b486:	d2f6      	bcs.n	800b476 <mbedtls_ssl_write_record+0x3a6>
        ssl->out_msglen += padlen + 1;
 800b488:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b48c:	3301      	adds	r3, #1
 800b48e:	eb03 0806 	add.w	r8, r3, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800b492:	68e3      	ldr	r3, [r4, #12]
        ssl->out_msglen += padlen + 1;
 800b494:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800b498:	2b01      	cmp	r3, #1
 800b49a:	dc27      	bgt.n	800b4ec <mbedtls_ssl_write_record+0x41c>
        enc_msg = ssl->out_msg;
 800b49c:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 800b4a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4a2:	4a57      	ldr	r2, [pc, #348]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b4a4:	3601      	adds	r6, #1
 800b4a6:	9603      	str	r6, [sp, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	9302      	str	r3, [sp, #8]
 800b4ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	4b58      	ldr	r3, [pc, #352]	; (800b614 <mbedtls_ssl_write_record+0x544>)
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	2103      	movs	r1, #3
 800b4b8:	f240 53f3 	movw	r3, #1523	; 0x5f3
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7fa fa2d 	bl	800591c <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 800b4c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b4c4:	9501      	str	r5, [sp, #4]
 800b4c6:	ab0a      	add	r3, sp, #40	; 0x28
 800b4c8:	9302      	str	r3, [sp, #8]
 800b4ca:	f8cd 8000 	str.w	r8, [sp]
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	68c2      	ldr	r2, [r0, #12]
 800b4d2:	f100 0118 	add.w	r1, r0, #24
 800b4d6:	3050      	adds	r0, #80	; 0x50
 800b4d8:	f7fa f8aa 	bl	8005630 <mbedtls_cipher_crypt>
 800b4dc:	4605      	mov	r5, r0
 800b4de:	b308      	cbz	r0, 800b524 <mbedtls_ssl_write_record+0x454>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 800b4e0:	4b4d      	ldr	r3, [pc, #308]	; (800b618 <mbedtls_ssl_write_record+0x548>)
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9001      	str	r0, [sp, #4]
 800b4e6:	f240 53fb 	movw	r3, #1531	; 0x5fb
 800b4ea:	e78b      	b.n	800b404 <mbedtls_ssl_write_record+0x334>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b4f0:	699d      	ldr	r5, [r3, #24]
 800b4f2:	68ca      	ldr	r2, [r1, #12]
 800b4f4:	69d8      	ldr	r0, [r3, #28]
 800b4f6:	3118      	adds	r1, #24
 800b4f8:	47a8      	blx	r5
            if( ret != 0 )
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	f47f ae72 	bne.w	800b1e6 <mbedtls_ssl_write_record+0x116>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 800b502:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b504:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800b508:	68ca      	ldr	r2, [r1, #12]
 800b50a:	3118      	adds	r1, #24
 800b50c:	f003 fca7 	bl	800ee5e <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 800b510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            enc_msglen = ssl->out_msglen;
 800b512:	f8d4 80a0 	ldr.w	r8, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 800b516:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 800b518:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
            ssl->out_msglen += ssl->transform_out->ivlen;
 800b51c:	4443      	add	r3, r8
 800b51e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800b522:	e7bd      	b.n	800b4a0 <mbedtls_ssl_write_record+0x3d0>
        if( enc_msglen != olen )
 800b524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b526:	4598      	cmp	r8, r3
 800b528:	d08d      	beq.n	800b446 <mbedtls_ssl_write_record+0x376>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b52a:	4b38      	ldr	r3, [pc, #224]	; (800b60c <mbedtls_ssl_write_record+0x53c>)
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	f240 6301 	movw	r3, #1537	; 0x601
 800b532:	e62c      	b.n	800b18e <mbedtls_ssl_write_record+0xbe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b534:	4b35      	ldr	r3, [pc, #212]	; (800b60c <mbedtls_ssl_write_record+0x53c>)
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	f240 6337 	movw	r3, #1591	; 0x637
 800b53c:	e627      	b.n	800b18e <mbedtls_ssl_write_record+0xbe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 800b53e:	4b37      	ldr	r3, [pc, #220]	; (800b61c <mbedtls_ssl_write_record+0x54c>)
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4a2f      	ldr	r2, [pc, #188]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b544:	f240 6342 	movw	r3, #1602	; 0x642
 800b548:	2102      	movs	r1, #2
 800b54a:	4620      	mov	r0, r4
 800b54c:	f7fa f9e6 	bl	800591c <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 800b550:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 800b554:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b558:	0a19      	lsrs	r1, r3, #8
 800b55a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 800b55c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b560:	7053      	strb	r3, [r2, #1]
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 800b562:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 800b566:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 800b56a:	3305      	adds	r3, #5
 800b56c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 800b570:	7808      	ldrb	r0, [r1, #0]
 800b572:	784a      	ldrb	r2, [r1, #1]
 800b574:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b578:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b57c:	9204      	str	r2, [sp, #16]
 800b57e:	789a      	ldrb	r2, [r3, #2]
 800b580:	9203      	str	r2, [sp, #12]
 800b582:	785a      	ldrb	r2, [r3, #1]
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	9301      	str	r3, [sp, #4]
 800b58a:	4b25      	ldr	r3, [pc, #148]	; (800b620 <mbedtls_ssl_write_record+0x550>)
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	4a1c      	ldr	r2, [pc, #112]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b590:	f640 3345 	movw	r3, #2885	; 0xb45
 800b594:	2103      	movs	r1, #3
 800b596:	4620      	mov	r0, r4
 800b598:	f7fa f9c0 	bl	800591c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 800b59c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b5a0:	4a17      	ldr	r2, [pc, #92]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b5a2:	3305      	adds	r3, #5
 800b5a4:	9302      	str	r3, [sp, #8]
 800b5a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <mbedtls_ssl_write_record+0x554>)
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	f640 3348 	movw	r3, #2888	; 0xb48
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7fa fa0e 	bl	80059d8 <mbedtls_debug_print_buf>
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f7ff fcf7 	bl	800afb0 <mbedtls_ssl_flush_output>
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	b150      	cbz	r0, 800b5dc <mbedtls_ssl_write_record+0x50c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 800b5c6:	4b18      	ldr	r3, [pc, #96]	; (800b628 <mbedtls_ssl_write_record+0x558>)
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	9001      	str	r0, [sp, #4]
 800b5cc:	f640 334d 	movw	r3, #2893	; 0xb4d
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 800b5d0:	4a0b      	ldr	r2, [pc, #44]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7fa f9d1 	bl	800597c <mbedtls_debug_print_ret>
                return( ret );
 800b5da:	e59b      	b.n	800b114 <mbedtls_ssl_write_record+0x44>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 800b5dc:	4b13      	ldr	r3, [pc, #76]	; (800b62c <mbedtls_ssl_write_record+0x55c>)
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	4a07      	ldr	r2, [pc, #28]	; (800b600 <mbedtls_ssl_write_record+0x530>)
 800b5e2:	f640 3351 	movw	r3, #2897	; 0xb51
 800b5e6:	2102      	movs	r1, #2
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f7fa f997 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800b5ee:	e591      	b.n	800b114 <mbedtls_ssl_write_record+0x44>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800b5f0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
            padlen = 0;
 800b5f4:	461e      	mov	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 800b5f6:	5453      	strb	r3, [r2, r1]
 800b5f8:	e746      	b.n	800b488 <mbedtls_ssl_write_record+0x3b8>
 800b5fa:	bf00      	nop
 800b5fc:	08014d50 	.word	0x08014d50
 800b600:	08014fa0 	.word	0x08014fa0
 800b604:	08014d58 	.word	0x08014d58
 800b608:	08014d93 	.word	0x08014d93
 800b60c:	08013e7c 	.word	0x08013e7c
 800b610:	08014daf 	.word	0x08014daf
 800b614:	08014dc2 	.word	0x08014dc2
 800b618:	08014e10 	.word	0x08014e10
 800b61c:	08014e25 	.word	0x08014e25
 800b620:	08014e34 	.word	0x08014e34
 800b624:	08014e70 	.word	0x08014e70
 800b628:	08014e8e 	.word	0x08014e8e
 800b62c:	08014ea7 	.word	0x08014ea7

0800b630 <mbedtls_ssl_prepare_handshake_record>:
{
 800b630:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 800b632:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800b634:	2903      	cmp	r1, #3
{
 800b636:	b085      	sub	sp, #20
 800b638:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 800b63a:	d80b      	bhi.n	800b654 <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 800b63c:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <mbedtls_ssl_prepare_handshake_record+0x74>)
 800b63e:	9101      	str	r1, [sp, #4]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <mbedtls_ssl_prepare_handshake_record+0x78>)
 800b644:	f640 4335 	movw	r3, #3125	; 0xc35
 800b648:	2101      	movs	r1, #1
 800b64a:	f7fa f967 	bl	800591c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 800b64e:	4817      	ldr	r0, [pc, #92]	; (800b6ac <mbedtls_ssl_prepare_handshake_record+0x7c>)
}
 800b650:	b005      	add	sp, #20
 800b652:	bd30      	pop	{r4, r5, pc}
                    ( ssl->in_msg[1] << 16 ) |
 800b654:	6e42      	ldr	r2, [r0, #100]	; 0x64
                    ( ssl->in_msg[2] << 8  ) |
 800b656:	7893      	ldrb	r3, [r2, #2]
                    ( ssl->in_msg[1] << 16 ) |
 800b658:	7855      	ldrb	r5, [r2, #1]
                    ( ssl->in_msg[2] << 8  ) |
 800b65a:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 800b65c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                      ssl->in_msg[3] );
 800b660:	78d5      	ldrb	r5, [r2, #3]
                    ( ssl->in_msg[2] << 8  ) |
 800b662:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 800b664:	3304      	adds	r3, #4
 800b666:	6783      	str	r3, [r0, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	7813      	ldrb	r3, [r2, #0]
 800b66c:	9302      	str	r3, [sp, #8]
 800b66e:	4b10      	ldr	r3, [pc, #64]	; (800b6b0 <mbedtls_ssl_prepare_handshake_record+0x80>)
 800b670:	9101      	str	r1, [sp, #4]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4a0c      	ldr	r2, [pc, #48]	; (800b6a8 <mbedtls_ssl_prepare_handshake_record+0x78>)
 800b676:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 800b67a:	2103      	movs	r1, #3
 800b67c:	f7fa f94e 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 800b680:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b682:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b684:	429a      	cmp	r2, r3
 800b686:	d20a      	bcs.n	800b69e <mbedtls_ssl_prepare_handshake_record+0x6e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 800b688:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <mbedtls_ssl_prepare_handshake_record+0x84>)
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4620      	mov	r0, r4
 800b68e:	f640 437e 	movw	r3, #3198	; 0xc7e
 800b692:	4a05      	ldr	r2, [pc, #20]	; (800b6a8 <mbedtls_ssl_prepare_handshake_record+0x78>)
 800b694:	2101      	movs	r1, #1
 800b696:	f7fa f941 	bl	800591c <mbedtls_debug_print_msg>
 800b69a:	4807      	ldr	r0, [pc, #28]	; (800b6b8 <mbedtls_ssl_prepare_handshake_record+0x88>)
 800b69c:	e7d8      	b.n	800b650 <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e7d6      	b.n	800b650 <mbedtls_ssl_prepare_handshake_record+0x20>
 800b6a2:	bf00      	nop
 800b6a4:	08014711 	.word	0x08014711
 800b6a8:	08014fa0 	.word	0x08014fa0
 800b6ac:	ffff8e00 	.word	0xffff8e00
 800b6b0:	08014731 	.word	0x08014731
 800b6b4:	08014767 	.word	0x08014767
 800b6b8:	ffff8f80 	.word	0xffff8f80

0800b6bc <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 800b6bc:	6842      	ldr	r2, [r0, #4]
 800b6be:	2a10      	cmp	r2, #16
{
 800b6c0:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 800b6c2:	d008      	beq.n	800b6d6 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 800b6c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 800b6c6:	b132      	cbz	r2, 800b6d6 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 800b6c8:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800b6ca:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800b6cc:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800b6ce:	4623      	mov	r3, r4
}
 800b6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 800b6d4:	4718      	bx	r3
}
 800b6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <mbedtls_ssl_handle_message_type>:
{
 800b6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800b6de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b6e0:	2b16      	cmp	r3, #22
{
 800b6e2:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800b6e4:	d004      	beq.n	800b6f0 <mbedtls_ssl_handle_message_type+0x14>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 800b6e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b6e8:	2b15      	cmp	r3, #21
 800b6ea:	d007      	beq.n	800b6fc <mbedtls_ssl_handle_message_type+0x20>
            return( 0 );
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e003      	b.n	800b6f8 <mbedtls_ssl_handle_message_type+0x1c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 800b6f0:	f7ff ff9e 	bl	800b630 <mbedtls_ssl_prepare_handshake_record>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d0f6      	beq.n	800b6e6 <mbedtls_ssl_handle_message_type+0xa>
}
 800b6f8:	b004      	add	sp, #16
 800b6fa:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 800b6fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6fe:	785a      	ldrb	r2, [r3, #1]
 800b700:	9202      	str	r2, [sp, #8]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	4b1b      	ldr	r3, [pc, #108]	; (800b774 <mbedtls_ssl_handle_message_type+0x98>)
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4a1b      	ldr	r2, [pc, #108]	; (800b778 <mbedtls_ssl_handle_message_type+0x9c>)
 800b70c:	f241 030b 	movw	r3, #4107	; 0x100b
 800b710:	2102      	movs	r1, #2
 800b712:	4620      	mov	r0, r4
 800b714:	f7fa f902 	bl	800591c <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 800b718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b71a:	781a      	ldrb	r2, [r3, #0]
 800b71c:	2a02      	cmp	r2, #2
 800b71e:	d10c      	bne.n	800b73a <mbedtls_ssl_handle_message_type+0x5e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 800b720:	785b      	ldrb	r3, [r3, #1]
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	4b15      	ldr	r3, [pc, #84]	; (800b77c <mbedtls_ssl_handle_message_type+0xa0>)
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	4620      	mov	r0, r4
 800b72a:	f241 0313 	movw	r3, #4115	; 0x1013
 800b72e:	4a12      	ldr	r2, [pc, #72]	; (800b778 <mbedtls_ssl_handle_message_type+0x9c>)
 800b730:	2101      	movs	r1, #1
 800b732:	f7fa f8f3 	bl	800591c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 800b736:	4812      	ldr	r0, [pc, #72]	; (800b780 <mbedtls_ssl_handle_message_type+0xa4>)
 800b738:	e7de      	b.n	800b6f8 <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 800b73a:	2a01      	cmp	r2, #1
 800b73c:	d118      	bne.n	800b770 <mbedtls_ssl_handle_message_type+0x94>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 800b73e:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 800b740:	b953      	cbnz	r3, 800b758 <mbedtls_ssl_handle_message_type+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 800b742:	4b10      	ldr	r3, [pc, #64]	; (800b784 <mbedtls_ssl_handle_message_type+0xa8>)
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	4620      	mov	r0, r4
 800b748:	f241 031a 	movw	r3, #4122	; 0x101a
 800b74c:	4a0a      	ldr	r2, [pc, #40]	; (800b778 <mbedtls_ssl_handle_message_type+0x9c>)
 800b74e:	2102      	movs	r1, #2
 800b750:	f7fa f8e4 	bl	800591c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 800b754:	480c      	ldr	r0, [pc, #48]	; (800b788 <mbedtls_ssl_handle_message_type+0xac>)
 800b756:	e7cf      	b.n	800b6f8 <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 800b758:	2b64      	cmp	r3, #100	; 0x64
 800b75a:	d109      	bne.n	800b770 <mbedtls_ssl_handle_message_type+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 800b75c:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <mbedtls_ssl_handle_message_type+0xb0>)
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	4a05      	ldr	r2, [pc, #20]	; (800b778 <mbedtls_ssl_handle_message_type+0x9c>)
 800b762:	f241 0322 	movw	r3, #4130	; 0x1022
 800b766:	2102      	movs	r1, #2
 800b768:	4620      	mov	r0, r4
 800b76a:	f7fa f8d7 	bl	800591c <mbedtls_debug_print_msg>
 800b76e:	e7bd      	b.n	800b6ec <mbedtls_ssl_handle_message_type+0x10>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 800b770:	4807      	ldr	r0, [pc, #28]	; (800b790 <mbedtls_ssl_handle_message_type+0xb4>)
 800b772:	e7c1      	b.n	800b6f8 <mbedtls_ssl_handle_message_type+0x1c>
 800b774:	080143ea 	.word	0x080143ea
 800b778:	08014fa0 	.word	0x08014fa0
 800b77c:	0801440e 	.word	0x0801440e
 800b780:	ffff8880 	.word	0xffff8880
 800b784:	08014430 	.word	0x08014430
 800b788:	ffff8780 	.word	0xffff8780
 800b78c:	0801444a 	.word	0x0801444a
 800b790:	ffff9980 	.word	0xffff9980

0800b794 <mbedtls_ssl_send_alert_message>:
{
 800b794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b796:	460f      	mov	r7, r1
 800b798:	b085      	sub	sp, #20
 800b79a:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 800b79c:	4604      	mov	r4, r0
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d03d      	beq.n	800b81e <mbedtls_ssl_send_alert_message+0x8a>
 800b7a2:	6803      	ldr	r3, [r0, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d03a      	beq.n	800b81e <mbedtls_ssl_send_alert_message+0x8a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 800b7a8:	4b1e      	ldr	r3, [pc, #120]	; (800b824 <mbedtls_ssl_send_alert_message+0x90>)
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4a1e      	ldr	r2, [pc, #120]	; (800b828 <mbedtls_ssl_send_alert_message+0x94>)
 800b7ae:	f241 0352 	movw	r3, #4178	; 0x1052
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	f7fa f8b2 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 800b7b8:	4b1c      	ldr	r3, [pc, #112]	; (800b82c <mbedtls_ssl_send_alert_message+0x98>)
 800b7ba:	9502      	str	r5, [sp, #8]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	4a1a      	ldr	r2, [pc, #104]	; (800b828 <mbedtls_ssl_send_alert_message+0x94>)
 800b7c0:	9701      	str	r7, [sp, #4]
 800b7c2:	f241 0353 	movw	r3, #4179	; 0x1053
 800b7c6:	2103      	movs	r1, #3
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7fa f8a7 	bl	800591c <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 800b7ce:	2315      	movs	r3, #21
 800b7d0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0] = level;
 800b7d4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen = 2;
 800b7d8:	2602      	movs	r6, #2
 800b7da:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msg[0] = level;
 800b7de:	701f      	strb	r7, [r3, #0]
    ssl->out_msg[1] = message;
 800b7e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800b7e4:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 800b7e6:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800b7e8:	f7ff fc72 	bl	800b0d0 <mbedtls_ssl_write_record>
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	b160      	cbz	r0, 800b80a <mbedtls_ssl_send_alert_message+0x76>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <mbedtls_ssl_send_alert_message+0x9c>)
 800b7f2:	9001      	str	r0, [sp, #4]
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	4a0c      	ldr	r2, [pc, #48]	; (800b828 <mbedtls_ssl_send_alert_message+0x94>)
 800b7f8:	f241 035c 	movw	r3, #4188	; 0x105c
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7fa f8bc 	bl	800597c <mbedtls_debug_print_ret>
}
 800b804:	4628      	mov	r0, r5
 800b806:	b005      	add	sp, #20
 800b808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 800b80a:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <mbedtls_ssl_send_alert_message+0xa0>)
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	4a06      	ldr	r2, [pc, #24]	; (800b828 <mbedtls_ssl_send_alert_message+0x94>)
 800b810:	f241 035f 	movw	r3, #4191	; 0x105f
 800b814:	4631      	mov	r1, r6
 800b816:	4620      	mov	r0, r4
 800b818:	f7fa f880 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800b81c:	e7f2      	b.n	800b804 <mbedtls_ssl_send_alert_message+0x70>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800b81e:	4d06      	ldr	r5, [pc, #24]	; (800b838 <mbedtls_ssl_send_alert_message+0xa4>)
 800b820:	e7f0      	b.n	800b804 <mbedtls_ssl_send_alert_message+0x70>
 800b822:	bf00      	nop
 800b824:	08014b61 	.word	0x08014b61
 800b828:	08014fa0 	.word	0x08014fa0
 800b82c:	08014b77 	.word	0x08014b77
 800b830:	08013ade 	.word	0x08013ade
 800b834:	08014b96 	.word	0x08014b96
 800b838:	ffff8f00 	.word	0xffff8f00

0800b83c <mbedtls_ssl_read_record_layer>:
{
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ssl->in_hslen != 0 )
 800b840:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800b842:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
 800b844:	b093      	sub	sp, #76	; 0x4c
 800b846:	4604      	mov	r4, r0
    if( ssl->in_hslen != 0 )
 800b848:	2900      	cmp	r1, #0
 800b84a:	d03d      	beq.n	800b8c8 <mbedtls_ssl_read_record_layer+0x8c>
        if( ssl->in_offt != NULL )
 800b84c:	b163      	cbz	r3, 800b868 <mbedtls_ssl_read_record_layer+0x2c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b84e:	4b90      	ldr	r3, [pc, #576]	; (800ba90 <mbedtls_ssl_read_record_layer+0x254>)
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	4a90      	ldr	r2, [pc, #576]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800b854:	4d90      	ldr	r5, [pc, #576]	; (800ba98 <mbedtls_ssl_read_record_layer+0x25c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800b856:	f640 730e 	movw	r3, #3854	; 0xf0e
 800b85a:	2101      	movs	r1, #1
 800b85c:	f7fa f85e 	bl	800591c <mbedtls_debug_print_msg>
}
 800b860:	4628      	mov	r0, r5
 800b862:	b013      	add	sp, #76	; 0x4c
 800b864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 800b868:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800b86a:	4291      	cmp	r1, r2
 800b86c:	d22a      	bcs.n	800b8c4 <mbedtls_ssl_read_record_layer+0x88>
            ssl->in_msglen -= ssl->in_hslen;
 800b86e:	1a52      	subs	r2, r2, r1
 800b870:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 800b872:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800b874:	4401      	add	r1, r0
 800b876:	f003 fafd 	bl	800ee74 <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 800b87a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b87c:	9302      	str	r3, [sp, #8]
 800b87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	4b86      	ldr	r3, [pc, #536]	; (800ba9c <mbedtls_ssl_read_record_layer+0x260>)
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	4a83      	ldr	r2, [pc, #524]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b888:	f640 732e 	movw	r3, #3886	; 0xf2e
 800b88c:	2104      	movs	r1, #4
 800b88e:	4620      	mov	r0, r4
 800b890:	f7fa f8a2 	bl	80059d8 <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen > 0 )
 800b898:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
 800b89c:	f1b8 0f00 	cmp.w	r8, #0
 800b8a0:	d113      	bne.n	800b8ca <mbedtls_ssl_read_record_layer+0x8e>
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 800b8a2:	2105      	movs	r1, #5
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f7ff fadd 	bl	800ae64 <mbedtls_ssl_fetch_input>
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b188      	cbz	r0, 800b8d2 <mbedtls_ssl_read_record_layer+0x96>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 800b8ae:	4b7c      	ldr	r3, [pc, #496]	; (800baa0 <mbedtls_ssl_read_record_layer+0x264>)
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	9001      	str	r0, [sp, #4]
 800b8b4:	f640 7359 	movw	r3, #3929	; 0xf59
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 800b8b8:	4a76      	ldr	r2, [pc, #472]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f7fa f85d 	bl	800597c <mbedtls_debug_print_ret>
 800b8c2:	e7cd      	b.n	800b860 <mbedtls_ssl_read_record_layer+0x24>
            ssl->in_msglen = 0;
 800b8c4:	6703      	str	r3, [r0, #112]	; 0x70
 800b8c6:	e7e5      	b.n	800b894 <mbedtls_ssl_read_record_layer+0x58>
    else if( ssl->in_offt != NULL )
 800b8c8:	b10b      	cbz	r3, 800b8ce <mbedtls_ssl_read_record_layer+0x92>
        return( 0 );
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	e7c8      	b.n	800b860 <mbedtls_ssl_read_record_layer+0x24>
        ssl->in_msglen = 0;
 800b8ce:	6703      	str	r3, [r0, #112]	; 0x70
 800b8d0:	e7e2      	b.n	800b898 <mbedtls_ssl_read_record_layer+0x5c>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 800b8d2:	2305      	movs	r3, #5
 800b8d4:	9302      	str	r3, [sp, #8]
 800b8d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	4b72      	ldr	r3, [pc, #456]	; (800baa4 <mbedtls_ssl_read_record_layer+0x268>)
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	4a6d      	ldr	r2, [pc, #436]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b8e0:	f640 53c5 	movw	r3, #3525	; 0xdc5
 800b8e4:	2104      	movs	r1, #4
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7fa f876 	bl	80059d8 <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 800b8ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 800b8ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    ssl->in_msgtype =  ssl->in_hdr[0];
 800b8f0:	7811      	ldrb	r1, [r2, #0]
 800b8f2:	66e1      	str	r1, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 800b8f4:	7805      	ldrb	r5, [r0, #0]
 800b8f6:	7843      	ldrb	r3, [r0, #1]
 800b8f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800b8fc:	6723      	str	r3, [r4, #112]	; 0x70
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 800b8fe:	7856      	ldrb	r6, [r2, #1]
        *minor = ver[1];
 800b900:	7895      	ldrb	r5, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 800b902:	9304      	str	r3, [sp, #16]
 800b904:	4b68      	ldr	r3, [pc, #416]	; (800baa8 <mbedtls_ssl_read_record_layer+0x26c>)
 800b906:	9101      	str	r1, [sp, #4]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	9503      	str	r5, [sp, #12]
 800b90c:	f640 53ce 	movw	r3, #3534	; 0xdce
 800b910:	9602      	str	r6, [sp, #8]
 800b912:	4a60      	ldr	r2, [pc, #384]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b914:	2103      	movs	r1, #3
 800b916:	4620      	mov	r0, r4
 800b918:	f7fa f800 	bl	800591c <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 800b91c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b91e:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 800b920:	2b03      	cmp	r3, #3
 800b922:	d90f      	bls.n	800b944 <mbedtls_ssl_read_record_layer+0x108>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 800b924:	4b61      	ldr	r3, [pc, #388]	; (800baac <mbedtls_ssl_read_record_layer+0x270>)
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	4a5a      	ldr	r2, [pc, #360]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b92a:	2101      	movs	r1, #1
 800b92c:	4620      	mov	r0, r4
 800b92e:	f640 53d6 	movw	r3, #3542	; 0xdd6
 800b932:	f7f9 fff3 	bl	800591c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800b936:	220a      	movs	r2, #10
 800b938:	2102      	movs	r1, #2
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7ff ff2a 	bl	800b794 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 800b940:	4d5b      	ldr	r5, [pc, #364]	; (800bab0 <mbedtls_ssl_read_record_layer+0x274>)
 800b942:	e78d      	b.n	800b860 <mbedtls_ssl_read_record_layer+0x24>
    if( major_ver != ssl->major_ver )
 800b944:	68a3      	ldr	r3, [r4, #8]
 800b946:	429e      	cmp	r6, r3
 800b948:	d009      	beq.n	800b95e <mbedtls_ssl_read_record_layer+0x122>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 800b94a:	4b5a      	ldr	r3, [pc, #360]	; (800bab4 <mbedtls_ssl_read_record_layer+0x278>)
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	f640 53e6 	movw	r3, #3558	; 0xde6
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800b952:	4a50      	ldr	r2, [pc, #320]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b954:	2101      	movs	r1, #1
 800b956:	4620      	mov	r0, r4
 800b958:	f7f9 ffe0 	bl	800591c <mbedtls_debug_print_msg>
 800b95c:	e7f0      	b.n	800b940 <mbedtls_ssl_read_record_layer+0x104>
    if( minor_ver > ssl->conf->max_minor_ver )
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b964:	429d      	cmp	r5, r3
 800b966:	dd04      	ble.n	800b972 <mbedtls_ssl_read_record_layer+0x136>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 800b968:	4b53      	ldr	r3, [pc, #332]	; (800bab8 <mbedtls_ssl_read_record_layer+0x27c>)
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	f640 53ec 	movw	r3, #3564	; 0xdec
 800b970:	e7ef      	b.n	800b952 <mbedtls_ssl_read_record_layer+0x116>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 800b972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b974:	6d22      	ldr	r2, [r4, #80]	; 0x50
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 800b976:	6f21      	ldr	r1, [r4, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 800b978:	1a9b      	subs	r3, r3, r2
 800b97a:	f5c3 5389 	rsb	r3, r3, #4384	; 0x1120
 800b97e:	331d      	adds	r3, #29
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 800b980:	4299      	cmp	r1, r3
 800b982:	d904      	bls.n	800b98e <mbedtls_ssl_read_record_layer+0x152>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800b984:	4b4d      	ldr	r3, [pc, #308]	; (800babc <mbedtls_ssl_read_record_layer+0x280>)
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	f640 53f4 	movw	r3, #3572	; 0xdf4
 800b98c:	e7e1      	b.n	800b952 <mbedtls_ssl_read_record_layer+0x116>
    if( ssl->transform_in == NULL )
 800b98e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b990:	b94b      	cbnz	r3, 800b9a6 <mbedtls_ssl_read_record_layer+0x16a>
        if( ssl->in_msglen < 1 ||
 800b992:	1e4b      	subs	r3, r1, #1
 800b994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b998:	f0c0 82aa 	bcc.w	800bef0 <mbedtls_ssl_read_record_layer+0x6b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800b99c:	4b47      	ldr	r3, [pc, #284]	; (800babc <mbedtls_ssl_read_record_layer+0x280>)
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	f640 53fe 	movw	r3, #3582	; 0xdfe
 800b9a4:	e7d5      	b.n	800b952 <mbedtls_ssl_read_record_layer+0x116>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	4299      	cmp	r1, r3
 800b9aa:	d204      	bcs.n	800b9b6 <mbedtls_ssl_read_record_layer+0x17a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800b9ac:	4b43      	ldr	r3, [pc, #268]	; (800babc <mbedtls_ssl_read_record_layer+0x280>)
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	f640 6306 	movw	r3, #3590	; 0xe06
 800b9b4:	e7cd      	b.n	800b952 <mbedtls_ssl_read_record_layer+0x116>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 800b9b6:	68e2      	ldr	r2, [r4, #12]
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	f340 8299 	ble.w	800bef0 <mbedtls_ssl_read_record_layer+0x6b4>
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 800b9be:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	f240 8294 	bls.w	800bef0 <mbedtls_ssl_read_record_layer+0x6b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800b9c8:	4b3c      	ldr	r3, [pc, #240]	; (800babc <mbedtls_ssl_read_record_layer+0x280>)
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	f640 631b 	movw	r3, #3611	; 0xe1b
 800b9d0:	e7bf      	b.n	800b952 <mbedtls_ssl_read_record_layer+0x116>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 800b9d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
        ssl->in_left = 0;
 800b9d4:	6765      	str	r5, [r4, #116]	; 0x74
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 800b9d6:	3305      	adds	r3, #5
 800b9d8:	9302      	str	r3, [sp, #8]
 800b9da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	4b38      	ldr	r3, [pc, #224]	; (800bac0 <mbedtls_ssl_read_record_layer+0x284>)
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	4a2c      	ldr	r2, [pc, #176]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b9e4:	f640 6378 	movw	r3, #3704	; 0xe78
 800b9e8:	2104      	movs	r1, #4
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7f9 fff4 	bl	80059d8 <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 800b9f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f43f af69 	beq.w	800b8ca <mbedtls_ssl_read_record_layer+0x8e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 800b9f8:	4b32      	ldr	r3, [pc, #200]	; (800bac4 <mbedtls_ssl_read_record_layer+0x288>)
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	4a25      	ldr	r2, [pc, #148]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800b9fe:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 800ba02:	2102      	movs	r1, #2
 800ba04:	4620      	mov	r0, r4
 800ba06:	f7f9 ff89 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 800ba0a:	6a23      	ldr	r3, [r4, #32]
 800ba0c:	b10b      	cbz	r3, 800ba12 <mbedtls_ssl_read_record_layer+0x1d6>
 800ba0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ba10:	b950      	cbnz	r0, 800ba28 <mbedtls_ssl_read_record_layer+0x1ec>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ba12:	4b1f      	ldr	r3, [pc, #124]	; (800ba90 <mbedtls_ssl_read_record_layer+0x254>)
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	f240 6354 	movw	r3, #1620	; 0x654
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800ba1c:	4d1e      	ldr	r5, [pc, #120]	; (800ba98 <mbedtls_ssl_read_record_layer+0x25c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7f9 ff7b 	bl	800591c <mbedtls_debug_print_msg>
 800ba26:	e0c7      	b.n	800bbb8 <mbedtls_ssl_read_record_layer+0x37c>
    if( NULL == ctx || NULL == ctx->cipher_info )
 800ba28:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800ba2c:	b103      	cbz	r3, 800ba30 <mbedtls_ssl_read_record_layer+0x1f4>
    return ctx->cipher_info->mode;
 800ba2e:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 800ba30:	6f27      	ldr	r7, [r4, #112]	; 0x70
 800ba32:	6882      	ldr	r2, [r0, #8]
 800ba34:	4297      	cmp	r7, r2
 800ba36:	d20b      	bcs.n	800ba50 <mbedtls_ssl_read_record_layer+0x214>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 800ba38:	4b23      	ldr	r3, [pc, #140]	; (800bac8 <mbedtls_ssl_read_record_layer+0x28c>)
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	9202      	str	r2, [sp, #8]
 800ba3e:	9701      	str	r7, [sp, #4]
 800ba40:	f240 635d 	movw	r3, #1629	; 0x65d
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 800ba44:	4a13      	ldr	r2, [pc, #76]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800ba46:	2101      	movs	r1, #1
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f7f9 ff67 	bl	800591c <mbedtls_debug_print_msg>
 800ba4e:	e01d      	b.n	800ba8c <mbedtls_ssl_read_record_layer+0x250>
    if( mode == MBEDTLS_MODE_GCM ||
 800ba50:	2b06      	cmp	r3, #6
 800ba52:	d002      	beq.n	800ba5a <mbedtls_ssl_read_record_layer+0x21e>
 800ba54:	2b08      	cmp	r3, #8
 800ba56:	f040 8154 	bne.w	800bd02 <mbedtls_ssl_read_record_layer+0x4c6>
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 800ba5a:	6803      	ldr	r3, [r0, #0]
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 800ba5c:	6902      	ldr	r2, [r0, #16]
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 800ba5e:	7f1b      	ldrb	r3, [r3, #28]
 800ba60:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 800ba64:	68c3      	ldr	r3, [r0, #12]
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 800ba66:	bf0c      	ite	eq
 800ba68:	2510      	moveq	r5, #16
 800ba6a:	2508      	movne	r5, #8
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 800ba6c:	1a9b      	subs	r3, r3, r2
        if( ssl->in_msglen < explicit_iv_len + taglen )
 800ba6e:	195a      	adds	r2, r3, r5
 800ba70:	4297      	cmp	r7, r2
 800ba72:	d22f      	bcs.n	800bad4 <mbedtls_ssl_read_record_layer+0x298>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 800ba74:	9302      	str	r3, [sp, #8]
 800ba76:	4b15      	ldr	r3, [pc, #84]	; (800bacc <mbedtls_ssl_read_record_layer+0x290>)
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	9503      	str	r5, [sp, #12]
 800ba7c:	9701      	str	r7, [sp, #4]
 800ba7e:	f240 638d 	movw	r3, #1677	; 0x68d
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 800ba82:	4a04      	ldr	r2, [pc, #16]	; (800ba94 <mbedtls_ssl_read_record_layer+0x258>)
 800ba84:	2101      	movs	r1, #1
 800ba86:	4620      	mov	r0, r4
 800ba88:	f7f9 ff48 	bl	800591c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800ba8c:	4d10      	ldr	r5, [pc, #64]	; (800bad0 <mbedtls_ssl_read_record_layer+0x294>)
 800ba8e:	e093      	b.n	800bbb8 <mbedtls_ssl_read_record_layer+0x37c>
 800ba90:	08013e7c 	.word	0x08013e7c
 800ba94:	08014fa0 	.word	0x08014fa0
 800ba98:	ffff9400 	.word	0xffff9400
 800ba9c:	080148bd 	.word	0x080148bd
 800baa0:	080148d9 	.word	0x080148d9
 800baa4:	080148f1 	.word	0x080148f1
 800baa8:	08014905 	.word	0x08014905
 800baac:	08014940 	.word	0x08014940
 800bab0:	ffff8e00 	.word	0xffff8e00
 800bab4:	08014954 	.word	0x08014954
 800bab8:	0801496b 	.word	0x0801496b
 800babc:	08014982 	.word	0x08014982
 800bac0:	08014995 	.word	0x08014995
 800bac4:	080149af 	.word	0x080149af
 800bac8:	080149be 	.word	0x080149be
 800bacc:	080149db 	.word	0x080149db
 800bad0:	ffff8e80 	.word	0xffff8e80
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 800bad4:	1aff      	subs	r7, r7, r3
 800bad6:	1b7f      	subs	r7, r7, r5
        memcpy( add_data, ssl->in_ctr, 8 );
 800bad8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        ssl->in_msglen = dec_msglen;
 800bada:	6727      	str	r7, [r4, #112]	; 0x70
        memcpy( add_data, ssl->in_ctr, 8 );
 800badc:	6810      	ldr	r0, [r2, #0]
 800bade:	6851      	ldr	r1, [r2, #4]
        ver[0] = (unsigned char) major;
 800bae0:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
 800bae2:	f8d4 9064 	ldr.w	r9, [r4, #100]	; 0x64
        memcpy( add_data, ssl->in_ctr, 8 );
 800bae6:	ae0a      	add	r6, sp, #40	; 0x28
 800bae8:	4633      	mov	r3, r6
 800baea:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 800baec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800baee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 800baf2:	68e3      	ldr	r3, [r4, #12]
        ver[1] = (unsigned char) minor;
 800baf4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 800baf8:	0a3b      	lsrs	r3, r7, #8
 800bafa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 800bafe:	f04f 0a0d 	mov.w	sl, #13
 800bb02:	4bab      	ldr	r3, [pc, #684]	; (800bdb0 <mbedtls_ssl_read_record_layer+0x574>)
        ver[0] = (unsigned char) major;
 800bb04:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	4aaa      	ldr	r2, [pc, #680]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bb0c:	f8cd a008 	str.w	sl, [sp, #8]
 800bb10:	f240 639e 	movw	r3, #1694	; 0x69e
 800bb14:	2104      	movs	r1, #4
 800bb16:	4620      	mov	r0, r4
 800bb18:	9601      	str	r6, [sp, #4]
        add_data[12] = ssl->in_msglen & 0xFF;
 800bb1a:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 800bb1e:	f7f9 ff5b 	bl	80059d8 <mbedtls_debug_print_buf>
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 800bb22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb24:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bb26:	6918      	ldr	r0, [r3, #16]
 800bb28:	68da      	ldr	r2, [r3, #12]
 800bb2a:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 800bb2e:	1a12      	subs	r2, r2, r0
 800bb30:	4470      	add	r0, lr
 800bb32:	f003 f994 	bl	800ee5e <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 800bb36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb38:	68da      	ldr	r2, [r3, #12]
 800bb3a:	9202      	str	r2, [sp, #8]
 800bb3c:	3328      	adds	r3, #40	; 0x28
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	4b9d      	ldr	r3, [pc, #628]	; (800bdb8 <mbedtls_ssl_read_record_layer+0x57c>)
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	4a9b      	ldr	r2, [pc, #620]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bb46:	f240 63a5 	movw	r3, #1701	; 0x6a5
 800bb4a:	2104      	movs	r1, #4
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7f9 ff43 	bl	80059d8 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 800bb52:	eb09 0b07 	add.w	fp, r9, r7
 800bb56:	4b99      	ldr	r3, [pc, #612]	; (800bdbc <mbedtls_ssl_read_record_layer+0x580>)
 800bb58:	9502      	str	r5, [sp, #8]
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	4a95      	ldr	r2, [pc, #596]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bb5e:	f8cd b004 	str.w	fp, [sp, #4]
 800bb62:	f240 63a6 	movw	r3, #1702	; 0x6a6
 800bb66:	2104      	movs	r1, #4
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7f9 ff35 	bl	80059d8 <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 800bb6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bb70:	9506      	str	r5, [sp, #24]
 800bb72:	ab09      	add	r3, sp, #36	; 0x24
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	f8cd b014 	str.w	fp, [sp, #20]
 800bb7a:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb7e:	9702      	str	r7, [sp, #8]
 800bb80:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb84:	f8cd a000 	str.w	sl, [sp]
 800bb88:	68c2      	ldr	r2, [r0, #12]
 800bb8a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800bb8e:	4633      	mov	r3, r6
 800bb90:	3090      	adds	r0, #144	; 0x90
 800bb92:	f7f9 fd99 	bl	80056c8 <mbedtls_cipher_auth_decrypt>
 800bb96:	4605      	mov	r5, r0
 800bb98:	b1a0      	cbz	r0, 800bbc4 <mbedtls_ssl_read_record_layer+0x388>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 800bb9a:	4b89      	ldr	r3, [pc, #548]	; (800bdc0 <mbedtls_ssl_read_record_layer+0x584>)
 800bb9c:	9001      	str	r0, [sp, #4]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4a84      	ldr	r2, [pc, #528]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bba2:	f240 63b3 	movw	r3, #1715	; 0x6b3
 800bba6:	2101      	movs	r1, #1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7f9 fee7 	bl	800597c <mbedtls_debug_print_ret>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800bbae:	4b85      	ldr	r3, [pc, #532]	; (800bdc4 <mbedtls_ssl_read_record_layer+0x588>)
 800bbb0:	f515 4fc6 	cmn.w	r5, #25344	; 0x6300
 800bbb4:	bf08      	it	eq
 800bbb6:	461d      	moveq	r5, r3
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 800bbb8:	4b83      	ldr	r3, [pc, #524]	; (800bdc8 <mbedtls_ssl_read_record_layer+0x58c>)
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	9501      	str	r5, [sp, #4]
 800bbbe:	f640 638e 	movw	r3, #3726	; 0xe8e
 800bbc2:	e679      	b.n	800b8b8 <mbedtls_ssl_read_record_layer+0x7c>
        if( olen != dec_msglen )
 800bbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc6:	429f      	cmp	r7, r3
 800bbc8:	d004      	beq.n	800bbd4 <mbedtls_ssl_read_record_layer+0x398>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800bbca:	4b80      	ldr	r3, [pc, #512]	; (800bdcc <mbedtls_ssl_read_record_layer+0x590>)
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	f240 63be 	movw	r3, #1726	; 0x6be
 800bbd2:	e722      	b.n	800ba1a <mbedtls_ssl_read_record_layer+0x1de>
    size_t padlen = 0, correct = 1;
 800bbd4:	2601      	movs	r6, #1
 800bbd6:	4607      	mov	r7, r0
        auth_done++;
 800bbd8:	4635      	mov	r5, r6
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 800bbda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bbdc:	9302      	str	r3, [sp, #8]
 800bbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	4b7b      	ldr	r3, [pc, #492]	; (800bdd0 <mbedtls_ssl_read_record_layer+0x594>)
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	4a73      	ldr	r2, [pc, #460]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bbe8:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 800bbec:	2104      	movs	r1, #4
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f7f9 fef2 	bl	80059d8 <mbedtls_debug_print_buf>
    if( auth_done == 0 )
 800bbf4:	2d00      	cmp	r5, #0
 800bbf6:	d170      	bne.n	800bcda <mbedtls_ssl_read_record_layer+0x49e>
        ssl->in_msglen -= ssl->transform_in->maclen;
 800bbf8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bbfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bbfc:	6952      	ldr	r2, [r2, #20]
 800bbfe:	1a9b      	subs	r3, r3, r2
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 800bc00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        ssl->in_msglen -= ssl->transform_in->maclen;
 800bc02:	6723      	str	r3, [r4, #112]	; 0x70
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 800bc08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc0a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc0c:	705a      	strb	r2, [r3, #1]
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800bc0e:	68e3      	ldr	r3, [r4, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f340 8151 	ble.w	800beb8 <mbedtls_ssl_read_record_layer+0x67c>
 800bc16:	6f23      	ldr	r3, [r4, #112]	; 0x70
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800bc18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc1a:	3315      	adds	r3, #21
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 800bc1c:	18f9      	adds	r1, r7, r3
            extra_run &= correct * 0xFF;
 800bc1e:	ea4f 2906 	mov.w	r9, r6, lsl #8
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 800bc22:	099b      	lsrs	r3, r3, #6
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 800bc24:	ebc3 1391 	rsb	r3, r3, r1, lsr #6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800bc28:	2208      	movs	r2, #8
 800bc2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
            extra_run &= correct * 0xFF;
 800bc2c:	eba9 0906 	sub.w	r9, r9, r6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800bc30:	3044      	adds	r0, #68	; 0x44
            extra_run &= correct * 0xFF;
 800bc32:	ea09 0903 	and.w	r9, r9, r3
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 800bc36:	f7fb facd 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 800bc3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc3c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bc3e:	2203      	movs	r2, #3
 800bc40:	3044      	adds	r0, #68	; 0x44
 800bc42:	f7fb fac7 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 800bc46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	3044      	adds	r0, #68	; 0x44
 800bc4e:	f7fb fac1 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 800bc52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc54:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc56:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bc58:	3044      	adds	r0, #68	; 0x44
 800bc5a:	f7fb fabb 	bl	80071d4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 800bc5e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc60:	af0a      	add	r7, sp, #40	; 0x28
 800bc62:	4639      	mov	r1, r7
 800bc64:	3044      	adds	r0, #68	; 0x44
 800bc66:	f7fb fac7 	bl	80071f8 <mbedtls_md_hmac_finish>
            for( j = 0; j < extra_run + 1; j++ )
 800bc6a:	f109 0901 	add.w	r9, r9, #1
 800bc6e:	454d      	cmp	r5, r9
 800bc70:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc72:	f0c0 810c 	bcc.w	800be8e <mbedtls_ssl_read_record_layer+0x652>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 800bc76:	3044      	adds	r0, #68	; 0x44
 800bc78:	f7fb faf0 	bl	800725c <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
 800bc7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc7e:	4a4d      	ldr	r2, [pc, #308]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	9302      	str	r3, [sp, #8]
 800bc84:	4b53      	ldr	r3, [pc, #332]	; (800bdd4 <mbedtls_ssl_read_record_layer+0x598>)
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	2104      	movs	r1, #4
 800bc8a:	f240 73e6 	movw	r3, #2022	; 0x7e6
 800bc8e:	4620      	mov	r0, r4
 800bc90:	9701      	str	r7, [sp, #4]
 800bc92:	f7f9 fea1 	bl	80059d8 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
 800bc96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc98:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	9302      	str	r3, [sp, #8]
 800bc9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bca0:	4413      	add	r3, r2
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	4b4c      	ldr	r3, [pc, #304]	; (800bdd8 <mbedtls_ssl_read_record_layer+0x59c>)
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	4a42      	ldr	r2, [pc, #264]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bcaa:	f44f 63fd 	mov.w	r3, #2024	; 0x7e8
 800bcae:	2104      	movs	r1, #4
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f7f9 fe91 	bl	80059d8 <mbedtls_debug_print_buf>
        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 800bcb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcb8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bcba:	695a      	ldr	r2, [r3, #20]
 800bcbc:	6f20      	ldr	r0, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    for( i = 0; i < n; i++ )
 800bcc4:	4542      	cmp	r2, r8
 800bcc6:	f040 80e8 	bne.w	800be9a <mbedtls_ssl_read_record_layer+0x65e>
        diff |= A[i] ^ B[i];

    return( diff );
 800bcca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f47f aedc 	bne.w	800ba8c <mbedtls_ssl_read_record_layer+0x250>
        if( correct == 0 )
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	f43f aed9 	beq.w	800ba8c <mbedtls_ssl_read_record_layer+0x250>
    if( ssl->in_msglen == 0 )
 800bcda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f040 80f0 	bne.w	800bec2 <mbedtls_ssl_read_record_layer+0x686>
        ssl->nb_zero++;
 800bce2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800bce4:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 800bce6:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 800bce8:	67e3      	str	r3, [r4, #124]	; 0x7c
        if( ssl->nb_zero > 3 )
 800bcea:	f340 80ec 	ble.w	800bec6 <mbedtls_ssl_read_record_layer+0x68a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 800bcee:	4b3b      	ldr	r3, [pc, #236]	; (800bddc <mbedtls_ssl_read_record_layer+0x5a0>)
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	4a30      	ldr	r2, [pc, #192]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bcf4:	f640 030e 	movw	r3, #2062	; 0x80e
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f7f9 fe0e 	bl	800591c <mbedtls_debug_print_msg>
 800bd00:	e6c4      	b.n	800ba8c <mbedtls_ssl_read_record_layer+0x250>
    if( mode == MBEDTLS_MODE_CBC )
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	f040 80be 	bne.w	800be84 <mbedtls_ssl_read_record_layer+0x648>
        size_t olen = 0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	930a      	str	r3, [sp, #40]	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800bd0c:	68e1      	ldr	r1, [r4, #12]
 800bd0e:	68c2      	ldr	r2, [r0, #12]
 800bd10:	6945      	ldr	r5, [r0, #20]
            minlen += ssl->transform_in->ivlen;
 800bd12:	2902      	cmp	r1, #2
 800bd14:	bfac      	ite	ge
 800bd16:	4616      	movge	r6, r2
 800bd18:	461e      	movlt	r6, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 800bd1a:	1993      	adds	r3, r2, r6
 800bd1c:	429f      	cmp	r7, r3
 800bd1e:	d303      	bcc.n	800bd28 <mbedtls_ssl_read_record_layer+0x4ec>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 800bd20:	1c6b      	adds	r3, r5, #1
 800bd22:	4433      	add	r3, r6
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 800bd24:	429f      	cmp	r7, r3
 800bd26:	d207      	bcs.n	800bd38 <mbedtls_ssl_read_record_layer+0x4fc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 800bd28:	4b2d      	ldr	r3, [pc, #180]	; (800bde0 <mbedtls_ssl_read_record_layer+0x5a4>)
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	9503      	str	r5, [sp, #12]
 800bd2e:	9202      	str	r2, [sp, #8]
 800bd30:	9701      	str	r7, [sp, #4]
 800bd32:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 800bd36:	e6a4      	b.n	800ba82 <mbedtls_ssl_read_record_layer+0x246>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 800bd38:	fbb7 f6f2 	udiv	r6, r7, r2
 800bd3c:	fb02 7916 	mls	r9, r2, r6, r7
 800bd40:	f1b9 0f00 	cmp.w	r9, #0
 800bd44:	d006      	beq.n	800bd54 <mbedtls_ssl_read_record_layer+0x518>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 800bd46:	4b27      	ldr	r3, [pc, #156]	; (800bde4 <mbedtls_ssl_read_record_layer+0x5a8>)
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	9202      	str	r2, [sp, #8]
 800bd4c:	9701      	str	r7, [sp, #4]
 800bd4e:	f240 7319 	movw	r3, #1817	; 0x719
 800bd52:	e677      	b.n	800ba44 <mbedtls_ssl_read_record_layer+0x208>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800bd54:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 800bd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd58:	f100 0128 	add.w	r1, r0, #40	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800bd5c:	dd05      	ble.n	800bd6a <mbedtls_ssl_read_record_layer+0x52e>
            dec_msglen -= ssl->transform_in->ivlen;
 800bd5e:	1abf      	subs	r7, r7, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 800bd60:	6727      	str	r7, [r4, #112]	; 0x70
 800bd62:	468e      	mov	lr, r1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 800bd64:	464d      	mov	r5, r9
 800bd66:	42aa      	cmp	r2, r5
 800bd68:	d113      	bne.n	800bd92 <mbedtls_ssl_read_record_layer+0x556>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 800bd6a:	ad0a      	add	r5, sp, #40	; 0x28
 800bd6c:	9502      	str	r5, [sp, #8]
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	9700      	str	r7, [sp, #0]
 800bd72:	3090      	adds	r0, #144	; 0x90
 800bd74:	f7f9 fc5c 	bl	8005630 <mbedtls_cipher_crypt>
 800bd78:	4605      	mov	r5, r0
 800bd7a:	b180      	cbz	r0, 800bd9e <mbedtls_ssl_read_record_layer+0x562>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 800bd7c:	4b1a      	ldr	r3, [pc, #104]	; (800bde8 <mbedtls_ssl_read_record_layer+0x5ac>)
 800bd7e:	9001      	str	r0, [sp, #4]
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	4a0c      	ldr	r2, [pc, #48]	; (800bdb4 <mbedtls_ssl_read_record_layer+0x578>)
 800bd84:	f240 7331 	movw	r3, #1841	; 0x731
 800bd88:	2101      	movs	r1, #1
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7f9 fdf6 	bl	800597c <mbedtls_debug_print_ret>
 800bd90:	e712      	b.n	800bbb8 <mbedtls_ssl_read_record_layer+0x37c>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 800bd92:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800bd94:	5d76      	ldrb	r6, [r6, r5]
 800bd96:	f80e 6b01 	strb.w	r6, [lr], #1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 800bd9a:	3501      	adds	r5, #1
 800bd9c:	e7e3      	b.n	800bd66 <mbedtls_ssl_read_record_layer+0x52a>
        if( dec_msglen != olen )
 800bd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda0:	429f      	cmp	r7, r3
 800bda2:	d023      	beq.n	800bdec <mbedtls_ssl_read_record_layer+0x5b0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800bda4:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <mbedtls_ssl_read_record_layer+0x590>)
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	f240 7337 	movw	r3, #1847	; 0x737
 800bdac:	e635      	b.n	800ba1a <mbedtls_ssl_read_record_layer+0x1de>
 800bdae:	bf00      	nop
 800bdb0:	08014d32 	.word	0x08014d32
 800bdb4:	08014fa0 	.word	0x08014fa0
 800bdb8:	08014d50 	.word	0x08014d50
 800bdbc:	08014a0c 	.word	0x08014a0c
 800bdc0:	08014a15 	.word	0x08014a15
 800bdc4:	ffff8e80 	.word	0xffff8e80
 800bdc8:	08014b02 	.word	0x08014b02
 800bdcc:	08013e7c 	.word	0x08013e7c
 800bdd0:	08014a8e 	.word	0x08014a8e
 800bdd4:	08014aaa 	.word	0x08014aaa
 800bdd8:	08014ab7 	.word	0x08014ab7
 800bddc:	08014ac4 	.word	0x08014ac4
 800bde0:	08014a31 	.word	0x08014a31
 800bde4:	08014a6f 	.word	0x08014a6f
 800bde8:	08014e10 	.word	0x08014e10
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 800bdec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bdee:	f8d4 e064 	ldr.w	lr, [r4, #100]	; 0x64
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 800bdf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 800bdf4:	1e53      	subs	r3, r2, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 800bdf6:	6947      	ldr	r7, [r0, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 800bdf8:	f81e 1003 	ldrb.w	r1, [lr, r3]
 800bdfc:	3101      	adds	r1, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 800bdfe:	19c8      	adds	r0, r1, r7
 800be00:	4282      	cmp	r2, r0
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800be02:	68e0      	ldr	r0, [r4, #12]
    size_t padlen = 0, correct = 1;
 800be04:	bf36      	itet	cc
 800be06:	46ac      	movcc	ip, r5
 800be08:	f04f 0c01 	movcs.w	ip, #1
 800be0c:	4629      	movcc	r1, r5
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 800be0e:	2800      	cmp	r0, #0
 800be10:	dd33      	ble.n	800be7a <mbedtls_ssl_read_record_layer+0x63e>
            correct &= ( ssl->in_msglen >= padlen + 1 );
 800be12:	1c4e      	adds	r6, r1, #1
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 800be14:	42b2      	cmp	r2, r6
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 800be16:	eba3 0301 	sub.w	r3, r3, r1
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 800be1a:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800be1e:	bf2c      	ite	cs
 800be20:	2601      	movcs	r6, #1
 800be22:	2600      	movcc	r6, #0
 800be24:	42bb      	cmp	r3, r7
 800be26:	bf28      	it	cs
 800be28:	2600      	movcs	r6, #0
 800be2a:	ea06 060c 	and.w	r6, r6, ip
            size_t pad_count = 0, real_count = 1;
 800be2e:	2701      	movs	r7, #1
            for( i = 1; i <= 256; i++ )
 800be30:	4638      	mov	r0, r7
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 800be32:	fb06 e303 	mla	r3, r6, r3, lr
 800be36:	f101 3aff 	add.w	sl, r1, #4294967295
            for( i = 1; i <= 256; i++ )
 800be3a:	f240 1c01 	movw	ip, #257	; 0x101
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 800be3e:	f813 e000 	ldrb.w	lr, [r3, r0]
 800be42:	ebae 0b0a 	sub.w	fp, lr, sl
                real_count &= ( i <= padlen );
 800be46:	4281      	cmp	r1, r0
 800be48:	bf34      	ite	cc
 800be4a:	2700      	movcc	r7, #0
 800be4c:	f007 0701 	andcs.w	r7, r7, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 800be50:	f1db 0e00 	rsbs	lr, fp, #0
            for( i = 1; i <= 256; i++ )
 800be54:	f100 0001 	add.w	r0, r0, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 800be58:	eb4e 0e0b 	adc.w	lr, lr, fp
            for( i = 1; i <= 256; i++ )
 800be5c:	4560      	cmp	r0, ip
                pad_count += real_count *
 800be5e:	fb07 990e 	mla	r9, r7, lr, r9
            for( i = 1; i <= 256; i++ )
 800be62:	d1ec      	bne.n	800be3e <mbedtls_ssl_read_record_layer+0x602>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 800be64:	4549      	cmp	r1, r9
 800be66:	bf14      	ite	ne
 800be68:	2600      	movne	r6, #0
 800be6a:	f006 0601 	andeq.w	r6, r6, #1
            padlen &= correct * 0x1FF;
 800be6e:	0277      	lsls	r7, r6, #9
 800be70:	1bbf      	subs	r7, r7, r6
 800be72:	400f      	ands	r7, r1
        ssl->in_msglen -= padlen;
 800be74:	1bd2      	subs	r2, r2, r7
 800be76:	6722      	str	r2, [r4, #112]	; 0x70
 800be78:	e6af      	b.n	800bbda <mbedtls_ssl_read_record_layer+0x39e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800be7a:	4b34      	ldr	r3, [pc, #208]	; (800bf4c <mbedtls_ssl_read_record_layer+0x710>)
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	f240 7391 	movw	r3, #1937	; 0x791
 800be82:	e5ca      	b.n	800ba1a <mbedtls_ssl_read_record_layer+0x1de>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800be84:	4b31      	ldr	r3, [pc, #196]	; (800bf4c <mbedtls_ssl_read_record_layer+0x710>)
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	f240 739b 	movw	r3, #1947	; 0x79b
 800be8c:	e5c5      	b.n	800ba1a <mbedtls_ssl_read_record_layer+0x1de>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 800be8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800be90:	3044      	adds	r0, #68	; 0x44
 800be92:	f7fb f9fb 	bl	800728c <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 800be96:	3501      	adds	r5, #1
 800be98:	e6e9      	b.n	800bc6e <mbedtls_ssl_read_record_layer+0x432>
 800be9a:	eb00 0308 	add.w	r3, r0, r8
        diff |= A[i] ^ B[i];
 800be9e:	5ccb      	ldrb	r3, [r1, r3]
 800bea0:	f817 e008 	ldrb.w	lr, [r7, r8]
 800bea4:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 800bea8:	ea83 030e 	eor.w	r3, r3, lr
 800beac:	432b      	orrs	r3, r5
 800beae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    for( i = 0; i < n; i++ )
 800beb2:	f108 0801 	add.w	r8, r8, #1
 800beb6:	e705      	b.n	800bcc4 <mbedtls_ssl_read_record_layer+0x488>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800beb8:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <mbedtls_ssl_read_record_layer+0x710>)
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	f240 73e2 	movw	r3, #2018	; 0x7e2
 800bec0:	e5ab      	b.n	800ba1a <mbedtls_ssl_read_record_layer+0x1de>
        ssl->nb_zero = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	67e3      	str	r3, [r4, #124]	; 0x7c
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 800bec6:	2308      	movs	r3, #8
            if( ++ssl->in_ctr[i - 1] != 0 )
 800bec8:	3b01      	subs	r3, #1
 800beca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800becc:	5cca      	ldrb	r2, [r1, r3]
 800bece:	3201      	adds	r2, #1
 800bed0:	b2d2      	uxtb	r2, r2
 800bed2:	54ca      	strb	r2, [r1, r3]
 800bed4:	b9d2      	cbnz	r2, 800bf0c <mbedtls_ssl_read_record_layer+0x6d0>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1f6      	bne.n	800bec8 <mbedtls_ssl_read_record_layer+0x68c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 800beda:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <mbedtls_ssl_read_record_layer+0x714>)
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4a1d      	ldr	r2, [pc, #116]	; (800bf54 <mbedtls_ssl_read_record_layer+0x718>)
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 800bee0:	4d1d      	ldr	r5, [pc, #116]	; (800bf58 <mbedtls_ssl_read_record_layer+0x71c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 800bee2:	f640 0324 	movw	r3, #2084	; 0x824
 800bee6:	2101      	movs	r1, #1
 800bee8:	4620      	mov	r0, r4
 800beea:	f7f9 fd17 	bl	800591c <mbedtls_debug_print_msg>
 800beee:	e663      	b.n	800bbb8 <mbedtls_ssl_read_record_layer+0x37c>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 800bef0:	3105      	adds	r1, #5
 800bef2:	4620      	mov	r0, r4
 800bef4:	f7fe ffb6 	bl	800ae64 <mbedtls_ssl_fetch_input>
 800bef8:	4605      	mov	r5, r0
 800befa:	2800      	cmp	r0, #0
 800befc:	f43f ad69 	beq.w	800b9d2 <mbedtls_ssl_read_record_layer+0x196>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 800bf00:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <mbedtls_ssl_read_record_layer+0x720>)
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	9501      	str	r5, [sp, #4]
 800bf06:	f640 7383 	movw	r3, #3971	; 0xf83
 800bf0a:	e4d5      	b.n	800b8b8 <mbedtls_ssl_read_record_layer+0x7c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 800bf0c:	4b14      	ldr	r3, [pc, #80]	; (800bf60 <mbedtls_ssl_read_record_layer+0x724>)
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4a10      	ldr	r2, [pc, #64]	; (800bf54 <mbedtls_ssl_read_record_layer+0x718>)
 800bf12:	f640 0329 	movw	r3, #2089	; 0x829
 800bf16:	2102      	movs	r1, #2
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7f9 fcff 	bl	800591c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 800bf1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bf20:	9302      	str	r3, [sp, #8]
 800bf22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <mbedtls_ssl_read_record_layer+0x728>)
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	4a0a      	ldr	r2, [pc, #40]	; (800bf54 <mbedtls_ssl_read_record_layer+0x718>)
 800bf2c:	f640 6393 	movw	r3, #3731	; 0xe93
 800bf30:	2104      	movs	r1, #4
 800bf32:	4620      	mov	r0, r4
 800bf34:	f7f9 fd50 	bl	80059d8 <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 800bf38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bf3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf3e:	f67f acc4 	bls.w	800b8ca <mbedtls_ssl_read_record_layer+0x8e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 800bf42:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <mbedtls_ssl_read_record_layer+0x72c>)
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	f640 6397 	movw	r3, #3735	; 0xe97
 800bf4a:	e502      	b.n	800b952 <mbedtls_ssl_read_record_layer+0x116>
 800bf4c:	08013e7c 	.word	0x08013e7c
 800bf50:	08014b12 	.word	0x08014b12
 800bf54:	08014fa0 	.word	0x08014fa0
 800bf58:	ffff9480 	.word	0xffff9480
 800bf5c:	080148d9 	.word	0x080148d9
 800bf60:	08014b36 	.word	0x08014b36
 800bf64:	08014b45 	.word	0x08014b45
 800bf68:	08014982 	.word	0x08014982

0800bf6c <mbedtls_ssl_read_record>:
{
 800bf6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 800bf6e:	4b25      	ldr	r3, [pc, #148]	; (800c004 <mbedtls_ssl_read_record+0x98>)
 800bf70:	9300      	str	r3, [sp, #0]
{
 800bf72:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 800bf74:	f640 63bf 	movw	r3, #3775	; 0xebf
 800bf78:	4a23      	ldr	r2, [pc, #140]	; (800c008 <mbedtls_ssl_read_record+0x9c>)
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	f7f9 fcce 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 800bf80:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bf84:	bb83      	cbnz	r3, 800bfe8 <mbedtls_ssl_read_record+0x7c>
            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 800bf86:	4620      	mov	r0, r4
 800bf88:	f7ff fc58 	bl	800b83c <mbedtls_ssl_read_record_layer>
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	b160      	cbz	r0, 800bfaa <mbedtls_ssl_read_record+0x3e>
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 800bf90:	4b1e      	ldr	r3, [pc, #120]	; (800c00c <mbedtls_ssl_read_record+0xa0>)
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	9001      	str	r0, [sp, #4]
 800bf96:	f640 63c7 	movw	r3, #3783	; 0xec7
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 800bf9a:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <mbedtls_ssl_read_record+0x9c>)
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7f9 fcec 	bl	800597c <mbedtls_debug_print_ret>
}
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	b003      	add	sp, #12
 800bfa8:	bd30      	pop	{r4, r5, pc}
            ret = mbedtls_ssl_handle_message_type( ssl );
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f7ff fb96 	bl	800b6dc <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 800bfb0:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 800bfb4:	4605      	mov	r5, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 800bfb6:	d0e6      	beq.n	800bf86 <mbedtls_ssl_read_record+0x1a>
        if( 0 != ret )
 800bfb8:	b128      	cbz	r0, 800bfc6 <mbedtls_ssl_read_record+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 800bfba:	4b14      	ldr	r3, [pc, #80]	; (800c00c <mbedtls_ssl_read_record+0xa0>)
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	9001      	str	r0, [sp, #4]
 800bfc0:	f640 63d1 	movw	r3, #3793	; 0xed1
 800bfc4:	e7e9      	b.n	800bf9a <mbedtls_ssl_read_record+0x2e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800bfc6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bfc8:	2b16      	cmp	r3, #22
 800bfca:	d102      	bne.n	800bfd2 <mbedtls_ssl_read_record+0x66>
            mbedtls_ssl_update_handshake_status( ssl );
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7ff fb75 	bl	800b6bc <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 800bfd2:	4b0f      	ldr	r3, [pc, #60]	; (800c010 <mbedtls_ssl_read_record+0xa4>)
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4a0c      	ldr	r2, [pc, #48]	; (800c008 <mbedtls_ssl_read_record+0x9c>)
 800bfd8:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 800bfdc:	2102      	movs	r1, #2
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f7f9 fc9c 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	e7dd      	b.n	800bfa4 <mbedtls_ssl_read_record+0x38>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <mbedtls_ssl_read_record+0xa8>)
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	4a06      	ldr	r2, [pc, #24]	; (800c008 <mbedtls_ssl_read_record+0x9c>)
 800bfee:	f640 63dc 	movw	r3, #3804	; 0xedc
 800bff2:	2102      	movs	r1, #2
 800bff4:	4620      	mov	r0, r4
 800bff6:	f7f9 fc91 	bl	800591c <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800c000:	e7e7      	b.n	800bfd2 <mbedtls_ssl_read_record+0x66>
 800c002:	bf00      	nop
 800c004:	08014860 	.word	0x08014860
 800c008:	08014fa0 	.word	0x08014fa0
 800c00c:	0801486f 	.word	0x0801486f
 800c010:	080148ae 	.word	0x080148ae
 800c014:	0801488d 	.word	0x0801488d

0800c018 <mbedtls_ssl_write_certificate>:
{
 800c018:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800c01c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800c01e:	4a5a      	ldr	r2, [pc, #360]	; (800c188 <mbedtls_ssl_write_certificate+0x170>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800c020:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800c022:	4b5a      	ldr	r3, [pc, #360]	; (800c18c <mbedtls_ssl_write_certificate+0x174>)
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	2102      	movs	r1, #2
 800c028:	f241 03a1 	movw	r3, #4257	; 0x10a1
{
 800c02c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 800c02e:	f7f9 fc75 	bl	800591c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800c032:	7aab      	ldrb	r3, [r5, #10]
 800c034:	2b0b      	cmp	r3, #11
 800c036:	d816      	bhi.n	800c066 <mbedtls_ssl_write_certificate+0x4e>
 800c038:	f44f 6516 	mov.w	r5, #2400	; 0x960
 800c03c:	40dd      	lsrs	r5, r3
 800c03e:	43ed      	mvns	r5, r5
 800c040:	f015 0501 	ands.w	r5, r5, #1
 800c044:	d10f      	bne.n	800c066 <mbedtls_ssl_write_certificate+0x4e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800c046:	4b52      	ldr	r3, [pc, #328]	; (800c190 <mbedtls_ssl_write_certificate+0x178>)
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	f241 03a8 	movw	r3, #4264	; 0x10a8
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800c04e:	4a4e      	ldr	r2, [pc, #312]	; (800c188 <mbedtls_ssl_write_certificate+0x170>)
 800c050:	2102      	movs	r1, #2
 800c052:	4620      	mov	r0, r4
 800c054:	f7f9 fc62 	bl	800591c <mbedtls_debug_print_msg>
            ssl->state++;
 800c058:	6863      	ldr	r3, [r4, #4]
 800c05a:	3301      	adds	r3, #1
 800c05c:	6063      	str	r3, [r4, #4]
}
 800c05e:	4628      	mov	r0, r5
 800c060:	b004      	add	sp, #16
 800c062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800c066:	6822      	ldr	r2, [r4, #0]
 800c068:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800c06c:	07db      	lsls	r3, r3, #31
 800c06e:	d407      	bmi.n	800c080 <mbedtls_ssl_write_certificate+0x68>
        if( ssl->client_auth == 0 )
 800c070:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800c074:	b925      	cbnz	r5, 800c080 <mbedtls_ssl_write_certificate+0x68>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 800c076:	4b46      	ldr	r3, [pc, #280]	; (800c190 <mbedtls_ssl_write_certificate+0x178>)
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	f241 03b2 	movw	r3, #4274	; 0x10b2
 800c07e:	e7e6      	b.n	800c04e <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800c080:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c082:	b10b      	cbz	r3, 800c088 <mbedtls_ssl_write_certificate+0x70>
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	b90b      	cbnz	r3, 800c08c <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 800c088:	6b93      	ldr	r3, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 800c08a:	b103      	cbz	r3, 800c08e <mbedtls_ssl_write_certificate+0x76>
 800c08c:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	4b40      	ldr	r3, [pc, #256]	; (800c194 <mbedtls_ssl_write_certificate+0x17c>)
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	4a3c      	ldr	r2, [pc, #240]	; (800c188 <mbedtls_ssl_write_certificate+0x170>)
 800c096:	f241 03d5 	movw	r3, #4309	; 0x10d5
 800c09a:	2103      	movs	r1, #3
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7f9 fd4b 	bl	8005b38 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 800c0a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0a4:	b10b      	cbz	r3, 800c0aa <mbedtls_ssl_write_certificate+0x92>
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	b91b      	cbnz	r3, 800c0b2 <mbedtls_ssl_write_certificate+0x9a>
        key_cert = ssl->conf->key_cert;
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d05d      	beq.n	800c16e <mbedtls_ssl_write_certificate+0x156>
 800c0b2:	681e      	ldr	r6, [r3, #0]
 800c0b4:	2207      	movs	r2, #7
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 800c0b6:	f640 77fd 	movw	r7, #4093	; 0xffd
    while( crt != NULL )
 800c0ba:	bb46      	cbnz	r6, 800c10e <mbedtls_ssl_write_certificate+0xf6>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 800c0bc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c0c0:	1fd3      	subs	r3, r2, #7
 800c0c2:	0c18      	lsrs	r0, r3, #16
 800c0c4:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 800c0c6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c0ca:	0a18      	lsrs	r0, r3, #8
 800c0cc:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 800c0ce:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c0d2:	718b      	strb	r3, [r1, #6]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800c0d4:	2316      	movs	r3, #22
 800c0d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 800c0da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = i;
 800c0de:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 800c0e2:	220b      	movs	r2, #11
 800c0e4:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 800c0e6:	6863      	ldr	r3, [r4, #4]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f7fe ffef 	bl	800b0d0 <mbedtls_ssl_write_record>
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d03c      	beq.n	800c172 <mbedtls_ssl_write_certificate+0x15a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800c0f8:	4b27      	ldr	r3, [pc, #156]	; (800c198 <mbedtls_ssl_write_certificate+0x180>)
 800c0fa:	9001      	str	r0, [sp, #4]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	4a22      	ldr	r2, [pc, #136]	; (800c188 <mbedtls_ssl_write_certificate+0x170>)
 800c100:	f241 1305 	movw	r3, #4357	; 0x1105
 800c104:	2101      	movs	r1, #1
 800c106:	4620      	mov	r0, r4
 800c108:	f7f9 fc38 	bl	800597c <mbedtls_debug_print_ret>
        return( ret );
 800c10c:	e7a7      	b.n	800c05e <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 800c10e:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 800c110:	1abb      	subs	r3, r7, r2
 800c112:	429d      	cmp	r5, r3
 800c114:	d910      	bls.n	800c138 <mbedtls_ssl_write_certificate+0x120>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 800c116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c11a:	442a      	add	r2, r5
 800c11c:	9302      	str	r3, [sp, #8]
 800c11e:	3203      	adds	r2, #3
 800c120:	4b1e      	ldr	r3, [pc, #120]	; (800c19c <mbedtls_ssl_write_certificate+0x184>)
 800c122:	9201      	str	r2, [sp, #4]
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	4a18      	ldr	r2, [pc, #96]	; (800c188 <mbedtls_ssl_write_certificate+0x170>)
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 800c128:	4d1d      	ldr	r5, [pc, #116]	; (800c1a0 <mbedtls_ssl_write_certificate+0x188>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 800c12a:	f241 03e9 	movw	r3, #4329	; 0x10e9
 800c12e:	2101      	movs	r1, #1
 800c130:	4620      	mov	r0, r4
 800c132:	f7f9 fbf3 	bl	800591c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 800c136:	e792      	b.n	800c05e <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 800c138:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c13c:	0c29      	lsrs	r1, r5, #16
 800c13e:	5499      	strb	r1, [r3, r2]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 800c140:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c144:	4413      	add	r3, r2
 800c146:	0a29      	lsrs	r1, r5, #8
 800c148:	7059      	strb	r1, [r3, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 800c14a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c14e:	4413      	add	r3, r2
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 800c150:	f102 0803 	add.w	r8, r2, #3
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 800c154:	709d      	strb	r5, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 800c156:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800c15a:	68b1      	ldr	r1, [r6, #8]
 800c15c:	462a      	mov	r2, r5
 800c15e:	4440      	add	r0, r8
 800c160:	f002 fe7d 	bl	800ee5e <memcpy>
        i += n; crt = crt->next;
 800c164:	eb05 0208 	add.w	r2, r5, r8
 800c168:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800c16c:	e7a5      	b.n	800c0ba <mbedtls_ssl_write_certificate+0xa2>
 800c16e:	2207      	movs	r2, #7
 800c170:	e7a4      	b.n	800c0bc <mbedtls_ssl_write_certificate+0xa4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 800c172:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <mbedtls_ssl_write_certificate+0x18c>)
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4a04      	ldr	r2, [pc, #16]	; (800c188 <mbedtls_ssl_write_certificate+0x170>)
 800c178:	f241 1309 	movw	r3, #4361	; 0x1109
 800c17c:	2102      	movs	r1, #2
 800c17e:	4620      	mov	r0, r4
 800c180:	f7f9 fbcc 	bl	800591c <mbedtls_debug_print_msg>
    return( ret );
 800c184:	e76b      	b.n	800c05e <mbedtls_ssl_write_certificate+0x46>
 800c186:	bf00      	nop
 800c188:	08014fa0 	.word	0x08014fa0
 800c18c:	08014bbe 	.word	0x08014bbe
 800c190:	08014bd3 	.word	0x08014bd3
 800c194:	08014bed 	.word	0x08014bed
 800c198:	08013ade 	.word	0x08013ade
 800c19c:	08014bfd 	.word	0x08014bfd
 800c1a0:	ffff8b00 	.word	0xffff8b00
 800c1a4:	08014c1c 	.word	0x08014c1c

0800c1a8 <mbedtls_ssl_parse_certificate>:
{
 800c1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800c1ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800c1ae:	4a9c      	ldr	r2, [pc, #624]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 800c1b0:	681d      	ldr	r5, [r3, #0]
    int authmode = ssl->conf->authmode;
 800c1b2:	6803      	ldr	r3, [r0, #0]
{
 800c1b4:	b085      	sub	sp, #20
    int authmode = ssl->conf->authmode;
 800c1b6:	f893 6050 	ldrb.w	r6, [r3, #80]	; 0x50
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800c1ba:	4b9a      	ldr	r3, [pc, #616]	; (800c424 <mbedtls_ssl_parse_certificate+0x27c>)
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	2102      	movs	r1, #2
 800c1c0:	f241 1316 	movw	r3, #4374	; 0x1116
{
 800c1c4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 800c1c6:	f7f9 fba9 	bl	800591c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800c1ca:	7aab      	ldrb	r3, [r5, #10]
 800c1cc:	2b0b      	cmp	r3, #11
    int authmode = ssl->conf->authmode;
 800c1ce:	f3c6 0681 	ubfx	r6, r6, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 800c1d2:	d816      	bhi.n	800c202 <mbedtls_ssl_parse_certificate+0x5a>
 800c1d4:	f44f 6516 	mov.w	r5, #2400	; 0x960
 800c1d8:	40dd      	lsrs	r5, r3
 800c1da:	43ed      	mvns	r5, r5
 800c1dc:	f015 0501 	ands.w	r5, r5, #1
 800c1e0:	d10f      	bne.n	800c202 <mbedtls_ssl_parse_certificate+0x5a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 800c1e2:	4b91      	ldr	r3, [pc, #580]	; (800c428 <mbedtls_ssl_parse_certificate+0x280>)
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	4a8e      	ldr	r2, [pc, #568]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c1e8:	f241 131d 	movw	r3, #4381	; 0x111d
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7f9 fb94 	bl	800591c <mbedtls_debug_print_msg>
        ssl->state++;
 800c1f4:	6863      	ldr	r3, [r4, #4]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	6063      	str	r3, [r4, #4]
}
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	b005      	add	sp, #20
 800c1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800c202:	4620      	mov	r0, r4
 800c204:	f7ff feb2 	bl	800bf6c <mbedtls_ssl_read_record>
 800c208:	4607      	mov	r7, r0
 800c20a:	b158      	cbz	r0, 800c224 <mbedtls_ssl_parse_certificate+0x7c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800c20c:	4b87      	ldr	r3, [pc, #540]	; (800c42c <mbedtls_ssl_parse_certificate+0x284>)
 800c20e:	9001      	str	r0, [sp, #4]
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	4a83      	ldr	r2, [pc, #524]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c214:	f241 133e 	movw	r3, #4414	; 0x113e
 800c218:	2101      	movs	r1, #1
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7f9 fbae 	bl	800597c <mbedtls_debug_print_ret>
    return( ret );
 800c220:	463d      	mov	r5, r7
 800c222:	e7ea      	b.n	800c1fa <mbedtls_ssl_parse_certificate+0x52>
    ssl->state++;
 800c224:	6863      	ldr	r3, [r4, #4]
 800c226:	3301      	adds	r3, #1
 800c228:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800c22a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c22c:	2b16      	cmp	r3, #22
 800c22e:	d00f      	beq.n	800c250 <mbedtls_ssl_parse_certificate+0xa8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c230:	4b7f      	ldr	r3, [pc, #508]	; (800c430 <mbedtls_ssl_parse_certificate+0x288>)
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4a7a      	ldr	r2, [pc, #488]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c236:	4d7f      	ldr	r5, [pc, #508]	; (800c434 <mbedtls_ssl_parse_certificate+0x28c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c238:	f241 137b 	movw	r3, #4475	; 0x117b
 800c23c:	2101      	movs	r1, #1
 800c23e:	4620      	mov	r0, r4
 800c240:	f7f9 fb6c 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c244:	220a      	movs	r2, #10
 800c246:	2102      	movs	r1, #2
 800c248:	4620      	mov	r0, r4
 800c24a:	f7ff faa3 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c24e:	e7d4      	b.n	800c1fa <mbedtls_ssl_parse_certificate+0x52>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 800c250:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c252:	7813      	ldrb	r3, [r2, #0]
 800c254:	2b0b      	cmp	r3, #11
 800c256:	d102      	bne.n	800c25e <mbedtls_ssl_parse_certificate+0xb6>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 800c258:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 800c25a:	2909      	cmp	r1, #9
 800c25c:	d80f      	bhi.n	800c27e <mbedtls_ssl_parse_certificate+0xd6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c25e:	4b74      	ldr	r3, [pc, #464]	; (800c430 <mbedtls_ssl_parse_certificate+0x288>)
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	f241 1384 	movw	r3, #4484	; 0x1184
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c266:	4a6e      	ldr	r2, [pc, #440]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 800c268:	4d73      	ldr	r5, [pc, #460]	; (800c438 <mbedtls_ssl_parse_certificate+0x290>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c26a:	2101      	movs	r1, #1
 800c26c:	4620      	mov	r0, r4
 800c26e:	f7f9 fb55 	bl	800591c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c272:	2232      	movs	r2, #50	; 0x32
 800c274:	2102      	movs	r1, #2
 800c276:	4620      	mov	r0, r4
 800c278:	f7ff fa8c 	bl	800b794 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 800c27c:	e7bd      	b.n	800c1fa <mbedtls_ssl_parse_certificate+0x52>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 800c27e:	7950      	ldrb	r0, [r2, #5]
 800c280:	7993      	ldrb	r3, [r2, #6]
    if( ssl->in_msg[i] != 0 ||
 800c282:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 800c284:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    if( ssl->in_msg[i] != 0 ||
 800c288:	b912      	cbnz	r2, 800c290 <mbedtls_ssl_parse_certificate+0xe8>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 800c28a:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 800c28c:	4299      	cmp	r1, r3
 800c28e:	d004      	beq.n	800c29a <mbedtls_ssl_parse_certificate+0xf2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c290:	4b67      	ldr	r3, [pc, #412]	; (800c430 <mbedtls_ssl_parse_certificate+0x288>)
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	f241 1394 	movw	r3, #4500	; 0x1194
 800c298:	e7e5      	b.n	800c266 <mbedtls_ssl_parse_certificate+0xbe>
    if( ssl->session_negotiate->peer_cert != NULL )
 800c29a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c29c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800c29e:	b128      	cbz	r0, 800c2ac <mbedtls_ssl_parse_certificate+0x104>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 800c2a0:	f002 f96d 	bl	800e57e <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 800c2a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2a6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800c2a8:	f002 fdc2 	bl	800ee30 <free>
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 800c2ac:	f44f 719a 	mov.w	r1, #308	; 0x134
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800c2b4:	f002 fd82 	bl	800edbc <calloc>
 800c2b8:	65e8      	str	r0, [r5, #92]	; 0x5c
 800c2ba:	b990      	cbnz	r0, 800c2e2 <mbedtls_ssl_parse_certificate+0x13a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 800c2bc:	f44f 739a 	mov.w	r3, #308	; 0x134
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	4b5e      	ldr	r3, [pc, #376]	; (800c43c <mbedtls_ssl_parse_certificate+0x294>)
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	4a56      	ldr	r2, [pc, #344]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800c2c8:	4d5d      	ldr	r5, [pc, #372]	; (800c440 <mbedtls_ssl_parse_certificate+0x298>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 800c2ca:	f241 13a5 	movw	r3, #4517	; 0x11a5
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f7f9 fb23 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c2d6:	2250      	movs	r2, #80	; 0x50
 800c2d8:	2102      	movs	r1, #2
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff fa5a 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800c2e0:	e78b      	b.n	800c1fa <mbedtls_ssl_parse_certificate+0x52>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 800c2e2:	f002 f947 	bl	800e574 <mbedtls_x509_crt_init>
        switch( ret )
 800c2e6:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800c458 <mbedtls_ssl_parse_certificate+0x2b0>
    while( i < ssl->in_hslen )
 800c2ea:	2500      	movs	r5, #0
    i += 3;
 800c2ec:	f04f 0807 	mov.w	r8, #7
    while( i < ssl->in_hslen )
 800c2f0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c2f2:	4598      	cmp	r8, r3
 800c2f4:	d351      	bcc.n	800c39a <mbedtls_ssl_parse_certificate+0x1f2>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 800c2f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2f8:	4a49      	ldr	r2, [pc, #292]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c2fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	4b51      	ldr	r3, [pc, #324]	; (800c444 <mbedtls_ssl_parse_certificate+0x29c>)
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	2103      	movs	r1, #3
 800c304:	f241 13e2 	movw	r3, #4578	; 0x11e2
 800c308:	4620      	mov	r0, r4
 800c30a:	f7f9 fc15 	bl	8005b38 <mbedtls_debug_print_crt>
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 800c30e:	2e00      	cmp	r6, #0
 800c310:	f000 80e2 	beq.w	800c4d8 <mbedtls_ssl_parse_certificate+0x330>
            ca_chain = ssl->conf->ca_chain;
 800c314:	6822      	ldr	r2, [r4, #0]
                                ssl->session_negotiate->peer_cert,
 800c316:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_with_profile(
 800c318:	6b13      	ldr	r3, [r2, #48]	; 0x30
            ca_chain = ssl->conf->ca_chain;
 800c31a:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
        ret = mbedtls_x509_crt_verify_with_profile(
 800c31e:	9303      	str	r3, [sp, #12]
 800c320:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c322:	9302      	str	r3, [sp, #8]
 800c324:	f100 0360 	add.w	r3, r0, #96	; 0x60
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c332:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800c334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c336:	4641      	mov	r1, r8
 800c338:	f002 f83e 	bl	800e3b8 <mbedtls_x509_crt_verify_with_profile>
        if( ret != 0 )
 800c33c:	4605      	mov	r5, r0
 800c33e:	b148      	cbz	r0, 800c354 <mbedtls_ssl_parse_certificate+0x1ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 800c340:	4b41      	ldr	r3, [pc, #260]	; (800c448 <mbedtls_ssl_parse_certificate+0x2a0>)
 800c342:	9001      	str	r0, [sp, #4]
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	4a36      	ldr	r2, [pc, #216]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c348:	f241 2321 	movw	r3, #4641	; 0x1221
 800c34c:	2101      	movs	r1, #1
 800c34e:	4620      	mov	r0, r4
 800c350:	f7f9 fb14 	bl	800597c <mbedtls_debug_print_ret>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 800c354:	2e01      	cmp	r6, #1
 800c356:	f040 8081 	bne.w	800c45c <mbedtls_ssl_parse_certificate+0x2b4>
 800c35a:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 800c35e:	d003      	beq.n	800c368 <mbedtls_ssl_parse_certificate+0x1c0>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 800c360:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 800c364:	f040 80a0 	bne.w	800c4a8 <mbedtls_ssl_parse_certificate+0x300>
        if( ssl->session_negotiate->verify_result != 0 )
 800c368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c36a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80a9 	beq.w	800c4c4 <mbedtls_ssl_parse_certificate+0x31c>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	4b35      	ldr	r3, [pc, #212]	; (800c44c <mbedtls_ssl_parse_certificate+0x2a4>)
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	4a29      	ldr	r2, [pc, #164]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c37a:	f241 2379 	movw	r3, #4729	; 0x1279
 800c37e:	2103      	movs	r1, #3
 800c380:	4620      	mov	r0, r4
 800c382:	f7f9 facb 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 800c386:	4b32      	ldr	r3, [pc, #200]	; (800c450 <mbedtls_ssl_parse_certificate+0x2a8>)
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	4a25      	ldr	r2, [pc, #148]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c38c:	f241 2382 	movw	r3, #4738	; 0x1282
 800c390:	2102      	movs	r1, #2
 800c392:	4620      	mov	r0, r4
 800c394:	f7f9 fac2 	bl	800591c <mbedtls_debug_print_msg>
 800c398:	e742      	b.n	800c220 <mbedtls_ssl_parse_certificate+0x78>
        if( ssl->in_msg[i] != 0 )
 800c39a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c39c:	f811 2008 	ldrb.w	r2, [r1, r8]
 800c3a0:	b122      	cbz	r2, 800c3ac <mbedtls_ssl_parse_certificate+0x204>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c3a2:	4b23      	ldr	r3, [pc, #140]	; (800c430 <mbedtls_ssl_parse_certificate+0x288>)
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	f241 13b3 	movw	r3, #4531	; 0x11b3
 800c3aa:	e75c      	b.n	800c266 <mbedtls_ssl_parse_certificate+0xbe>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 800c3ac:	eb01 0008 	add.w	r0, r1, r8
 800c3b0:	7845      	ldrb	r5, [r0, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 800c3b2:	7882      	ldrb	r2, [r0, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 800c3b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 800c3b8:	2a7f      	cmp	r2, #127	; 0x7f
        i += 3;
 800c3ba:	f108 0003 	add.w	r0, r8, #3
        if( n < 128 || i + n > ssl->in_hslen )
 800c3be:	d903      	bls.n	800c3c8 <mbedtls_ssl_parse_certificate+0x220>
 800c3c0:	eb02 0800 	add.w	r8, r2, r0
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	d204      	bcs.n	800c3d2 <mbedtls_ssl_parse_certificate+0x22a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 800c3c8:	4b19      	ldr	r3, [pc, #100]	; (800c430 <mbedtls_ssl_parse_certificate+0x288>)
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	f241 13bf 	movw	r3, #4543	; 0x11bf
 800c3d0:	e749      	b.n	800c266 <mbedtls_ssl_parse_certificate+0xbe>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 800c3d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c3d4:	4401      	add	r1, r0
 800c3d6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800c3d8:	f002 f92c 	bl	800e634 <mbedtls_x509_crt_parse_der>
        switch( ret )
 800c3dc:	4548      	cmp	r0, r9
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 800c3de:	4605      	mov	r5, r0
        switch( ret )
 800c3e0:	d086      	beq.n	800c2f0 <mbedtls_ssl_parse_certificate+0x148>
 800c3e2:	dc04      	bgt.n	800c3ee <mbedtls_ssl_parse_certificate+0x246>
 800c3e4:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 800c3e8:	d018      	beq.n	800c41c <mbedtls_ssl_parse_certificate+0x274>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 800c3ea:	222a      	movs	r2, #42	; 0x2a
 800c3ec:	e007      	b.n	800c3fe <mbedtls_ssl_parse_certificate+0x256>
        switch( ret )
 800c3ee:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 800c3f2:	d003      	beq.n	800c3fc <mbedtls_ssl_parse_certificate+0x254>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	f43f af7b 	beq.w	800c2f0 <mbedtls_ssl_parse_certificate+0x148>
 800c3fa:	e7f6      	b.n	800c3ea <mbedtls_ssl_parse_certificate+0x242>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 800c3fc:	222b      	movs	r2, #43	; 0x2b
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 800c3fe:	2102      	movs	r1, #2
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff f9c7 	bl	800b794 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 800c406:	4b13      	ldr	r3, [pc, #76]	; (800c454 <mbedtls_ssl_parse_certificate+0x2ac>)
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	9501      	str	r5, [sp, #4]
 800c40c:	f241 13db 	movw	r3, #4571	; 0x11db
 800c410:	4a03      	ldr	r2, [pc, #12]	; (800c420 <mbedtls_ssl_parse_certificate+0x278>)
 800c412:	2101      	movs	r1, #1
 800c414:	4620      	mov	r0, r4
 800c416:	f7f9 fab1 	bl	800597c <mbedtls_debug_print_ret>
            return( ret );
 800c41a:	e6ee      	b.n	800c1fa <mbedtls_ssl_parse_certificate+0x52>
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 800c41c:	2250      	movs	r2, #80	; 0x50
 800c41e:	e7ee      	b.n	800c3fe <mbedtls_ssl_parse_certificate+0x256>
 800c420:	08014fa0 	.word	0x08014fa0
 800c424:	08014546 	.word	0x08014546
 800c428:	0801455b 	.word	0x0801455b
 800c42c:	08013b23 	.word	0x08013b23
 800c430:	08014575 	.word	0x08014575
 800c434:	ffff8900 	.word	0xffff8900
 800c438:	ffff8600 	.word	0xffff8600
 800c43c:	0801458d 	.word	0x0801458d
 800c440:	ffff8100 	.word	0xffff8100
 800c444:	080145c0 	.word	0x080145c0
 800c448:	080145d1 	.word	0x080145d1
 800c44c:	080145f2 	.word	0x080145f2
 800c450:	0801463b 	.word	0x0801463b
 800c454:	080145a4 	.word	0x080145a4
 800c458:	ffffd9d2 	.word	0xffffd9d2
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 800c45c:	f1b8 0f00 	cmp.w	r8, #0
 800c460:	d122      	bne.n	800c4a8 <mbedtls_ssl_parse_certificate+0x300>
 800c462:	2e02      	cmp	r6, #2
 800c464:	d120      	bne.n	800c4a8 <mbedtls_ssl_parse_certificate+0x300>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 800c466:	4b1d      	ldr	r3, [pc, #116]	; (800c4dc <mbedtls_ssl_parse_certificate+0x334>)
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	4a1d      	ldr	r2, [pc, #116]	; (800c4e0 <mbedtls_ssl_parse_certificate+0x338>)
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 800c46c:	4d1d      	ldr	r5, [pc, #116]	; (800c4e4 <mbedtls_ssl_parse_certificate+0x33c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 800c46e:	f241 2352 	movw	r3, #4690	; 0x1252
 800c472:	2101      	movs	r1, #1
 800c474:	4620      	mov	r0, r4
 800c476:	f7f9 fa51 	bl	800591c <mbedtls_debug_print_msg>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 800c47a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c47e:	05df      	lsls	r7, r3, #23
 800c480:	d416      	bmi.n	800c4b0 <mbedtls_ssl_parse_certificate+0x308>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 800c482:	075e      	lsls	r6, r3, #29
 800c484:	d416      	bmi.n	800c4b4 <mbedtls_ssl_parse_certificate+0x30c>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 800c486:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 800c48a:	d115      	bne.n	800c4b8 <mbedtls_ssl_parse_certificate+0x310>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 800c48c:	07d8      	lsls	r0, r3, #31
 800c48e:	d415      	bmi.n	800c4bc <mbedtls_ssl_parse_certificate+0x314>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 800c490:	0799      	lsls	r1, r3, #30
 800c492:	d415      	bmi.n	800c4c0 <mbedtls_ssl_parse_certificate+0x318>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 800c494:	f013 0f08 	tst.w	r3, #8
 800c498:	bf14      	ite	ne
 800c49a:	2230      	movne	r2, #48	; 0x30
 800c49c:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c49e:	2102      	movs	r1, #2
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f7ff f977 	bl	800b794 <mbedtls_ssl_send_alert_message>
 800c4a6:	e001      	b.n	800c4ac <mbedtls_ssl_parse_certificate+0x304>
        if( ret != 0 )
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	d1e6      	bne.n	800c47a <mbedtls_ssl_parse_certificate+0x2d2>
 800c4ac:	462f      	mov	r7, r5
 800c4ae:	e75b      	b.n	800c368 <mbedtls_ssl_parse_certificate+0x1c0>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 800c4b0:	2231      	movs	r2, #49	; 0x31
 800c4b2:	e7f4      	b.n	800c49e <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 800c4b4:	222a      	movs	r2, #42	; 0x2a
 800c4b6:	e7f2      	b.n	800c49e <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 800c4b8:	222b      	movs	r2, #43	; 0x2b
 800c4ba:	e7f0      	b.n	800c49e <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 800c4bc:	222d      	movs	r2, #45	; 0x2d
 800c4be:	e7ee      	b.n	800c49e <mbedtls_ssl_parse_certificate+0x2f6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 800c4c0:	222c      	movs	r2, #44	; 0x2c
 800c4c2:	e7ec      	b.n	800c49e <mbedtls_ssl_parse_certificate+0x2f6>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 800c4c4:	4b08      	ldr	r3, [pc, #32]	; (800c4e8 <mbedtls_ssl_parse_certificate+0x340>)
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	4a05      	ldr	r2, [pc, #20]	; (800c4e0 <mbedtls_ssl_parse_certificate+0x338>)
 800c4ca:	f241 237d 	movw	r3, #4733	; 0x127d
 800c4ce:	2103      	movs	r1, #3
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f7f9 fa23 	bl	800591c <mbedtls_debug_print_msg>
 800c4d6:	e756      	b.n	800c386 <mbedtls_ssl_parse_certificate+0x1de>
 800c4d8:	462f      	mov	r7, r5
 800c4da:	e754      	b.n	800c386 <mbedtls_ssl_parse_certificate+0x1de>
 800c4dc:	080145e2 	.word	0x080145e2
 800c4e0:	08014fa0 	.word	0x08014fa0
 800c4e4:	ffff8980 	.word	0xffff8980
 800c4e8:	08014616 	.word	0x08014616

0800c4ec <mbedtls_ssl_write_change_cipher_spec>:
{
 800c4ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 800c4ee:	4b18      	ldr	r3, [pc, #96]	; (800c550 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 800c4f0:	9300      	str	r3, [sp, #0]
{
 800c4f2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 800c4f4:	f241 2392 	movw	r3, #4754	; 0x1292
 800c4f8:	4a16      	ldr	r2, [pc, #88]	; (800c554 <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800c4fa:	2102      	movs	r1, #2
 800c4fc:	f7f9 fa0e 	bl	800591c <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 800c500:	2314      	movs	r3, #20
 800c502:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = 1;
 800c506:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = 1;
 800c50a:	2601      	movs	r6, #1
 800c50c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 800c510:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 800c512:	6863      	ldr	r3, [r4, #4]
 800c514:	4433      	add	r3, r6
 800c516:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800c518:	4620      	mov	r0, r4
 800c51a:	f7fe fdd9 	bl	800b0d0 <mbedtls_ssl_write_record>
 800c51e:	4605      	mov	r5, r0
 800c520:	b160      	cbz	r0, 800c53c <mbedtls_ssl_write_change_cipher_spec+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800c522:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 800c524:	9001      	str	r0, [sp, #4]
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	4a0a      	ldr	r2, [pc, #40]	; (800c554 <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800c52a:	f241 239c 	movw	r3, #4764	; 0x129c
 800c52e:	4631      	mov	r1, r6
 800c530:	4620      	mov	r0, r4
 800c532:	f7f9 fa23 	bl	800597c <mbedtls_debug_print_ret>
}
 800c536:	4628      	mov	r0, r5
 800c538:	b002      	add	sp, #8
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 800c53c:	4b07      	ldr	r3, [pc, #28]	; (800c55c <mbedtls_ssl_write_change_cipher_spec+0x70>)
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	4a04      	ldr	r2, [pc, #16]	; (800c554 <mbedtls_ssl_write_change_cipher_spec+0x68>)
 800c542:	f44f 5395 	mov.w	r3, #4768	; 0x12a0
 800c546:	2102      	movs	r1, #2
 800c548:	4620      	mov	r0, r4
 800c54a:	f7f9 f9e7 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800c54e:	e7f2      	b.n	800c536 <mbedtls_ssl_write_change_cipher_spec+0x4a>
 800c550:	08014c31 	.word	0x08014c31
 800c554:	08014fa0 	.word	0x08014fa0
 800c558:	08013ade 	.word	0x08013ade
 800c55c:	08014c4d 	.word	0x08014c4d

0800c560 <mbedtls_ssl_parse_change_cipher_spec>:
{
 800c560:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 800c562:	4b36      	ldr	r3, [pc, #216]	; (800c63c <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 800c564:	9300      	str	r3, [sp, #0]
{
 800c566:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 800c568:	f241 23a9 	movw	r3, #4777	; 0x12a9
 800c56c:	4a34      	ldr	r2, [pc, #208]	; (800c640 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 800c56e:	2102      	movs	r1, #2
 800c570:	f7f9 f9d4 	bl	800591c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800c574:	4620      	mov	r0, r4
 800c576:	f7ff fcf9 	bl	800bf6c <mbedtls_ssl_read_record>
 800c57a:	4605      	mov	r5, r0
 800c57c:	b160      	cbz	r0, 800c598 <mbedtls_ssl_parse_change_cipher_spec+0x38>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800c57e:	4b31      	ldr	r3, [pc, #196]	; (800c644 <mbedtls_ssl_parse_change_cipher_spec+0xe4>)
 800c580:	9001      	str	r0, [sp, #4]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	4a2e      	ldr	r2, [pc, #184]	; (800c640 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 800c586:	f241 23ad 	movw	r3, #4781	; 0x12ad
 800c58a:	2101      	movs	r1, #1
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7f9 f9f5 	bl	800597c <mbedtls_debug_print_ret>
}
 800c592:	4628      	mov	r0, r5
 800c594:	b003      	add	sp, #12
 800c596:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 800c598:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c59a:	2b14      	cmp	r3, #20
 800c59c:	d00f      	beq.n	800c5be <mbedtls_ssl_parse_change_cipher_spec+0x5e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800c59e:	4b2a      	ldr	r3, [pc, #168]	; (800c648 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	4a27      	ldr	r2, [pc, #156]	; (800c640 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c5a4:	4d29      	ldr	r5, [pc, #164]	; (800c64c <mbedtls_ssl_parse_change_cipher_spec+0xec>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800c5a6:	f241 23b3 	movw	r3, #4787	; 0x12b3
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f7f9 f9b5 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c5b2:	220a      	movs	r2, #10
 800c5b4:	2102      	movs	r1, #2
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7ff f8ec 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c5bc:	e7e9      	b.n	800c592 <mbedtls_ssl_parse_change_cipher_spec+0x32>
    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 800c5be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d103      	bne.n	800c5cc <mbedtls_ssl_parse_change_cipher_spec+0x6c>
 800c5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d00f      	beq.n	800c5ec <mbedtls_ssl_parse_change_cipher_spec+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800c5cc:	4b1e      	ldr	r3, [pc, #120]	; (800c648 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	4a1b      	ldr	r2, [pc, #108]	; (800c640 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 800c5d2:	4d1f      	ldr	r5, [pc, #124]	; (800c650 <mbedtls_ssl_parse_change_cipher_spec+0xf0>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 800c5d4:	f241 23bb 	movw	r3, #4795	; 0x12bb
 800c5d8:	2101      	movs	r1, #1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f7f9 f99e 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c5e0:	2232      	movs	r2, #50	; 0x32
 800c5e2:	2102      	movs	r1, #2
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f7ff f8d5 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 800c5ea:	e7d2      	b.n	800c592 <mbedtls_ssl_parse_change_cipher_spec+0x32>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 800c5ec:	4b19      	ldr	r3, [pc, #100]	; (800c654 <mbedtls_ssl_parse_change_cipher_spec+0xf4>)
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4a13      	ldr	r2, [pc, #76]	; (800c640 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 800c5f2:	f241 23c5 	movw	r3, #4805	; 0x12c5
 800c5f6:	2103      	movs	r1, #3
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f7f9 f98f 	bl	800591c <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 800c5fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c600:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 800c602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c604:	6223      	str	r3, [r4, #32]
    memset( ssl->in_ctr, 0, 8 );
 800c606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c608:	601d      	str	r5, [r3, #0]
 800c60a:	605d      	str	r5, [r3, #4]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800c60c:	68e3      	ldr	r3, [r4, #12]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c612:	dd04      	ble.n	800c61e <mbedtls_ssl_parse_change_cipher_spec+0xbe>
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 800c614:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c616:	68ca      	ldr	r2, [r1, #12]
 800c618:	6909      	ldr	r1, [r1, #16]
 800c61a:	1a52      	subs	r2, r2, r1
 800c61c:	4413      	add	r3, r2
        ssl->in_msg = ssl->in_iv;
 800c61e:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->state++;
 800c620:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 800c622:	4a07      	ldr	r2, [pc, #28]	; (800c640 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
    ssl->state++;
 800c624:	3301      	adds	r3, #1
 800c626:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 800c628:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <mbedtls_ssl_parse_change_cipher_spec+0xf8>)
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	2102      	movs	r1, #2
 800c62e:	f241 23f7 	movw	r3, #4855	; 0x12f7
 800c632:	4620      	mov	r0, r4
 800c634:	f7f9 f972 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800c638:	e7ab      	b.n	800c592 <mbedtls_ssl_parse_change_cipher_spec+0x32>
 800c63a:	bf00      	nop
 800c63c:	08014650 	.word	0x08014650
 800c640:	08014fa0 	.word	0x08014fa0
 800c644:	08013b23 	.word	0x08013b23
 800c648:	0801466c 	.word	0x0801466c
 800c64c:	ffff8900 	.word	0xffff8900
 800c650:	ffff8200 	.word	0xffff8200
 800c654:	0801468b 	.word	0x0801468b
 800c658:	080146bc 	.word	0x080146bc

0800c65c <mbedtls_ssl_optimize_checksum>:
{
 800c65c:	b507      	push	{r0, r1, r2, lr}
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
 800c65e:	7a4a      	ldrb	r2, [r1, #9]
 800c660:	2a07      	cmp	r2, #7
 800c662:	d005      	beq.n	800c670 <mbedtls_ssl_optimize_checksum+0x14>
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 800c664:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c666:	4a07      	ldr	r2, [pc, #28]	; (800c684 <mbedtls_ssl_optimize_checksum+0x28>)
 800c668:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c66a:	b003      	add	sp, #12
 800c66c:	f85d fb04 	ldr.w	pc, [sp], #4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800c670:	4b05      	ldr	r3, [pc, #20]	; (800c688 <mbedtls_ssl_optimize_checksum+0x2c>)
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	4a05      	ldr	r2, [pc, #20]	; (800c68c <mbedtls_ssl_optimize_checksum+0x30>)
 800c676:	f241 3314 	movw	r3, #4884	; 0x1314
 800c67a:	2101      	movs	r1, #1
 800c67c:	f7f9 f94e 	bl	800591c <mbedtls_debug_print_msg>
        return;
 800c680:	e7f3      	b.n	800c66a <mbedtls_ssl_optimize_checksum+0xe>
 800c682:	bf00      	nop
 800c684:	0800a8b1 	.word	0x0800a8b1
 800c688:	08013e7c 	.word	0x08013e7c
 800c68c:	08014fa0 	.word	0x08014fa0

0800c690 <mbedtls_ssl_write_finished>:
{
 800c690:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 800c692:	4b35      	ldr	r3, [pc, #212]	; (800c768 <mbedtls_ssl_write_finished+0xd8>)
 800c694:	9300      	str	r3, [sp, #0]
{
 800c696:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 800c698:	f241 43a7 	movw	r3, #5287	; 0x14a7
 800c69c:	4a33      	ldr	r2, [pc, #204]	; (800c76c <mbedtls_ssl_write_finished+0xdc>)
 800c69e:	2102      	movs	r1, #2
 800c6a0:	f7f9 f93c 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 800c6a4:	68e3      	ldr	r3, [r4, #12]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c6ac:	dd04      	ble.n	800c6b8 <mbedtls_ssl_write_finished+0x28>
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 800c6ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c6b0:	68ca      	ldr	r2, [r1, #12]
 800c6b2:	6909      	ldr	r1, [r1, #16]
 800c6b4:	1a52      	subs	r2, r2, r1
 800c6b6:	4413      	add	r3, r2
        ssl->out_msg = ssl->out_iv;
 800c6b8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c6c2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800c6c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c6c8:	f002 0201 	and.w	r2, r2, #1
 800c6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ce:	3104      	adds	r1, #4
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 800c6d4:	68e3      	ldr	r3, [r4, #12]
 800c6d6:	2b00      	cmp	r3, #0
    ssl->out_msglen  = 4 + hash_len;
 800c6d8:	bf14      	ite	ne
 800c6da:	2310      	movne	r3, #16
 800c6dc:	2328      	moveq	r3, #40	; 0x28
 800c6de:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 800c6e2:	2316      	movs	r3, #22
 800c6e4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 800c6e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c6ec:	2214      	movs	r2, #20
 800c6ee:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
 800c6f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c6f2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c6f6:	b353      	cbz	r3, 800c74e <mbedtls_ssl_write_finished+0xbe>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c6fe:	07db      	lsls	r3, r3, #31
 800c700:	d401      	bmi.n	800c706 <mbedtls_ssl_write_finished+0x76>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 800c702:	230f      	movs	r3, #15
        ssl->state++;
 800c704:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 800c706:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <mbedtls_ssl_write_finished+0xe0>)
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	4a18      	ldr	r2, [pc, #96]	; (800c76c <mbedtls_ssl_write_finished+0xdc>)
 800c70c:	f241 43dd 	movw	r3, #5341	; 0x14dd
 800c710:	2103      	movs	r1, #3
 800c712:	4620      	mov	r0, r4
 800c714:	f7f9 f902 	bl	800591c <mbedtls_debug_print_msg>
    memset( ssl->out_ctr, 0, 8 );
 800c718:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	605a      	str	r2, [r3, #4]
    ssl->transform_out = ssl->transform_negotiate;
 800c722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c724:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 800c726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c728:	6263      	str	r3, [r4, #36]	; 0x24
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7fe fcd0 	bl	800b0d0 <mbedtls_ssl_write_record>
 800c730:	4605      	mov	r5, r0
 800c732:	b178      	cbz	r0, 800c754 <mbedtls_ssl_write_finished+0xc4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800c734:	4b0f      	ldr	r3, [pc, #60]	; (800c774 <mbedtls_ssl_write_finished+0xe4>)
 800c736:	9001      	str	r0, [sp, #4]
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <mbedtls_ssl_write_finished+0xdc>)
 800c73c:	f241 5310 	movw	r3, #5392	; 0x1510
 800c740:	2101      	movs	r1, #1
 800c742:	4620      	mov	r0, r4
 800c744:	f7f9 f91a 	bl	800597c <mbedtls_debug_print_ret>
}
 800c748:	4628      	mov	r0, r5
 800c74a:	b003      	add	sp, #12
 800c74c:	bd30      	pop	{r4, r5, pc}
        ssl->state++;
 800c74e:	6863      	ldr	r3, [r4, #4]
 800c750:	3301      	adds	r3, #1
 800c752:	e7d7      	b.n	800c704 <mbedtls_ssl_write_finished+0x74>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 800c754:	4b08      	ldr	r3, [pc, #32]	; (800c778 <mbedtls_ssl_write_finished+0xe8>)
 800c756:	9300      	str	r3, [sp, #0]
 800c758:	4a04      	ldr	r2, [pc, #16]	; (800c76c <mbedtls_ssl_write_finished+0xdc>)
 800c75a:	f241 5314 	movw	r3, #5396	; 0x1514
 800c75e:	2102      	movs	r1, #2
 800c760:	4620      	mov	r0, r4
 800c762:	f7f9 f8db 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800c766:	e7ef      	b.n	800c748 <mbedtls_ssl_write_finished+0xb8>
 800c768:	08014c69 	.word	0x08014c69
 800c76c:	08014fa0 	.word	0x08014fa0
 800c770:	08014c7b 	.word	0x08014c7b
 800c774:	08013ade 	.word	0x08013ade
 800c778:	08014cad 	.word	0x08014cad

0800c77c <mbedtls_ssl_parse_finished>:
{
 800c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77e:	b087      	sub	sp, #28
 800c780:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 800c782:	4b3f      	ldr	r3, [pc, #252]	; (800c880 <mbedtls_ssl_parse_finished+0x104>)
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	4a3f      	ldr	r2, [pc, #252]	; (800c884 <mbedtls_ssl_parse_finished+0x108>)
 800c788:	f241 5325 	movw	r3, #5413	; 0x1525
 800c78c:	2102      	movs	r1, #2
 800c78e:	f7f9 f8c5 	bl	800591c <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800c798:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c79a:	43d2      	mvns	r2, r2
 800c79c:	ae03      	add	r6, sp, #12
 800c79e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a0:	f002 0201 	and.w	r2, r2, #1
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7ff fbde 	bl	800bf6c <mbedtls_ssl_read_record>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	b160      	cbz	r0, 800c7ce <mbedtls_ssl_parse_finished+0x52>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800c7b4:	4b34      	ldr	r3, [pc, #208]	; (800c888 <mbedtls_ssl_parse_finished+0x10c>)
 800c7b6:	9001      	str	r0, [sp, #4]
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	4a32      	ldr	r2, [pc, #200]	; (800c884 <mbedtls_ssl_parse_finished+0x108>)
 800c7bc:	f241 532b 	movw	r3, #5419	; 0x152b
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f7f9 f8da 	bl	800597c <mbedtls_debug_print_ret>
}
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	b007      	add	sp, #28
 800c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 800c7ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c7d0:	2b16      	cmp	r3, #22
 800c7d2:	d00f      	beq.n	800c7f4 <mbedtls_ssl_parse_finished+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800c7d4:	4b2d      	ldr	r3, [pc, #180]	; (800c88c <mbedtls_ssl_parse_finished+0x110>)
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	4a2a      	ldr	r2, [pc, #168]	; (800c884 <mbedtls_ssl_parse_finished+0x108>)
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c7da:	4d2d      	ldr	r5, [pc, #180]	; (800c890 <mbedtls_ssl_parse_finished+0x114>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800c7dc:	f241 5331 	movw	r3, #5425	; 0x1531
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7f9 f89a 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c7e8:	220a      	movs	r2, #10
 800c7ea:	2102      	movs	r1, #2
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7fe ffd1 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800c7f2:	e7e9      	b.n	800c7c8 <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 800c7f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c7f6:	780b      	ldrb	r3, [r1, #0]
 800c7f8:	2b14      	cmp	r3, #20
 800c7fa:	d102      	bne.n	800c802 <mbedtls_ssl_parse_finished+0x86>
 800c7fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c7fe:	2b10      	cmp	r3, #16
 800c800:	d00f      	beq.n	800c822 <mbedtls_ssl_parse_finished+0xa6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800c802:	4b22      	ldr	r3, [pc, #136]	; (800c88c <mbedtls_ssl_parse_finished+0x110>)
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	f241 5342 	movw	r3, #5442	; 0x1542
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800c80a:	4a1e      	ldr	r2, [pc, #120]	; (800c884 <mbedtls_ssl_parse_finished+0x108>)
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 800c80c:	4d21      	ldr	r5, [pc, #132]	; (800c894 <mbedtls_ssl_parse_finished+0x118>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800c80e:	2101      	movs	r1, #1
 800c810:	4620      	mov	r0, r4
 800c812:	f7f9 f883 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 800c816:	2232      	movs	r2, #50	; 0x32
 800c818:	2102      	movs	r1, #2
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7fe ffba 	bl	800b794 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 800c820:	e7d2      	b.n	800c7c8 <mbedtls_ssl_parse_finished+0x4c>
    volatile unsigned char diff = 0;
 800c822:	f88d 000b 	strb.w	r0, [sp, #11]
    for( i = 0; i < n; i++ )
 800c826:	4603      	mov	r3, r0
 800c828:	1d1a      	adds	r2, r3, #4
        diff |= A[i] ^ B[i];
 800c82a:	5c8a      	ldrb	r2, [r1, r2]
 800c82c:	5cf7      	ldrb	r7, [r6, r3]
 800c82e:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800c832:	407a      	eors	r2, r7
    for( i = 0; i < n; i++ )
 800c834:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 800c836:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 800c838:	2b0c      	cmp	r3, #12
        diff |= A[i] ^ B[i];
 800c83a:	f88d 200b 	strb.w	r2, [sp, #11]
    for( i = 0; i < n; i++ )
 800c83e:	d1f3      	bne.n	800c828 <mbedtls_ssl_parse_finished+0xac>
    return( diff );
 800c840:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 800c844:	b123      	cbz	r3, 800c850 <mbedtls_ssl_parse_finished+0xd4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 800c846:	4b11      	ldr	r3, [pc, #68]	; (800c88c <mbedtls_ssl_parse_finished+0x110>)
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	f241 534b 	movw	r3, #5451	; 0x154b
 800c84e:	e7dc      	b.n	800c80a <mbedtls_ssl_parse_finished+0x8e>
    if( ssl->handshake->resume != 0 )
 800c850:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c852:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c856:	b183      	cbz	r3, 800c87a <mbedtls_ssl_parse_finished+0xfe>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c85e:	07db      	lsls	r3, r3, #31
 800c860:	d401      	bmi.n	800c866 <mbedtls_ssl_parse_finished+0xea>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 800c862:	230a      	movs	r3, #10
        ssl->state++;
 800c864:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 800c866:	4b0c      	ldr	r3, [pc, #48]	; (800c898 <mbedtls_ssl_parse_finished+0x11c>)
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	4a06      	ldr	r2, [pc, #24]	; (800c884 <mbedtls_ssl_parse_finished+0x108>)
 800c86c:	f241 5369 	movw	r3, #5481	; 0x1569
 800c870:	2102      	movs	r1, #2
 800c872:	4620      	mov	r0, r4
 800c874:	f7f9 f852 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800c878:	e7a6      	b.n	800c7c8 <mbedtls_ssl_parse_finished+0x4c>
        ssl->state++;
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	3301      	adds	r3, #1
 800c87e:	e7f1      	b.n	800c864 <mbedtls_ssl_parse_finished+0xe8>
 800c880:	080146d8 	.word	0x080146d8
 800c884:	08014fa0 	.word	0x08014fa0
 800c888:	08013b23 	.word	0x08013b23
 800c88c:	080146ea 	.word	0x080146ea
 800c890:	ffff8900 	.word	0xffff8900
 800c894:	ffff8180 	.word	0xffff8180
 800c898:	080146ff 	.word	0x080146ff

0800c89c <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 800c89c:	2264      	movs	r2, #100	; 0x64
 800c89e:	2100      	movs	r1, #0
 800c8a0:	f002 bb02 	b.w	800eea8 <memset>

0800c8a4 <mbedtls_ssl_init>:
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 800c8a4:	22b4      	movs	r2, #180	; 0xb4
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	f002 bafe 	b.w	800eea8 <memset>

0800c8ac <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 800c8ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800c8b0:	f361 0383 	bfi	r3, r1, #2, #2
 800c8b4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800c8b8:	4770      	bx	lr

0800c8ba <mbedtls_ssl_conf_rng>:
    conf->f_rng      = f_rng;
 800c8ba:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 800c8bc:	61c2      	str	r2, [r0, #28]
 800c8be:	4770      	bx	lr

0800c8c0 <mbedtls_ssl_conf_dbg>:
    conf->f_dbg      = f_dbg;
 800c8c0:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 800c8c2:	6142      	str	r2, [r0, #20]
 800c8c4:	4770      	bx	lr

0800c8c6 <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 800c8c6:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 800c8c8:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 800c8ca:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 800c8cc:	6102      	str	r2, [r0, #16]
    ssl->f_recv_timeout = f_recv_timeout;
 800c8ce:	6183      	str	r3, [r0, #24]
 800c8d0:	4770      	bx	lr

0800c8d2 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_chain   = ca_chain;
 800c8d2:	63c1      	str	r1, [r0, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 800c8d4:	6402      	str	r2, [r0, #64]	; 0x40
 800c8d6:	4770      	bx	lr

0800c8d8 <mbedtls_ssl_set_hostname>:
{
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	4606      	mov	r6, r0
    if( hostname != NULL )
 800c8dc:	460c      	mov	r4, r1
 800c8de:	b139      	cbz	r1, 800c8f0 <mbedtls_ssl_set_hostname+0x18>
        hostname_len = strlen( hostname );
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	f7f3 fc7d 	bl	80001e0 <strlen>
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 800c8e6:	28ff      	cmp	r0, #255	; 0xff
        hostname_len = strlen( hostname );
 800c8e8:	4605      	mov	r5, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 800c8ea:	d902      	bls.n	800c8f2 <mbedtls_ssl_set_hostname+0x1a>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800c8ec:	4813      	ldr	r0, [pc, #76]	; (800c93c <mbedtls_ssl_set_hostname+0x64>)
 800c8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t hostname_len = 0;
 800c8f0:	460d      	mov	r5, r1
    if( ssl->hostname != NULL )
 800c8f2:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 800c8f6:	b157      	cbz	r7, 800c90e <mbedtls_ssl_set_hostname+0x36>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f7f3 fc71 	bl	80001e0 <strlen>
 800c8fe:	4601      	mov	r1, r0
 800c900:	4638      	mov	r0, r7
 800c902:	f7fd ff09 	bl	800a718 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 800c906:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 800c90a:	f002 fa91 	bl	800ee30 <free>
    if( hostname == NULL )
 800c90e:	b91c      	cbnz	r4, 800c918 <mbedtls_ssl_set_hostname+0x40>
        ssl->hostname = NULL;
 800c910:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
    return( 0 );
 800c914:	4620      	mov	r0, r4
 800c916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 800c918:	1c69      	adds	r1, r5, #1
 800c91a:	2001      	movs	r0, #1
 800c91c:	f002 fa4e 	bl	800edbc <calloc>
 800c920:	4607      	mov	r7, r0
 800c922:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 800c926:	b130      	cbz	r0, 800c936 <mbedtls_ssl_set_hostname+0x5e>
        memcpy( ssl->hostname, hostname, hostname_len );
 800c928:	462a      	mov	r2, r5
 800c92a:	4621      	mov	r1, r4
 800c92c:	f002 fa97 	bl	800ee5e <memcpy>
        ssl->hostname[hostname_len] = '\0';
 800c930:	2000      	movs	r0, #0
 800c932:	5578      	strb	r0, [r7, r5]
 800c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800c936:	4802      	ldr	r0, [pc, #8]	; (800c940 <mbedtls_ssl_set_hostname+0x68>)
}
 800c938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c93a:	bf00      	nop
 800c93c:	ffff8f00 	.word	0xffff8f00
 800c940:	ffff8100 	.word	0xffff8100

0800c944 <mbedtls_ssl_get_ciphersuite>:
    if( ssl == NULL || ssl->session == NULL )
 800c944:	b120      	cbz	r0, 800c950 <mbedtls_ssl_get_ciphersuite+0xc>
 800c946:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c948:	b113      	cbz	r3, 800c950 <mbedtls_ssl_get_ciphersuite+0xc>
    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 800c94a:	6818      	ldr	r0, [r3, #0]
 800c94c:	f7fc bef8 	b.w	8009740 <mbedtls_ssl_get_ciphersuite_name>
}
 800c950:	2000      	movs	r0, #0
 800c952:	4770      	bx	lr

0800c954 <mbedtls_ssl_handshake_step>:
{
 800c954:	b508      	push	{r3, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800c956:	b108      	cbz	r0, 800c95c <mbedtls_ssl_handshake_step+0x8>
 800c958:	6803      	ldr	r3, [r0, #0]
 800c95a:	b923      	cbnz	r3, 800c966 <mbedtls_ssl_handshake_step+0x12>
    	printf("----------------------handshake step bad input --------------------------\r\n");
 800c95c:	4807      	ldr	r0, [pc, #28]	; (800c97c <mbedtls_ssl_handshake_step+0x28>)
 800c95e:	f002 fbd9 	bl	800f114 <puts>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800c962:	4807      	ldr	r0, [pc, #28]	; (800c980 <mbedtls_ssl_handshake_step+0x2c>)
 800c964:	bd08      	pop	{r3, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 800c966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c96a:	07db      	lsls	r3, r3, #31
 800c96c:	d403      	bmi.n	800c976 <mbedtls_ssl_handshake_step+0x22>
}
 800c96e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ret = mbedtls_ssl_handshake_client_step( ssl );
 800c972:	f7fc befb 	b.w	800976c <mbedtls_ssl_handshake_client_step>
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 800c976:	4803      	ldr	r0, [pc, #12]	; (800c984 <mbedtls_ssl_handshake_step+0x30>)
}
 800c978:	bd08      	pop	{r3, pc}
 800c97a:	bf00      	nop
 800c97c:	08014477 	.word	0x08014477
 800c980:	ffff8f00 	.word	0xffff8f00
 800c984:	ffff8f80 	.word	0xffff8f80

0800c988 <mbedtls_ssl_handshake>:
{
 800c988:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800c98a:	4605      	mov	r5, r0
 800c98c:	b300      	cbz	r0, 800c9d0 <mbedtls_ssl_handshake+0x48>
 800c98e:	6803      	ldr	r3, [r0, #0]
 800c990:	b1f3      	cbz	r3, 800c9d0 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 800c992:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <mbedtls_ssl_handshake+0x4c>)
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4a10      	ldr	r2, [pc, #64]	; (800c9d8 <mbedtls_ssl_handshake+0x50>)
 800c998:	f641 2306 	movw	r3, #6662	; 0x1a06
 800c99c:	2102      	movs	r1, #2
 800c99e:	f7f8 ffbd 	bl	800591c <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800c9a2:	686b      	ldr	r3, [r5, #4]
 800c9a4:	2b10      	cmp	r3, #16
 800c9a6:	d101      	bne.n	800c9ac <mbedtls_ssl_handshake+0x24>
 800c9a8:	2400      	movs	r4, #0
 800c9aa:	e005      	b.n	800c9b8 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f7ff ffd1 	bl	800c954 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d0f4      	beq.n	800c9a2 <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 800c9b8:	4b08      	ldr	r3, [pc, #32]	; (800c9dc <mbedtls_ssl_handshake+0x54>)
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	4a06      	ldr	r2, [pc, #24]	; (800c9d8 <mbedtls_ssl_handshake+0x50>)
 800c9be:	f641 2310 	movw	r3, #6672	; 0x1a10
 800c9c2:	2102      	movs	r1, #2
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7f8 ffa9 	bl	800591c <mbedtls_debug_print_msg>
}
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	b003      	add	sp, #12
 800c9ce:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800c9d0:	4c03      	ldr	r4, [pc, #12]	; (800c9e0 <mbedtls_ssl_handshake+0x58>)
 800c9d2:	e7fa      	b.n	800c9ca <mbedtls_ssl_handshake+0x42>
 800c9d4:	0801445d 	.word	0x0801445d
 800c9d8:	08014fa0 	.word	0x08014fa0
 800c9dc:	0801446a 	.word	0x0801446a
 800c9e0:	ffff8f00 	.word	0xffff8f00

0800c9e4 <mbedtls_ssl_read>:
{
 800c9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e6:	460e      	mov	r6, r1
 800c9e8:	4617      	mov	r7, r2
    if( ssl == NULL || ssl->conf == NULL )
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f000 80d4 	beq.w	800cb9a <mbedtls_ssl_read+0x1b6>
 800c9f2:	6803      	ldr	r3, [r0, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 80d0 	beq.w	800cb9a <mbedtls_ssl_read+0x1b6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 800c9fa:	4b69      	ldr	r3, [pc, #420]	; (800cba0 <mbedtls_ssl_read+0x1bc>)
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	4a69      	ldr	r2, [pc, #420]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
 800ca00:	f44f 53d6 	mov.w	r3, #6848	; 0x1ac0
 800ca04:	2102      	movs	r1, #2
 800ca06:	f7f8 ff89 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800ca0a:	6863      	ldr	r3, [r4, #4]
 800ca0c:	2b10      	cmp	r3, #16
 800ca0e:	d012      	beq.n	800ca36 <mbedtls_ssl_read+0x52>
        ret = mbedtls_ssl_handshake( ssl );
 800ca10:	4620      	mov	r0, r4
 800ca12:	f7ff ffb9 	bl	800c988 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 800ca16:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 800ca1a:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 800ca1c:	d00b      	beq.n	800ca36 <mbedtls_ssl_read+0x52>
 800ca1e:	b150      	cbz	r0, 800ca36 <mbedtls_ssl_read+0x52>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 800ca20:	4b61      	ldr	r3, [pc, #388]	; (800cba8 <mbedtls_ssl_read+0x1c4>)
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	9001      	str	r0, [sp, #4]
 800ca26:	f641 23ed 	movw	r3, #6893	; 0x1aed
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800ca2a:	4a5e      	ldr	r2, [pc, #376]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7f8 ffa4 	bl	800597c <mbedtls_debug_print_ret>
            return( ret );
 800ca34:	e017      	b.n	800ca66 <mbedtls_ssl_read+0x82>
    if( ssl->in_offt == NULL )
 800ca36:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f040 8090 	bne.w	800cb5e <mbedtls_ssl_read+0x17a>
        if( ssl->f_get_timer != NULL &&
 800ca3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ca40:	b143      	cbz	r3, 800ca54 <mbedtls_ssl_read+0x70>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 800ca42:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ca44:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 800ca46:	3001      	adds	r0, #1
 800ca48:	d104      	bne.n	800ca54 <mbedtls_ssl_read+0x70>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ca50:	f7fd fe6a 	bl	800a728 <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800ca54:	4620      	mov	r0, r4
 800ca56:	f7ff fa89 	bl	800bf6c <mbedtls_ssl_read_record>
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	b160      	cbz	r0, 800ca78 <mbedtls_ssl_read+0x94>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 800ca5e:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 800ca62:	d103      	bne.n	800ca6c <mbedtls_ssl_read+0x88>
                return( 0 );
 800ca64:	2500      	movs	r5, #0
}
 800ca66:	4628      	mov	r0, r5
 800ca68:	b003      	add	sp, #12
 800ca6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800ca6c:	4b4f      	ldr	r3, [pc, #316]	; (800cbac <mbedtls_ssl_read+0x1c8>)
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	9001      	str	r0, [sp, #4]
 800ca72:	f641 3323 	movw	r3, #6947	; 0x1b23
 800ca76:	e7d8      	b.n	800ca2a <mbedtls_ssl_read+0x46>
        if( ssl->in_msglen  == 0 &&
 800ca78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ca7a:	b983      	cbnz	r3, 800ca9e <mbedtls_ssl_read+0xba>
 800ca7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ca7e:	2b17      	cmp	r3, #23
 800ca80:	d10d      	bne.n	800ca9e <mbedtls_ssl_read+0xba>
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 800ca82:	4620      	mov	r0, r4
 800ca84:	f7ff fa72 	bl	800bf6c <mbedtls_ssl_read_record>
 800ca88:	4605      	mov	r5, r0
 800ca8a:	b140      	cbz	r0, 800ca9e <mbedtls_ssl_read+0xba>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 800ca8c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 800ca90:	d0e8      	beq.n	800ca64 <mbedtls_ssl_read+0x80>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 800ca92:	4b46      	ldr	r3, [pc, #280]	; (800cbac <mbedtls_ssl_read+0x1c8>)
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	9001      	str	r0, [sp, #4]
 800ca98:	f641 3332 	movw	r3, #6962	; 0x1b32
 800ca9c:	e7c5      	b.n	800ca2a <mbedtls_ssl_read+0x46>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 800ca9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800caa0:	2b16      	cmp	r3, #22
 800caa2:	d13f      	bne.n	800cb24 <mbedtls_ssl_read+0x140>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 800caa4:	4b42      	ldr	r3, [pc, #264]	; (800cbb0 <mbedtls_ssl_read+0x1cc>)
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	4a3e      	ldr	r2, [pc, #248]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
 800caaa:	f641 3339 	movw	r3, #6969	; 0x1b39
 800caae:	2101      	movs	r1, #1
 800cab0:	4620      	mov	r0, r4
 800cab2:	f7f8 ff33 	bl	800591c <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cabc:	07db      	lsls	r3, r3, #31
 800cabe:	d410      	bmi.n	800cae2 <mbedtls_ssl_read+0xfe>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 800cac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	b913      	cbnz	r3, 800cacc <mbedtls_ssl_read+0xe8>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 800cac6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cac8:	2b04      	cmp	r3, #4
 800caca:	d00a      	beq.n	800cae2 <mbedtls_ssl_read+0xfe>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 800cacc:	4b39      	ldr	r3, [pc, #228]	; (800cbb4 <mbedtls_ssl_read+0x1d0>)
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	f641 3346 	movw	r3, #6982	; 0x1b46
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800cad4:	4a33      	ldr	r2, [pc, #204]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800cad6:	4d38      	ldr	r5, [pc, #224]	; (800cbb8 <mbedtls_ssl_read+0x1d4>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800cad8:	2101      	movs	r1, #1
 800cada:	4620      	mov	r0, r4
 800cadc:	f7f8 ff1e 	bl	800591c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 800cae0:	e7c1      	b.n	800ca66 <mbedtls_ssl_read+0x82>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 800cae2:	4b36      	ldr	r3, [pc, #216]	; (800cbbc <mbedtls_ssl_read+0x1d8>)
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4a2f      	ldr	r2, [pc, #188]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
 800cae8:	f641 3382 	movw	r3, #7042	; 0x1b82
 800caec:	2103      	movs	r1, #3
 800caee:	4620      	mov	r0, r4
 800caf0:	f7f8 ff14 	bl	800591c <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 800caf4:	68e3      	ldr	r3, [r4, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dd09      	ble.n	800cb0e <mbedtls_ssl_read+0x12a>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 800cafa:	2264      	movs	r2, #100	; 0x64
 800cafc:	2101      	movs	r1, #1
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7fe fe48 	bl	800b794 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800cb04:	4d2e      	ldr	r5, [pc, #184]	; (800cbc0 <mbedtls_ssl_read+0x1dc>)
 800cb06:	2800      	cmp	r0, #0
 800cb08:	bf18      	it	ne
 800cb0a:	4605      	movne	r5, r0
 800cb0c:	e7ab      	b.n	800ca66 <mbedtls_ssl_read+0x82>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800cb0e:	4b2d      	ldr	r3, [pc, #180]	; (800cbc4 <mbedtls_ssl_read+0x1e0>)
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	4a24      	ldr	r2, [pc, #144]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800cb14:	4d2c      	ldr	r5, [pc, #176]	; (800cbc8 <mbedtls_ssl_read+0x1e4>)
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 800cb16:	f641 339e 	movw	r3, #7070	; 0x1b9e
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f7f8 fefd 	bl	800591c <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 800cb22:	e7a0      	b.n	800ca66 <mbedtls_ssl_read+0x82>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 800cb24:	2b15      	cmp	r3, #21
 800cb26:	d10a      	bne.n	800cb3e <mbedtls_ssl_read+0x15a>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 800cb28:	4b28      	ldr	r3, [pc, #160]	; (800cbcc <mbedtls_ssl_read+0x1e8>)
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	4a1d      	ldr	r2, [pc, #116]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800cb2e:	4d24      	ldr	r5, [pc, #144]	; (800cbc0 <mbedtls_ssl_read+0x1dc>)
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 800cb30:	f641 33b7 	movw	r3, #7095	; 0x1bb7
 800cb34:	2102      	movs	r1, #2
 800cb36:	4620      	mov	r0, r4
 800cb38:	f7f8 fef0 	bl	800591c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 800cb3c:	e793      	b.n	800ca66 <mbedtls_ssl_read+0x82>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 800cb3e:	2b17      	cmp	r3, #23
 800cb40:	d004      	beq.n	800cb4c <mbedtls_ssl_read+0x168>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 800cb42:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <mbedtls_ssl_read+0x1ec>)
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	f641 33bd 	movw	r3, #7101	; 0x1bbd
 800cb4a:	e7c3      	b.n	800cad4 <mbedtls_ssl_read+0xf0>
        ssl->in_offt = ssl->in_msg;
 800cb4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb4e:	66a3      	str	r3, [r4, #104]	; 0x68
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	2b10      	cmp	r3, #16
 800cb54:	d103      	bne.n	800cb5e <mbedtls_ssl_read+0x17a>
            ssl_set_timer( ssl, 0 );
 800cb56:	2100      	movs	r1, #0
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f7fd fde5 	bl	800a728 <ssl_set_timer>
    n = ( len < ssl->in_msglen )
 800cb5e:	6f25      	ldr	r5, [r4, #112]	; 0x70
    memcpy( buf, ssl->in_offt, n );
 800cb60:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    n = ( len < ssl->in_msglen )
 800cb62:	42bd      	cmp	r5, r7
 800cb64:	bf28      	it	cs
 800cb66:	463d      	movcs	r5, r7
    memcpy( buf, ssl->in_offt, n );
 800cb68:	462a      	mov	r2, r5
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f002 f977 	bl	800ee5e <memcpy>
    ssl->in_msglen -= n;
 800cb70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb72:	1b5b      	subs	r3, r3, r5
 800cb74:	6723      	str	r3, [r4, #112]	; 0x70
    if( ssl->in_msglen == 0 )
 800cb76:	b963      	cbnz	r3, 800cb92 <mbedtls_ssl_read+0x1ae>
        ssl->in_offt = NULL;
 800cb78:	66a3      	str	r3, [r4, #104]	; 0x68
        ssl->keep_current_message = 0;
 800cb7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 800cb7e:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <mbedtls_ssl_read+0x1f0>)
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	4a08      	ldr	r2, [pc, #32]	; (800cba4 <mbedtls_ssl_read+0x1c0>)
 800cb84:	f641 33ec 	movw	r3, #7148	; 0x1bec
 800cb88:	2102      	movs	r1, #2
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7f8 fec6 	bl	800591c <mbedtls_debug_print_msg>
    return( (int) n );
 800cb90:	e769      	b.n	800ca66 <mbedtls_ssl_read+0x82>
        ssl->in_offt += n;
 800cb92:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cb94:	442b      	add	r3, r5
 800cb96:	66a3      	str	r3, [r4, #104]	; 0x68
 800cb98:	e7f1      	b.n	800cb7e <mbedtls_ssl_read+0x19a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800cb9a:	4d0f      	ldr	r5, [pc, #60]	; (800cbd8 <mbedtls_ssl_read+0x1f4>)
 800cb9c:	e763      	b.n	800ca66 <mbedtls_ssl_read+0x82>
 800cb9e:	bf00      	nop
 800cba0:	08014791 	.word	0x08014791
 800cba4:	08014fa0 	.word	0x08014fa0
 800cba8:	08014799 	.word	0x08014799
 800cbac:	08013b23 	.word	0x08013b23
 800cbb0:	080147af 	.word	0x080147af
 800cbb4:	080147ca 	.word	0x080147ca
 800cbb8:	ffff8900 	.word	0xffff8900
 800cbbc:	080147f0 	.word	0x080147f0
 800cbc0:	ffff9700 	.word	0xffff9700
 800cbc4:	08013e7c 	.word	0x08013e7c
 800cbc8:	ffff9400 	.word	0xffff9400
 800cbcc:	08014816 	.word	0x08014816
 800cbd0:	0801483b 	.word	0x0801483b
 800cbd4:	08014858 	.word	0x08014858
 800cbd8:	ffff8f00 	.word	0xffff8f00

0800cbdc <mbedtls_ssl_write>:
{
 800cbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 800cbde:	4b30      	ldr	r3, [pc, #192]	; (800cca0 <mbedtls_ssl_write+0xc4>)
 800cbe0:	9300      	str	r3, [sp, #0]
{
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	460f      	mov	r7, r1
 800cbe6:	4616      	mov	r6, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 800cbe8:	f641 4352 	movw	r3, #7250	; 0x1c52
 800cbec:	4a2d      	ldr	r2, [pc, #180]	; (800cca4 <mbedtls_ssl_write+0xc8>)
 800cbee:	2102      	movs	r1, #2
 800cbf0:	f7f8 fe94 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 800cbf4:	2c00      	cmp	r4, #0
 800cbf6:	d050      	beq.n	800cc9a <mbedtls_ssl_write+0xbe>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d04d      	beq.n	800cc9a <mbedtls_ssl_write+0xbe>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 800cbfe:	6863      	ldr	r3, [r4, #4]
 800cc00:	2b10      	cmp	r3, #16
 800cc02:	d011      	beq.n	800cc28 <mbedtls_ssl_write+0x4c>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 800cc04:	4620      	mov	r0, r4
 800cc06:	f7ff febf 	bl	800c988 <mbedtls_ssl_handshake>
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	b160      	cbz	r0, 800cc28 <mbedtls_ssl_write+0x4c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 800cc0e:	4b26      	ldr	r3, [pc, #152]	; (800cca8 <mbedtls_ssl_write+0xcc>)
 800cc10:	9001      	str	r0, [sp, #4]
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	4a23      	ldr	r2, [pc, #140]	; (800cca4 <mbedtls_ssl_write+0xc8>)
 800cc16:	f641 4363 	movw	r3, #7267	; 0x1c63
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f7f8 fead 	bl	800597c <mbedtls_debug_print_ret>
}
 800cc22:	4628      	mov	r0, r5
 800cc24:	b003      	add	sp, #12
 800cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->out_left != 0 )
 800cc28:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800cc2c:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 800cc30:	bf28      	it	cs
 800cc32:	f44f 5680 	movcs.w	r6, #4096	; 0x1000
 800cc36:	b1c3      	cbz	r3, 800cc6a <mbedtls_ssl_write+0x8e>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f7fe f9b9 	bl	800afb0 <mbedtls_ssl_flush_output>
 800cc3e:	4605      	mov	r5, r0
 800cc40:	b348      	cbz	r0, 800cc96 <mbedtls_ssl_write+0xba>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 800cc42:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <mbedtls_ssl_write+0xd0>)
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	9001      	str	r0, [sp, #4]
 800cc48:	f641 4311 	movw	r3, #7185	; 0x1c11
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800cc4c:	4a15      	ldr	r2, [pc, #84]	; (800cca4 <mbedtls_ssl_write+0xc8>)
 800cc4e:	2101      	movs	r1, #1
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7f8 fe93 	bl	800597c <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 800cc56:	4b16      	ldr	r3, [pc, #88]	; (800ccb0 <mbedtls_ssl_write+0xd4>)
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	4a12      	ldr	r2, [pc, #72]	; (800cca4 <mbedtls_ssl_write+0xc8>)
 800cc5c:	f641 436e 	movw	r3, #7278	; 0x1c6e
 800cc60:	2102      	movs	r1, #2
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7f8 fe5a 	bl	800591c <mbedtls_debug_print_msg>
    return( ret );
 800cc68:	e7db      	b.n	800cc22 <mbedtls_ssl_write+0x46>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 800cc6a:	2317      	movs	r3, #23
 800cc6c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 800cc70:	4632      	mov	r2, r6
 800cc72:	4639      	mov	r1, r7
        ssl->out_msglen  = len;
 800cc74:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
        memcpy( ssl->out_msg, buf, len );
 800cc78:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800cc7c:	f002 f8ef 	bl	800ee5e <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 800cc80:	4620      	mov	r0, r4
 800cc82:	f7fe fa25 	bl	800b0d0 <mbedtls_ssl_write_record>
 800cc86:	4605      	mov	r5, r0
 800cc88:	b128      	cbz	r0, 800cc96 <mbedtls_ssl_write+0xba>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 800cc8a:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <mbedtls_ssl_write+0xd8>)
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	9001      	str	r0, [sp, #4]
 800cc90:	f641 431d 	movw	r3, #7197	; 0x1c1d
 800cc94:	e7da      	b.n	800cc4c <mbedtls_ssl_write+0x70>
    return( (int) len );
 800cc96:	4635      	mov	r5, r6
 800cc98:	e7dd      	b.n	800cc56 <mbedtls_ssl_write+0x7a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800cc9a:	4d07      	ldr	r5, [pc, #28]	; (800ccb8 <mbedtls_ssl_write+0xdc>)
 800cc9c:	e7c1      	b.n	800cc22 <mbedtls_ssl_write+0x46>
 800cc9e:	bf00      	nop
 800cca0:	08014bac 	.word	0x08014bac
 800cca4:	08014fa0 	.word	0x08014fa0
 800cca8:	08014799 	.word	0x08014799
 800ccac:	08014e8e 	.word	0x08014e8e
 800ccb0:	08014bb5 	.word	0x08014bb5
 800ccb4:	08013ade 	.word	0x08013ade
 800ccb8:	ffff8f00 	.word	0xffff8f00

0800ccbc <mbedtls_ssl_close_notify>:
{
 800ccbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d033      	beq.n	800cd2c <mbedtls_ssl_close_notify+0x70>
 800ccc4:	6803      	ldr	r3, [r0, #0]
 800ccc6:	b38b      	cbz	r3, 800cd2c <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 800ccc8:	4b19      	ldr	r3, [pc, #100]	; (800cd30 <mbedtls_ssl_close_notify+0x74>)
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4a19      	ldr	r2, [pc, #100]	; (800cd34 <mbedtls_ssl_close_notify+0x78>)
 800ccce:	f641 437d 	movw	r3, #7293	; 0x1c7d
 800ccd2:	2102      	movs	r1, #2
 800ccd4:	f7f8 fe22 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 800ccd8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800ccdc:	b12a      	cbz	r2, 800ccea <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 800ccde:	4620      	mov	r0, r4
}
 800cce0:	b003      	add	sp, #12
 800cce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 800cce6:	f7fe b963 	b.w	800afb0 <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	2b10      	cmp	r3, #16
 800ccee:	d112      	bne.n	800cd16 <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7fe fd4e 	bl	800b794 <mbedtls_ssl_send_alert_message>
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	b160      	cbz	r0, 800cd16 <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 800ccfc:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <mbedtls_ssl_close_notify+0x7c>)
 800ccfe:	9001      	str	r0, [sp, #4]
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	4a0c      	ldr	r2, [pc, #48]	; (800cd34 <mbedtls_ssl_close_notify+0x78>)
 800cd04:	f641 4388 	movw	r3, #7304	; 0x1c88
 800cd08:	2101      	movs	r1, #1
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7f8 fe36 	bl	800597c <mbedtls_debug_print_ret>
}
 800cd10:	4628      	mov	r0, r5
 800cd12:	b003      	add	sp, #12
 800cd14:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 800cd16:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <mbedtls_ssl_close_notify+0x80>)
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	4a06      	ldr	r2, [pc, #24]	; (800cd34 <mbedtls_ssl_close_notify+0x78>)
 800cd1c:	f641 438d 	movw	r3, #7309	; 0x1c8d
 800cd20:	2102      	movs	r1, #2
 800cd22:	4620      	mov	r0, r4
 800cd24:	f7f8 fdfa 	bl	800591c <mbedtls_debug_print_msg>
    return( 0 );
 800cd28:	2500      	movs	r5, #0
 800cd2a:	e7f1      	b.n	800cd10 <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 800cd2c:	4d04      	ldr	r5, [pc, #16]	; (800cd40 <mbedtls_ssl_close_notify+0x84>)
 800cd2e:	e7ef      	b.n	800cd10 <mbedtls_ssl_close_notify+0x54>
 800cd30:	08014125 	.word	0x08014125
 800cd34:	08014fa0 	.word	0x08014fa0
 800cd38:	0801413b 	.word	0x0801413b
 800cd3c:	0801415a 	.word	0x0801415a
 800cd40:	ffff8f00 	.word	0xffff8f00

0800cd44 <mbedtls_ssl_transform_free>:
{
 800cd44:	b510      	push	{r4, lr}
    if( transform == NULL )
 800cd46:	4604      	mov	r4, r0
 800cd48:	b1a0      	cbz	r0, 800cd74 <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 800cd4a:	3050      	adds	r0, #80	; 0x50
 800cd4c:	f7f8 fab2 	bl	80052b4 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 800cd50:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800cd54:	f7f8 faae 	bl	80052b4 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 800cd58:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800cd5c:	f7fa f985 	bl	800706a <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 800cd60:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800cd64:	f7fa f981 	bl	800706a <mbedtls_md_free>
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 800cd68:	4620      	mov	r0, r4
 800cd6a:	21d0      	movs	r1, #208	; 0xd0
}
 800cd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 800cd70:	f7fd bcd2 	b.w	800a718 <mbedtls_zeroize>
 800cd74:	bd10      	pop	{r4, pc}

0800cd76 <mbedtls_ssl_handshake_free>:
{
 800cd76:	b510      	push	{r4, lr}
    if( handshake == NULL )
 800cd78:	4604      	mov	r4, r0
 800cd7a:	b148      	cbz	r0, 800cd90 <mbedtls_ssl_handshake_free+0x1a>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 800cd7c:	3008      	adds	r0, #8
 800cd7e:	f7fc f832 	bl	8008de6 <mbedtls_sha256_free>
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 800cd82:	4620      	mov	r0, r4
 800cd84:	f44f 7184 	mov.w	r1, #264	; 0x108
}
 800cd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 800cd8c:	f7fd bcc4 	b.w	800a718 <mbedtls_zeroize>
 800cd90:	bd10      	pop	{r4, pc}

0800cd92 <mbedtls_ssl_session_free>:
{
 800cd92:	b510      	push	{r4, lr}
    if( session == NULL )
 800cd94:	4604      	mov	r4, r0
 800cd96:	b160      	cbz	r0, 800cdb2 <mbedtls_ssl_session_free+0x20>
    if( session->peer_cert != NULL )
 800cd98:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800cd9a:	b120      	cbz	r0, 800cda6 <mbedtls_ssl_session_free+0x14>
        mbedtls_x509_crt_free( session->peer_cert );
 800cd9c:	f001 fbef 	bl	800e57e <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 800cda0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800cda2:	f002 f845 	bl	800ee30 <free>
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 800cda6:	4620      	mov	r0, r4
 800cda8:	2164      	movs	r1, #100	; 0x64
}
 800cdaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 800cdae:	f7fd bcb3 	b.w	800a718 <mbedtls_zeroize>
 800cdb2:	bd10      	pop	{r4, pc}

0800cdb4 <mbedtls_ssl_handshake_wrapup>:
{
 800cdb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int resume = ssl->handshake->resume;
 800cdb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800cdb8:	4a2d      	ldr	r2, [pc, #180]	; (800ce70 <mbedtls_ssl_handshake_wrapup+0xbc>)
    int resume = ssl->handshake->resume;
 800cdba:	f8d3 50f8 	ldr.w	r5, [r3, #248]	; 0xf8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800cdbe:	4b2d      	ldr	r3, [pc, #180]	; (800ce74 <mbedtls_ssl_handshake_wrapup+0xc0>)
 800cdc0:	9300      	str	r3, [sp, #0]
{
 800cdc2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 800cdc4:	f241 4369 	movw	r3, #5225	; 0x1469
 800cdc8:	2103      	movs	r1, #3
 800cdca:	f7f8 fda7 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->session )
 800cdce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800cdd0:	b120      	cbz	r0, 800cddc <mbedtls_ssl_handshake_wrapup+0x28>
        mbedtls_ssl_session_free( ssl->session );
 800cdd2:	f7ff ffde 	bl	800cd92 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 800cdd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800cdd8:	f002 f82a 	bl	800ee30 <free>
    if( ssl->conf->f_set_cache != NULL &&
 800cddc:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 800cdde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cde0:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
 800cde6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cde8:	b173      	cbz	r3, 800ce08 <mbedtls_ssl_handshake_wrapup+0x54>
 800cdea:	6888      	ldr	r0, [r1, #8]
 800cdec:	b160      	cbz	r0, 800ce08 <mbedtls_ssl_handshake_wrapup+0x54>
        ssl->session->id_len != 0 &&
 800cdee:	b95d      	cbnz	r5, 800ce08 <mbedtls_ssl_handshake_wrapup+0x54>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 800cdf0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800cdf2:	4798      	blx	r3
 800cdf4:	b140      	cbz	r0, 800ce08 <mbedtls_ssl_handshake_wrapup+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 800cdf6:	4b20      	ldr	r3, [pc, #128]	; (800ce78 <mbedtls_ssl_handshake_wrapup+0xc4>)
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	4a1d      	ldr	r2, [pc, #116]	; (800ce70 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800cdfc:	f241 438c 	movw	r3, #5260	; 0x148c
 800ce00:	2101      	movs	r1, #1
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7f8 fd8a 	bl	800591c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 800ce08:	4b1c      	ldr	r3, [pc, #112]	; (800ce7c <mbedtls_ssl_handshake_wrapup+0xc8>)
 800ce0a:	4a19      	ldr	r2, [pc, #100]	; (800ce70 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	2103      	movs	r1, #3
 800ce10:	f241 434e 	movw	r3, #5198	; 0x144e
 800ce14:	4620      	mov	r0, r4
 800ce16:	f7f8 fd81 	bl	800591c <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl->handshake );
 800ce1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ce1c:	f7ff ffab 	bl	800cd76 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 800ce20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ce22:	f002 f805 	bl	800ee30 <free>
    if( ssl->transform )
 800ce26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ssl->handshake = NULL;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	6323      	str	r3, [r4, #48]	; 0x30
    if( ssl->transform )
 800ce2c:	b120      	cbz	r0, 800ce38 <mbedtls_ssl_handshake_wrapup+0x84>
        mbedtls_ssl_transform_free( ssl->transform );
 800ce2e:	f7ff ff89 	bl	800cd44 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 800ce32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ce34:	f001 fffc 	bl	800ee30 <free>
    ssl->transform = ssl->transform_negotiate;
 800ce38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce3a:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	6423      	str	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 800ce40:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <mbedtls_ssl_handshake_wrapup+0xcc>)
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4620      	mov	r0, r4
 800ce46:	f241 4362 	movw	r3, #5218	; 0x1462
 800ce4a:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <mbedtls_ssl_handshake_wrapup+0xbc>)
 800ce4c:	2103      	movs	r1, #3
 800ce4e:	f7f8 fd65 	bl	800591c <mbedtls_debug_print_msg>
    ssl->state++;
 800ce52:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 800ce54:	4a06      	ldr	r2, [pc, #24]	; (800ce70 <mbedtls_ssl_handshake_wrapup+0xbc>)
    ssl->state++;
 800ce56:	3301      	adds	r3, #1
 800ce58:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 800ce5a:	4b0a      	ldr	r3, [pc, #40]	; (800ce84 <mbedtls_ssl_handshake_wrapup+0xd0>)
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	2103      	movs	r1, #3
 800ce60:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7f8 fd59 	bl	800591c <mbedtls_debug_print_msg>
}
 800ce6a:	b003      	add	sp, #12
 800ce6c:	bd30      	pop	{r4, r5, pc}
 800ce6e:	bf00      	nop
 800ce70:	08014fa0 	.word	0x08014fa0
 800ce74:	080144c2 	.word	0x080144c2
 800ce78:	080144d6 	.word	0x080144d6
 800ce7c:	080144f2 	.word	0x080144f2
 800ce80:	08014512 	.word	0x08014512
 800ce84:	08014532 	.word	0x08014532

0800ce88 <ssl_handshake_init>:
{
 800ce88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce8a:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 800ce8c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800ce8e:	b108      	cbz	r0, 800ce94 <ssl_handshake_init+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 800ce90:	f7ff ff58 	bl	800cd44 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 800ce94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ce96:	b108      	cbz	r0, 800ce9c <ssl_handshake_init+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 800ce98:	f7ff ff7b 	bl	800cd92 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 800ce9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ce9e:	b108      	cbz	r0, 800cea4 <ssl_handshake_init+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 800cea0:	f7ff ff69 	bl	800cd76 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 800cea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cea6:	b923      	cbnz	r3, 800ceb2 <ssl_handshake_init+0x2a>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 800cea8:	21d0      	movs	r1, #208	; 0xd0
 800ceaa:	2001      	movs	r0, #1
 800ceac:	f001 ff86 	bl	800edbc <calloc>
 800ceb0:	6420      	str	r0, [r4, #64]	; 0x40
    if( ssl->session_negotiate == NULL )
 800ceb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ceb4:	b923      	cbnz	r3, 800cec0 <ssl_handshake_init+0x38>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 800ceb6:	2164      	movs	r1, #100	; 0x64
 800ceb8:	2001      	movs	r0, #1
 800ceba:	f001 ff7f 	bl	800edbc <calloc>
 800cebe:	62e0      	str	r0, [r4, #44]	; 0x2c
    if( ssl->handshake == NULL )
 800cec0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cec2:	b92b      	cbnz	r3, 800ced0 <ssl_handshake_init+0x48>
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 800cec4:	f44f 7184 	mov.w	r1, #264	; 0x108
 800cec8:	2001      	movs	r0, #1
 800ceca:	f001 ff77 	bl	800edbc <calloc>
 800cece:	6320      	str	r0, [r4, #48]	; 0x30
    if( ssl->handshake == NULL ||
 800ced0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ced2:	b11b      	cbz	r3, 800cedc <ssl_handshake_init+0x54>
 800ced4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ced6:	b10b      	cbz	r3, 800cedc <ssl_handshake_init+0x54>
        ssl->session_negotiate == NULL )
 800ced8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 800ceda:	b9c0      	cbnz	r0, 800cf0e <ssl_handshake_init+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 800cedc:	4b23      	ldr	r3, [pc, #140]	; (800cf6c <ssl_handshake_init+0xe4>)
 800cede:	4a24      	ldr	r2, [pc, #144]	; (800cf70 <ssl_handshake_init+0xe8>)
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	2101      	movs	r1, #1
 800cee4:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800cee8:	4620      	mov	r0, r4
 800ceea:	f7f8 fd17 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 800ceee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cef0:	f001 ff9e 	bl	800ee30 <free>
        mbedtls_free( ssl->transform_negotiate );
 800cef4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800cef6:	f001 ff9b 	bl	800ee30 <free>
        mbedtls_free( ssl->session_negotiate );
 800cefa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cefc:	f001 ff98 	bl	800ee30 <free>
        ssl->handshake = NULL;
 800cf00:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 800cf02:	481c      	ldr	r0, [pc, #112]	; (800cf74 <ssl_handshake_init+0xec>)
        ssl->handshake = NULL;
 800cf04:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 800cf06:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 800cf08:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800cf0a:	b003      	add	sp, #12
 800cf0c:	bd30      	pop	{r4, r5, pc}
    mbedtls_ssl_session_init( ssl->session_negotiate );
 800cf0e:	f7ff fcc5 	bl	800c89c <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 800cf12:	6c25      	ldr	r5, [r4, #64]	; 0x40
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 800cf14:	22d0      	movs	r2, #208	; 0xd0
 800cf16:	2100      	movs	r1, #0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f001 ffc5 	bl	800eea8 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 800cf1e:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800cf22:	f7f8 f9c3 	bl	80052ac <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 800cf26:	f105 0090 	add.w	r0, r5, #144	; 0x90
 800cf2a:	f7f8 f9bf 	bl	80052ac <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 800cf2e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800cf32:	f7fa f895 	bl	8007060 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 800cf36:	f105 0044 	add.w	r0, r5, #68	; 0x44
 800cf3a:	f7fa f891 	bl	8007060 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 800cf3e:	6b24      	ldr	r4, [r4, #48]	; 0x30
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 800cf40:	f44f 7284 	mov.w	r2, #264	; 0x108
 800cf44:	2100      	movs	r1, #0
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 800cf46:	f104 0508 	add.w	r5, r4, #8
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f001 ffac 	bl	800eea8 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 800cf50:	4628      	mov	r0, r5
 800cf52:	f7fb ff44 	bl	8008dde <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 800cf56:	2100      	movs	r1, #0
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f7fb ff53 	bl	8008e04 <mbedtls_sha256_starts_ret>
    set->rsa   = md_alg;
 800cf5e:	2000      	movs	r0, #0
    handshake->update_checksum = ssl_update_checksum_start;
 800cf60:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <ssl_handshake_init+0xf0>)
 800cf62:	6763      	str	r3, [r4, #116]	; 0x74
    set->rsa   = md_alg;
 800cf64:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 800cf66:	7060      	strb	r0, [r4, #1]
 800cf68:	e7cf      	b.n	800cf0a <ssl_handshake_init+0x82>
 800cf6a:	bf00      	nop
 800cf6c:	08014f7d 	.word	0x08014f7d
 800cf70:	08014fa0 	.word	0x08014fa0
 800cf74:	ffff8100 	.word	0xffff8100
 800cf78:	0800a8b9 	.word	0x0800a8b9

0800cf7c <mbedtls_ssl_setup>:
{
 800cf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ssl->conf = conf;
 800cf7e:	6001      	str	r1, [r0, #0]
{
 800cf80:	4604      	mov	r4, r0
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 800cf82:	f241 113d 	movw	r1, #4413	; 0x113d
 800cf86:	2001      	movs	r0, #1
 800cf88:	f001 ff18 	bl	800edbc <calloc>
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	6520      	str	r0, [r4, #80]	; 0x50
 800cf90:	b330      	cbz	r0, 800cfe0 <mbedtls_ssl_setup+0x64>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 800cf92:	f241 113d 	movw	r1, #4413	; 0x113d
 800cf96:	2001      	movs	r0, #1
 800cf98:	f001 ff10 	bl	800edbc <calloc>
 800cf9c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 800cfa0:	b1f0      	cbz	r0, 800cfe0 <mbedtls_ssl_setup+0x64>
        ssl->out_hdr = ssl->out_buf +  8;
 800cfa2:	f100 0308 	add.w	r3, r0, #8
 800cfa6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 800cfaa:	f100 030b 	add.w	r3, r0, #11
        ssl->out_ctr = ssl->out_buf;
 800cfae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_len = ssl->out_buf + 11;
 800cfb2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
 800cfb6:	300d      	adds	r0, #13
        ssl->in_hdr = ssl->in_buf +  8;
 800cfb8:	f105 0308 	add.w	r3, r5, #8
        ssl->out_iv  = ssl->out_buf + 13;
 800cfbc:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 800cfc0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
        ssl->in_ctr = ssl->in_buf;
 800cfc4:	6565      	str	r5, [r4, #84]	; 0x54
        ssl->in_hdr = ssl->in_buf +  8;
 800cfc6:	65a3      	str	r3, [r4, #88]	; 0x58
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 800cfc8:	4620      	mov	r0, r4
        ssl->in_len = ssl->in_buf + 11;
 800cfca:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 800cfce:	350d      	adds	r5, #13
        ssl->in_len = ssl->in_buf + 11;
 800cfd0:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 800cfd2:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 800cfd4:	6665      	str	r5, [r4, #100]	; 0x64
}
 800cfd6:	b003      	add	sp, #12
 800cfd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 800cfdc:	f7ff bf54 	b.w	800ce88 <ssl_handshake_init>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 800cfe0:	f241 133d 	movw	r3, #4413	; 0x113d
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	4b08      	ldr	r3, [pc, #32]	; (800d008 <mbedtls_ssl_setup+0x8c>)
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	4a08      	ldr	r2, [pc, #32]	; (800d00c <mbedtls_ssl_setup+0x90>)
 800cfec:	f241 6329 	movw	r3, #5673	; 0x1629
 800cff0:	2101      	movs	r1, #1
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7f8 fc92 	bl	800591c <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 800cff8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800cffa:	f001 ff19 	bl	800ee30 <free>
}
 800cffe:	4804      	ldr	r0, [pc, #16]	; (800d010 <mbedtls_ssl_setup+0x94>)
        ssl->in_buf = NULL;
 800d000:	2300      	movs	r3, #0
 800d002:	6523      	str	r3, [r4, #80]	; 0x50
}
 800d004:	b003      	add	sp, #12
 800d006:	bd30      	pop	{r4, r5, pc}
 800d008:	0801458d 	.word	0x0801458d
 800d00c:	08014fa0 	.word	0x08014fa0
 800d010:	ffff8100 	.word	0xffff8100

0800d014 <mbedtls_ssl_free>:
{
 800d014:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 800d016:	4604      	mov	r4, r0
 800d018:	2800      	cmp	r0, #0
 800d01a:	d05a      	beq.n	800d0d2 <mbedtls_ssl_free+0xbe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 800d01c:	4b2e      	ldr	r3, [pc, #184]	; (800d0d8 <mbedtls_ssl_free+0xc4>)
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	4a2e      	ldr	r2, [pc, #184]	; (800d0dc <mbedtls_ssl_free+0xc8>)
 800d022:	f641 531b 	movw	r3, #7451	; 0x1d1b
 800d026:	2102      	movs	r1, #2
 800d028:	f7f8 fc78 	bl	800591c <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 800d02c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800d030:	b138      	cbz	r0, 800d042 <mbedtls_ssl_free+0x2e>
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 800d032:	f241 113d 	movw	r1, #4413	; 0x113d
 800d036:	f7fd fb6f 	bl	800a718 <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 800d03a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800d03e:	f001 fef7 	bl	800ee30 <free>
    if( ssl->in_buf != NULL )
 800d042:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d044:	b130      	cbz	r0, 800d054 <mbedtls_ssl_free+0x40>
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 800d046:	f241 113d 	movw	r1, #4413	; 0x113d
 800d04a:	f7fd fb65 	bl	800a718 <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 800d04e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d050:	f001 feee 	bl	800ee30 <free>
    if( ssl->transform )
 800d054:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d056:	b120      	cbz	r0, 800d062 <mbedtls_ssl_free+0x4e>
        mbedtls_ssl_transform_free( ssl->transform );
 800d058:	f7ff fe74 	bl	800cd44 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 800d05c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d05e:	f001 fee7 	bl	800ee30 <free>
    if( ssl->handshake )
 800d062:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d064:	b180      	cbz	r0, 800d088 <mbedtls_ssl_free+0x74>
        mbedtls_ssl_handshake_free( ssl->handshake );
 800d066:	f7ff fe86 	bl	800cd76 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 800d06a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d06c:	f7ff fe6a 	bl	800cd44 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 800d070:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d072:	f7ff fe8e 	bl	800cd92 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 800d076:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d078:	f001 feda 	bl	800ee30 <free>
        mbedtls_free( ssl->transform_negotiate );
 800d07c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d07e:	f001 fed7 	bl	800ee30 <free>
        mbedtls_free( ssl->session_negotiate );
 800d082:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d084:	f001 fed4 	bl	800ee30 <free>
    if( ssl->session )
 800d088:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d08a:	b120      	cbz	r0, 800d096 <mbedtls_ssl_free+0x82>
        mbedtls_ssl_session_free( ssl->session );
 800d08c:	f7ff fe81 	bl	800cd92 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 800d090:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d092:	f001 fecd 	bl	800ee30 <free>
    if( ssl->hostname != NULL )
 800d096:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800d09a:	b155      	cbz	r5, 800d0b2 <mbedtls_ssl_free+0x9e>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 800d09c:	4628      	mov	r0, r5
 800d09e:	f7f3 f89f 	bl	80001e0 <strlen>
 800d0a2:	4601      	mov	r1, r0
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	f7fd fb37 	bl	800a718 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 800d0aa:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800d0ae:	f001 febf 	bl	800ee30 <free>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <mbedtls_ssl_free+0xcc>)
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800d0bc:	4a07      	ldr	r2, [pc, #28]	; (800d0dc <mbedtls_ssl_free+0xc8>)
 800d0be:	2102      	movs	r1, #2
 800d0c0:	f7f8 fc2c 	bl	800591c <mbedtls_debug_print_msg>
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 800d0c4:	21b4      	movs	r1, #180	; 0xb4
 800d0c6:	4620      	mov	r0, r4
}
 800d0c8:	b003      	add	sp, #12
 800d0ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 800d0ce:	f7fd bb23 	b.w	800a718 <mbedtls_zeroize>
}
 800d0d2:	b003      	add	sp, #12
 800d0d4:	bd30      	pop	{r4, r5, pc}
 800d0d6:	bf00      	nop
 800d0d8:	080143da 	.word	0x080143da
 800d0dc:	08014fa0 	.word	0x08014fa0
 800d0e0:	080143e2 	.word	0x080143e2

0800d0e4 <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 800d0e4:	2254      	movs	r2, #84	; 0x54
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	f001 bede 	b.w	800eea8 <memset>

0800d0ec <mbedtls_ssl_config_defaults>:
{
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 800d0f0:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800d0f4:	f361 0000 	bfi	r0, r1, #0, #1
    conf->transport = transport;
 800d0f8:	f362 0041 	bfi	r0, r2, #1, #1
 800d0fc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 800d100:	b929      	cbnz	r1, 800d10e <mbedtls_ssl_config_defaults+0x22>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 800d102:	b2c2      	uxtb	r2, r0
 800d104:	2102      	movs	r1, #2
 800d106:	f361 0283 	bfi	r2, r1, #2, #2
 800d10a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    switch( preset )
 800d10e:	2b02      	cmp	r3, #2
 800d110:	f04f 0303 	mov.w	r3, #3
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 800d114:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 800d118:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 800d11c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 800d120:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    switch( preset )
 800d124:	d10a      	bne.n	800d13c <mbedtls_ssl_config_defaults+0x50>
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 800d126:	4b0a      	ldr	r3, [pc, #40]	; (800d150 <mbedtls_ssl_config_defaults+0x64>)
 800d128:	60e3      	str	r3, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 800d12a:	60a3      	str	r3, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 800d12c:	6063      	str	r3, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 800d12e:	6023      	str	r3, [r4, #0]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 800d130:	4b08      	ldr	r3, [pc, #32]	; (800d154 <mbedtls_ssl_config_defaults+0x68>)
 800d132:	6363      	str	r3, [r4, #52]	; 0x34
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 800d134:	4b08      	ldr	r3, [pc, #32]	; (800d158 <mbedtls_ssl_config_defaults+0x6c>)
            conf->sig_hashes = ssl_preset_default_hashes;
 800d136:	6463      	str	r3, [r4, #68]	; 0x44
}
 800d138:	2000      	movs	r0, #0
 800d13a:	bd10      	pop	{r4, pc}
                                   mbedtls_ssl_list_ciphersuites();
 800d13c:	f7fc faf0 	bl	8009720 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 800d140:	4b06      	ldr	r3, [pc, #24]	; (800d15c <mbedtls_ssl_config_defaults+0x70>)
 800d142:	6363      	str	r3, [r4, #52]	; 0x34
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 800d144:	60e0      	str	r0, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 800d146:	60a0      	str	r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 800d148:	6060      	str	r0, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 800d14a:	6020      	str	r0, [r4, #0]
            conf->sig_hashes = ssl_preset_default_hashes;
 800d14c:	4b04      	ldr	r3, [pc, #16]	; (800d160 <mbedtls_ssl_config_defaults+0x74>)
 800d14e:	e7f2      	b.n	800d136 <mbedtls_ssl_config_defaults+0x4a>
 800d150:	20000074 	.word	0x20000074
 800d154:	08015314 	.word	0x08015314
 800d158:	20000080 	.word	0x20000080
 800d15c:	08015304 	.word	0x08015304
 800d160:	20000068 	.word	0x20000068

0800d164 <mbedtls_ssl_config_free>:
{
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4604      	mov	r4, r0
    ssl_key_cert_free( conf->key_cert );
 800d168:	6b80      	ldr	r0, [r0, #56]	; 0x38
    while( cur != NULL )
 800d16a:	b928      	cbnz	r0, 800d178 <mbedtls_ssl_config_free+0x14>
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 800d16c:	4620      	mov	r0, r4
 800d16e:	2154      	movs	r1, #84	; 0x54
}
 800d170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 800d174:	f7fd bad0 	b.w	800a718 <mbedtls_zeroize>
        next = cur->next;
 800d178:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 800d17a:	f001 fe59 	bl	800ee30 <free>
        cur = next;
 800d17e:	4628      	mov	r0, r5
 800d180:	e7f3      	b.n	800d16a <mbedtls_ssl_config_free+0x6>

0800d182 <mbedtls_ssl_sig_from_pk>:
{
 800d182:	b508      	push	{r3, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 800d184:	2101      	movs	r1, #1
 800d186:	f7fa fa45 	bl	8007614 <mbedtls_pk_can_do>
}
 800d18a:	3000      	adds	r0, #0
 800d18c:	bf18      	it	ne
 800d18e:	2001      	movne	r0, #1
 800d190:	bd08      	pop	{r3, pc}

0800d192 <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
 800d192:	2805      	cmp	r0, #5
 800d194:	d004      	beq.n	800d1a0 <mbedtls_ssl_hash_from_md_alg+0xe>
 800d196:	2806      	cmp	r0, #6
            return( MBEDTLS_SSL_HASH_NONE );
 800d198:	bf0c      	ite	eq
 800d19a:	2004      	moveq	r0, #4
 800d19c:	2000      	movne	r0, #0
 800d19e:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_SHA224 );
 800d1a0:	2003      	movs	r0, #3
}
 800d1a2:	4770      	bx	lr

0800d1a4 <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 800d1a4:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 800d1a6:	7059      	strb	r1, [r3, #1]
 800d1a8:	4770      	bx	lr

0800d1aa <mbedtls_ssl_read_version>:
        *major = ver[0];
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 800d1ae:	785b      	ldrb	r3, [r3, #1]
 800d1b0:	600b      	str	r3, [r1, #0]
 800d1b2:	4770      	bx	lr

0800d1b4 <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 800d1b4:	2300      	movs	r3, #0
{
 800d1b6:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 800d1b8:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 800d1ba:	260a      	movs	r6, #10
    for( ; n > 0; --n )
 800d1bc:	b909      	cbnz	r1, 800d1c2 <x509_parse_int+0xe>
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 800d1be:	4608      	mov	r0, r1
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
        if( ( **p < '0') || ( **p > '9' ) )
 800d1c2:	6805      	ldr	r5, [r0, #0]
 800d1c4:	782b      	ldrb	r3, [r5, #0]
 800d1c6:	3b30      	subs	r3, #48	; 0x30
 800d1c8:	2b09      	cmp	r3, #9
 800d1ca:	d80b      	bhi.n	800d1e4 <x509_parse_int+0x30>
        *res *= 10;
 800d1cc:	6813      	ldr	r3, [r2, #0]
 800d1ce:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 800d1d2:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 800d1d4:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 800d1d6:	6003      	str	r3, [r0, #0]
 800d1d8:	782b      	ldrb	r3, [r5, #0]
 800d1da:	3b30      	subs	r3, #48	; 0x30
 800d1dc:	4423      	add	r3, r4
 800d1de:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 800d1e0:	3901      	subs	r1, #1
 800d1e2:	e7eb      	b.n	800d1bc <x509_parse_int+0x8>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 800d1e4:	4800      	ldr	r0, [pc, #0]	; (800d1e8 <x509_parse_int+0x34>)
}
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	ffffdc00 	.word	0xffffdc00

0800d1ec <mbedtls_x509_get_serial>:
{
 800d1ec:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 800d1ee:	6803      	ldr	r3, [r0, #0]
{
 800d1f0:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 800d1f2:	1aca      	subs	r2, r1, r3
 800d1f4:	2a00      	cmp	r2, #0
{
 800d1f6:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 800d1f8:	dd17      	ble.n	800d22a <mbedtls_x509_get_serial+0x3e>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 800d1fa:	781a      	ldrb	r2, [r3, #0]
 800d1fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d200:	2a02      	cmp	r2, #2
 800d202:	d114      	bne.n	800d22e <mbedtls_x509_get_serial+0x42>
    serial->tag = *(*p)++;
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	6002      	str	r2, [r0, #0]
 800d208:	462a      	mov	r2, r5
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 800d210:	f7f6 f9cf 	bl	80035b2 <mbedtls_asn1_get_len>
 800d214:	b110      	cbz	r0, 800d21c <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 800d216:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 800d220:	6823      	ldr	r3, [r4, #0]
 800d222:	686a      	ldr	r2, [r5, #4]
 800d224:	4413      	add	r3, r2
 800d226:	6023      	str	r3, [r4, #0]
    return( 0 );
 800d228:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 800d22a:	4802      	ldr	r0, [pc, #8]	; (800d234 <mbedtls_x509_get_serial+0x48>)
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 800d22e:	4802      	ldr	r0, [pc, #8]	; (800d238 <mbedtls_x509_get_serial+0x4c>)
}
 800d230:	bd38      	pop	{r3, r4, r5, pc}
 800d232:	bf00      	nop
 800d234:	ffffdd20 	.word	0xffffdd20
 800d238:	ffffdd1e 	.word	0xffffdd1e

0800d23c <mbedtls_x509_get_alg>:
{
 800d23c:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 800d23e:	f7f6 facb 	bl	80037d8 <mbedtls_asn1_get_alg>
 800d242:	b108      	cbz	r0, 800d248 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 800d244:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 800d248:	bd08      	pop	{r3, pc}
	...

0800d24c <mbedtls_x509_get_name>:
{
 800d24c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 800d250:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800d340 <mbedtls_x509_get_name+0xf4>
{
 800d254:	4605      	mov	r5, r0
 800d256:	460f      	mov	r7, r1
 800d258:	4614      	mov	r4, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 800d25a:	2331      	movs	r3, #49	; 0x31
 800d25c:	466a      	mov	r2, sp
 800d25e:	4639      	mov	r1, r7
 800d260:	4628      	mov	r0, r5
 800d262:	f7f6 f9f4 	bl	800364e <mbedtls_asn1_get_tag>
 800d266:	b120      	cbz	r0, 800d272 <mbedtls_x509_get_name+0x26>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 800d268:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 800d26c:	b002      	add	sp, #8
 800d26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        end_set  = *p + set_len;
 800d272:	682e      	ldr	r6, [r5, #0]
 800d274:	9b00      	ldr	r3, [sp, #0]
 800d276:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800d278:	2330      	movs	r3, #48	; 0x30
 800d27a:	aa01      	add	r2, sp, #4
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	f7f6 f9e5 	bl	800364e <mbedtls_asn1_get_tag>
 800d284:	b188      	cbz	r0, 800d2aa <mbedtls_x509_get_name+0x5e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 800d286:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d1ee      	bne.n	800d26c <mbedtls_x509_get_name+0x20>
            if( *p == end_set )
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	429e      	cmp	r6, r3
 800d292:	d03d      	beq.n	800d310 <mbedtls_x509_get_name+0xc4>
            cur->next_merged = 1;
 800d294:	2001      	movs	r0, #1
 800d296:	7720      	strb	r0, [r4, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 800d298:	2120      	movs	r1, #32
 800d29a:	f001 fd8f 	bl	800edbc <calloc>
 800d29e:	61a0      	str	r0, [r4, #24]
            if( cur->next == NULL )
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d1e8      	bne.n	800d278 <mbedtls_x509_get_name+0x2c>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 800d2a6:	4823      	ldr	r0, [pc, #140]	; (800d334 <mbedtls_x509_get_name+0xe8>)
 800d2a8:	e7e0      	b.n	800d26c <mbedtls_x509_get_name+0x20>
    if( ( end - *p ) < 1 )
 800d2aa:	682b      	ldr	r3, [r5, #0]
 800d2ac:	1af2      	subs	r2, r6, r3
 800d2ae:	2a00      	cmp	r2, #0
 800d2b0:	dd3b      	ble.n	800d32a <mbedtls_x509_get_name+0xde>
    oid->tag = **p;
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	2306      	movs	r3, #6
 800d2be:	4628      	mov	r0, r5
 800d2c0:	f7f6 f9c5 	bl	800364e <mbedtls_asn1_get_tag>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d1de      	bne.n	800d286 <mbedtls_x509_get_name+0x3a>
    oid->p = *p;
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	60a3      	str	r3, [r4, #8]
    *p += oid->len;
 800d2cc:	6828      	ldr	r0, [r5, #0]
 800d2ce:	6861      	ldr	r1, [r4, #4]
 800d2d0:	1843      	adds	r3, r0, r1
    if( ( end - *p ) < 1 )
 800d2d2:	1af2      	subs	r2, r6, r3
 800d2d4:	2a00      	cmp	r2, #0
    *p += oid->len;
 800d2d6:	602b      	str	r3, [r5, #0]
    if( ( end - *p ) < 1 )
 800d2d8:	dd27      	ble.n	800d32a <mbedtls_x509_get_name+0xde>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 800d2da:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 800d2dc:	2a1e      	cmp	r2, #30
 800d2de:	d826      	bhi.n	800d32e <mbedtls_x509_get_name+0xe2>
 800d2e0:	fa28 f202 	lsr.w	r2, r8, r2
 800d2e4:	07d2      	lsls	r2, r2, #31
 800d2e6:	d522      	bpl.n	800d32e <mbedtls_x509_get_name+0xe2>
    val->tag = *(*p)++;
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	602b      	str	r3, [r5, #0]
 800d2ec:	5c43      	ldrb	r3, [r0, r1]
 800d2ee:	60e3      	str	r3, [r4, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 800d2f0:	f104 0210 	add.w	r2, r4, #16
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f7f6 f95b 	bl	80035b2 <mbedtls_asn1_get_len>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d1c2      	bne.n	800d286 <mbedtls_x509_get_name+0x3a>
    val->p = *p;
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	6163      	str	r3, [r4, #20]
    *p += val->len;
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	6922      	ldr	r2, [r4, #16]
 800d308:	4413      	add	r3, r2
 800d30a:	602b      	str	r3, [r5, #0]
    cur->next = NULL;
 800d30c:	61a0      	str	r0, [r4, #24]
 800d30e:	e7be      	b.n	800d28e <mbedtls_x509_get_name+0x42>
        if( *p == end )
 800d310:	42b7      	cmp	r7, r6
 800d312:	d008      	beq.n	800d326 <mbedtls_x509_get_name+0xda>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 800d314:	2120      	movs	r1, #32
 800d316:	2001      	movs	r0, #1
 800d318:	f001 fd50 	bl	800edbc <calloc>
 800d31c:	61a0      	str	r0, [r4, #24]
        if( cur->next == NULL )
 800d31e:	4604      	mov	r4, r0
 800d320:	2800      	cmp	r0, #0
 800d322:	d19a      	bne.n	800d25a <mbedtls_x509_get_name+0xe>
 800d324:	e7bf      	b.n	800d2a6 <mbedtls_x509_get_name+0x5a>
            return( 0 );
 800d326:	2000      	movs	r0, #0
 800d328:	e7a0      	b.n	800d26c <mbedtls_x509_get_name+0x20>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 800d32a:	4803      	ldr	r0, [pc, #12]	; (800d338 <mbedtls_x509_get_name+0xec>)
 800d32c:	e79e      	b.n	800d26c <mbedtls_x509_get_name+0x20>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 800d32e:	4803      	ldr	r0, [pc, #12]	; (800d33c <mbedtls_x509_get_name+0xf0>)
 800d330:	e79c      	b.n	800d26c <mbedtls_x509_get_name+0x20>
 800d332:	bf00      	nop
 800d334:	ffffd780 	.word	0xffffd780
 800d338:	ffffdc20 	.word	0xffffdc20
 800d33c:	ffffdc1e 	.word	0xffffdc1e
 800d340:	50581008 	.word	0x50581008

0800d344 <mbedtls_x509_get_time>:
{
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 800d344:	6803      	ldr	r3, [r0, #0]
{
 800d346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d348:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 800d34a:	1aca      	subs	r2, r1, r3
 800d34c:	2a00      	cmp	r2, #0
{
 800d34e:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 800d350:	f340 809f 	ble.w	800d492 <mbedtls_x509_get_time+0x14e>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 800d354:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 800d356:	2a17      	cmp	r2, #23
 800d358:	d00e      	beq.n	800d378 <mbedtls_x509_get_time+0x34>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 800d35a:	2a18      	cmp	r2, #24
 800d35c:	f040 809b 	bne.w	800d496 <mbedtls_x509_get_time+0x152>
        year_len = 4;
 800d360:	2704      	movs	r7, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800d362:	3301      	adds	r3, #1
 800d364:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 800d366:	aa01      	add	r2, sp, #4
 800d368:	4628      	mov	r0, r5
 800d36a:	f7f6 f922 	bl	80035b2 <mbedtls_asn1_get_len>

    if( ret != 0 )
 800d36e:	b128      	cbz	r0, 800d37c <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 800d370:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
 800d374:	b003      	add	sp, #12
 800d376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 800d378:	2702      	movs	r7, #2
 800d37a:	e7f2      	b.n	800d362 <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 800d37c:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
 800d37e:	f107 0308 	add.w	r3, r7, #8
 800d382:	429e      	cmp	r6, r3
 800d384:	d37d      	bcc.n	800d482 <mbedtls_x509_get_time+0x13e>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 800d386:	4622      	mov	r2, r4
 800d388:	4639      	mov	r1, r7
 800d38a:	4628      	mov	r0, r5
 800d38c:	f7ff ff12 	bl	800d1b4 <x509_parse_int>
 800d390:	2800      	cmp	r0, #0
 800d392:	d1ef      	bne.n	800d374 <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 800d394:	2f02      	cmp	r7, #2
 800d396:	d108      	bne.n	800d3aa <mbedtls_x509_get_time+0x66>
        if ( tm->year < 50 )
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 800d39c:	bfdc      	itt	le
 800d39e:	3364      	addle	r3, #100	; 0x64
 800d3a0:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800d3a8:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 800d3aa:	1d22      	adds	r2, r4, #4
 800d3ac:	2102      	movs	r1, #2
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f7ff ff00 	bl	800d1b4 <x509_parse_int>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d1dd      	bne.n	800d374 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 800d3b8:	f104 0208 	add.w	r2, r4, #8
 800d3bc:	2102      	movs	r1, #2
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f7ff fef8 	bl	800d1b4 <x509_parse_int>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d1d5      	bne.n	800d374 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 800d3c8:	f104 020c 	add.w	r2, r4, #12
 800d3cc:	2102      	movs	r1, #2
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	f7ff fef0 	bl	800d1b4 <x509_parse_int>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d1cd      	bne.n	800d374 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 800d3d8:	f104 0210 	add.w	r2, r4, #16
 800d3dc:	2102      	movs	r1, #2
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f7ff fee8 	bl	800d1b4 <x509_parse_int>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d1c5      	bne.n	800d374 <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 800d3e8:	1bf6      	subs	r6, r6, r7
 800d3ea:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d947      	bls.n	800d482 <mbedtls_x509_get_time+0x13e>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 800d3f2:	f104 0214 	add.w	r2, r4, #20
 800d3f6:	2102      	movs	r1, #2
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f7ff fedb 	bl	800d1b4 <x509_parse_int>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d1b8      	bne.n	800d374 <mbedtls_x509_get_time+0x30>
        len -= 2;
 800d402:	3e0a      	subs	r6, #10
    if ( 1 == len && 'Z' == **p )
 800d404:	2e01      	cmp	r6, #1
 800d406:	d13a      	bne.n	800d47e <mbedtls_x509_get_time+0x13a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	781a      	ldrb	r2, [r3, #0]
 800d40c:	2a5a      	cmp	r2, #90	; 0x5a
 800d40e:	d138      	bne.n	800d482 <mbedtls_x509_get_time+0x13e>
        (*p)++;
 800d410:	3301      	adds	r3, #1
 800d412:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	f242 720f 	movw	r2, #9999	; 0x270f
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d831      	bhi.n	800d482 <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 23,   t->hour );
 800d41e:	68e2      	ldr	r2, [r4, #12]
 800d420:	2a17      	cmp	r2, #23
 800d422:	d82e      	bhi.n	800d482 <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->min  );
 800d424:	6922      	ldr	r2, [r4, #16]
 800d426:	2a3b      	cmp	r2, #59	; 0x3b
 800d428:	d82b      	bhi.n	800d482 <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->sec  );
 800d42a:	6962      	ldr	r2, [r4, #20]
 800d42c:	2a3b      	cmp	r2, #59	; 0x3b
 800d42e:	d828      	bhi.n	800d482 <mbedtls_x509_get_time+0x13e>
 800d430:	6861      	ldr	r1, [r4, #4]
 800d432:	290c      	cmp	r1, #12
 800d434:	d825      	bhi.n	800d482 <mbedtls_x509_get_time+0x13e>
 800d436:	2201      	movs	r2, #1
 800d438:	408a      	lsls	r2, r1
 800d43a:	f241 51aa 	movw	r1, #5546	; 0x15aa
 800d43e:	420a      	tst	r2, r1
 800d440:	d121      	bne.n	800d486 <mbedtls_x509_get_time+0x142>
 800d442:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 800d446:	d120      	bne.n	800d48a <mbedtls_x509_get_time+0x146>
 800d448:	0751      	lsls	r1, r2, #29
 800d44a:	d51a      	bpl.n	800d482 <mbedtls_x509_get_time+0x13e>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 800d44c:	079a      	lsls	r2, r3, #30
 800d44e:	d105      	bne.n	800d45c <mbedtls_x509_get_time+0x118>
 800d450:	2164      	movs	r1, #100	; 0x64
 800d452:	fb93 f2f1 	sdiv	r2, r3, r1
 800d456:	fb01 3212 	mls	r2, r1, r2, r3
 800d45a:	b9c2      	cbnz	r2, 800d48e <mbedtls_x509_get_time+0x14a>
                !( t->year % 400 ) )
 800d45c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d460:	fb93 f2f1 	sdiv	r2, r3, r1
 800d464:	fb01 3312 	mls	r3, r1, r2, r3
                month_len = 28;
 800d468:	2b00      	cmp	r3, #0
 800d46a:	bf0c      	ite	eq
 800d46c:	231d      	moveq	r3, #29
 800d46e:	231c      	movne	r3, #28
    CHECK_RANGE( 1, month_len, t->day );
 800d470:	68a2      	ldr	r2, [r4, #8]
 800d472:	2a00      	cmp	r2, #0
 800d474:	dd05      	ble.n	800d482 <mbedtls_x509_get_time+0x13e>
 800d476:	429a      	cmp	r2, r3
 800d478:	f77f af7c 	ble.w	800d374 <mbedtls_x509_get_time+0x30>
 800d47c:	e001      	b.n	800d482 <mbedtls_x509_get_time+0x13e>
    if ( 0 != len )
 800d47e:	2e00      	cmp	r6, #0
 800d480:	d0c8      	beq.n	800d414 <mbedtls_x509_get_time+0xd0>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800d482:	4806      	ldr	r0, [pc, #24]	; (800d49c <mbedtls_x509_get_time+0x158>)
 800d484:	e776      	b.n	800d374 <mbedtls_x509_get_time+0x30>
            month_len = 31;
 800d486:	231f      	movs	r3, #31
 800d488:	e7f2      	b.n	800d470 <mbedtls_x509_get_time+0x12c>
            month_len = 30;
 800d48a:	231e      	movs	r3, #30
 800d48c:	e7f0      	b.n	800d470 <mbedtls_x509_get_time+0x12c>
                month_len = 29;
 800d48e:	231d      	movs	r3, #29
 800d490:	e7ee      	b.n	800d470 <mbedtls_x509_get_time+0x12c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800d492:	4803      	ldr	r0, [pc, #12]	; (800d4a0 <mbedtls_x509_get_time+0x15c>)
 800d494:	e76e      	b.n	800d374 <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800d496:	4803      	ldr	r0, [pc, #12]	; (800d4a4 <mbedtls_x509_get_time+0x160>)
 800d498:	e76c      	b.n	800d374 <mbedtls_x509_get_time+0x30>
 800d49a:	bf00      	nop
 800d49c:	ffffdc00 	.word	0xffffdc00
 800d4a0:	ffffdba0 	.word	0xffffdba0
 800d4a4:	ffffdb9e 	.word	0xffffdb9e

0800d4a8 <mbedtls_x509_get_sig>:
{
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 800d4a8:	6803      	ldr	r3, [r0, #0]
{
 800d4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4ac:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 800d4ae:	1aca      	subs	r2, r1, r3
 800d4b0:	2a00      	cmp	r2, #0
{
 800d4b2:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 800d4b4:	dd11      	ble.n	800d4da <mbedtls_x509_get_sig+0x32>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800d4b6:	aa01      	add	r2, sp, #4
    tag_type = **p;
 800d4b8:	781e      	ldrb	r6, [r3, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 800d4ba:	f7f6 f93b 	bl	8003734 <mbedtls_asn1_get_bitstring_null>
 800d4be:	b118      	cbz	r0, 800d4c8 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 800d4c0:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
    sig->p = *p;

    *p += len;

    return( 0 );
}
 800d4c4:	b002      	add	sp, #8
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 800d4cc:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 800d4ce:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 800d4d0:	602e      	str	r6, [r5, #0]
    *p += len;
 800d4d2:	4413      	add	r3, r2
    sig->len = len;
 800d4d4:	606a      	str	r2, [r5, #4]
    *p += len;
 800d4d6:	6023      	str	r3, [r4, #0]
    return( 0 );
 800d4d8:	e7f4      	b.n	800d4c4 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 800d4da:	4801      	ldr	r0, [pc, #4]	; (800d4e0 <mbedtls_x509_get_sig+0x38>)
 800d4dc:	e7f2      	b.n	800d4c4 <mbedtls_x509_get_sig+0x1c>
 800d4de:	bf00      	nop
 800d4e0:	ffffdb20 	.word	0xffffdb20

0800d4e4 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 800d4ea:	9a02      	ldr	r2, [sp, #8]
 800d4ec:	6812      	ldr	r2, [r2, #0]
 800d4ee:	b982      	cbnz	r2, 800d512 <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	f7f9 ff73 	bl	80073dc <mbedtls_oid_get_sig_alg>
 800d4f6:	b110      	cbz	r0, 800d4fe <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 800d4f8:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 800d4fc:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	2b05      	cmp	r3, #5
 800d502:	d000      	beq.n	800d506 <mbedtls_x509_get_sig_alg+0x22>
 800d504:	b93b      	cbnz	r3, 800d516 <mbedtls_x509_get_sig_alg+0x32>
 800d506:	6862      	ldr	r2, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 800d508:	4b04      	ldr	r3, [pc, #16]	; (800d51c <mbedtls_x509_get_sig_alg+0x38>)
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	bf18      	it	ne
 800d50e:	4618      	movne	r0, r3
 800d510:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800d512:	4803      	ldr	r0, [pc, #12]	; (800d520 <mbedtls_x509_get_sig_alg+0x3c>)
 800d514:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 800d516:	4801      	ldr	r0, [pc, #4]	; (800d51c <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 800d518:	bd10      	pop	{r4, pc}
 800d51a:	bf00      	nop
 800d51c:	ffffdd00 	.word	0xffffdd00
 800d520:	ffffd800 	.word	0xffffd800

0800d524 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 800d524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d526:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 800d528:	6802      	ldr	r2, [r0, #0]
 800d52a:	428a      	cmp	r2, r1
{
 800d52c:	4604      	mov	r4, r0
    if( *p == end )
 800d52e:	d01d      	beq.n	800d56c <mbedtls_x509_get_ext+0x48>
        return( 0 );

    ext->tag = **p;
 800d530:	7815      	ldrb	r5, [r2, #0]
 800d532:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 800d534:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 800d538:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 800d53c:	f7f6 f887 	bl	800364e <mbedtls_asn1_get_tag>
 800d540:	b968      	cbnz	r0, 800d55e <mbedtls_x509_get_ext+0x3a>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 800d546:	6825      	ldr	r5, [r4, #0]
 800d548:	6873      	ldr	r3, [r6, #4]
 800d54a:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800d54c:	aa01      	add	r2, sp, #4
 800d54e:	2330      	movs	r3, #48	; 0x30
 800d550:	4629      	mov	r1, r5
 800d552:	4620      	mov	r0, r4
 800d554:	f7f6 f87b 	bl	800364e <mbedtls_asn1_get_tag>
 800d558:	b118      	cbz	r0, 800d562 <mbedtls_x509_get_ext+0x3e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 800d55a:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800d55e:	b002      	add	sp, #8
 800d560:	bd70      	pop	{r4, r5, r6, pc}
    if( end != *p + len )
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	9a01      	ldr	r2, [sp, #4]
 800d566:	4413      	add	r3, r2
 800d568:	429d      	cmp	r5, r3
 800d56a:	d101      	bne.n	800d570 <mbedtls_x509_get_ext+0x4c>
    return( 0 );
 800d56c:	2000      	movs	r0, #0
 800d56e:	e7f6      	b.n	800d55e <mbedtls_x509_get_ext+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800d570:	4800      	ldr	r0, [pc, #0]	; (800d574 <mbedtls_x509_get_ext+0x50>)
 800d572:	e7f4      	b.n	800d55e <mbedtls_x509_get_ext+0x3a>
 800d574:	ffffda9a 	.word	0xffffda9a

0800d578 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	b0c3      	sub	sp, #268	; 0x10c
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 800d57e:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 800d582:	f10d 0808 	add.w	r8, sp, #8
{
 800d586:	460f      	mov	r7, r1
 800d588:	4691      	mov	r9, r2
    memset( s, 0, sizeof( s ) );
 800d58a:	4651      	mov	r1, sl
 800d58c:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d590:	4606      	mov	r6, r0
    memset( s, 0, sizeof( s ) );
 800d592:	4640      	mov	r0, r8
    const char *short_name = NULL;
 800d594:	f8cd a004 	str.w	sl, [sp, #4]
    memset( s, 0, sizeof( s ) );
 800d598:	f001 fc86 	bl	800eea8 <memset>
    unsigned char c, merge = 0;
 800d59c:	4652      	mov	r2, sl
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
 800d59e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d678 <mbedtls_x509_dn_gets+0x100>
    name = dn;
 800d5a2:	464d      	mov	r5, r9
    n = size;
 800d5a4:	463c      	mov	r4, r7
                 s[i] = '?';
 800d5a6:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    while( name != NULL )
 800d5aa:	b90d      	cbnz	r5, 800d5b0 <mbedtls_x509_dn_gets+0x38>

        merge = name->next_merged;
        name = name->next;
    }

    return( (int) ( size - n ) );
 800d5ac:	1b38      	subs	r0, r7, r4
 800d5ae:	e012      	b.n	800d5d6 <mbedtls_x509_dn_gets+0x5e>
        if( !name->oid.p )
 800d5b0:	68ab      	ldr	r3, [r5, #8]
 800d5b2:	b90b      	cbnz	r3, 800d5b8 <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 800d5b4:	69ad      	ldr	r5, [r5, #24]
 800d5b6:	e7f8      	b.n	800d5aa <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 800d5b8:	454d      	cmp	r5, r9
 800d5ba:	d013      	beq.n	800d5e4 <mbedtls_x509_dn_gets+0x6c>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 800d5bc:	4b29      	ldr	r3, [pc, #164]	; (800d664 <mbedtls_x509_dn_gets+0xec>)
 800d5be:	492a      	ldr	r1, [pc, #168]	; (800d668 <mbedtls_x509_dn_gets+0xf0>)
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	2a00      	cmp	r2, #0
 800d5c4:	bf14      	ite	ne
 800d5c6:	460a      	movne	r2, r1
 800d5c8:	461a      	moveq	r2, r3
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	f001 fe1c 	bl	800f208 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	da03      	bge.n	800d5dc <mbedtls_x509_dn_gets+0x64>
 800d5d4:	4825      	ldr	r0, [pc, #148]	; (800d66c <mbedtls_x509_dn_gets+0xf4>)
}
 800d5d6:	b043      	add	sp, #268	; 0x10c
 800d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 800d5dc:	4284      	cmp	r4, r0
 800d5de:	d9f9      	bls.n	800d5d4 <mbedtls_x509_dn_gets+0x5c>
 800d5e0:	1a24      	subs	r4, r4, r0
 800d5e2:	4406      	add	r6, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 800d5e4:	a901      	add	r1, sp, #4
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f7f9 fe9e 	bl	8007328 <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 800d5ec:	bb10      	cbnz	r0, 800d634 <mbedtls_x509_dn_gets+0xbc>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	4a1f      	ldr	r2, [pc, #124]	; (800d670 <mbedtls_x509_dn_gets+0xf8>)
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f001 fe07 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	dbea      	blt.n	800d5d4 <mbedtls_x509_dn_gets+0x5c>
 800d5fe:	4284      	cmp	r4, r0
 800d600:	d9e8      	bls.n	800d5d4 <mbedtls_x509_dn_gets+0x5c>
 800d602:	1a24      	subs	r4, r4, r0
 800d604:	4406      	add	r6, r0
        for( i = 0; i < name->val.len; i++ )
 800d606:	2300      	movs	r3, #0
 800d608:	692a      	ldr	r2, [r5, #16]
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d201      	bcs.n	800d612 <mbedtls_x509_dn_gets+0x9a>
            if( i >= sizeof( s ) - 1 )
 800d60e:	2bff      	cmp	r3, #255	; 0xff
 800d610:	d116      	bne.n	800d640 <mbedtls_x509_dn_gets+0xc8>
        s[i] = '\0';
 800d612:	2200      	movs	r2, #0
 800d614:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 800d618:	4621      	mov	r1, r4
 800d61a:	4643      	mov	r3, r8
 800d61c:	4652      	mov	r2, sl
 800d61e:	4630      	mov	r0, r6
 800d620:	f001 fdf2 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800d624:	2800      	cmp	r0, #0
 800d626:	dbd5      	blt.n	800d5d4 <mbedtls_x509_dn_gets+0x5c>
 800d628:	4284      	cmp	r4, r0
 800d62a:	d9d3      	bls.n	800d5d4 <mbedtls_x509_dn_gets+0x5c>
 800d62c:	1a24      	subs	r4, r4, r0
 800d62e:	4406      	add	r6, r0
        merge = name->next_merged;
 800d630:	7f2a      	ldrb	r2, [r5, #28]
 800d632:	e7bf      	b.n	800d5b4 <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 800d634:	4a0f      	ldr	r2, [pc, #60]	; (800d674 <mbedtls_x509_dn_gets+0xfc>)
 800d636:	4621      	mov	r1, r4
 800d638:	4630      	mov	r0, r6
 800d63a:	f001 fde5 	bl	800f208 <sniprintf>
 800d63e:	e7dc      	b.n	800d5fa <mbedtls_x509_dn_gets+0x82>
            c = name->val.p[i];
 800d640:	696a      	ldr	r2, [r5, #20]
 800d642:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 800d644:	2a1f      	cmp	r2, #31
 800d646:	d906      	bls.n	800d656 <mbedtls_x509_dn_gets+0xde>
 800d648:	2a7f      	cmp	r2, #127	; 0x7f
 800d64a:	d004      	beq.n	800d656 <mbedtls_x509_dn_gets+0xde>
 800d64c:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 800d650:	b2c9      	uxtb	r1, r1
 800d652:	291e      	cmp	r1, #30
 800d654:	d803      	bhi.n	800d65e <mbedtls_x509_dn_gets+0xe6>
                 s[i] = '?';
 800d656:	f808 b003 	strb.w	fp, [r8, r3]
        for( i = 0; i < name->val.len; i++ )
 800d65a:	3301      	adds	r3, #1
 800d65c:	e7d4      	b.n	800d608 <mbedtls_x509_dn_gets+0x90>
            else s[i] = c;
 800d65e:	f808 2003 	strb.w	r2, [r8, r3]
 800d662:	e7fa      	b.n	800d65a <mbedtls_x509_dn_gets+0xe2>
 800d664:	08014ff8 	.word	0x08014ff8
 800d668:	08014ff4 	.word	0x08014ff4
 800d66c:	ffffd680 	.word	0xffffd680
 800d670:	08014ffb 	.word	0x08014ffb
 800d674:	08014fff 	.word	0x08014fff
 800d678:	08013d0f 	.word	0x08013d0f

0800d67c <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 800d67c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
 800d680:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 800d682:	f8df a084 	ldr.w	sl, [pc, #132]	; 800d708 <mbedtls_x509_serial_gets+0x8c>
 800d686:	f8df b084 	ldr.w	fp, [pc, #132]	; 800d70c <mbedtls_x509_serial_gets+0x90>
        ? serial->len  : 28;
 800d68a:	2e20      	cmp	r6, #32
{
 800d68c:	4680      	mov	r8, r0
 800d68e:	460f      	mov	r7, r1
 800d690:	4691      	mov	r9, r2
        ? serial->len  : 28;
 800d692:	bf88      	it	hi
 800d694:	261c      	movhi	r6, #28
    n = size;
 800d696:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
 800d698:	2500      	movs	r5, #0
 800d69a:	42b5      	cmp	r5, r6
 800d69c:	d10f      	bne.n	800d6be <mbedtls_x509_serial_gets+0x42>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 800d69e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d6a2:	429d      	cmp	r5, r3
 800d6a4:	d009      	beq.n	800d6ba <mbedtls_x509_serial_gets+0x3e>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 800d6a6:	4a15      	ldr	r2, [pc, #84]	; (800d6fc <mbedtls_x509_serial_gets+0x80>)
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	f001 fdac 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	db19      	blt.n	800d6e8 <mbedtls_x509_serial_gets+0x6c>
 800d6b4:	4284      	cmp	r4, r0
 800d6b6:	d917      	bls.n	800d6e8 <mbedtls_x509_serial_gets+0x6c>
 800d6b8:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 800d6ba:	1b38      	subs	r0, r7, r4
 800d6bc:	e015      	b.n	800d6ea <mbedtls_x509_serial_gets+0x6e>
 800d6be:	f8d9 3008 	ldr.w	r3, [r9, #8]
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 800d6c2:	b91d      	cbnz	r5, 800d6cc <mbedtls_x509_serial_gets+0x50>
 800d6c4:	2e01      	cmp	r6, #1
 800d6c6:	d001      	beq.n	800d6cc <mbedtls_x509_serial_gets+0x50>
 800d6c8:	781a      	ldrb	r2, [r3, #0]
 800d6ca:	b1aa      	cbz	r2, 800d6f8 <mbedtls_x509_serial_gets+0x7c>
        ret = mbedtls_snprintf( p, n, "%02X%s",
 800d6cc:	490c      	ldr	r1, [pc, #48]	; (800d700 <mbedtls_x509_serial_gets+0x84>)
 800d6ce:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 800d6d0:	1e72      	subs	r2, r6, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 800d6d2:	4295      	cmp	r5, r2
 800d6d4:	bf28      	it	cs
 800d6d6:	4651      	movcs	r1, sl
 800d6d8:	9100      	str	r1, [sp, #0]
 800d6da:	465a      	mov	r2, fp
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4640      	mov	r0, r8
 800d6e0:	f001 fd92 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	da03      	bge.n	800d6f0 <mbedtls_x509_serial_gets+0x74>
 800d6e8:	4806      	ldr	r0, [pc, #24]	; (800d704 <mbedtls_x509_serial_gets+0x88>)
}
 800d6ea:	b003      	add	sp, #12
 800d6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 800d6f0:	4284      	cmp	r4, r0
 800d6f2:	d9f9      	bls.n	800d6e8 <mbedtls_x509_serial_gets+0x6c>
 800d6f4:	1a24      	subs	r4, r4, r0
 800d6f6:	4480      	add	r8, r0
    for( i = 0; i < nr; i++ )
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	e7ce      	b.n	800d69a <mbedtls_x509_serial_gets+0x1e>
 800d6fc:	08015018 	.word	0x08015018
 800d700:	0801500f 	.word	0x0801500f
 800d704:	ffffd680 	.word	0xffffd680
 800d708:	08013087 	.word	0x08013087
 800d70c:	08015011 	.word	0x08015011

0800d710 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 800d710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d712:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 800d714:	a902      	add	r1, sp, #8
 800d716:	2300      	movs	r3, #0
{
 800d718:	4605      	mov	r5, r0
    const char *desc = NULL;
 800d71a:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 800d71e:	4610      	mov	r0, r2
 800d720:	f7f9 fe50 	bl	80073c4 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 800d724:	b160      	cbz	r0, 800d740 <mbedtls_x509_sig_alg_gets+0x30>
        ret = mbedtls_snprintf( p, n, "???"  );
 800d726:	4a0b      	ldr	r2, [pc, #44]	; (800d754 <mbedtls_x509_sig_alg_gets+0x44>)
 800d728:	4621      	mov	r1, r4
 800d72a:	4628      	mov	r0, r5
 800d72c:	f001 fd6c 	bl	800f208 <sniprintf>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
 800d730:	2800      	cmp	r0, #0
 800d732:	db0c      	blt.n	800d74e <mbedtls_x509_sig_alg_gets+0x3e>
 800d734:	4b08      	ldr	r3, [pc, #32]	; (800d758 <mbedtls_x509_sig_alg_gets+0x48>)
 800d736:	4284      	cmp	r4, r0
 800d738:	bf98      	it	ls
 800d73a:	4618      	movls	r0, r3
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 800d73c:	b003      	add	sp, #12
 800d73e:	bd30      	pop	{r4, r5, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 800d740:	9b01      	ldr	r3, [sp, #4]
 800d742:	4a06      	ldr	r2, [pc, #24]	; (800d75c <mbedtls_x509_sig_alg_gets+0x4c>)
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f001 fd5e 	bl	800f208 <sniprintf>
 800d74c:	e7f0      	b.n	800d730 <mbedtls_x509_sig_alg_gets+0x20>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800d74e:	4802      	ldr	r0, [pc, #8]	; (800d758 <mbedtls_x509_sig_alg_gets+0x48>)
 800d750:	e7f4      	b.n	800d73c <mbedtls_x509_sig_alg_gets+0x2c>
 800d752:	bf00      	nop
 800d754:	0801501d 	.word	0x0801501d
 800d758:	ffffd680 	.word	0xffffd680
 800d75c:	08013d0f 	.word	0x08013d0f

0800d760 <mbedtls_x509_key_size_helper>:
{
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 800d760:	4613      	mov	r3, r2
{
 800d762:	b510      	push	{r4, lr}
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 800d764:	4a05      	ldr	r2, [pc, #20]	; (800d77c <mbedtls_x509_key_size_helper+0x1c>)
{
 800d766:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 800d768:	f001 fd4e 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800d76c:	1e03      	subs	r3, r0, #0
 800d76e:	4804      	ldr	r0, [pc, #16]	; (800d780 <mbedtls_x509_key_size_helper+0x20>)
 800d770:	db03      	blt.n	800d77a <mbedtls_x509_key_size_helper+0x1a>

    return( 0 );
 800d772:	429c      	cmp	r4, r3
 800d774:	bf88      	it	hi
 800d776:	2000      	movhi	r0, #0
 800d778:	bd10      	pop	{r4, pc}
}
 800d77a:	bd10      	pop	{r4, pc}
 800d77c:	08015003 	.word	0x08015003
 800d780:	ffffd680 	.word	0xffffd680

0800d784 <mbedtls_x509_time_is_past>:
 800d784:	2000      	movs	r0, #0
 800d786:	4770      	bx	lr

0800d788 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 800d788:	2000      	movs	r0, #0
 800d78a:	4770      	bx	lr

0800d78c <mbedtls_zeroize>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 800d78c:	4401      	add	r1, r0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	4288      	cmp	r0, r1
 800d792:	d100      	bne.n	800d796 <mbedtls_zeroize+0xa>
}
 800d794:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 800d796:	7003      	strb	r3, [r0, #0]
 800d798:	3001      	adds	r0, #1
 800d79a:	e7f9      	b.n	800d790 <mbedtls_zeroize+0x4>

0800d79c <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 800d79c:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 800d79e:	2400      	movs	r4, #0
 800d7a0:	4294      	cmp	r4, r2
 800d7a2:	d101      	bne.n	800d7a8 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	bd30      	pop	{r4, r5, pc}
        diff = n1[i] ^ n2[i];
 800d7a8:	5d03      	ldrb	r3, [r0, r4]
 800d7aa:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 800d7ac:	42ab      	cmp	r3, r5
 800d7ae:	d007      	beq.n	800d7c0 <x509_memcasecmp+0x24>
        if( diff == 32 &&
 800d7b0:	405d      	eors	r5, r3
 800d7b2:	2d20      	cmp	r5, #32
 800d7b4:	d106      	bne.n	800d7c4 <x509_memcasecmp+0x28>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 800d7b6:	f023 0320 	bic.w	r3, r3, #32
 800d7ba:	3b41      	subs	r3, #65	; 0x41
 800d7bc:	2b19      	cmp	r3, #25
 800d7be:	d801      	bhi.n	800d7c4 <x509_memcasecmp+0x28>
    for( i = 0; i < len; i++ )
 800d7c0:	3401      	adds	r4, #1
 800d7c2:	e7ed      	b.n	800d7a0 <x509_memcasecmp+0x4>
        return( -1 );
 800d7c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d7c8:	bd30      	pop	{r4, r5, pc}

0800d7ca <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 800d7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 800d7d2:	b92d      	cbnz	r5, 800d7e0 <x509_name_cmp+0x16>
 800d7d4:	1c20      	adds	r0, r4, #0
 800d7d6:	bf18      	it	ne
 800d7d8:	2001      	movne	r0, #1
 800d7da:	4240      	negs	r0, r0
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
        if( a == NULL || b == NULL )
 800d7e0:	2c00      	cmp	r4, #0
 800d7e2:	d036      	beq.n	800d852 <x509_name_cmp+0x88>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 800d7e4:	682a      	ldr	r2, [r5, #0]
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d132      	bne.n	800d852 <x509_name_cmp+0x88>
            a->oid.len != b->oid.len ||
 800d7ec:	686a      	ldr	r2, [r5, #4]
        if( a->oid.tag != b->oid.tag ||
 800d7ee:	6863      	ldr	r3, [r4, #4]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d12e      	bne.n	800d852 <x509_name_cmp+0x88>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 800d7f4:	68a1      	ldr	r1, [r4, #8]
 800d7f6:	68a8      	ldr	r0, [r5, #8]
 800d7f8:	f001 fb22 	bl	800ee40 <memcmp>
            a->oid.len != b->oid.len ||
 800d7fc:	bb48      	cbnz	r0, 800d852 <x509_name_cmp+0x88>
    if( a->tag == b->tag &&
 800d7fe:	68ef      	ldr	r7, [r5, #12]
 800d800:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800d804:	4547      	cmp	r7, r8
 800d806:	d110      	bne.n	800d82a <x509_name_cmp+0x60>
        a->len == b->len &&
 800d808:	692e      	ldr	r6, [r5, #16]
    if( a->tag == b->tag &&
 800d80a:	6923      	ldr	r3, [r4, #16]
 800d80c:	429e      	cmp	r6, r3
 800d80e:	d128      	bne.n	800d862 <x509_name_cmp+0x98>
        memcmp( a->p, b->p, b->len ) == 0 )
 800d810:	4632      	mov	r2, r6
 800d812:	6961      	ldr	r1, [r4, #20]
 800d814:	6968      	ldr	r0, [r5, #20]
 800d816:	f001 fb13 	bl	800ee40 <memcmp>
        a->len == b->len &&
 800d81a:	b9f0      	cbnz	r0, 800d85a <x509_name_cmp+0x90>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 800d81c:	7f2a      	ldrb	r2, [r5, #28]
 800d81e:	7f23      	ldrb	r3, [r4, #28]
 800d820:	429a      	cmp	r2, r3
 800d822:	d116      	bne.n	800d852 <x509_name_cmp+0x88>
            return( -1 );

        a = a->next;
 800d824:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 800d826:	69a4      	ldr	r4, [r4, #24]
 800d828:	e7d3      	b.n	800d7d2 <x509_name_cmp+0x8>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800d82a:	2f0c      	cmp	r7, #12
 800d82c:	d001      	beq.n	800d832 <x509_name_cmp+0x68>
 800d82e:	2f13      	cmp	r7, #19
 800d830:	d10f      	bne.n	800d852 <x509_name_cmp+0x88>
 800d832:	f1b8 0f0c 	cmp.w	r8, #12
 800d836:	d002      	beq.n	800d83e <x509_name_cmp+0x74>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800d838:	f1b8 0f13 	cmp.w	r8, #19
 800d83c:	d109      	bne.n	800d852 <x509_name_cmp+0x88>
        a->len == b->len &&
 800d83e:	692a      	ldr	r2, [r5, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800d840:	6923      	ldr	r3, [r4, #16]
 800d842:	429a      	cmp	r2, r3
 800d844:	d105      	bne.n	800d852 <x509_name_cmp+0x88>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 800d846:	6961      	ldr	r1, [r4, #20]
 800d848:	6968      	ldr	r0, [r5, #20]
 800d84a:	f7ff ffa7 	bl	800d79c <x509_memcasecmp>
        a->len == b->len &&
 800d84e:	2800      	cmp	r0, #0
 800d850:	d0e4      	beq.n	800d81c <x509_name_cmp+0x52>
            return( -1 );
 800d852:	f04f 30ff 	mov.w	r0, #4294967295
 800d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800d85a:	2f0c      	cmp	r7, #12
 800d85c:	d103      	bne.n	800d866 <x509_name_cmp+0x9c>
        a->len == b->len &&
 800d85e:	4632      	mov	r2, r6
 800d860:	e7f1      	b.n	800d846 <x509_name_cmp+0x7c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 800d862:	2f0c      	cmp	r7, #12
 800d864:	d0f5      	beq.n	800d852 <x509_name_cmp+0x88>
 800d866:	2f13      	cmp	r7, #19
 800d868:	d0e6      	beq.n	800d838 <x509_name_cmp+0x6e>
 800d86a:	e7f2      	b.n	800d852 <x509_name_cmp+0x88>

0800d86c <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	4605      	mov	r5, r0
 800d870:	460c      	mov	r4, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 800d872:	304c      	adds	r0, #76	; 0x4c
 800d874:	316c      	adds	r1, #108	; 0x6c
{
 800d876:	4616      	mov	r6, r2
 800d878:	461f      	mov	r7, r3
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 800d87a:	f7ff ffa6 	bl	800d7ca <x509_name_cmp>
 800d87e:	b9a0      	cbnz	r0, 800d8aa <x509_crt_check_parent+0x3e>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 800d880:	b166      	cbz	r6, 800d89c <x509_crt_check_parent+0x30>
 800d882:	69a6      	ldr	r6, [r4, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 800d884:	b147      	cbz	r7, 800d898 <x509_crt_check_parent+0x2c>
        child->raw.len == parent->raw.len &&
 800d886:	686a      	ldr	r2, [r5, #4]
    if( top && bottom &&
 800d888:	6863      	ldr	r3, [r4, #4]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d104      	bne.n	800d898 <x509_crt_check_parent+0x2c>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 800d88e:	68a1      	ldr	r1, [r4, #8]
 800d890:	68a8      	ldr	r0, [r5, #8]
 800d892:	f001 fad5 	bl	800ee40 <memcmp>
        child->raw.len == parent->raw.len &&
 800d896:	b160      	cbz	r0, 800d8b2 <x509_crt_check_parent+0x46>
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 800d898:	2e02      	cmp	r6, #2
 800d89a:	dd09      	ble.n	800d8b0 <x509_crt_check_parent+0x44>
 800d89c:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 800d8a0:	fab0 f080 	clz	r0, r0
 800d8a4:	0940      	lsrs	r0, r0, #5
 800d8a6:	4240      	negs	r0, r0
 800d8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( -1 );
 800d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        return( -1 );
    }
#endif

    return( 0 );
 800d8b0:	2000      	movs	r0, #0
}
 800d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8b4 <x509_check_wildcard>:
{
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	460e      	mov	r6, r1
 800d8b8:	4604      	mov	r4, r0
    size_t cn_idx = 0, cn_len = strlen( cn );
 800d8ba:	f7f2 fc91 	bl	80001e0 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 800d8be:	6875      	ldr	r5, [r6, #4]
 800d8c0:	2d02      	cmp	r5, #2
 800d8c2:	d922      	bls.n	800d90a <x509_check_wildcard+0x56>
 800d8c4:	68b6      	ldr	r6, [r6, #8]
 800d8c6:	7833      	ldrb	r3, [r6, #0]
 800d8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ca:	d11e      	bne.n	800d90a <x509_check_wildcard+0x56>
 800d8cc:	7873      	ldrb	r3, [r6, #1]
 800d8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d8d0:	d11b      	bne.n	800d90a <x509_check_wildcard+0x56>
 800d8d2:	4623      	mov	r3, r4
 800d8d4:	2200      	movs	r2, #0
    for( i = 0; i < cn_len; ++i )
 800d8d6:	4282      	cmp	r2, r0
 800d8d8:	d102      	bne.n	800d8e0 <x509_check_wildcard+0x2c>
        return( -1 );
 800d8da:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
        if( cn[i] == '.' )
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	780c      	ldrb	r4, [r1, #0]
 800d8e6:	2c2e      	cmp	r4, #46	; 0x2e
 800d8e8:	d001      	beq.n	800d8ee <x509_check_wildcard+0x3a>
    for( i = 0; i < cn_len; ++i )
 800d8ea:	3201      	adds	r2, #1
 800d8ec:	e7f3      	b.n	800d8d6 <x509_check_wildcard+0x22>
    if( cn_idx == 0 )
 800d8ee:	2a00      	cmp	r2, #0
 800d8f0:	d0f3      	beq.n	800d8da <x509_check_wildcard+0x26>
    if( cn_len - cn_idx == name->len - 1 &&
 800d8f2:	1a82      	subs	r2, r0, r2
 800d8f4:	3d01      	subs	r5, #1
 800d8f6:	42aa      	cmp	r2, r5
 800d8f8:	d1ef      	bne.n	800d8da <x509_check_wildcard+0x26>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 800d8fa:	1c70      	adds	r0, r6, #1
 800d8fc:	f7ff ff4e 	bl	800d79c <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 800d900:	3000      	adds	r0, #0
 800d902:	bf18      	it	ne
 800d904:	2001      	movne	r0, #1
 800d906:	4240      	negs	r0, r0
 800d908:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 800d90a:	2000      	movs	r0, #0
 800d90c:	bd70      	pop	{r4, r5, r6, pc}

0800d90e <x509_get_uid>:
{
 800d90e:	b570      	push	{r4, r5, r6, lr}
 800d910:	4615      	mov	r5, r2
    if( *p == end )
 800d912:	6802      	ldr	r2, [r0, #0]
 800d914:	428a      	cmp	r2, r1
{
 800d916:	4604      	mov	r4, r0
    if( *p == end )
 800d918:	d00b      	beq.n	800d932 <x509_get_uid+0x24>
    uid->tag = **p;
 800d91a:	7816      	ldrb	r6, [r2, #0]
 800d91c:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 800d91e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
 800d922:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 800d926:	f7f5 fe92 	bl	800364e <mbedtls_asn1_get_tag>
 800d92a:	b120      	cbz	r0, 800d936 <x509_get_uid+0x28>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800d92c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800d930:	d107      	bne.n	800d942 <x509_get_uid+0x34>
            return( 0 );
 800d932:	2000      	movs	r0, #0
 800d934:	bd70      	pop	{r4, r5, r6, pc}
    uid->p = *p;
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	686a      	ldr	r2, [r5, #4]
 800d93e:	4413      	add	r3, r2
 800d940:	6023      	str	r3, [r4, #0]
}
 800d942:	bd70      	pop	{r4, r5, r6, pc}

0800d944 <x509_profile_check_key.isra.3>:
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 800d944:	2901      	cmp	r1, #1
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 800d946:	b510      	push	{r4, lr}
 800d948:	4604      	mov	r4, r0
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 800d94a:	d001      	beq.n	800d950 <x509_profile_check_key.isra.3+0xc>
 800d94c:	2906      	cmp	r1, #6
 800d94e:	d109      	bne.n	800d964 <x509_profile_check_key.isra.3+0x20>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 800d950:	4610      	mov	r0, r2
 800d952:	f7f9 ff11 	bl	8007778 <mbedtls_pk_get_bitlen>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	4298      	cmp	r0, r3
 800d95a:	f04f 30ff 	mov.w	r0, #4294967295
 800d95e:	bf28      	it	cs
 800d960:	2000      	movcs	r0, #0
 800d962:	bd10      	pop	{r4, pc}
    return( -1 );
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d968:	bd10      	pop	{r4, pc}

0800d96a <x509_crt_verify_top.isra.4>:

static int x509_crt_verify_top(
 800d96a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96e:	b093      	sub	sp, #76	; 0x4c
 800d970:	4604      	mov	r4, r0
 800d972:	4698      	mov	r8, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 800d974:	30a4      	adds	r0, #164	; 0xa4
    uint32_t ca_flags = 0;
 800d976:	2300      	movs	r3, #0
static int x509_crt_verify_top(
 800d978:	460e      	mov	r6, r1
 800d97a:	4692      	mov	sl, r2
 800d97c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d97e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
    uint32_t ca_flags = 0;
 800d982:	9309      	str	r3, [sp, #36]	; 0x24
    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 800d984:	f7ff fefe 	bl	800d784 <mbedtls_x509_time_is_past>
 800d988:	b118      	cbz	r0, 800d992 <x509_crt_verify_top.isra.4+0x28>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	f043 0301 	orr.w	r3, r3, #1
 800d990:	602b      	str	r3, [r5, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 800d992:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800d996:	f7ff fef7 	bl	800d788 <mbedtls_x509_time_is_future>
 800d99a:	b118      	cbz	r0, 800d9a4 <x509_crt_verify_top.isra.4+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d9a2:	602b      	str	r3, [r5, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 800d9a4:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	1e42      	subs	r2, r0, #1
 800d9ac:	4093      	lsls	r3, r2
 800d9ae:	f8da 2000 	ldr.w	r2, [sl]
 800d9b2:	4213      	tst	r3, r2
 800d9b4:	f000 80bc 	beq.w	800db30 <x509_crt_verify_top.isra.4+0x1c6>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800d9b8:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 800d9bc:	1e5a      	subs	r2, r3, #1
 800d9be:	2301      	movs	r3, #1
 800d9c0:	4093      	lsls	r3, r2
 800d9c2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d9c6:	4213      	tst	r3, r2
 800d9c8:	f000 80b7 	beq.w	800db3a <x509_crt_verify_top.isra.4+0x1d0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	f043 0308 	orr.w	r3, r3, #8
 800d9d2:	602b      	str	r3, [r5, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 800d9d4:	f7f9 fb36 	bl	8007044 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 800d9d8:	9004      	str	r0, [sp, #16]
 800d9da:	b160      	cbz	r0, 800d9f6 <x509_crt_verify_top.isra.4+0x8c>
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 800d9dc:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800d9e0:	465b      	mov	r3, fp
 800d9e2:	6922      	ldr	r2, [r4, #16]
 800d9e4:	6961      	ldr	r1, [r4, #20]
 800d9e6:	f7f9 fb81 	bl	80070ec <mbedtls_md>
 800d9ea:	2700      	movs	r7, #0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800d9ec:	f8cd b014 	str.w	fp, [sp, #20]
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 800d9f0:	b936      	cbnz	r6, 800da00 <x509_crt_verify_top.isra.4+0x96>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 800d9f2:	2f00      	cmp	r7, #0
 800d9f4:	d153      	bne.n	800da9e <x509_crt_verify_top.isra.4+0x134>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 800d9f6:	f1b9 0f00 	cmp.w	r9, #0
 800d9fa:	f040 8091 	bne.w	800db20 <x509_crt_verify_top.isra.4+0x1b6>
 800d9fe:	e07f      	b.n	800db00 <x509_crt_verify_top.isra.4+0x196>
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 800da00:	fab8 f388 	clz	r3, r8
 800da04:	095b      	lsrs	r3, r3, #5
 800da06:	2201      	movs	r2, #1
 800da08:	4631      	mov	r1, r6
 800da0a:	4620      	mov	r0, r4
 800da0c:	f7ff ff2e 	bl	800d86c <x509_crt_check_parent>
 800da10:	2800      	cmp	r0, #0
 800da12:	d13a      	bne.n	800da8a <x509_crt_verify_top.isra.4+0x120>
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 800da14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800da16:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800da18:	429a      	cmp	r2, r3
        check_path_cnt = path_cnt + 1;
 800da1a:	f108 0b01 	add.w	fp, r8, #1
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 800da1e:	d107      	bne.n	800da30 <x509_crt_verify_top.isra.4+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 800da20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800da22:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800da24:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800da26:	f001 fa0b 	bl	800ee40 <memcmp>
            check_path_cnt--;
 800da2a:	2800      	cmp	r0, #0
 800da2c:	bf08      	it	eq
 800da2e:	46c3      	moveq	fp, r8
        if( trust_ca->max_pathlen > 0 &&
 800da30:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 800da34:	2b00      	cmp	r3, #0
 800da36:	dd04      	ble.n	800da42 <x509_crt_verify_top.isra.4+0xd8>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 800da38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800da3a:	ebab 0b02 	sub.w	fp, fp, r2
        if( trust_ca->max_pathlen > 0 &&
 800da3e:	455b      	cmp	r3, fp
 800da40:	db23      	blt.n	800da8a <x509_crt_verify_top.isra.4+0x120>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800da42:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800da46:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800da4a:	9804      	ldr	r0, [sp, #16]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800da4c:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 800da50:	9107      	str	r1, [sp, #28]
 800da52:	9306      	str	r3, [sp, #24]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800da54:	f7f9 fc24 	bl	80072a0 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 800da58:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800da5c:	9b05      	ldr	r3, [sp, #20]
 800da5e:	9203      	str	r2, [sp, #12]
 800da60:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800da64:	9202      	str	r2, [sp, #8]
 800da66:	9001      	str	r0, [sp, #4]
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 800da6e:	9b06      	ldr	r3, [sp, #24]
 800da70:	9907      	ldr	r1, [sp, #28]
 800da72:	4658      	mov	r0, fp
 800da74:	f7f9 fe04 	bl	8007680 <mbedtls_pk_verify_ext>
 800da78:	b938      	cbnz	r0, 800da8a <x509_crt_verify_top.isra.4+0x120>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 800da7a:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 800da7e:	f7ff fe81 	bl	800d784 <mbedtls_x509_time_is_past>
 800da82:	b128      	cbz	r0, 800da90 <x509_crt_verify_top.isra.4+0x126>
            if ( future_past_ca == NULL )
 800da84:	2f00      	cmp	r7, #0
 800da86:	bf08      	it	eq
 800da88:	4637      	moveq	r7, r6
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 800da8a:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800da8e:	e7af      	b.n	800d9f0 <x509_crt_verify_top.isra.4+0x86>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 800da90:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 800da94:	f7ff fe78 	bl	800d788 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 800da98:	2800      	cmp	r0, #0
 800da9a:	d1f3      	bne.n	800da84 <x509_crt_verify_top.isra.4+0x11a>
 800da9c:	4637      	mov	r7, r6
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800da9e:	682b      	ldr	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 800daa0:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800daa4:	f023 0308 	bic.w	r3, r3, #8
 800daa8:	602b      	str	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 800daaa:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800daae:	f10a 000c 	add.w	r0, sl, #12
 800dab2:	f7ff ff47 	bl	800d944 <x509_profile_check_key.isra.3>
 800dab6:	b118      	cbz	r0, 800dac0 <x509_crt_verify_top.isra.4+0x156>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 800dab8:	682b      	ldr	r3, [r5, #0]
 800daba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dabe:	602b      	str	r3, [r5, #0]
    if( trust_ca != NULL &&
 800dac0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800dac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d106      	bne.n	800dad6 <x509_crt_verify_top.isra.4+0x16c>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 800dac8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800daca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dacc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dace:	f001 f9b7 	bl	800ee40 <memcmp>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d08f      	beq.n	800d9f6 <x509_crt_verify_top.isra.4+0x8c>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 800dad6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800dada:	f7ff fe53 	bl	800d784 <mbedtls_x509_time_is_past>
 800dade:	b118      	cbz	r0, 800dae8 <x509_crt_verify_top.isra.4+0x17e>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 800dae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae2:	f043 0301 	orr.w	r3, r3, #1
 800dae6:	9309      	str	r3, [sp, #36]	; 0x24
        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 800dae8:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800daec:	f7ff fe4c 	bl	800d788 <mbedtls_x509_time_is_future>
 800daf0:	b118      	cbz	r0, 800dafa <x509_crt_verify_top.isra.4+0x190>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 800daf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800daf8:	9309      	str	r3, [sp, #36]	; 0x24
        if( NULL != f_vrfy )
 800dafa:	f1b9 0f00 	cmp.w	r9, #0
 800dafe:	d107      	bne.n	800db10 <x509_crt_verify_top.isra.4+0x1a6>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db04:	4313      	orrs	r3, r2
 800db06:	602b      	str	r3, [r5, #0]

    return( 0 );
 800db08:	2000      	movs	r0, #0
}
 800db0a:	b013      	add	sp, #76	; 0x4c
 800db0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 800db10:	ab09      	add	r3, sp, #36	; 0x24
 800db12:	f108 0201 	add.w	r2, r8, #1
 800db16:	4639      	mov	r1, r7
 800db18:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800db1a:	47c8      	blx	r9
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d1f4      	bne.n	800db0a <x509_crt_verify_top.isra.4+0x1a0>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 800db20:	462b      	mov	r3, r5
 800db22:	4642      	mov	r2, r8
 800db24:	4621      	mov	r1, r4
 800db26:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800db28:	47c8      	blx	r9
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d0e8      	beq.n	800db00 <x509_crt_verify_top.isra.4+0x196>
 800db2e:	e7ec      	b.n	800db0a <x509_crt_verify_top.isra.4+0x1a0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db36:	602b      	str	r3, [r5, #0]
 800db38:	e73e      	b.n	800d9b8 <x509_crt_verify_top.isra.4+0x4e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db40:	602b      	str	r3, [r5, #0]
 800db42:	e743      	b.n	800d9cc <x509_crt_verify_top.isra.4+0x62>

0800db44 <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 800db44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db48:	b097      	sub	sp, #92	; 0x5c
 800db4a:	4605      	mov	r5, r0
 800db4c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800db4e:	9309      	str	r3, [sp, #36]	; 0x24
    int ret;
    uint32_t parent_flags = 0;
 800db50:	2300      	movs	r3, #0
{
 800db52:	460f      	mov	r7, r1
 800db54:	9207      	str	r2, [sp, #28]
 800db56:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db5a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800db5e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    uint32_t parent_flags = 0;
 800db60:	930d      	str	r3, [sp, #52]	; 0x34
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 800db62:	b156      	cbz	r6, 800db7a <x509_crt_verify_child+0x36>
 800db64:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 800db68:	304c      	adds	r0, #76	; 0x4c
 800db6a:	f7ff fe2e 	bl	800d7ca <x509_name_cmp>
 800db6e:	b908      	cbnz	r0, 800db74 <x509_crt_verify_child+0x30>
        self_cnt++;
 800db70:	f109 0901 	add.w	r9, r9, #1

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 800db74:	2e07      	cmp	r6, #7
 800db76:	f300 80a2 	bgt.w	800dcbe <x509_crt_verify_child+0x17a>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 800db7a:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 800db7e:	f7ff fe01 	bl	800d784 <mbedtls_x509_time_is_past>
 800db82:	b118      	cbz	r0, 800db8c <x509_crt_verify_child+0x48>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	f043 0301 	orr.w	r3, r3, #1
 800db8a:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 800db8c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 800db90:	f7ff fdfa 	bl	800d788 <mbedtls_x509_time_is_future>
 800db94:	b118      	cbz	r0, 800db9e <x509_crt_verify_child+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800db9c:	6023      	str	r3, [r4, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 800db9e:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 800dba2:	2301      	movs	r3, #1
 800dba4:	1e42      	subs	r2, r0, #1
 800dba6:	4093      	lsls	r3, r2
 800dba8:	f8d8 2000 	ldr.w	r2, [r8]
 800dbac:	4213      	tst	r3, r2
 800dbae:	f000 8088 	beq.w	800dcc2 <x509_crt_verify_child+0x17e>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800dbb2:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 800dbb6:	1e5a      	subs	r2, r3, #1
 800dbb8:	2301      	movs	r3, #1
 800dbba:	4093      	lsls	r3, r2
 800dbbc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800dbc0:	4213      	tst	r3, r2
 800dbc2:	f000 8083 	beq.w	800dccc <x509_crt_verify_child+0x188>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 800dbc6:	f7f9 fa3d 	bl	8007044 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 800dbca:	4683      	mov	fp, r0
 800dbcc:	b920      	cbnz	r0, 800dbd8 <x509_crt_verify_child+0x94>

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	f043 0308 	orr.w	r3, r3, #8
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	e02f      	b.n	800dc38 <x509_crt_verify_child+0xf4>
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 800dbd8:	692a      	ldr	r2, [r5, #16]
 800dbda:	6969      	ldr	r1, [r5, #20]
 800dbdc:	ab0e      	add	r3, sp, #56	; 0x38
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 800dbde:	f107 0abc 	add.w	sl, r7, #188	; 0xbc
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 800dbe2:	f7f9 fa83 	bl	80070ec <mbedtls_md>
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 800dbe6:	4652      	mov	r2, sl
 800dbe8:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 800dbec:	f108 000c 	add.w	r0, r8, #12
 800dbf0:	f7ff fea8 	bl	800d944 <x509_profile_check_key.isra.3>
 800dbf4:	b118      	cbz	r0, 800dbfe <x509_crt_verify_child+0xba>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbfc:	6023      	str	r3, [r4, #0]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 800dbfe:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 800dc02:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 800dc06:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800dc08:	4658      	mov	r0, fp
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 800dc0a:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 800dc0e:	910b      	str	r1, [sp, #44]	; 0x2c
 800dc10:	930a      	str	r3, [sp, #40]	; 0x28
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 800dc12:	f7f9 fb45 	bl	80072a0 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 800dc16:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 800dc1a:	9203      	str	r2, [sp, #12]
 800dc1c:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 800dc20:	9202      	str	r2, [sp, #8]
 800dc22:	aa0e      	add	r2, sp, #56	; 0x38
 800dc24:	9001      	str	r0, [sp, #4]
 800dc26:	9200      	str	r2, [sp, #0]
 800dc28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc2c:	9808      	ldr	r0, [sp, #32]
 800dc2e:	4652      	mov	r2, sl
 800dc30:	f7f9 fd26 	bl	8007680 <mbedtls_pk_verify_ext>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d1ca      	bne.n	800dbce <x509_crt_verify_child+0x8a>
{
 800dc38:	f8dd a01c 	ldr.w	sl, [sp, #28]
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 800dc3c:	f1ba 0f00 	cmp.w	sl, #0
 800dc40:	d106      	bne.n	800dc50 <x509_crt_verify_child+0x10c>
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 800dc42:	f106 0b02 	add.w	fp, r6, #2
        for( grandparent = parent->next;
 800dc46:	f8d7 a130 	ldr.w	sl, [r7, #304]	; 0x130
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 800dc4a:	ebab 0b09 	sub.w	fp, fp, r9
        for( grandparent = parent->next;
 800dc4e:	e01e      	b.n	800dc8e <x509_crt_verify_child+0x14a>
        if( x509_crt_check_parent( parent, grandparent,
 800dc50:	fab6 f386 	clz	r3, r6
 800dc54:	095b      	lsrs	r3, r3, #5
 800dc56:	2200      	movs	r2, #0
 800dc58:	4651      	mov	r1, sl
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	f7ff fe06 	bl	800d86c <x509_crt_check_parent>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d038      	beq.n	800dcd6 <x509_crt_verify_child+0x192>
         grandparent = grandparent->next )
 800dc64:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
 800dc68:	e7e8      	b.n	800dc3c <x509_crt_verify_child+0xf8>
            if( grandparent->max_pathlen > 0 &&
 800dc6a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dd01      	ble.n	800dc76 <x509_crt_verify_child+0x132>
 800dc72:	455b      	cmp	r3, fp
 800dc74:	db09      	blt.n	800dc8a <x509_crt_verify_child+0x146>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 800dc76:	fab6 f386 	clz	r3, r6
 800dc7a:	095b      	lsrs	r3, r3, #5
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	4651      	mov	r1, sl
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7ff fdf3 	bl	800d86c <x509_crt_check_parent>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d034      	beq.n	800dcf4 <x509_crt_verify_child+0x1b0>
             grandparent = grandparent->next )
 800dc8a:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
        for( grandparent = parent->next;
 800dc8e:	f1ba 0f00 	cmp.w	sl, #0
 800dc92:	d1ea      	bne.n	800dc6a <x509_crt_verify_child+0x126>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 800dc94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dc9a:	9302      	str	r3, [sp, #8]
 800dc9c:	ab0d      	add	r3, sp, #52	; 0x34
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	f8cd 9000 	str.w	r9, [sp]
 800dca4:	1c73      	adds	r3, r6, #1
 800dca6:	4642      	mov	r2, r8
 800dca8:	9907      	ldr	r1, [sp, #28]
 800dcaa:	e01f      	b.n	800dcec <x509_crt_verify_child+0x1a8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 800dcac:	4629      	mov	r1, r5
 800dcae:	4623      	mov	r3, r4
 800dcb0:	4632      	mov	r2, r6
 800dcb2:	9825      	ldr	r0, [sp, #148]	; 0x94
 800dcb4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800dcb6:	47a8      	blx	r5
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d031      	beq.n	800dd20 <x509_crt_verify_child+0x1dc>
 800dcbc:	e035      	b.n	800dd2a <x509_crt_verify_child+0x1e6>
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 800dcbe:	481c      	ldr	r0, [pc, #112]	; (800dd30 <x509_crt_verify_child+0x1ec>)
 800dcc0:	e033      	b.n	800dd2a <x509_crt_verify_child+0x1e6>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	e772      	b.n	800dbb2 <x509_crt_verify_child+0x6e>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 800dccc:	6823      	ldr	r3, [r4, #0]
 800dcce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcd2:	6023      	str	r3, [r4, #0]
 800dcd4:	e777      	b.n	800dbc6 <x509_crt_verify_child+0x82>
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 800dcd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dcd8:	9303      	str	r3, [sp, #12]
 800dcda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dcdc:	9302      	str	r3, [sp, #8]
 800dcde:	ab0d      	add	r3, sp, #52	; 0x34
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	f8cd 9000 	str.w	r9, [sp]
 800dce6:	1c73      	adds	r3, r6, #1
 800dce8:	4642      	mov	r2, r8
 800dcea:	4651      	mov	r1, sl
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff fe3c 	bl	800d96a <x509_crt_verify_top.isra.4>
 800dcf2:	e011      	b.n	800dd18 <x509_crt_verify_child+0x1d4>
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 800dcf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dcf6:	9305      	str	r3, [sp, #20]
 800dcf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	ab0d      	add	r3, sp, #52	; 0x34
 800dcfe:	9303      	str	r3, [sp, #12]
 800dd00:	1c73      	adds	r3, r6, #1
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	f8cd 9008 	str.w	r9, [sp, #8]
 800dd08:	f8cd 8000 	str.w	r8, [sp]
 800dd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0e:	9a07      	ldr	r2, [sp, #28]
 800dd10:	4651      	mov	r1, sl
 800dd12:	4638      	mov	r0, r7
 800dd14:	f7ff ff16 	bl	800db44 <x509_crt_verify_child>
            if( ret != 0 )
 800dd18:	b938      	cbnz	r0, 800dd2a <x509_crt_verify_child+0x1e6>
    if( NULL != f_vrfy )
 800dd1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1c5      	bne.n	800dcac <x509_crt_verify_child+0x168>
            return( ret );

    *flags |= parent_flags;
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd24:	4313      	orrs	r3, r2
 800dd26:	6023      	str	r3, [r4, #0]

    return( 0 );
 800dd28:	2000      	movs	r0, #0
}
 800dd2a:	b017      	add	sp, #92	; 0x5c
 800dd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd30:	ffffd000 	.word	0xffffd000

0800dd34 <mbedtls_x509_crt_info>:
{
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd38:	4605      	mov	r5, r0
 800dd3a:	b08d      	sub	sp, #52	; 0x34
 800dd3c:	460f      	mov	r7, r1
 800dd3e:	4690      	mov	r8, r2
    if( NULL == crt )
 800dd40:	461e      	mov	r6, r3
 800dd42:	b95b      	cbnz	r3, 800dd5c <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 800dd44:	4a9a      	ldr	r2, [pc, #616]	; (800dfb0 <mbedtls_x509_crt_info+0x27c>)
 800dd46:	f001 fa5f 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	da01      	bge.n	800dd52 <mbedtls_x509_crt_info+0x1e>
 800dd4e:	4899      	ldr	r0, [pc, #612]	; (800dfb4 <mbedtls_x509_crt_info+0x280>)
 800dd50:	e001      	b.n	800dd56 <mbedtls_x509_crt_info+0x22>
 800dd52:	4287      	cmp	r7, r0
 800dd54:	d9fb      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
}
 800dd56:	b00d      	add	sp, #52	; 0x34
 800dd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	4613      	mov	r3, r2
 800dd62:	4a95      	ldr	r2, [pc, #596]	; (800dfb8 <mbedtls_x509_crt_info+0x284>)
 800dd64:	f001 fa50 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	dbf0      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dd6c:	4287      	cmp	r7, r0
 800dd6e:	d9ee      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dd70:	1a3c      	subs	r4, r7, r0
 800dd72:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 800dd74:	4643      	mov	r3, r8
 800dd76:	4a91      	ldr	r2, [pc, #580]	; (800dfbc <mbedtls_x509_crt_info+0x288>)
 800dd78:	4621      	mov	r1, r4
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f001 fa44 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800dd80:	2800      	cmp	r0, #0
 800dd82:	dbe4      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dd84:	4284      	cmp	r4, r0
 800dd86:	d9e2      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dd88:	1a24      	subs	r4, r4, r0
 800dd8a:	4405      	add	r5, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 800dd8c:	f106 021c 	add.w	r2, r6, #28
 800dd90:	4621      	mov	r1, r4
 800dd92:	4628      	mov	r0, r5
 800dd94:	f7ff fc72 	bl	800d67c <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	dbd8      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dd9c:	4284      	cmp	r4, r0
 800dd9e:	d9d6      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dda0:	1a24      	subs	r4, r4, r0
 800dda2:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 800dda4:	4643      	mov	r3, r8
 800dda6:	4a86      	ldr	r2, [pc, #536]	; (800dfc0 <mbedtls_x509_crt_info+0x28c>)
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f001 fa2c 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	dbcc      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800ddb4:	4284      	cmp	r4, r0
 800ddb6:	d9ca      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800ddb8:	1a24      	subs	r4, r4, r0
 800ddba:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 800ddbc:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f7ff fbd8 	bl	800d578 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	dbc0      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800ddcc:	4284      	cmp	r4, r0
 800ddce:	d9be      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800ddd0:	1a24      	subs	r4, r4, r0
 800ddd2:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 800ddd4:	4643      	mov	r3, r8
 800ddd6:	4a7b      	ldr	r2, [pc, #492]	; (800dfc4 <mbedtls_x509_crt_info+0x290>)
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4628      	mov	r0, r5
 800dddc:	f001 fa14 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800dde0:	2800      	cmp	r0, #0
 800dde2:	dbb4      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dde4:	4284      	cmp	r4, r0
 800dde6:	d9b2      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dde8:	1a24      	subs	r4, r4, r0
 800ddea:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 800ddec:	f106 026c 	add.w	r2, r6, #108	; 0x6c
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f7ff fbc0 	bl	800d578 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	dba8      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800ddfc:	4284      	cmp	r4, r0
 800ddfe:	d9a6      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 800de00:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
 800de04:	9305      	str	r3, [sp, #20]
 800de06:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800de0a:	9304      	str	r3, [sp, #16]
 800de0c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800de10:	9303      	str	r3, [sp, #12]
 800de12:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800de16:	9302      	str	r3, [sp, #8]
 800de18:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800de1c:	9301      	str	r3, [sp, #4]
 800de1e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800de22:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 800de24:	1a24      	subs	r4, r4, r0
 800de26:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 800de28:	4643      	mov	r3, r8
 800de2a:	4a67      	ldr	r2, [pc, #412]	; (800dfc8 <mbedtls_x509_crt_info+0x294>)
 800de2c:	4621      	mov	r1, r4
 800de2e:	4628      	mov	r0, r5
 800de30:	f001 f9ea 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800de34:	2800      	cmp	r0, #0
 800de36:	db8a      	blt.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800de38:	4284      	cmp	r4, r0
 800de3a:	d988      	bls.n	800dd4e <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 800de3c:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 800de40:	9305      	str	r3, [sp, #20]
 800de42:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 800de46:	9304      	str	r3, [sp, #16]
 800de48:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 800de52:	9302      	str	r3, [sp, #8]
 800de54:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800de58:	9301      	str	r3, [sp, #4]
 800de5a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800de5e:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 800de60:	1a24      	subs	r4, r4, r0
 800de62:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 800de64:	4643      	mov	r3, r8
 800de66:	4a59      	ldr	r2, [pc, #356]	; (800dfcc <mbedtls_x509_crt_info+0x298>)
 800de68:	4621      	mov	r1, r4
 800de6a:	4628      	mov	r0, r5
 800de6c:	f001 f9cc 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800de70:	2800      	cmp	r0, #0
 800de72:	f6ff af6c 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800de76:	4284      	cmp	r4, r0
 800de78:	f67f af69 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800de7c:	1a24      	subs	r4, r4, r0
 800de7e:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 800de80:	4643      	mov	r3, r8
 800de82:	4a53      	ldr	r2, [pc, #332]	; (800dfd0 <mbedtls_x509_crt_info+0x29c>)
 800de84:	4621      	mov	r1, r4
 800de86:	4628      	mov	r0, r5
 800de88:	f001 f9be 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f6ff af5e 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800de92:	4284      	cmp	r4, r0
 800de94:	f67f af5b 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 800de98:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
 800de9c:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
 800dea0:	9201      	str	r2, [sp, #4]
 800dea2:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
 800dea6:	9200      	str	r2, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 800dea8:	1a24      	subs	r4, r4, r0
 800deaa:	4405      	add	r5, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 800deac:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800deb0:	4621      	mov	r1, r4
 800deb2:	4628      	mov	r0, r5
 800deb4:	f7ff fc2c 	bl	800d710 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800deb8:	f1b0 0900 	subs.w	r9, r0, #0
 800debc:	f6ff af47 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dec0:	454c      	cmp	r4, r9
 800dec2:	f67f af44 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 800dec6:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
 800deca:	4658      	mov	r0, fp
 800decc:	f7f9 fc6e 	bl	80077ac <mbedtls_pk_get_name>
 800ded0:	f10d 0a1c 	add.w	sl, sp, #28
 800ded4:	4602      	mov	r2, r0
 800ded6:	2112      	movs	r1, #18
 800ded8:	4650      	mov	r0, sl
 800deda:	f7ff fc41 	bl	800d760 <mbedtls_x509_key_size_helper>
 800dede:	2800      	cmp	r0, #0
 800dee0:	f47f af39 	bne.w	800dd56 <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 800dee4:	4658      	mov	r0, fp
 800dee6:	f7f9 fc47 	bl	8007778 <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800deea:	eba4 0409 	sub.w	r4, r4, r9
 800deee:	444d      	add	r5, r9
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 800def0:	9001      	str	r0, [sp, #4]
 800def2:	f8cd a000 	str.w	sl, [sp]
 800def6:	4643      	mov	r3, r8
 800def8:	4a36      	ldr	r2, [pc, #216]	; (800dfd4 <mbedtls_x509_crt_info+0x2a0>)
 800defa:	4621      	mov	r1, r4
 800defc:	4628      	mov	r0, r5
 800defe:	f001 f983 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800df02:	2800      	cmp	r0, #0
 800df04:	f6ff af23 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800df08:	4284      	cmp	r4, r0
 800df0a:	f67f af20 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 800df0e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800df12:	05db      	lsls	r3, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 800df14:	eba4 0400 	sub.w	r4, r4, r0
 800df18:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 800df1a:	d528      	bpl.n	800df6e <mbedtls_x509_crt_info+0x23a>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 800df1c:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 800df20:	4a2d      	ldr	r2, [pc, #180]	; (800dfd8 <mbedtls_x509_crt_info+0x2a4>)
 800df22:	4b2e      	ldr	r3, [pc, #184]	; (800dfdc <mbedtls_x509_crt_info+0x2a8>)
 800df24:	2900      	cmp	r1, #0
 800df26:	bf08      	it	eq
 800df28:	4613      	moveq	r3, r2
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	4a2c      	ldr	r2, [pc, #176]	; (800dfe0 <mbedtls_x509_crt_info+0x2ac>)
 800df2e:	4643      	mov	r3, r8
 800df30:	4621      	mov	r1, r4
 800df32:	4628      	mov	r0, r5
 800df34:	f001 f968 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800df38:	2800      	cmp	r0, #0
 800df3a:	f6ff af08 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800df3e:	4284      	cmp	r4, r0
 800df40:	f67f af05 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
 800df44:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 800df48:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 800df4a:	eba4 0400 	sub.w	r4, r4, r0
 800df4e:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 800df50:	dd0d      	ble.n	800df6e <mbedtls_x509_crt_info+0x23a>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 800df52:	3b01      	subs	r3, #1
 800df54:	4a23      	ldr	r2, [pc, #140]	; (800dfe4 <mbedtls_x509_crt_info+0x2b0>)
 800df56:	4621      	mov	r1, r4
 800df58:	4628      	mov	r0, r5
 800df5a:	f001 f955 	bl	800f208 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 800df5e:	2800      	cmp	r0, #0
 800df60:	f6ff aef5 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800df64:	4284      	cmp	r4, r0
 800df66:	f67f aef2 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800df6a:	1a24      	subs	r4, r4, r0
 800df6c:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 800df6e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800df72:	0698      	lsls	r0, r3, #26
 800df74:	d550      	bpl.n	800e018 <mbedtls_x509_crt_info+0x2e4>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 800df76:	4643      	mov	r3, r8
 800df78:	4a1b      	ldr	r2, [pc, #108]	; (800dfe8 <mbedtls_x509_crt_info+0x2b4>)
 800df7a:	4621      	mov	r1, r4
 800df7c:	4628      	mov	r0, r5
 800df7e:	f001 f943 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800df82:	2800      	cmp	r0, #0
 800df84:	f6ff aee3 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800df88:	42a0      	cmp	r0, r4
 800df8a:	f4bf aee0 	bcs.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800df8e:	1a24      	subs	r4, r4, r0
 800df90:	4405      	add	r5, r0
    size_t sep_len = 0;
 800df92:	2100      	movs	r1, #0
    const char *sep = "";
 800df94:	4815      	ldr	r0, [pc, #84]	; (800dfec <mbedtls_x509_crt_info+0x2b8>)
        sep = ", ";
 800df96:	f8df e058 	ldr.w	lr, [pc, #88]	; 800dff0 <mbedtls_x509_crt_info+0x2bc>
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 800df9a:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
 800df9e:	468c      	mov	ip, r1
        if( cur->buf.len + sep_len >= n )
 800dfa0:	6853      	ldr	r3, [r2, #4]
 800dfa2:	440b      	add	r3, r1
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	d325      	bcc.n	800dff4 <mbedtls_x509_crt_info+0x2c0>
            *p = '\0';
 800dfa8:	f885 c000 	strb.w	ip, [r5]
 800dfac:	e6cf      	b.n	800dd4e <mbedtls_x509_crt_info+0x1a>
 800dfae:	bf00      	nop
 800dfb0:	0801502c 	.word	0x0801502c
 800dfb4:	ffffd680 	.word	0xffffd680
 800dfb8:	0801504c 	.word	0x0801504c
 800dfbc:	08015066 	.word	0x08015066
 800dfc0:	0801507d 	.word	0x0801507d
 800dfc4:	08015095 	.word	0x08015095
 800dfc8:	080150ad 	.word	0x080150ad
 800dfcc:	080150e2 	.word	0x080150e2
 800dfd0:	08015117 	.word	0x08015117
 800dfd4:	0801512f 	.word	0x0801512f
 800dfd8:	08015026 	.word	0x08015026
 800dfdc:	08015021 	.word	0x08015021
 800dfe0:	08015141 	.word	0x08015141
 800dfe4:	0801515e 	.word	0x0801515e
 800dfe8:	0801516f 	.word	0x0801516f
 800dfec:	08013087 	.word	0x08013087
 800dff0:	08014ff8 	.word	0x08014ff8
        n -= cur->buf.len + sep_len;
 800dff4:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 800dff6:	2300      	movs	r3, #0
 800dff8:	428b      	cmp	r3, r1
 800dffa:	f040 819f 	bne.w	800e33c <mbedtls_x509_crt_info+0x608>
 800dffe:	441d      	add	r5, r3
 800e000:	4628      	mov	r0, r5
        for( i = 0; i < cur->buf.len; i++ )
 800e002:	6853      	ldr	r3, [r2, #4]
 800e004:	1a29      	subs	r1, r5, r0
 800e006:	428b      	cmp	r3, r1
 800e008:	f200 819e 	bhi.w	800e348 <mbedtls_x509_crt_info+0x614>
        cur = cur->next;
 800e00c:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 800e00e:	2102      	movs	r1, #2
        sep = ", ";
 800e010:	4670      	mov	r0, lr
    while( cur != NULL )
 800e012:	2a00      	cmp	r2, #0
 800e014:	d1c4      	bne.n	800dfa0 <mbedtls_x509_crt_info+0x26c>
    *p = '\0';
 800e016:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 800e018:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800e01c:	03d9      	lsls	r1, r3, #15
 800e01e:	f140 8099 	bpl.w	800e154 <mbedtls_x509_crt_info+0x420>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 800e022:	4643      	mov	r3, r8
 800e024:	4acb      	ldr	r2, [pc, #812]	; (800e354 <mbedtls_x509_crt_info+0x620>)
 800e026:	4621      	mov	r1, r4
 800e028:	4628      	mov	r0, r5
 800e02a:	f001 f8ed 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e02e:	2800      	cmp	r0, #0
 800e030:	f6ff ae8d 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e034:	42a0      	cmp	r0, r4
 800e036:	f4bf ae8a 	bcs.w	800dd4e <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 800e03a:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 800e03e:	4bc6      	ldr	r3, [pc, #792]	; (800e358 <mbedtls_x509_crt_info+0x624>)
 800e040:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e044:	eba4 0400 	sub.w	r4, r4, r0
 800e048:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 800e04a:	d00d      	beq.n	800e068 <mbedtls_x509_crt_info+0x334>
 800e04c:	4ac3      	ldr	r2, [pc, #780]	; (800e35c <mbedtls_x509_crt_info+0x628>)
 800e04e:	4621      	mov	r1, r4
 800e050:	4628      	mov	r0, r5
 800e052:	f001 f8d9 	bl	800f208 <sniprintf>
 800e056:	2800      	cmp	r0, #0
 800e058:	f6ff ae79 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e05c:	4284      	cmp	r4, r0
 800e05e:	f67f ae76 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e062:	4bbf      	ldr	r3, [pc, #764]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e064:	1a24      	subs	r4, r4, r0
 800e066:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 800e068:	f019 0f40 	tst.w	r9, #64	; 0x40
 800e06c:	d00d      	beq.n	800e08a <mbedtls_x509_crt_info+0x356>
 800e06e:	4abd      	ldr	r2, [pc, #756]	; (800e364 <mbedtls_x509_crt_info+0x630>)
 800e070:	4621      	mov	r1, r4
 800e072:	4628      	mov	r0, r5
 800e074:	f001 f8c8 	bl	800f208 <sniprintf>
 800e078:	2800      	cmp	r0, #0
 800e07a:	f6ff ae68 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e07e:	4284      	cmp	r4, r0
 800e080:	f67f ae65 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e084:	4bb6      	ldr	r3, [pc, #728]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e086:	1a24      	subs	r4, r4, r0
 800e088:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 800e08a:	f019 0f20 	tst.w	r9, #32
 800e08e:	d00d      	beq.n	800e0ac <mbedtls_x509_crt_info+0x378>
 800e090:	4ab5      	ldr	r2, [pc, #724]	; (800e368 <mbedtls_x509_crt_info+0x634>)
 800e092:	4621      	mov	r1, r4
 800e094:	4628      	mov	r0, r5
 800e096:	f001 f8b7 	bl	800f208 <sniprintf>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	f6ff ae57 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e0a0:	4284      	cmp	r4, r0
 800e0a2:	f67f ae54 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e0a6:	4bae      	ldr	r3, [pc, #696]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e0a8:	1a24      	subs	r4, r4, r0
 800e0aa:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 800e0ac:	f019 0f10 	tst.w	r9, #16
 800e0b0:	d00d      	beq.n	800e0ce <mbedtls_x509_crt_info+0x39a>
 800e0b2:	4aae      	ldr	r2, [pc, #696]	; (800e36c <mbedtls_x509_crt_info+0x638>)
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f001 f8a6 	bl	800f208 <sniprintf>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	f6ff ae46 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e0c2:	4284      	cmp	r4, r0
 800e0c4:	f67f ae43 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e0c8:	4ba5      	ldr	r3, [pc, #660]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e0ca:	1a24      	subs	r4, r4, r0
 800e0cc:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 800e0ce:	f019 0f08 	tst.w	r9, #8
 800e0d2:	d00d      	beq.n	800e0f0 <mbedtls_x509_crt_info+0x3bc>
 800e0d4:	4aa6      	ldr	r2, [pc, #664]	; (800e370 <mbedtls_x509_crt_info+0x63c>)
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4628      	mov	r0, r5
 800e0da:	f001 f895 	bl	800f208 <sniprintf>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f6ff ae35 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e0e4:	4284      	cmp	r4, r0
 800e0e6:	f67f ae32 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e0ea:	4b9d      	ldr	r3, [pc, #628]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e0ec:	1a24      	subs	r4, r4, r0
 800e0ee:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 800e0f0:	f019 0f04 	tst.w	r9, #4
 800e0f4:	d00d      	beq.n	800e112 <mbedtls_x509_crt_info+0x3de>
 800e0f6:	4a9f      	ldr	r2, [pc, #636]	; (800e374 <mbedtls_x509_crt_info+0x640>)
 800e0f8:	4621      	mov	r1, r4
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f001 f884 	bl	800f208 <sniprintf>
 800e100:	2800      	cmp	r0, #0
 800e102:	f6ff ae24 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e106:	4284      	cmp	r4, r0
 800e108:	f67f ae21 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e10c:	4b94      	ldr	r3, [pc, #592]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e10e:	1a24      	subs	r4, r4, r0
 800e110:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 800e112:	f019 0f02 	tst.w	r9, #2
 800e116:	d00d      	beq.n	800e134 <mbedtls_x509_crt_info+0x400>
 800e118:	4a97      	ldr	r2, [pc, #604]	; (800e378 <mbedtls_x509_crt_info+0x644>)
 800e11a:	4621      	mov	r1, r4
 800e11c:	4628      	mov	r0, r5
 800e11e:	f001 f873 	bl	800f208 <sniprintf>
 800e122:	2800      	cmp	r0, #0
 800e124:	f6ff ae13 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e128:	4284      	cmp	r4, r0
 800e12a:	f67f ae10 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e12e:	4b8c      	ldr	r3, [pc, #560]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e130:	1a24      	subs	r4, r4, r0
 800e132:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 800e134:	f019 0f01 	tst.w	r9, #1
 800e138:	d00c      	beq.n	800e154 <mbedtls_x509_crt_info+0x420>
 800e13a:	4a90      	ldr	r2, [pc, #576]	; (800e37c <mbedtls_x509_crt_info+0x648>)
 800e13c:	4621      	mov	r1, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	f001 f862 	bl	800f208 <sniprintf>
 800e144:	2800      	cmp	r0, #0
 800e146:	f6ff ae02 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e14a:	4284      	cmp	r4, r0
 800e14c:	f67f adff 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e150:	1a24      	subs	r4, r4, r0
 800e152:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 800e154:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800e158:	075a      	lsls	r2, r3, #29
 800e15a:	f140 80aa 	bpl.w	800e2b2 <mbedtls_x509_crt_info+0x57e>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 800e15e:	4643      	mov	r3, r8
 800e160:	4a87      	ldr	r2, [pc, #540]	; (800e380 <mbedtls_x509_crt_info+0x64c>)
 800e162:	4621      	mov	r1, r4
 800e164:	4628      	mov	r0, r5
 800e166:	f001 f84f 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e16a:	2800      	cmp	r0, #0
 800e16c:	f6ff adef 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e170:	42a0      	cmp	r0, r4
 800e172:	f4bf adec 	bcs.w	800dd4e <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 800e176:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 800e17a:	4b77      	ldr	r3, [pc, #476]	; (800e358 <mbedtls_x509_crt_info+0x624>)
 800e17c:	f019 0f80 	tst.w	r9, #128	; 0x80
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e180:	eba4 0400 	sub.w	r4, r4, r0
 800e184:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 800e186:	d00d      	beq.n	800e1a4 <mbedtls_x509_crt_info+0x470>
 800e188:	4a7e      	ldr	r2, [pc, #504]	; (800e384 <mbedtls_x509_crt_info+0x650>)
 800e18a:	4621      	mov	r1, r4
 800e18c:	4628      	mov	r0, r5
 800e18e:	f001 f83b 	bl	800f208 <sniprintf>
 800e192:	2800      	cmp	r0, #0
 800e194:	f6ff addb 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e198:	4284      	cmp	r4, r0
 800e19a:	f67f add8 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e19e:	4b70      	ldr	r3, [pc, #448]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e1a0:	1a24      	subs	r4, r4, r0
 800e1a2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 800e1a4:	f019 0f40 	tst.w	r9, #64	; 0x40
 800e1a8:	d00d      	beq.n	800e1c6 <mbedtls_x509_crt_info+0x492>
 800e1aa:	4a77      	ldr	r2, [pc, #476]	; (800e388 <mbedtls_x509_crt_info+0x654>)
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f001 f82a 	bl	800f208 <sniprintf>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	f6ff adca 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e1ba:	4284      	cmp	r4, r0
 800e1bc:	f67f adc7 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e1c0:	4b67      	ldr	r3, [pc, #412]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e1c2:	1a24      	subs	r4, r4, r0
 800e1c4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 800e1c6:	f019 0f20 	tst.w	r9, #32
 800e1ca:	d00d      	beq.n	800e1e8 <mbedtls_x509_crt_info+0x4b4>
 800e1cc:	4a6f      	ldr	r2, [pc, #444]	; (800e38c <mbedtls_x509_crt_info+0x658>)
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f001 f819 	bl	800f208 <sniprintf>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f6ff adb9 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e1dc:	4284      	cmp	r4, r0
 800e1de:	f67f adb6 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e1e2:	4b5f      	ldr	r3, [pc, #380]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e1e4:	1a24      	subs	r4, r4, r0
 800e1e6:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 800e1e8:	f019 0f10 	tst.w	r9, #16
 800e1ec:	d00d      	beq.n	800e20a <mbedtls_x509_crt_info+0x4d6>
 800e1ee:	4a68      	ldr	r2, [pc, #416]	; (800e390 <mbedtls_x509_crt_info+0x65c>)
 800e1f0:	4621      	mov	r1, r4
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	f001 f808 	bl	800f208 <sniprintf>
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	f6ff ada8 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e1fe:	4284      	cmp	r4, r0
 800e200:	f67f ada5 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e204:	4b56      	ldr	r3, [pc, #344]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e206:	1a24      	subs	r4, r4, r0
 800e208:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 800e20a:	f019 0f08 	tst.w	r9, #8
 800e20e:	d00d      	beq.n	800e22c <mbedtls_x509_crt_info+0x4f8>
 800e210:	4a60      	ldr	r2, [pc, #384]	; (800e394 <mbedtls_x509_crt_info+0x660>)
 800e212:	4621      	mov	r1, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f000 fff7 	bl	800f208 <sniprintf>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f6ff ad97 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e220:	4284      	cmp	r4, r0
 800e222:	f67f ad94 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e226:	4b4e      	ldr	r3, [pc, #312]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e228:	1a24      	subs	r4, r4, r0
 800e22a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 800e22c:	f019 0f04 	tst.w	r9, #4
 800e230:	d00d      	beq.n	800e24e <mbedtls_x509_crt_info+0x51a>
 800e232:	4a59      	ldr	r2, [pc, #356]	; (800e398 <mbedtls_x509_crt_info+0x664>)
 800e234:	4621      	mov	r1, r4
 800e236:	4628      	mov	r0, r5
 800e238:	f000 ffe6 	bl	800f208 <sniprintf>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	f6ff ad86 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e242:	4284      	cmp	r4, r0
 800e244:	f67f ad83 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e248:	4b45      	ldr	r3, [pc, #276]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e24a:	1a24      	subs	r4, r4, r0
 800e24c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 800e24e:	f019 0f02 	tst.w	r9, #2
 800e252:	d00d      	beq.n	800e270 <mbedtls_x509_crt_info+0x53c>
 800e254:	4a51      	ldr	r2, [pc, #324]	; (800e39c <mbedtls_x509_crt_info+0x668>)
 800e256:	4621      	mov	r1, r4
 800e258:	4628      	mov	r0, r5
 800e25a:	f000 ffd5 	bl	800f208 <sniprintf>
 800e25e:	2800      	cmp	r0, #0
 800e260:	f6ff ad75 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e264:	4284      	cmp	r4, r0
 800e266:	f67f ad72 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e26a:	4b3d      	ldr	r3, [pc, #244]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e26c:	1a24      	subs	r4, r4, r0
 800e26e:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 800e270:	f019 0f01 	tst.w	r9, #1
 800e274:	d00d      	beq.n	800e292 <mbedtls_x509_crt_info+0x55e>
 800e276:	4a4a      	ldr	r2, [pc, #296]	; (800e3a0 <mbedtls_x509_crt_info+0x66c>)
 800e278:	4621      	mov	r1, r4
 800e27a:	4628      	mov	r0, r5
 800e27c:	f000 ffc4 	bl	800f208 <sniprintf>
 800e280:	2800      	cmp	r0, #0
 800e282:	f6ff ad64 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e286:	4284      	cmp	r4, r0
 800e288:	f67f ad61 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e28c:	4b34      	ldr	r3, [pc, #208]	; (800e360 <mbedtls_x509_crt_info+0x62c>)
 800e28e:	1a24      	subs	r4, r4, r0
 800e290:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 800e292:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800e296:	d00c      	beq.n	800e2b2 <mbedtls_x509_crt_info+0x57e>
 800e298:	4a42      	ldr	r2, [pc, #264]	; (800e3a4 <mbedtls_x509_crt_info+0x670>)
 800e29a:	4621      	mov	r1, r4
 800e29c:	4628      	mov	r0, r5
 800e29e:	f000 ffb3 	bl	800f208 <sniprintf>
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	f6ff ad53 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e2a8:	4284      	cmp	r4, r0
 800e2aa:	f67f ad50 	bls.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e2ae:	1a24      	subs	r4, r4, r0
 800e2b0:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 800e2b2:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 800e2b6:	051b      	lsls	r3, r3, #20
 800e2b8:	d532      	bpl.n	800e320 <mbedtls_x509_crt_info+0x5ec>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 800e2ba:	4643      	mov	r3, r8
 800e2bc:	4a3a      	ldr	r2, [pc, #232]	; (800e3a8 <mbedtls_x509_crt_info+0x674>)
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	f000 ffa1 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	f6ff ad41 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e2cc:	42a0      	cmp	r0, r4
 800e2ce:	f4bf ad3e 	bcs.w	800dd4e <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
 800e2d2:	f8df b084 	ldr.w	fp, [pc, #132]	; 800e358 <mbedtls_x509_crt_info+0x624>
            desc = "???";
 800e2d6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800e3b0 <mbedtls_x509_crt_info+0x67c>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 800e2da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e3b4 <mbedtls_x509_crt_info+0x680>
        sep = ", ";
 800e2de:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800e360 <mbedtls_x509_crt_info+0x62c>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e2e2:	1a24      	subs	r4, r4, r0
 800e2e4:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 800e2e6:	f506 7684 	add.w	r6, r6, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 800e2ea:	a906      	add	r1, sp, #24
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	f7f9 f84f 	bl	8007390 <mbedtls_oid_get_extended_key_usage>
 800e2f2:	b108      	cbz	r0, 800e2f8 <mbedtls_x509_crt_info+0x5c4>
            desc = "???";
 800e2f4:	f8cd 9018 	str.w	r9, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 800e2f8:	9b06      	ldr	r3, [sp, #24]
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	4652      	mov	r2, sl
 800e2fe:	465b      	mov	r3, fp
 800e300:	4621      	mov	r1, r4
 800e302:	4628      	mov	r0, r5
 800e304:	f000 ff80 	bl	800f208 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e308:	2800      	cmp	r0, #0
 800e30a:	f6ff ad20 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e30e:	42a0      	cmp	r0, r4
 800e310:	f4bf ad1d 	bcs.w	800dd4e <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
 800e314:	68f6      	ldr	r6, [r6, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 800e316:	1a24      	subs	r4, r4, r0
 800e318:	4405      	add	r5, r0
        sep = ", ";
 800e31a:	46c3      	mov	fp, r8
    while( cur != NULL )
 800e31c:	2e00      	cmp	r6, #0
 800e31e:	d1e4      	bne.n	800e2ea <mbedtls_x509_crt_info+0x5b6>
    ret = mbedtls_snprintf( p, n, "\n" );
 800e320:	4a22      	ldr	r2, [pc, #136]	; (800e3ac <mbedtls_x509_crt_info+0x678>)
 800e322:	4621      	mov	r1, r4
 800e324:	4628      	mov	r0, r5
 800e326:	f000 ff6f 	bl	800f208 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f6ff ad0f 	blt.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e330:	42a0      	cmp	r0, r4
 800e332:	f4bf ad0c 	bcs.w	800dd4e <mbedtls_x509_crt_info+0x1a>
 800e336:	1a20      	subs	r0, r4, r0
    return( (int) ( size - n ) );
 800e338:	1a38      	subs	r0, r7, r0
 800e33a:	e50c      	b.n	800dd56 <mbedtls_x509_crt_info+0x22>
            *p++ = sep[i];
 800e33c:	f810 9003 	ldrb.w	r9, [r0, r3]
 800e340:	f805 9003 	strb.w	r9, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 800e344:	3301      	adds	r3, #1
 800e346:	e657      	b.n	800dff8 <mbedtls_x509_crt_info+0x2c4>
            *p++ = cur->buf.p[i];
 800e348:	6893      	ldr	r3, [r2, #8]
 800e34a:	5c5b      	ldrb	r3, [r3, r1]
 800e34c:	f805 3b01 	strb.w	r3, [r5], #1
 800e350:	e657      	b.n	800e002 <mbedtls_x509_crt_info+0x2ce>
 800e352:	bf00      	nop
 800e354:	08015187 	.word	0x08015187
 800e358:	08013087 	.word	0x08013087
 800e35c:	0801519f 	.word	0x0801519f
 800e360:	08014ff8 	.word	0x08014ff8
 800e364:	080151ac 	.word	0x080151ac
 800e368:	080151b9 	.word	0x080151b9
 800e36c:	080151c1 	.word	0x080151c1
 800e370:	080151d2 	.word	0x080151d2
 800e374:	080151dd 	.word	0x080151dd
 800e378:	080151e6 	.word	0x080151e6
 800e37c:	080151f1 	.word	0x080151f1
 800e380:	08015205 	.word	0x08015205
 800e384:	0801521d 	.word	0x0801521d
 800e388:	08015231 	.word	0x08015231
 800e38c:	08015243 	.word	0x08015243
 800e390:	08015256 	.word	0x08015256
 800e394:	0801526a 	.word	0x0801526a
 800e398:	0801527a 	.word	0x0801527a
 800e39c:	0801528a 	.word	0x0801528a
 800e3a0:	08015295 	.word	0x08015295
 800e3a4:	080152a5 	.word	0x080152a5
 800e3a8:	080152b5 	.word	0x080152b5
 800e3ac:	0801314c 	.word	0x0801314c
 800e3b0:	0801501d 	.word	0x0801501d
 800e3b4:	08010d1d 	.word	0x08010d1d

0800e3b8 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	b089      	sub	sp, #36	; 0x24
 800e3be:	4605      	mov	r5, r0
 800e3c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e3c2:	9206      	str	r2, [sp, #24]
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 800e3c4:	2200      	movs	r2, #0
{
 800e3c6:	468a      	mov	sl, r1
 800e3c8:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    *flags = 0;
 800e3cc:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 800e3ce:	461f      	mov	r7, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 8090 	beq.w	800e4f6 <mbedtls_x509_crt_verify_with_profile+0x13e>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 800e3d6:	f1b8 0f00 	cmp.w	r8, #0
 800e3da:	d051      	beq.n	800e480 <mbedtls_x509_crt_verify_with_profile+0xc8>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 800e3dc:	4640      	mov	r0, r8
 800e3de:	f7f1 feff 	bl	80001e0 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 800e3e2:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
 800e3e6:	069b      	lsls	r3, r3, #26
        cn_len = strlen( cn );
 800e3e8:	4681      	mov	r9, r0
        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 800e3ea:	d428      	bmi.n	800e43e <mbedtls_x509_crt_verify_with_profile+0x86>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 800e3ec:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e570 <mbedtls_x509_crt_verify_with_profile+0x1b8>
        name = &crt->subject;
 800e3f0:	f105 066c 	add.w	r6, r5, #108	; 0x6c
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 800e3f4:	6872      	ldr	r2, [r6, #4]
 800e3f6:	2a03      	cmp	r2, #3
 800e3f8:	d11d      	bne.n	800e436 <mbedtls_x509_crt_verify_with_profile+0x7e>
 800e3fa:	68b1      	ldr	r1, [r6, #8]
 800e3fc:	4858      	ldr	r0, [pc, #352]	; (800e560 <mbedtls_x509_crt_verify_with_profile+0x1a8>)
 800e3fe:	f000 fd1f 	bl	800ee40 <memcmp>
 800e402:	b9c0      	cbnz	r0, 800e436 <mbedtls_x509_crt_verify_with_profile+0x7e>
                    if( name->val.len == cn_len &&
 800e404:	6933      	ldr	r3, [r6, #16]
 800e406:	4599      	cmp	r9, r3
 800e408:	d107      	bne.n	800e41a <mbedtls_x509_crt_verify_with_profile+0x62>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 800e40a:	464a      	mov	r2, r9
 800e40c:	4641      	mov	r1, r8
 800e40e:	6970      	ldr	r0, [r6, #20]
 800e410:	9307      	str	r3, [sp, #28]
 800e412:	f7ff f9c3 	bl	800d79c <x509_memcasecmp>
                    if( name->val.len == cn_len &&
 800e416:	9b07      	ldr	r3, [sp, #28]
 800e418:	b390      	cbz	r0, 800e480 <mbedtls_x509_crt_verify_with_profile+0xc8>
                    if( name->val.len > 2 &&
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d90b      	bls.n	800e436 <mbedtls_x509_crt_verify_with_profile+0x7e>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 800e41e:	2202      	movs	r2, #2
 800e420:	4659      	mov	r1, fp
 800e422:	6970      	ldr	r0, [r6, #20]
 800e424:	f000 fd0c 	bl	800ee40 <memcmp>
                    if( name->val.len > 2 &&
 800e428:	b928      	cbnz	r0, 800e436 <mbedtls_x509_crt_verify_with_profile+0x7e>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 800e42a:	f106 010c 	add.w	r1, r6, #12
 800e42e:	4640      	mov	r0, r8
 800e430:	f7ff fa40 	bl	800d8b4 <x509_check_wildcard>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 800e434:	b320      	cbz	r0, 800e480 <mbedtls_x509_crt_verify_with_profile+0xc8>
                        break;
                }

                name = name->next;
 800e436:	69b6      	ldr	r6, [r6, #24]
            while( name != NULL )
 800e438:	2e00      	cmp	r6, #0
 800e43a:	d1db      	bne.n	800e3f4 <mbedtls_x509_crt_verify_with_profile+0x3c>
 800e43c:	e01e      	b.n	800e47c <mbedtls_x509_crt_verify_with_profile+0xc4>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 800e43e:	f8df b130 	ldr.w	fp, [pc, #304]	; 800e570 <mbedtls_x509_crt_verify_with_profile+0x1b8>
            cur = &crt->subject_alt_names;
 800e442:	f105 06e8 	add.w	r6, r5, #232	; 0xe8
                if( cur->buf.len == cn_len &&
 800e446:	6873      	ldr	r3, [r6, #4]
 800e448:	4599      	cmp	r9, r3
 800e44a:	d107      	bne.n	800e45c <mbedtls_x509_crt_verify_with_profile+0xa4>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 800e44c:	464a      	mov	r2, r9
 800e44e:	68b1      	ldr	r1, [r6, #8]
 800e450:	9307      	str	r3, [sp, #28]
 800e452:	4640      	mov	r0, r8
 800e454:	f7ff f9a2 	bl	800d79c <x509_memcasecmp>
                if( cur->buf.len == cn_len &&
 800e458:	9b07      	ldr	r3, [sp, #28]
 800e45a:	b188      	cbz	r0, 800e480 <mbedtls_x509_crt_verify_with_profile+0xc8>
                if( cur->buf.len > 2 &&
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d90a      	bls.n	800e476 <mbedtls_x509_crt_verify_with_profile+0xbe>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 800e460:	2202      	movs	r2, #2
 800e462:	4659      	mov	r1, fp
 800e464:	68b0      	ldr	r0, [r6, #8]
 800e466:	f000 fceb 	bl	800ee40 <memcmp>
                if( cur->buf.len > 2 &&
 800e46a:	b920      	cbnz	r0, 800e476 <mbedtls_x509_crt_verify_with_profile+0xbe>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 800e46c:	4631      	mov	r1, r6
 800e46e:	4640      	mov	r0, r8
 800e470:	f7ff fa20 	bl	800d8b4 <x509_check_wildcard>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 800e474:	b120      	cbz	r0, 800e480 <mbedtls_x509_crt_verify_with_profile+0xc8>
                cur = cur->next;
 800e476:	68f6      	ldr	r6, [r6, #12]
            while( cur != NULL )
 800e478:	2e00      	cmp	r6, #0
 800e47a:	d1e4      	bne.n	800e446 <mbedtls_x509_crt_verify_with_profile+0x8e>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 800e47c:	2304      	movs	r3, #4
 800e47e:	6023      	str	r3, [r4, #0]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 800e480:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 800e484:	4630      	mov	r0, r6
 800e486:	f7f9 f99b 	bl	80077c0 <mbedtls_pk_get_type>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800e48a:	2301      	movs	r3, #1
 800e48c:	1e42      	subs	r2, r0, #1
 800e48e:	4093      	lsls	r3, r2
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	4213      	tst	r3, r2
    pk_type = mbedtls_pk_get_type( &crt->pk );
 800e494:	4601      	mov	r1, r0
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 800e496:	d038      	beq.n	800e50a <mbedtls_x509_crt_verify_with_profile+0x152>

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 800e498:	4632      	mov	r2, r6
 800e49a:	f107 000c 	add.w	r0, r7, #12
 800e49e:	f7ff fa51 	bl	800d944 <x509_profile_check_key.isra.3>
 800e4a2:	b118      	cbz	r0, 800e4ac <mbedtls_x509_crt_verify_with_profile+0xf4>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 800e4a4:	6823      	ldr	r3, [r4, #0]
 800e4a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4aa:	6023      	str	r3, [r4, #0]
{
 800e4ac:	4656      	mov	r6, sl

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 800e4ae:	b916      	cbnz	r6, 800e4b6 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 800e4b0:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 800e4b4:	e013      	b.n	800e4de <mbedtls_x509_crt_verify_with_profile+0x126>
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	4631      	mov	r1, r6
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f7ff f9d5 	bl	800d86c <x509_crt_check_parent>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	b330      	cbz	r0, 800e514 <mbedtls_x509_crt_verify_with_profile+0x15c>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 800e4c6:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800e4ca:	e7f0      	b.n	800e4ae <mbedtls_x509_crt_verify_with_profile+0xf6>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f7ff f9ca 	bl	800d86c <x509_crt_check_parent>
 800e4d8:	b340      	cbz	r0, 800e52c <mbedtls_x509_crt_verify_with_profile+0x174>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 800e4da:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 800e4de:	2e00      	cmp	r6, #0
 800e4e0:	d1f4      	bne.n	800e4cc <mbedtls_x509_crt_verify_with_profile+0x114>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 800e4e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e4:	9303      	str	r3, [sp, #12]
 800e4e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4e8:	9302      	str	r3, [sp, #8]
 800e4ea:	9401      	str	r4, [sp, #4]
 800e4ec:	9600      	str	r6, [sp, #0]
 800e4ee:	4633      	mov	r3, r6
 800e4f0:	463a      	mov	r2, r7
 800e4f2:	4651      	mov	r1, sl
 800e4f4:	e016      	b.n	800e524 <mbedtls_x509_crt_verify_with_profile+0x16c>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 800e4f6:	481b      	ldr	r0, [pc, #108]	; (800e564 <mbedtls_x509_crt_verify_with_profile+0x1ac>)
 800e4f8:	e02b      	b.n	800e552 <mbedtls_x509_crt_verify_with_profile+0x19a>
exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 800e4fa:	481b      	ldr	r0, [pc, #108]	; (800e568 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 800e4fc:	e029      	b.n	800e552 <mbedtls_x509_crt_verify_with_profile+0x19a>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 800e4fe:	6822      	ldr	r2, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 800e500:	4b1a      	ldr	r3, [pc, #104]	; (800e56c <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 800e502:	2a00      	cmp	r2, #0
 800e504:	bf18      	it	ne
 800e506:	4618      	movne	r0, r3
 800e508:	e026      	b.n	800e558 <mbedtls_x509_crt_verify_with_profile+0x1a0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	e7c1      	b.n	800e498 <mbedtls_x509_crt_verify_with_profile+0xe0>
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 800e514:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e516:	9203      	str	r2, [sp, #12]
 800e518:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e51c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e51e:	9202      	str	r2, [sp, #8]
 800e520:	4631      	mov	r1, r6
 800e522:	463a      	mov	r2, r7
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 800e524:	4628      	mov	r0, r5
 800e526:	f7ff fa20 	bl	800d96a <x509_crt_verify_top.isra.4>
 800e52a:	e00d      	b.n	800e548 <mbedtls_x509_crt_verify_with_profile+0x190>
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 800e52c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e52e:	9305      	str	r3, [sp, #20]
 800e530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e532:	9304      	str	r3, [sp, #16]
 800e534:	9002      	str	r0, [sp, #8]
 800e536:	9001      	str	r0, [sp, #4]
 800e538:	9403      	str	r4, [sp, #12]
 800e53a:	9700      	str	r7, [sp, #0]
 800e53c:	9b06      	ldr	r3, [sp, #24]
 800e53e:	4652      	mov	r2, sl
 800e540:	4631      	mov	r1, r6
 800e542:	4628      	mov	r0, r5
 800e544:	f7ff fafe 	bl	800db44 <x509_crt_verify_child>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 800e548:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 800e54c:	d0d5      	beq.n	800e4fa <mbedtls_x509_crt_verify_with_profile+0x142>
    if( ret != 0 )
 800e54e:	2800      	cmp	r0, #0
 800e550:	d0d5      	beq.n	800e4fe <mbedtls_x509_crt_verify_with_profile+0x146>
        *flags = (uint32_t) -1;
 800e552:	f04f 33ff 	mov.w	r3, #4294967295
 800e556:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800e558:	b009      	add	sp, #36	; 0x24
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55e:	bf00      	nop
 800e560:	08013340 	.word	0x08013340
 800e564:	ffffd800 	.word	0xffffd800
 800e568:	ffffd000 	.word	0xffffd000
 800e56c:	ffffd900 	.word	0xffffd900
 800e570:	08015324 	.word	0x08015324

0800e574 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 800e574:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e578:	2100      	movs	r1, #0
 800e57a:	f000 bc95 	b.w	800eea8 <memset>

0800e57e <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 800e57e:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 800e580:	4605      	mov	r5, r0
 800e582:	b368      	cbz	r0, 800e5e0 <mbedtls_x509_crt_free+0x62>
 800e584:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 800e586:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800e58a:	f7f9 f814 	bl	80075b6 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 800e58e:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 800e590:	bb3a      	cbnz	r2, 800e5e2 <mbedtls_x509_crt_free+0x64>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 800e592:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 800e596:	bb72      	cbnz	r2, 800e5f6 <mbedtls_x509_crt_free+0x78>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 800e598:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	d134      	bne.n	800e60a <mbedtls_x509_crt_free+0x8c>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 800e5a0:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 800e5a4:	2a00      	cmp	r2, #0
 800e5a6:	d13a      	bne.n	800e61e <mbedtls_x509_crt_free+0xa0>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 800e5a8:	68a0      	ldr	r0, [r4, #8]
 800e5aa:	b128      	cbz	r0, 800e5b8 <mbedtls_x509_crt_free+0x3a>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 800e5ac:	6861      	ldr	r1, [r4, #4]
 800e5ae:	f7ff f8ed 	bl	800d78c <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 800e5b2:	68a0      	ldr	r0, [r4, #8]
 800e5b4:	f000 fc3c 	bl	800ee30 <free>
        }

        cert_cur = cert_cur->next;
 800e5b8:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 800e5bc:	2c00      	cmp	r4, #0
 800e5be:	d1e2      	bne.n	800e586 <mbedtls_x509_crt_free+0x8>
 800e5c0:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 800e5c2:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e5c6:	4610      	mov	r0, r2
        cert_cur = cert_cur->next;
 800e5c8:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130
        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 800e5cc:	f7ff f8de 	bl	800d78c <mbedtls_zeroize>
        if( cert_prv != crt )
 800e5d0:	42aa      	cmp	r2, r5
 800e5d2:	d002      	beq.n	800e5da <mbedtls_x509_crt_free+0x5c>
            mbedtls_free( cert_prv );
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f000 fc2b 	bl	800ee30 <free>
    }
    while( cert_cur != NULL );
 800e5da:	4622      	mov	r2, r4
 800e5dc:	2c00      	cmp	r4, #0
 800e5de:	d1f0      	bne.n	800e5c2 <mbedtls_x509_crt_free+0x44>
 800e5e0:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 800e5e6:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800e5e8:	f7ff f8d0 	bl	800d78c <mbedtls_zeroize>
            mbedtls_free( name_prv );
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f000 fc1f 	bl	800ee30 <free>
            name_cur = name_cur->next;
 800e5f2:	4632      	mov	r2, r6
 800e5f4:	e7cc      	b.n	800e590 <mbedtls_x509_crt_free+0x12>
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 800e5fa:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 800e5fc:	f7ff f8c6 	bl	800d78c <mbedtls_zeroize>
            mbedtls_free( name_prv );
 800e600:	4610      	mov	r0, r2
 800e602:	f000 fc15 	bl	800ee30 <free>
            name_cur = name_cur->next;
 800e606:	4632      	mov	r2, r6
 800e608:	e7c5      	b.n	800e596 <mbedtls_x509_crt_free+0x18>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800e60a:	4610      	mov	r0, r2
 800e60c:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 800e60e:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800e610:	f7ff f8bc 	bl	800d78c <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 800e614:	4610      	mov	r0, r2
 800e616:	f000 fc0b 	bl	800ee30 <free>
            seq_cur = seq_cur->next;
 800e61a:	4632      	mov	r2, r6
 800e61c:	e7be      	b.n	800e59c <mbedtls_x509_crt_free+0x1e>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800e61e:	4610      	mov	r0, r2
 800e620:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 800e622:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 800e624:	f7ff f8b2 	bl	800d78c <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 800e628:	4610      	mov	r0, r2
 800e62a:	f000 fc01 	bl	800ee30 <free>
            seq_cur = seq_cur->next;
 800e62e:	4632      	mov	r2, r6
 800e630:	e7b8      	b.n	800e5a4 <mbedtls_x509_crt_free+0x26>
	...

0800e634 <mbedtls_x509_crt_parse_der>:
{
 800e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e638:	460f      	mov	r7, r1
 800e63a:	b09b      	sub	sp, #108	; 0x6c
 800e63c:	4615      	mov	r5, r2
    if( crt == NULL || buf == NULL )
 800e63e:	4682      	mov	sl, r0
 800e640:	2800      	cmp	r0, #0
 800e642:	f000 82fc 	beq.w	800ec3e <mbedtls_x509_crt_parse_der+0x60a>
 800e646:	2900      	cmp	r1, #0
 800e648:	f000 82f9 	beq.w	800ec3e <mbedtls_x509_crt_parse_der+0x60a>
 800e64c:	4604      	mov	r4, r0
 800e64e:	f04f 0900 	mov.w	r9, #0
    while( crt->version != 0 && crt->next != NULL )
 800e652:	69a3      	ldr	r3, [r4, #24]
 800e654:	b1a3      	cbz	r3, 800e680 <mbedtls_x509_crt_parse_der+0x4c>
 800e656:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e65a:	46a1      	mov	r9, r4
 800e65c:	b94b      	cbnz	r3, 800e672 <mbedtls_x509_crt_parse_der+0x3e>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 800e65e:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e662:	2001      	movs	r0, #1
 800e664:	f000 fbaa 	bl	800edbc <calloc>
 800e668:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 800e66c:	b918      	cbnz	r0, 800e676 <mbedtls_x509_crt_parse_der+0x42>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 800e66e:	4dac      	ldr	r5, [pc, #688]	; (800e920 <mbedtls_x509_crt_parse_der+0x2ec>)
 800e670:	e2e1      	b.n	800ec36 <mbedtls_x509_crt_parse_der+0x602>
 800e672:	461c      	mov	r4, r3
 800e674:	e7ed      	b.n	800e652 <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 800e676:	f7ff ff7d 	bl	800e574 <mbedtls_x509_crt_init>
        crt = crt->next;
 800e67a:	46a1      	mov	r9, r4
 800e67c:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 800e680:	2300      	movs	r3, #0
 800e682:	930b      	str	r3, [sp, #44]	; 0x2c
 800e684:	930c      	str	r3, [sp, #48]	; 0x30
 800e686:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 800e688:	930e      	str	r3, [sp, #56]	; 0x38
 800e68a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e68c:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 800e68e:	9311      	str	r3, [sp, #68]	; 0x44
 800e690:	9312      	str	r3, [sp, #72]	; 0x48
 800e692:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 800e694:	2c00      	cmp	r4, #0
 800e696:	f000 82d6 	beq.w	800ec46 <mbedtls_x509_crt_parse_der+0x612>
    len = buflen;
 800e69a:	ae1a      	add	r6, sp, #104	; 0x68
    end = p + len;
 800e69c:	eb07 0805 	add.w	r8, r7, r5
    len = buflen;
 800e6a0:	f846 5d54 	str.w	r5, [r6, #-84]!
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e6a4:	2330      	movs	r3, #48	; 0x30
 800e6a6:	4632      	mov	r2, r6
 800e6a8:	4641      	mov	r1, r8
 800e6aa:	a806      	add	r0, sp, #24
    p = (unsigned char*) buf;
 800e6ac:	9706      	str	r7, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e6ae:	f7f4 ffce 	bl	800364e <mbedtls_asn1_get_tag>
 800e6b2:	b180      	cbz	r0, 800e6d6 <mbedtls_x509_crt_parse_der+0xa2>
        mbedtls_x509_crt_free( crt );
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f7ff ff62 	bl	800e57e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 800e6ba:	4d9a      	ldr	r5, [pc, #616]	; (800e924 <mbedtls_x509_crt_parse_der+0x2f0>)
        if( prev )
 800e6bc:	f1b9 0f00 	cmp.w	r9, #0
 800e6c0:	d002      	beq.n	800e6c8 <mbedtls_x509_crt_parse_der+0x94>
            prev->next = NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130
        if( crt != chain )
 800e6c8:	4554      	cmp	r4, sl
 800e6ca:	f000 82b4 	beq.w	800ec36 <mbedtls_x509_crt_parse_der+0x602>
            mbedtls_free( crt );
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 fbae 	bl	800ee30 <free>
 800e6d4:	e2af      	b.n	800ec36 <mbedtls_x509_crt_parse_der+0x602>
    if( len > (size_t) ( end - p ) )
 800e6d6:	9d06      	ldr	r5, [sp, #24]
 800e6d8:	f8dd b014 	ldr.w	fp, [sp, #20]
 800e6dc:	eba8 0805 	sub.w	r8, r8, r5
 800e6e0:	45d8      	cmp	r8, fp
 800e6e2:	d204      	bcs.n	800e6ee <mbedtls_x509_crt_parse_der+0xba>
        mbedtls_x509_crt_free( crt );
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7ff ff4a 	bl	800e57e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 800e6ea:	4d8f      	ldr	r5, [pc, #572]	; (800e928 <mbedtls_x509_crt_parse_der+0x2f4>)
 800e6ec:	e7e6      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
    crt_end = p + len;
 800e6ee:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
 800e6f0:	1bed      	subs	r5, r5, r7
 800e6f2:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	2001      	movs	r0, #1
 800e6f8:	f000 fb60 	bl	800edbc <calloc>
 800e6fc:	4680      	mov	r8, r0
 800e6fe:	9006      	str	r0, [sp, #24]
 800e700:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 800e702:	2800      	cmp	r0, #0
 800e704:	f000 82b0 	beq.w	800ec68 <mbedtls_x509_crt_parse_der+0x634>
    memcpy( p, buf, crt->raw.len );
 800e708:	4639      	mov	r1, r7
 800e70a:	462a      	mov	r2, r5
 800e70c:	f000 fba7 	bl	800ee5e <memcpy>
    p += crt->raw.len - len;
 800e710:	eba5 030b 	sub.w	r3, r5, fp
 800e714:	4443      	add	r3, r8
    end = crt_end = p + len;
 800e716:	eb08 0705 	add.w	r7, r8, r5
    p += crt->raw.len - len;
 800e71a:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 800e71c:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e71e:	4632      	mov	r2, r6
 800e720:	2330      	movs	r3, #48	; 0x30
 800e722:	4639      	mov	r1, r7
 800e724:	a806      	add	r0, sp, #24
 800e726:	f7f4 ff92 	bl	800364e <mbedtls_asn1_get_tag>
 800e72a:	4680      	mov	r8, r0
 800e72c:	b140      	cbz	r0, 800e740 <mbedtls_x509_crt_parse_der+0x10c>
        mbedtls_x509_crt_free( crt );
 800e72e:	4620      	mov	r0, r4
 800e730:	f7ff ff25 	bl	800e57e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 800e734:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 800e738:	2d00      	cmp	r5, #0
 800e73a:	f000 827c 	beq.w	800ec36 <mbedtls_x509_crt_parse_der+0x602>
 800e73e:	e7bd      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
    end = p + len;
 800e740:	9b05      	ldr	r3, [sp, #20]
 800e742:	9e06      	ldr	r6, [sp, #24]
 800e744:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 800e746:	6963      	ldr	r3, [r4, #20]
 800e748:	1af3      	subs	r3, r6, r3
 800e74a:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e74c:	aa17      	add	r2, sp, #92	; 0x5c
 800e74e:	23a0      	movs	r3, #160	; 0xa0
 800e750:	4631      	mov	r1, r6
 800e752:	a806      	add	r0, sp, #24
 800e754:	f7f4 ff7b 	bl	800364e <mbedtls_asn1_get_tag>
 800e758:	4605      	mov	r5, r0
 800e75a:	b1f0      	cbz	r0, 800e79a <mbedtls_x509_crt_parse_der+0x166>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800e75c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800e760:	d129      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
            *ver = 0;
 800e762:	f8c4 8018 	str.w	r8, [r4, #24]
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 800e766:	f104 021c 	add.w	r2, r4, #28
 800e76a:	4631      	mov	r1, r6
 800e76c:	a806      	add	r0, sp, #24
 800e76e:	f7fe fd3d 	bl	800d1ec <mbedtls_x509_get_serial>
 800e772:	4605      	mov	r5, r0
 800e774:	b9f8      	cbnz	r0, 800e7b6 <mbedtls_x509_crt_parse_der+0x182>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 800e776:	f104 0828 	add.w	r8, r4, #40	; 0x28
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 800e77a:	ab0b      	add	r3, sp, #44	; 0x2c
 800e77c:	4642      	mov	r2, r8
 800e77e:	4631      	mov	r1, r6
 800e780:	a806      	add	r0, sp, #24
 800e782:	f7fe fd5b 	bl	800d23c <mbedtls_x509_get_alg>
 800e786:	4605      	mov	r5, r0
 800e788:	b9a8      	cbnz	r0, 800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version < 0 || crt->version > 2 )
 800e78a:	69a3      	ldr	r3, [r4, #24]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d91b      	bls.n	800e7c8 <mbedtls_x509_crt_parse_der+0x194>
        mbedtls_x509_crt_free( crt );
 800e790:	4620      	mov	r0, r4
 800e792:	f7ff fef4 	bl	800e57e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 800e796:	4d65      	ldr	r5, [pc, #404]	; (800e92c <mbedtls_x509_crt_parse_der+0x2f8>)
 800e798:	e790      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
    end = *p + len;
 800e79a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e79c:	9b06      	ldr	r3, [sp, #24]
 800e79e:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 800e7a2:	4641      	mov	r1, r8
 800e7a4:	f104 0218 	add.w	r2, r4, #24
 800e7a8:	a806      	add	r0, sp, #24
 800e7aa:	f7f4 ff7c 	bl	80036a6 <mbedtls_asn1_get_int>
 800e7ae:	b130      	cbz	r0, 800e7be <mbedtls_x509_crt_parse_der+0x18a>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 800e7b0:	f5b0 5508 	subs.w	r5, r0, #8704	; 0x2200
 800e7b4:	d0d7      	beq.n	800e766 <mbedtls_x509_crt_parse_der+0x132>
        mbedtls_x509_crt_free( crt );
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f7ff fee1 	bl	800e57e <mbedtls_x509_crt_free>
 800e7bc:	e77e      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
    if( *p != end )
 800e7be:	9b06      	ldr	r3, [sp, #24]
 800e7c0:	4598      	cmp	r8, r3
 800e7c2:	d0d0      	beq.n	800e766 <mbedtls_x509_crt_parse_der+0x132>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 800e7c4:	4d5a      	ldr	r5, [pc, #360]	; (800e930 <mbedtls_x509_crt_parse_der+0x2fc>)
 800e7c6:	e7f6      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    crt->version++;
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 800e7cc:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	f504 7294 	add.w	r2, r4, #296	; 0x128
 800e7d6:	f204 1329 	addw	r3, r4, #297	; 0x129
 800e7da:	a90b      	add	r1, sp, #44	; 0x2c
 800e7dc:	4640      	mov	r0, r8
 800e7de:	f7fe fe81 	bl	800d4e4 <mbedtls_x509_get_sig_alg>
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d1e6      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    crt->issuer_raw.p = p;
 800e7e8:	9b06      	ldr	r3, [sp, #24]
 800e7ea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e7ec:	aa05      	add	r2, sp, #20
 800e7ee:	2330      	movs	r3, #48	; 0x30
 800e7f0:	4631      	mov	r1, r6
 800e7f2:	a806      	add	r0, sp, #24
 800e7f4:	f7f4 ff2b 	bl	800364e <mbedtls_asn1_get_tag>
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	b128      	cbz	r0, 800e808 <mbedtls_x509_crt_parse_der+0x1d4>
        mbedtls_x509_crt_free( crt );
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f7ff febe 	bl	800e57e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 800e802:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 800e806:	e797      	b.n	800e738 <mbedtls_x509_crt_parse_der+0x104>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 800e808:	9b05      	ldr	r3, [sp, #20]
 800e80a:	9906      	ldr	r1, [sp, #24]
 800e80c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800e810:	4419      	add	r1, r3
 800e812:	a806      	add	r0, sp, #24
 800e814:	f7fe fd1a 	bl	800d24c <mbedtls_x509_get_name>
 800e818:	4605      	mov	r5, r0
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d1cb      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 800e81e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e820:	9b06      	ldr	r3, [sp, #24]
 800e822:	1a9b      	subs	r3, r3, r2
 800e824:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e826:	aa17      	add	r2, sp, #92	; 0x5c
 800e828:	2330      	movs	r3, #48	; 0x30
 800e82a:	4631      	mov	r1, r6
 800e82c:	a806      	add	r0, sp, #24
 800e82e:	f7f4 ff0e 	bl	800364e <mbedtls_asn1_get_tag>
 800e832:	2800      	cmp	r0, #0
 800e834:	d057      	beq.n	800e8e6 <mbedtls_x509_crt_parse_der+0x2b2>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 800e836:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 800e83a:	d1bc      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    crt->subject_raw.p = p;
 800e83c:	f10d 0868 	add.w	r8, sp, #104	; 0x68
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e840:	aa05      	add	r2, sp, #20
    crt->subject_raw.p = p;
 800e842:	f858 3d50 	ldr.w	r3, [r8, #-80]!
 800e846:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e848:	4631      	mov	r1, r6
 800e84a:	2330      	movs	r3, #48	; 0x30
 800e84c:	4640      	mov	r0, r8
 800e84e:	f7f4 fefe 	bl	800364e <mbedtls_asn1_get_tag>
 800e852:	4605      	mov	r5, r0
 800e854:	2800      	cmp	r0, #0
 800e856:	d1d1      	bne.n	800e7fc <mbedtls_x509_crt_parse_der+0x1c8>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 800e858:	9b05      	ldr	r3, [sp, #20]
 800e85a:	b14b      	cbz	r3, 800e870 <mbedtls_x509_crt_parse_der+0x23c>
 800e85c:	9906      	ldr	r1, [sp, #24]
 800e85e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800e862:	4419      	add	r1, r3
 800e864:	4640      	mov	r0, r8
 800e866:	f7fe fcf1 	bl	800d24c <mbedtls_x509_get_name>
 800e86a:	4605      	mov	r5, r0
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d1a2      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    crt->subject_raw.len = p - crt->subject_raw.p;
 800e870:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e872:	9b06      	ldr	r3, [sp, #24]
 800e874:	1a9b      	subs	r3, r3, r2
 800e876:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 800e878:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800e87c:	4631      	mov	r1, r6
 800e87e:	4640      	mov	r0, r8
 800e880:	f7f9 f8f6 	bl	8007a70 <mbedtls_pk_parse_subpubkey>
 800e884:	4605      	mov	r5, r0
 800e886:	2800      	cmp	r0, #0
 800e888:	d195      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 2 || crt->version == 3 )
 800e88a:	69a3      	ldr	r3, [r4, #24]
 800e88c:	3b02      	subs	r3, #2
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d809      	bhi.n	800e8a6 <mbedtls_x509_crt_parse_der+0x272>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 800e892:	2301      	movs	r3, #1
 800e894:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 800e898:	4631      	mov	r1, r6
 800e89a:	4640      	mov	r0, r8
 800e89c:	f7ff f837 	bl	800d90e <x509_get_uid>
        if( ret != 0 )
 800e8a0:	4605      	mov	r5, r0
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d187      	bne.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 2 || crt->version == 3 )
 800e8a6:	69a3      	ldr	r3, [r4, #24]
 800e8a8:	3b02      	subs	r3, #2
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d80a      	bhi.n	800e8c4 <mbedtls_x509_crt_parse_der+0x290>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4640      	mov	r0, r8
 800e8b8:	f7ff f829 	bl	800d90e <x509_get_uid>
        if( ret != 0 )
 800e8bc:	4605      	mov	r5, r0
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f47f af79 	bne.w	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->version == 3 )
 800e8c4:	69a3      	ldr	r3, [r4, #24]
 800e8c6:	2b03      	cmp	r3, #3
 800e8c8:	d13a      	bne.n	800e940 <mbedtls_x509_crt_parse_der+0x30c>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 800e8ca:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	f7fe fe27 	bl	800d524 <mbedtls_x509_get_ext>
 800e8d6:	4605      	mov	r5, r0
 800e8d8:	bb70      	cbnz	r0, 800e938 <mbedtls_x509_crt_parse_der+0x304>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 800e8da:	4680      	mov	r8, r0
    while( *p < end )
 800e8dc:	9b06      	ldr	r3, [sp, #24]
 800e8de:	429e      	cmp	r6, r3
 800e8e0:	d858      	bhi.n	800e994 <mbedtls_x509_crt_parse_der+0x360>
    if( *p != end )
 800e8e2:	d02d      	beq.n	800e940 <mbedtls_x509_crt_parse_der+0x30c>
 800e8e4:	e161      	b.n	800ebaa <mbedtls_x509_crt_parse_der+0x576>
    end = *p + len;
 800e8e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e8e8:	9b06      	ldr	r3, [sp, #24]
 800e8ea:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 800e8ee:	4641      	mov	r1, r8
 800e8f0:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 800e8f4:	a806      	add	r0, sp, #24
 800e8f6:	f7fe fd25 	bl	800d344 <mbedtls_x509_get_time>
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f47f af5a 	bne.w	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 800e902:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800e906:	4641      	mov	r1, r8
 800e908:	a806      	add	r0, sp, #24
 800e90a:	f7fe fd1b 	bl	800d344 <mbedtls_x509_get_time>
 800e90e:	4605      	mov	r5, r0
 800e910:	2800      	cmp	r0, #0
 800e912:	f47f af50 	bne.w	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( *p != end )
 800e916:	9b06      	ldr	r3, [sp, #24]
 800e918:	4598      	cmp	r8, r3
 800e91a:	d08f      	beq.n	800e83c <mbedtls_x509_crt_parse_der+0x208>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 800e91c:	4d05      	ldr	r5, [pc, #20]	; (800e934 <mbedtls_x509_crt_parse_der+0x300>)
 800e91e:	e74a      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
 800e920:	ffffd780 	.word	0xffffd780
 800e924:	ffffde80 	.word	0xffffde80
 800e928:	ffffde1a 	.word	0xffffde1a
 800e92c:	ffffda80 	.word	0xffffda80
 800e930:	ffffdd9a 	.word	0xffffdd9a
 800e934:	ffffdb9a 	.word	0xffffdb9a
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800e938:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800e93c:	f47f af3b 	bne.w	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( p != end )
 800e940:	9b06      	ldr	r3, [sp, #24]
 800e942:	429e      	cmp	r6, r3
 800e944:	f47f aece 	bne.w	800e6e4 <mbedtls_x509_crt_parse_der+0xb0>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 800e948:	ab0e      	add	r3, sp, #56	; 0x38
 800e94a:	aa11      	add	r2, sp, #68	; 0x44
 800e94c:	4639      	mov	r1, r7
 800e94e:	a806      	add	r0, sp, #24
 800e950:	f7fe fc74 	bl	800d23c <mbedtls_x509_get_alg>
 800e954:	4605      	mov	r5, r0
 800e956:	2800      	cmp	r0, #0
 800e958:	f47f af2d 	bne.w	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( crt->sig_oid.len != sig_oid2.len ||
 800e95c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e95e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e960:	429a      	cmp	r2, r3
 800e962:	d112      	bne.n	800e98a <mbedtls_x509_crt_parse_der+0x356>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 800e964:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e966:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e968:	f000 fa6a 	bl	800ee40 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 800e96c:	b968      	cbnz	r0, 800e98a <mbedtls_x509_crt_parse_der+0x356>
        sig_params1.len != sig_params2.len ||
 800e96e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 800e970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e972:	429a      	cmp	r2, r3
 800e974:	d109      	bne.n	800e98a <mbedtls_x509_crt_parse_der+0x356>
        sig_params1.len != sig_params2.len ||
 800e976:	2a00      	cmp	r2, #0
 800e978:	f000 814f 	beq.w	800ec1a <mbedtls_x509_crt_parse_der+0x5e6>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 800e97c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e97e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e980:	f000 fa5e 	bl	800ee40 <memcmp>
        ( sig_params1.len != 0 &&
 800e984:	2800      	cmp	r0, #0
 800e986:	f000 8148 	beq.w	800ec1a <mbedtls_x509_crt_parse_der+0x5e6>
        mbedtls_x509_crt_free( crt );
 800e98a:	4620      	mov	r0, r4
 800e98c:	f7ff fdf7 	bl	800e57e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 800e990:	4dae      	ldr	r5, [pc, #696]	; (800ec4c <mbedtls_x509_crt_parse_der+0x618>)
 800e992:	e693      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e994:	2330      	movs	r3, #48	; 0x30
 800e996:	aa07      	add	r2, sp, #28
 800e998:	4631      	mov	r1, r6
 800e99a:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 800e99c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e9a0:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 800e9a4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 800e9a8:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 800e9ac:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e9b0:	f7f4 fe4d 	bl	800364e <mbedtls_asn1_get_tag>
 800e9b4:	b120      	cbz	r0, 800e9c0 <mbedtls_x509_crt_parse_der+0x38c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 800e9b6:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
        if( ret != 0 )
 800e9ba:	2d00      	cmp	r5, #0
 800e9bc:	d0c0      	beq.n	800e940 <mbedtls_x509_crt_parse_der+0x30c>
 800e9be:	e6fa      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
        end_ext_data = *p + len;
 800e9c0:	9b06      	ldr	r3, [sp, #24]
 800e9c2:	9d07      	ldr	r5, [sp, #28]
 800e9c4:	441d      	add	r5, r3
        extn_oid.tag = **p;
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	9314      	str	r3, [sp, #80]	; 0x50
        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 800e9ca:	aa15      	add	r2, sp, #84	; 0x54
 800e9cc:	2306      	movs	r3, #6
 800e9ce:	4631      	mov	r1, r6
 800e9d0:	a806      	add	r0, sp, #24
 800e9d2:	f7f4 fe3c 	bl	800364e <mbedtls_asn1_get_tag>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d1ed      	bne.n	800e9b6 <mbedtls_x509_crt_parse_der+0x382>
        extn_oid.p = *p;
 800e9da:	9b06      	ldr	r3, [sp, #24]
        *p += extn_oid.len;
 800e9dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.p = *p;
 800e9de:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 800e9e0:	4413      	add	r3, r2
 800e9e2:	9306      	str	r3, [sp, #24]
        if( ( end - *p ) < 1 )
 800e9e4:	1af3      	subs	r3, r6, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f340 8140 	ble.w	800ec6c <mbedtls_x509_crt_parse_der+0x638>
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 800e9ec:	aa08      	add	r2, sp, #32
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	a806      	add	r0, sp, #24
 800e9f2:	f7f4 fe40 	bl	8003676 <mbedtls_asn1_get_bool>
 800e9f6:	b110      	cbz	r0, 800e9fe <mbedtls_x509_crt_parse_der+0x3ca>
 800e9f8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800e9fc:	d1db      	bne.n	800e9b6 <mbedtls_x509_crt_parse_der+0x382>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 800e9fe:	2304      	movs	r3, #4
 800ea00:	aa07      	add	r2, sp, #28
 800ea02:	4629      	mov	r1, r5
 800ea04:	a806      	add	r0, sp, #24
 800ea06:	f7f4 fe22 	bl	800364e <mbedtls_asn1_get_tag>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d1d3      	bne.n	800e9b6 <mbedtls_x509_crt_parse_der+0x382>
        end_ext_octet = *p + len;
 800ea0e:	9a07      	ldr	r2, [sp, #28]
 800ea10:	9b06      	ldr	r3, [sp, #24]
 800ea12:	4413      	add	r3, r2
        if( end_ext_octet != end_ext_data )
 800ea14:	429d      	cmp	r5, r3
 800ea16:	f040 80c8 	bne.w	800ebaa <mbedtls_x509_crt_parse_der+0x576>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 800ea1a:	a909      	add	r1, sp, #36	; 0x24
 800ea1c:	a814      	add	r0, sp, #80	; 0x50
 800ea1e:	f7f8 fc9d 	bl	800735c <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 800ea22:	b130      	cbz	r0, 800ea32 <mbedtls_x509_crt_parse_der+0x3fe>
            if( is_critical )
 800ea24:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 800ea26:	9506      	str	r5, [sp, #24]
            if( is_critical )
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f43f af57 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ea2e:	4d88      	ldr	r5, [pc, #544]	; (800ec50 <mbedtls_x509_crt_parse_der+0x61c>)
 800ea30:	e6c1      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
        if( ( crt->ext_types & ext_type ) != 0 )
 800ea32:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 800ea36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea38:	ea11 0302 	ands.w	r3, r1, r2
 800ea3c:	f040 8118 	bne.w	800ec70 <mbedtls_x509_crt_parse_der+0x63c>
        crt->ext_types |= ext_type;
 800ea40:	4311      	orrs	r1, r2
        switch( ext_type )
 800ea42:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 800ea46:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 800ea4a:	d020      	beq.n	800ea8e <mbedtls_x509_crt_parse_der+0x45a>
 800ea4c:	dc06      	bgt.n	800ea5c <mbedtls_x509_crt_parse_der+0x428>
 800ea4e:	2a04      	cmp	r2, #4
 800ea50:	d061      	beq.n	800eb16 <mbedtls_x509_crt_parse_der+0x4e2>
 800ea52:	2a20      	cmp	r2, #32
 800ea54:	f000 8093 	beq.w	800eb7e <mbedtls_x509_crt_parse_der+0x54a>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 800ea58:	4d7e      	ldr	r5, [pc, #504]	; (800ec54 <mbedtls_x509_crt_parse_der+0x620>)
 800ea5a:	e6ac      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
        switch( ext_type )
 800ea5c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ea60:	d07d      	beq.n	800eb5e <mbedtls_x509_crt_parse_der+0x52a>
 800ea62:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ea66:	d1f7      	bne.n	800ea58 <mbedtls_x509_crt_parse_der+0x424>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800ea68:	aa17      	add	r2, sp, #92	; 0x5c
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 800ea6e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea70:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800ea74:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800ea76:	f7f4 fe3a 	bl	80036ee <mbedtls_asn1_get_bitstring>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d155      	bne.n	800eb2a <mbedtls_x509_crt_parse_der+0x4f6>
    if( bs.len != 1 )
 800ea7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d17a      	bne.n	800eb7a <mbedtls_x509_crt_parse_der+0x546>
    *ns_cert_type = *bs.p;
 800ea84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 800ea8c:	e726      	b.n	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 800ea8e:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800ea92:	9203      	str	r2, [sp, #12]
    *ca_istrue = 0; /* DEFAULT FALSE */
 800ea94:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 800ea98:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800ea9c:	aa17      	add	r2, sp, #92	; 0x5c
 800ea9e:	2330      	movs	r3, #48	; 0x30
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 800eaa4:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800eaa8:	f7f4 fdd1 	bl	800364e <mbedtls_asn1_get_tag>
 800eaac:	b128      	cbz	r0, 800eaba <mbedtls_x509_crt_parse_der+0x486>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 800eaae:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 800eab2:	2d00      	cmp	r5, #0
 800eab4:	f43f af12 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
 800eab8:	e67d      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( *p == end )
 800eaba:	9b06      	ldr	r3, [sp, #24]
 800eabc:	429d      	cmp	r5, r3
 800eabe:	f43f af0d 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 800eac2:	465a      	mov	r2, fp
 800eac4:	4629      	mov	r1, r5
 800eac6:	a806      	add	r0, sp, #24
 800eac8:	f7f4 fdd5 	bl	8003676 <mbedtls_asn1_get_bool>
 800eacc:	b178      	cbz	r0, 800eaee <mbedtls_x509_crt_parse_der+0x4ba>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 800eace:	f110 0f62 	cmn.w	r0, #98	; 0x62
 800ead2:	d1ec      	bne.n	800eaae <mbedtls_x509_crt_parse_der+0x47a>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 800ead4:	465a      	mov	r2, fp
 800ead6:	4629      	mov	r1, r5
 800ead8:	a806      	add	r0, sp, #24
 800eada:	f7f4 fde4 	bl	80036a6 <mbedtls_asn1_get_int>
        if( ret != 0 )
 800eade:	2800      	cmp	r0, #0
 800eae0:	d1e5      	bne.n	800eaae <mbedtls_x509_crt_parse_der+0x47a>
        if( *ca_istrue != 0 )
 800eae2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800eae6:	b113      	cbz	r3, 800eaee <mbedtls_x509_crt_parse_der+0x4ba>
            *ca_istrue = 1;
 800eae8:	2301      	movs	r3, #1
 800eaea:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 800eaee:	9b06      	ldr	r3, [sp, #24]
 800eaf0:	429d      	cmp	r5, r3
 800eaf2:	f43f aef3 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 800eaf6:	9a03      	ldr	r2, [sp, #12]
 800eaf8:	4629      	mov	r1, r5
 800eafa:	a806      	add	r0, sp, #24
 800eafc:	f7f4 fdd3 	bl	80036a6 <mbedtls_asn1_get_int>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d1d4      	bne.n	800eaae <mbedtls_x509_crt_parse_der+0x47a>
    if( *p != end )
 800eb04:	9b06      	ldr	r3, [sp, #24]
 800eb06:	429d      	cmp	r5, r3
 800eb08:	d14f      	bne.n	800ebaa <mbedtls_x509_crt_parse_der+0x576>
    (*max_pathlen)++;
 800eb0a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800eb0e:	3301      	adds	r3, #1
 800eb10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800eb14:	e6e2      	b.n	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800eb16:	aa17      	add	r2, sp, #92	; 0x5c
 800eb18:	4629      	mov	r1, r5
 800eb1a:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 800eb1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb1e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800eb22:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 800eb24:	f7f4 fde3 	bl	80036ee <mbedtls_asn1_get_bitstring>
 800eb28:	b120      	cbz	r0, 800eb34 <mbedtls_x509_crt_parse_der+0x500>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 800eb2a:	f5b0 5514 	subs.w	r5, r0, #9472	; 0x2500
 800eb2e:	f43f aed5 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
 800eb32:	e640      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( bs.len < 1 )
 800eb34:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800eb36:	b301      	cbz	r1, 800eb7a <mbedtls_x509_crt_parse_der+0x546>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800eb38:	9d19      	ldr	r5, [sp, #100]	; 0x64
    *key_usage = 0;
 800eb3a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800eb3e:	5c2b      	ldrb	r3, [r5, r0]
 800eb40:	00c2      	lsls	r2, r0, #3
 800eb42:	fa03 f202 	lsl.w	r2, r3, r2
 800eb46:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 800eb4a:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800eb4c:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 800eb4e:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 800eb50:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 800eb54:	f43f aec2 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
 800eb58:	2804      	cmp	r0, #4
 800eb5a:	d1f0      	bne.n	800eb3e <mbedtls_x509_crt_parse_der+0x50a>
 800eb5c:	e6be      	b.n	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 800eb5e:	2306      	movs	r3, #6
 800eb60:	f504 7284 	add.w	r2, r4, #264	; 0x108
 800eb64:	4629      	mov	r1, r5
 800eb66:	a806      	add	r0, sp, #24
 800eb68:	f7f4 fdf8 	bl	800375c <mbedtls_asn1_get_sequence_of>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d1dc      	bne.n	800eb2a <mbedtls_x509_crt_parse_der+0x4f6>
    if( ext_key_usage->buf.p == NULL )
 800eb70:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f47f aeb1 	bne.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800eb7a:	4d37      	ldr	r5, [pc, #220]	; (800ec58 <mbedtls_x509_crt_parse_der+0x624>)
 800eb7c:	e61b      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800eb7e:	2330      	movs	r3, #48	; 0x30
 800eb80:	aa0a      	add	r2, sp, #40	; 0x28
 800eb82:	4629      	mov	r1, r5
 800eb84:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 800eb86:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800eb8a:	f7f4 fd60 	bl	800364e <mbedtls_asn1_get_tag>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d18d      	bne.n	800eaae <mbedtls_x509_crt_parse_der+0x47a>
    if( *p + len != end )
 800eb92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb94:	9b06      	ldr	r3, [sp, #24]
 800eb96:	4413      	add	r3, r2
 800eb98:	429d      	cmp	r5, r3
 800eb9a:	d106      	bne.n	800ebaa <mbedtls_x509_crt_parse_der+0x576>
    while( *p < end )
 800eb9c:	9b06      	ldr	r3, [sp, #24]
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	d805      	bhi.n	800ebae <mbedtls_x509_crt_parse_der+0x57a>
    cur->next = NULL;
 800eba2:	f8cb 800c 	str.w	r8, [fp, #12]
    if( *p != end )
 800eba6:	f43f ae99 	beq.w	800e8dc <mbedtls_x509_crt_parse_der+0x2a8>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ebaa:	4d2c      	ldr	r5, [pc, #176]	; (800ec5c <mbedtls_x509_crt_parse_der+0x628>)
 800ebac:	e603      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
        if( ( end - *p ) < 1 )
 800ebae:	1aea      	subs	r2, r5, r3
 800ebb0:	2a00      	cmp	r2, #0
 800ebb2:	dd5b      	ble.n	800ec6c <mbedtls_x509_crt_parse_der+0x638>
        tag = **p;
 800ebb4:	461a      	mov	r2, r3
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 800ebb6:	4629      	mov	r1, r5
        tag = **p;
 800ebb8:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
 800ebbc:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 800ebbe:	a806      	add	r0, sp, #24
 800ebc0:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 800ebc2:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 800ebc4:	f7f4 fcf5 	bl	80035b2 <mbedtls_asn1_get_len>
 800ebc8:	9b03      	ldr	r3, [sp, #12]
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	f47f af6f 	bne.w	800eaae <mbedtls_x509_crt_parse_der+0x47a>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 800ebd0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800ebd4:	2a80      	cmp	r2, #128	; 0x80
 800ebd6:	f47f af2a 	bne.w	800ea2e <mbedtls_x509_crt_parse_der+0x3fa>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 800ebda:	2b82      	cmp	r3, #130	; 0x82
 800ebdc:	d004      	beq.n	800ebe8 <mbedtls_x509_crt_parse_der+0x5b4>
            *p += tag_len;
 800ebde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ebe0:	9b06      	ldr	r3, [sp, #24]
        *p += buf->len;
 800ebe2:	4413      	add	r3, r2
 800ebe4:	9306      	str	r3, [sp, #24]
 800ebe6:	e7d9      	b.n	800eb9c <mbedtls_x509_crt_parse_der+0x568>
        if( cur->buf.p != NULL )
 800ebe8:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ebec:	b15b      	cbz	r3, 800ec06 <mbedtls_x509_crt_parse_der+0x5d2>
            if( cur->next != NULL )
 800ebee:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d13c      	bne.n	800ec70 <mbedtls_x509_crt_parse_der+0x63c>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 800ebf6:	2110      	movs	r1, #16
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f000 f8df 	bl	800edbc <calloc>
 800ebfe:	f8cb 000c 	str.w	r0, [fp, #12]
            if( cur->next == NULL )
 800ec02:	b1f0      	cbz	r0, 800ec42 <mbedtls_x509_crt_parse_der+0x60e>
 800ec04:	4683      	mov	fp, r0
        buf->tag = tag;
 800ec06:	2382      	movs	r3, #130	; 0x82
 800ec08:	f8cb 3000 	str.w	r3, [fp]
        buf->len = tag_len;
 800ec0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 800ec0e:	9b06      	ldr	r3, [sp, #24]
 800ec10:	f8cb 3008 	str.w	r3, [fp, #8]
        buf->len = tag_len;
 800ec14:	f8cb 2004 	str.w	r2, [fp, #4]
 800ec18:	e7e3      	b.n	800ebe2 <mbedtls_x509_crt_parse_der+0x5ae>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 800ec1a:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800ec1e:	4639      	mov	r1, r7
 800ec20:	a806      	add	r0, sp, #24
 800ec22:	f7fe fc41 	bl	800d4a8 <mbedtls_x509_get_sig>
 800ec26:	4605      	mov	r5, r0
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	f47f adc4 	bne.w	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
    if( p != end )
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	429f      	cmp	r7, r3
 800ec32:	f47f ad57 	bne.w	800e6e4 <mbedtls_x509_crt_parse_der+0xb0>
}
 800ec36:	4628      	mov	r0, r5
 800ec38:	b01b      	add	sp, #108	; 0x6c
 800ec3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800ec3e:	4d08      	ldr	r5, [pc, #32]	; (800ec60 <mbedtls_x509_crt_parse_der+0x62c>)
 800ec40:	e7f9      	b.n	800ec36 <mbedtls_x509_crt_parse_der+0x602>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ec42:	4d08      	ldr	r5, [pc, #32]	; (800ec64 <mbedtls_x509_crt_parse_der+0x630>)
 800ec44:	e5b7      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800ec46:	4d06      	ldr	r5, [pc, #24]	; (800ec60 <mbedtls_x509_crt_parse_der+0x62c>)
 800ec48:	e538      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
 800ec4a:	bf00      	nop
 800ec4c:	ffffd980 	.word	0xffffd980
 800ec50:	ffffda9e 	.word	0xffffda9e
 800ec54:	ffffdf80 	.word	0xffffdf80
 800ec58:	ffffda9c 	.word	0xffffda9c
 800ec5c:	ffffda9a 	.word	0xffffda9a
 800ec60:	ffffd800 	.word	0xffffd800
 800ec64:	ffffda96 	.word	0xffffda96
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 800ec68:	4d02      	ldr	r5, [pc, #8]	; (800ec74 <mbedtls_x509_crt_parse_der+0x640>)
 800ec6a:	e527      	b.n	800e6bc <mbedtls_x509_crt_parse_der+0x88>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 800ec6c:	4d02      	ldr	r5, [pc, #8]	; (800ec78 <mbedtls_x509_crt_parse_der+0x644>)
 800ec6e:	e5a2      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 800ec70:	4d02      	ldr	r5, [pc, #8]	; (800ec7c <mbedtls_x509_crt_parse_der+0x648>)
 800ec72:	e5a0      	b.n	800e7b6 <mbedtls_x509_crt_parse_der+0x182>
 800ec74:	ffffd780 	.word	0xffffd780
 800ec78:	ffffdaa0 	.word	0xffffdaa0
 800ec7c:	ffffdb00 	.word	0xffffdb00

0800ec80 <mbedtls_x509_crt_parse>:
{
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	460d      	mov	r5, r1
 800ec86:	b089      	sub	sp, #36	; 0x24
 800ec88:	4616      	mov	r6, r2
    if( chain == NULL || buf == NULL )
 800ec8a:	4680      	mov	r8, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d058      	beq.n	800ed42 <mbedtls_x509_crt_parse+0xc2>
 800ec90:	2900      	cmp	r1, #0
 800ec92:	d056      	beq.n	800ed42 <mbedtls_x509_crt_parse+0xc2>
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	d058      	beq.n	800ed4a <mbedtls_x509_crt_parse+0xca>
 800ec98:	188b      	adds	r3, r1, r2
 800ec9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ec9e:	2b0a      	cmp	r3, #10
 800eca0:	d153      	bne.n	800ed4a <mbedtls_x509_crt_parse+0xca>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 800eca2:	492d      	ldr	r1, [pc, #180]	; (800ed58 <mbedtls_x509_crt_parse+0xd8>)
 800eca4:	4628      	mov	r0, r5
 800eca6:	f000 fb26 	bl	800f2f6 <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\n' &&
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d04d      	beq.n	800ed4a <mbedtls_x509_crt_parse+0xca>
 800ecae:	2700      	movs	r7, #0
            ret = mbedtls_pem_read_buffer( &pem,
 800ecb0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800ed58 <mbedtls_x509_crt_parse+0xd8>
 800ecb4:	463c      	mov	r4, r7
 800ecb6:	46b9      	mov	r9, r7
        while( buflen > 1 )
 800ecb8:	2e01      	cmp	r6, #1
 800ecba:	d807      	bhi.n	800eccc <mbedtls_x509_crt_parse+0x4c>
    if( success )
 800ecbc:	f1b9 0f00 	cmp.w	r9, #0
 800ecc0:	d141      	bne.n	800ed46 <mbedtls_x509_crt_parse+0xc6>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 800ecc2:	4b26      	ldr	r3, [pc, #152]	; (800ed5c <mbedtls_x509_crt_parse+0xdc>)
 800ecc4:	2c00      	cmp	r4, #0
 800ecc6:	bf08      	it	eq
 800ecc8:	461c      	moveq	r4, r3
 800ecca:	e036      	b.n	800ed3a <mbedtls_x509_crt_parse+0xba>
            mbedtls_pem_init( &pem );
 800eccc:	a805      	add	r0, sp, #20
 800ecce:	f7f8 fbc3 	bl	8007458 <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 800ecd2:	ab04      	add	r3, sp, #16
 800ecd4:	9302      	str	r3, [sp, #8]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	9301      	str	r3, [sp, #4]
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	4a20      	ldr	r2, [pc, #128]	; (800ed60 <mbedtls_x509_crt_parse+0xe0>)
 800ecde:	462b      	mov	r3, r5
 800ece0:	4659      	mov	r1, fp
 800ece2:	a805      	add	r0, sp, #20
 800ece4:	f7f8 fbbe 	bl	8007464 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 800ece8:	4682      	mov	sl, r0
 800ecea:	b988      	cbnz	r0, 800ed10 <mbedtls_x509_crt_parse+0x90>
                buflen -= use_len;
 800ecec:	9b04      	ldr	r3, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 800ecee:	9a06      	ldr	r2, [sp, #24]
 800ecf0:	9905      	ldr	r1, [sp, #20]
 800ecf2:	4640      	mov	r0, r8
                buflen -= use_len;
 800ecf4:	1af6      	subs	r6, r6, r3
                buf += use_len;
 800ecf6:	441d      	add	r5, r3
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 800ecf8:	f7ff fc9c 	bl	800e634 <mbedtls_x509_crt_parse_der>
 800ecfc:	4682      	mov	sl, r0
            mbedtls_pem_free( &pem );
 800ecfe:	a805      	add	r0, sp, #20
 800ed00:	f7f8 fc3e 	bl	8007580 <mbedtls_pem_free>
            if( ret != 0 )
 800ed04:	f1ba 0f00 	cmp.w	sl, #0
 800ed08:	d113      	bne.n	800ed32 <mbedtls_x509_crt_parse+0xb2>
            success = 1;
 800ed0a:	f04f 0901 	mov.w	r9, #1
 800ed0e:	e7d3      	b.n	800ecb8 <mbedtls_x509_crt_parse+0x38>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 800ed10:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 800ed14:	d010      	beq.n	800ed38 <mbedtls_x509_crt_parse+0xb8>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 800ed16:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 800ed1a:	d0cf      	beq.n	800ecbc <mbedtls_x509_crt_parse+0x3c>
                mbedtls_pem_free( &pem );
 800ed1c:	a805      	add	r0, sp, #20
 800ed1e:	f7f8 fc2f 	bl	8007580 <mbedtls_pem_free>
                buflen -= use_len;
 800ed22:	9a04      	ldr	r2, [sp, #16]
 800ed24:	1ab6      	subs	r6, r6, r2
                buf += use_len;
 800ed26:	4415      	add	r5, r2
                if( first_error == 0 )
 800ed28:	2c00      	cmp	r4, #0
 800ed2a:	bf08      	it	eq
 800ed2c:	4654      	moveq	r4, sl
                total_failed++;
 800ed2e:	3701      	adds	r7, #1
                continue;
 800ed30:	e7c2      	b.n	800ecb8 <mbedtls_x509_crt_parse+0x38>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 800ed32:	f51a 5f22 	cmn.w	sl, #10368	; 0x2880
 800ed36:	d1f7      	bne.n	800ed28 <mbedtls_x509_crt_parse+0xa8>
 800ed38:	4654      	mov	r4, sl
}
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	b009      	add	sp, #36	; 0x24
 800ed3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 800ed42:	4c08      	ldr	r4, [pc, #32]	; (800ed64 <mbedtls_x509_crt_parse+0xe4>)
 800ed44:	e7f9      	b.n	800ed3a <mbedtls_x509_crt_parse+0xba>
 800ed46:	463c      	mov	r4, r7
 800ed48:	e7f7      	b.n	800ed3a <mbedtls_x509_crt_parse+0xba>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 800ed4a:	4632      	mov	r2, r6
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	4640      	mov	r0, r8
 800ed50:	f7ff fc70 	bl	800e634 <mbedtls_x509_crt_parse_der>
 800ed54:	4604      	mov	r4, r0
 800ed56:	e7f0      	b.n	800ed3a <mbedtls_x509_crt_parse+0xba>
 800ed58:	080152cd 	.word	0x080152cd
 800ed5c:	ffffd880 	.word	0xffffd880
 800ed60:	080152e9 	.word	0x080152e9
 800ed64:	ffffd800 	.word	0xffffd800

0800ed68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800ed68:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eda0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ed6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ed6e:	e003      	b.n	800ed78 <LoopCopyDataInit>

0800ed70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ed70:	4b0c      	ldr	r3, [pc, #48]	; (800eda4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ed72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ed74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ed76:	3104      	adds	r1, #4

0800ed78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ed78:	480b      	ldr	r0, [pc, #44]	; (800eda8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	; (800edac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ed7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ed7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ed80:	d3f6      	bcc.n	800ed70 <CopyDataInit>
  ldr  r2, =_sbss
 800ed82:	4a0b      	ldr	r2, [pc, #44]	; (800edb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ed84:	e002      	b.n	800ed8c <LoopFillZerobss>

0800ed86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ed86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ed88:	f842 3b04 	str.w	r3, [r2], #4

0800ed8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ed8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ed90:	d3f9      	bcc.n	800ed86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ed92:	f7f2 fd2d 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ed96:	f000 f81f 	bl	800edd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ed9a:	f7f2 fbaf 	bl	80014fc <main>
  bx  lr    
 800ed9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800eda0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800eda4:	080153d0 	.word	0x080153d0
  ldr  r0, =_sdata
 800eda8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800edac:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 800edb0:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 800edb4:	20003010 	.word	0x20003010

0800edb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800edb8:	e7fe      	b.n	800edb8 <ADC_IRQHandler>
	...

0800edbc <calloc>:
 800edbc:	4b02      	ldr	r3, [pc, #8]	; (800edc8 <calloc+0xc>)
 800edbe:	460a      	mov	r2, r1
 800edc0:	4601      	mov	r1, r0
 800edc2:	6818      	ldr	r0, [r3, #0]
 800edc4:	f000 b878 	b.w	800eeb8 <_calloc_r>
 800edc8:	2000008c 	.word	0x2000008c

0800edcc <__errno>:
 800edcc:	4b01      	ldr	r3, [pc, #4]	; (800edd4 <__errno+0x8>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	2000008c 	.word	0x2000008c

0800edd8 <__libc_init_array>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	4e0d      	ldr	r6, [pc, #52]	; (800ee10 <__libc_init_array+0x38>)
 800eddc:	4c0d      	ldr	r4, [pc, #52]	; (800ee14 <__libc_init_array+0x3c>)
 800edde:	1ba4      	subs	r4, r4, r6
 800ede0:	10a4      	asrs	r4, r4, #2
 800ede2:	2500      	movs	r5, #0
 800ede4:	42a5      	cmp	r5, r4
 800ede6:	d109      	bne.n	800edfc <__libc_init_array+0x24>
 800ede8:	4e0b      	ldr	r6, [pc, #44]	; (800ee18 <__libc_init_array+0x40>)
 800edea:	4c0c      	ldr	r4, [pc, #48]	; (800ee1c <__libc_init_array+0x44>)
 800edec:	f001 fa38 	bl	8010260 <_init>
 800edf0:	1ba4      	subs	r4, r4, r6
 800edf2:	10a4      	asrs	r4, r4, #2
 800edf4:	2500      	movs	r5, #0
 800edf6:	42a5      	cmp	r5, r4
 800edf8:	d105      	bne.n	800ee06 <__libc_init_array+0x2e>
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee00:	4798      	blx	r3
 800ee02:	3501      	adds	r5, #1
 800ee04:	e7ee      	b.n	800ede4 <__libc_init_array+0xc>
 800ee06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee0a:	4798      	blx	r3
 800ee0c:	3501      	adds	r5, #1
 800ee0e:	e7f2      	b.n	800edf6 <__libc_init_array+0x1e>
 800ee10:	080153c8 	.word	0x080153c8
 800ee14:	080153c8 	.word	0x080153c8
 800ee18:	080153c8 	.word	0x080153c8
 800ee1c:	080153cc 	.word	0x080153cc

0800ee20 <malloc>:
 800ee20:	4b02      	ldr	r3, [pc, #8]	; (800ee2c <malloc+0xc>)
 800ee22:	4601      	mov	r1, r0
 800ee24:	6818      	ldr	r0, [r3, #0]
 800ee26:	f000 b8a3 	b.w	800ef70 <_malloc_r>
 800ee2a:	bf00      	nop
 800ee2c:	2000008c 	.word	0x2000008c

0800ee30 <free>:
 800ee30:	4b02      	ldr	r3, [pc, #8]	; (800ee3c <free+0xc>)
 800ee32:	4601      	mov	r1, r0
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	f000 b84d 	b.w	800eed4 <_free_r>
 800ee3a:	bf00      	nop
 800ee3c:	2000008c 	.word	0x2000008c

0800ee40 <memcmp>:
 800ee40:	b510      	push	{r4, lr}
 800ee42:	3901      	subs	r1, #1
 800ee44:	4402      	add	r2, r0
 800ee46:	4290      	cmp	r0, r2
 800ee48:	d101      	bne.n	800ee4e <memcmp+0xe>
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	bd10      	pop	{r4, pc}
 800ee4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ee52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee56:	42a3      	cmp	r3, r4
 800ee58:	d0f5      	beq.n	800ee46 <memcmp+0x6>
 800ee5a:	1b18      	subs	r0, r3, r4
 800ee5c:	bd10      	pop	{r4, pc}

0800ee5e <memcpy>:
 800ee5e:	b510      	push	{r4, lr}
 800ee60:	1e43      	subs	r3, r0, #1
 800ee62:	440a      	add	r2, r1
 800ee64:	4291      	cmp	r1, r2
 800ee66:	d100      	bne.n	800ee6a <memcpy+0xc>
 800ee68:	bd10      	pop	{r4, pc}
 800ee6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee72:	e7f7      	b.n	800ee64 <memcpy+0x6>

0800ee74 <memmove>:
 800ee74:	4288      	cmp	r0, r1
 800ee76:	b510      	push	{r4, lr}
 800ee78:	eb01 0302 	add.w	r3, r1, r2
 800ee7c:	d803      	bhi.n	800ee86 <memmove+0x12>
 800ee7e:	1e42      	subs	r2, r0, #1
 800ee80:	4299      	cmp	r1, r3
 800ee82:	d10c      	bne.n	800ee9e <memmove+0x2a>
 800ee84:	bd10      	pop	{r4, pc}
 800ee86:	4298      	cmp	r0, r3
 800ee88:	d2f9      	bcs.n	800ee7e <memmove+0xa>
 800ee8a:	1881      	adds	r1, r0, r2
 800ee8c:	1ad2      	subs	r2, r2, r3
 800ee8e:	42d3      	cmn	r3, r2
 800ee90:	d100      	bne.n	800ee94 <memmove+0x20>
 800ee92:	bd10      	pop	{r4, pc}
 800ee94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ee9c:	e7f7      	b.n	800ee8e <memmove+0x1a>
 800ee9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eea2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eea6:	e7eb      	b.n	800ee80 <memmove+0xc>

0800eea8 <memset>:
 800eea8:	4402      	add	r2, r0
 800eeaa:	4603      	mov	r3, r0
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d100      	bne.n	800eeb2 <memset+0xa>
 800eeb0:	4770      	bx	lr
 800eeb2:	f803 1b01 	strb.w	r1, [r3], #1
 800eeb6:	e7f9      	b.n	800eeac <memset+0x4>

0800eeb8 <_calloc_r>:
 800eeb8:	b538      	push	{r3, r4, r5, lr}
 800eeba:	fb02 f401 	mul.w	r4, r2, r1
 800eebe:	4621      	mov	r1, r4
 800eec0:	f000 f856 	bl	800ef70 <_malloc_r>
 800eec4:	4605      	mov	r5, r0
 800eec6:	b118      	cbz	r0, 800eed0 <_calloc_r+0x18>
 800eec8:	4622      	mov	r2, r4
 800eeca:	2100      	movs	r1, #0
 800eecc:	f7ff ffec 	bl	800eea8 <memset>
 800eed0:	4628      	mov	r0, r5
 800eed2:	bd38      	pop	{r3, r4, r5, pc}

0800eed4 <_free_r>:
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	4605      	mov	r5, r0
 800eed8:	2900      	cmp	r1, #0
 800eeda:	d045      	beq.n	800ef68 <_free_r+0x94>
 800eedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eee0:	1f0c      	subs	r4, r1, #4
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	bfb8      	it	lt
 800eee6:	18e4      	addlt	r4, r4, r3
 800eee8:	f000 fd2e 	bl	800f948 <__malloc_lock>
 800eeec:	4a1f      	ldr	r2, [pc, #124]	; (800ef6c <_free_r+0x98>)
 800eeee:	6813      	ldr	r3, [r2, #0]
 800eef0:	4610      	mov	r0, r2
 800eef2:	b933      	cbnz	r3, 800ef02 <_free_r+0x2e>
 800eef4:	6063      	str	r3, [r4, #4]
 800eef6:	6014      	str	r4, [r2, #0]
 800eef8:	4628      	mov	r0, r5
 800eefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eefe:	f000 bd24 	b.w	800f94a <__malloc_unlock>
 800ef02:	42a3      	cmp	r3, r4
 800ef04:	d90c      	bls.n	800ef20 <_free_r+0x4c>
 800ef06:	6821      	ldr	r1, [r4, #0]
 800ef08:	1862      	adds	r2, r4, r1
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	bf04      	itt	eq
 800ef0e:	681a      	ldreq	r2, [r3, #0]
 800ef10:	685b      	ldreq	r3, [r3, #4]
 800ef12:	6063      	str	r3, [r4, #4]
 800ef14:	bf04      	itt	eq
 800ef16:	1852      	addeq	r2, r2, r1
 800ef18:	6022      	streq	r2, [r4, #0]
 800ef1a:	6004      	str	r4, [r0, #0]
 800ef1c:	e7ec      	b.n	800eef8 <_free_r+0x24>
 800ef1e:	4613      	mov	r3, r2
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	b10a      	cbz	r2, 800ef28 <_free_r+0x54>
 800ef24:	42a2      	cmp	r2, r4
 800ef26:	d9fa      	bls.n	800ef1e <_free_r+0x4a>
 800ef28:	6819      	ldr	r1, [r3, #0]
 800ef2a:	1858      	adds	r0, r3, r1
 800ef2c:	42a0      	cmp	r0, r4
 800ef2e:	d10b      	bne.n	800ef48 <_free_r+0x74>
 800ef30:	6820      	ldr	r0, [r4, #0]
 800ef32:	4401      	add	r1, r0
 800ef34:	1858      	adds	r0, r3, r1
 800ef36:	4282      	cmp	r2, r0
 800ef38:	6019      	str	r1, [r3, #0]
 800ef3a:	d1dd      	bne.n	800eef8 <_free_r+0x24>
 800ef3c:	6810      	ldr	r0, [r2, #0]
 800ef3e:	6852      	ldr	r2, [r2, #4]
 800ef40:	605a      	str	r2, [r3, #4]
 800ef42:	4401      	add	r1, r0
 800ef44:	6019      	str	r1, [r3, #0]
 800ef46:	e7d7      	b.n	800eef8 <_free_r+0x24>
 800ef48:	d902      	bls.n	800ef50 <_free_r+0x7c>
 800ef4a:	230c      	movs	r3, #12
 800ef4c:	602b      	str	r3, [r5, #0]
 800ef4e:	e7d3      	b.n	800eef8 <_free_r+0x24>
 800ef50:	6820      	ldr	r0, [r4, #0]
 800ef52:	1821      	adds	r1, r4, r0
 800ef54:	428a      	cmp	r2, r1
 800ef56:	bf04      	itt	eq
 800ef58:	6811      	ldreq	r1, [r2, #0]
 800ef5a:	6852      	ldreq	r2, [r2, #4]
 800ef5c:	6062      	str	r2, [r4, #4]
 800ef5e:	bf04      	itt	eq
 800ef60:	1809      	addeq	r1, r1, r0
 800ef62:	6021      	streq	r1, [r4, #0]
 800ef64:	605c      	str	r4, [r3, #4]
 800ef66:	e7c7      	b.n	800eef8 <_free_r+0x24>
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20002764 	.word	0x20002764

0800ef70 <_malloc_r>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	1ccd      	adds	r5, r1, #3
 800ef74:	f025 0503 	bic.w	r5, r5, #3
 800ef78:	3508      	adds	r5, #8
 800ef7a:	2d0c      	cmp	r5, #12
 800ef7c:	bf38      	it	cc
 800ef7e:	250c      	movcc	r5, #12
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	4606      	mov	r6, r0
 800ef84:	db01      	blt.n	800ef8a <_malloc_r+0x1a>
 800ef86:	42a9      	cmp	r1, r5
 800ef88:	d903      	bls.n	800ef92 <_malloc_r+0x22>
 800ef8a:	230c      	movs	r3, #12
 800ef8c:	6033      	str	r3, [r6, #0]
 800ef8e:	2000      	movs	r0, #0
 800ef90:	bd70      	pop	{r4, r5, r6, pc}
 800ef92:	f000 fcd9 	bl	800f948 <__malloc_lock>
 800ef96:	4a23      	ldr	r2, [pc, #140]	; (800f024 <_malloc_r+0xb4>)
 800ef98:	6814      	ldr	r4, [r2, #0]
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	b991      	cbnz	r1, 800efc4 <_malloc_r+0x54>
 800ef9e:	4c22      	ldr	r4, [pc, #136]	; (800f028 <_malloc_r+0xb8>)
 800efa0:	6823      	ldr	r3, [r4, #0]
 800efa2:	b91b      	cbnz	r3, 800efac <_malloc_r+0x3c>
 800efa4:	4630      	mov	r0, r6
 800efa6:	f000 f91f 	bl	800f1e8 <_sbrk_r>
 800efaa:	6020      	str	r0, [r4, #0]
 800efac:	4629      	mov	r1, r5
 800efae:	4630      	mov	r0, r6
 800efb0:	f000 f91a 	bl	800f1e8 <_sbrk_r>
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	d126      	bne.n	800f006 <_malloc_r+0x96>
 800efb8:	230c      	movs	r3, #12
 800efba:	6033      	str	r3, [r6, #0]
 800efbc:	4630      	mov	r0, r6
 800efbe:	f000 fcc4 	bl	800f94a <__malloc_unlock>
 800efc2:	e7e4      	b.n	800ef8e <_malloc_r+0x1e>
 800efc4:	680b      	ldr	r3, [r1, #0]
 800efc6:	1b5b      	subs	r3, r3, r5
 800efc8:	d41a      	bmi.n	800f000 <_malloc_r+0x90>
 800efca:	2b0b      	cmp	r3, #11
 800efcc:	d90f      	bls.n	800efee <_malloc_r+0x7e>
 800efce:	600b      	str	r3, [r1, #0]
 800efd0:	50cd      	str	r5, [r1, r3]
 800efd2:	18cc      	adds	r4, r1, r3
 800efd4:	4630      	mov	r0, r6
 800efd6:	f000 fcb8 	bl	800f94a <__malloc_unlock>
 800efda:	f104 000b 	add.w	r0, r4, #11
 800efde:	1d23      	adds	r3, r4, #4
 800efe0:	f020 0007 	bic.w	r0, r0, #7
 800efe4:	1ac3      	subs	r3, r0, r3
 800efe6:	d01b      	beq.n	800f020 <_malloc_r+0xb0>
 800efe8:	425a      	negs	r2, r3
 800efea:	50e2      	str	r2, [r4, r3]
 800efec:	bd70      	pop	{r4, r5, r6, pc}
 800efee:	428c      	cmp	r4, r1
 800eff0:	bf0d      	iteet	eq
 800eff2:	6863      	ldreq	r3, [r4, #4]
 800eff4:	684b      	ldrne	r3, [r1, #4]
 800eff6:	6063      	strne	r3, [r4, #4]
 800eff8:	6013      	streq	r3, [r2, #0]
 800effa:	bf18      	it	ne
 800effc:	460c      	movne	r4, r1
 800effe:	e7e9      	b.n	800efd4 <_malloc_r+0x64>
 800f000:	460c      	mov	r4, r1
 800f002:	6849      	ldr	r1, [r1, #4]
 800f004:	e7ca      	b.n	800ef9c <_malloc_r+0x2c>
 800f006:	1cc4      	adds	r4, r0, #3
 800f008:	f024 0403 	bic.w	r4, r4, #3
 800f00c:	42a0      	cmp	r0, r4
 800f00e:	d005      	beq.n	800f01c <_malloc_r+0xac>
 800f010:	1a21      	subs	r1, r4, r0
 800f012:	4630      	mov	r0, r6
 800f014:	f000 f8e8 	bl	800f1e8 <_sbrk_r>
 800f018:	3001      	adds	r0, #1
 800f01a:	d0cd      	beq.n	800efb8 <_malloc_r+0x48>
 800f01c:	6025      	str	r5, [r4, #0]
 800f01e:	e7d9      	b.n	800efd4 <_malloc_r+0x64>
 800f020:	bd70      	pop	{r4, r5, r6, pc}
 800f022:	bf00      	nop
 800f024:	20002764 	.word	0x20002764
 800f028:	20002768 	.word	0x20002768

0800f02c <iprintf>:
 800f02c:	b40f      	push	{r0, r1, r2, r3}
 800f02e:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <iprintf+0x2c>)
 800f030:	b513      	push	{r0, r1, r4, lr}
 800f032:	681c      	ldr	r4, [r3, #0]
 800f034:	b124      	cbz	r4, 800f040 <iprintf+0x14>
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	b913      	cbnz	r3, 800f040 <iprintf+0x14>
 800f03a:	4620      	mov	r0, r4
 800f03c:	f000 fb84 	bl	800f748 <__sinit>
 800f040:	ab05      	add	r3, sp, #20
 800f042:	9a04      	ldr	r2, [sp, #16]
 800f044:	68a1      	ldr	r1, [r4, #8]
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 fdf9 	bl	800fc40 <_vfiprintf_r>
 800f04e:	b002      	add	sp, #8
 800f050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f054:	b004      	add	sp, #16
 800f056:	4770      	bx	lr
 800f058:	2000008c 	.word	0x2000008c

0800f05c <_puts_r>:
 800f05c:	b570      	push	{r4, r5, r6, lr}
 800f05e:	460e      	mov	r6, r1
 800f060:	4605      	mov	r5, r0
 800f062:	b118      	cbz	r0, 800f06c <_puts_r+0x10>
 800f064:	6983      	ldr	r3, [r0, #24]
 800f066:	b90b      	cbnz	r3, 800f06c <_puts_r+0x10>
 800f068:	f000 fb6e 	bl	800f748 <__sinit>
 800f06c:	69ab      	ldr	r3, [r5, #24]
 800f06e:	68ac      	ldr	r4, [r5, #8]
 800f070:	b913      	cbnz	r3, 800f078 <_puts_r+0x1c>
 800f072:	4628      	mov	r0, r5
 800f074:	f000 fb68 	bl	800f748 <__sinit>
 800f078:	4b23      	ldr	r3, [pc, #140]	; (800f108 <_puts_r+0xac>)
 800f07a:	429c      	cmp	r4, r3
 800f07c:	d117      	bne.n	800f0ae <_puts_r+0x52>
 800f07e:	686c      	ldr	r4, [r5, #4]
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	071b      	lsls	r3, r3, #28
 800f084:	d51d      	bpl.n	800f0c2 <_puts_r+0x66>
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	b1db      	cbz	r3, 800f0c2 <_puts_r+0x66>
 800f08a:	3e01      	subs	r6, #1
 800f08c:	68a3      	ldr	r3, [r4, #8]
 800f08e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f092:	3b01      	subs	r3, #1
 800f094:	60a3      	str	r3, [r4, #8]
 800f096:	b9e9      	cbnz	r1, 800f0d4 <_puts_r+0x78>
 800f098:	2b00      	cmp	r3, #0
 800f09a:	da2e      	bge.n	800f0fa <_puts_r+0x9e>
 800f09c:	4622      	mov	r2, r4
 800f09e:	210a      	movs	r1, #10
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	f000 f97d 	bl	800f3a0 <__swbuf_r>
 800f0a6:	3001      	adds	r0, #1
 800f0a8:	d011      	beq.n	800f0ce <_puts_r+0x72>
 800f0aa:	200a      	movs	r0, #10
 800f0ac:	bd70      	pop	{r4, r5, r6, pc}
 800f0ae:	4b17      	ldr	r3, [pc, #92]	; (800f10c <_puts_r+0xb0>)
 800f0b0:	429c      	cmp	r4, r3
 800f0b2:	d101      	bne.n	800f0b8 <_puts_r+0x5c>
 800f0b4:	68ac      	ldr	r4, [r5, #8]
 800f0b6:	e7e3      	b.n	800f080 <_puts_r+0x24>
 800f0b8:	4b15      	ldr	r3, [pc, #84]	; (800f110 <_puts_r+0xb4>)
 800f0ba:	429c      	cmp	r4, r3
 800f0bc:	bf08      	it	eq
 800f0be:	68ec      	ldreq	r4, [r5, #12]
 800f0c0:	e7de      	b.n	800f080 <_puts_r+0x24>
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	f000 f9cf 	bl	800f468 <__swsetup_r>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d0dd      	beq.n	800f08a <_puts_r+0x2e>
 800f0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d2:	bd70      	pop	{r4, r5, r6, pc}
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	da04      	bge.n	800f0e2 <_puts_r+0x86>
 800f0d8:	69a2      	ldr	r2, [r4, #24]
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	db06      	blt.n	800f0ec <_puts_r+0x90>
 800f0de:	290a      	cmp	r1, #10
 800f0e0:	d004      	beq.n	800f0ec <_puts_r+0x90>
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	6022      	str	r2, [r4, #0]
 800f0e8:	7019      	strb	r1, [r3, #0]
 800f0ea:	e7cf      	b.n	800f08c <_puts_r+0x30>
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 f956 	bl	800f3a0 <__swbuf_r>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d1c9      	bne.n	800f08c <_puts_r+0x30>
 800f0f8:	e7e9      	b.n	800f0ce <_puts_r+0x72>
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	200a      	movs	r0, #10
 800f0fe:	1c5a      	adds	r2, r3, #1
 800f100:	6022      	str	r2, [r4, #0]
 800f102:	7018      	strb	r0, [r3, #0]
 800f104:	bd70      	pop	{r4, r5, r6, pc}
 800f106:	bf00      	nop
 800f108:	0801534c 	.word	0x0801534c
 800f10c:	0801536c 	.word	0x0801536c
 800f110:	0801532c 	.word	0x0801532c

0800f114 <puts>:
 800f114:	4b02      	ldr	r3, [pc, #8]	; (800f120 <puts+0xc>)
 800f116:	4601      	mov	r1, r0
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	f7ff bf9f 	b.w	800f05c <_puts_r>
 800f11e:	bf00      	nop
 800f120:	2000008c 	.word	0x2000008c

0800f124 <srand>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4b12      	ldr	r3, [pc, #72]	; (800f170 <srand+0x4c>)
 800f128:	681c      	ldr	r4, [r3, #0]
 800f12a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f12c:	4605      	mov	r5, r0
 800f12e:	b9d3      	cbnz	r3, 800f166 <srand+0x42>
 800f130:	2018      	movs	r0, #24
 800f132:	f7ff fe75 	bl	800ee20 <malloc>
 800f136:	f243 330e 	movw	r3, #13070	; 0x330e
 800f13a:	63a0      	str	r0, [r4, #56]	; 0x38
 800f13c:	8003      	strh	r3, [r0, #0]
 800f13e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800f142:	8043      	strh	r3, [r0, #2]
 800f144:	f241 2334 	movw	r3, #4660	; 0x1234
 800f148:	8083      	strh	r3, [r0, #4]
 800f14a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800f14e:	80c3      	strh	r3, [r0, #6]
 800f150:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800f154:	8103      	strh	r3, [r0, #8]
 800f156:	2305      	movs	r3, #5
 800f158:	8143      	strh	r3, [r0, #10]
 800f15a:	230b      	movs	r3, #11
 800f15c:	8183      	strh	r3, [r0, #12]
 800f15e:	2201      	movs	r2, #1
 800f160:	2300      	movs	r3, #0
 800f162:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f168:	2200      	movs	r2, #0
 800f16a:	611d      	str	r5, [r3, #16]
 800f16c:	615a      	str	r2, [r3, #20]
 800f16e:	bd38      	pop	{r3, r4, r5, pc}
 800f170:	2000008c 	.word	0x2000008c

0800f174 <rand>:
 800f174:	4b19      	ldr	r3, [pc, #100]	; (800f1dc <rand+0x68>)
 800f176:	b510      	push	{r4, lr}
 800f178:	681c      	ldr	r4, [r3, #0]
 800f17a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f17c:	b9d3      	cbnz	r3, 800f1b4 <rand+0x40>
 800f17e:	2018      	movs	r0, #24
 800f180:	f7ff fe4e 	bl	800ee20 <malloc>
 800f184:	f243 330e 	movw	r3, #13070	; 0x330e
 800f188:	63a0      	str	r0, [r4, #56]	; 0x38
 800f18a:	8003      	strh	r3, [r0, #0]
 800f18c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800f190:	8043      	strh	r3, [r0, #2]
 800f192:	f241 2334 	movw	r3, #4660	; 0x1234
 800f196:	8083      	strh	r3, [r0, #4]
 800f198:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800f19c:	80c3      	strh	r3, [r0, #6]
 800f19e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800f1a2:	8103      	strh	r3, [r0, #8]
 800f1a4:	2305      	movs	r3, #5
 800f1a6:	8143      	strh	r3, [r0, #10]
 800f1a8:	230b      	movs	r3, #11
 800f1aa:	8183      	strh	r3, [r0, #12]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f1b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f1b6:	480a      	ldr	r0, [pc, #40]	; (800f1e0 <rand+0x6c>)
 800f1b8:	690a      	ldr	r2, [r1, #16]
 800f1ba:	694b      	ldr	r3, [r1, #20]
 800f1bc:	4c09      	ldr	r4, [pc, #36]	; (800f1e4 <rand+0x70>)
 800f1be:	4350      	muls	r0, r2
 800f1c0:	fb04 0003 	mla	r0, r4, r3, r0
 800f1c4:	fba2 2304 	umull	r2, r3, r2, r4
 800f1c8:	3201      	adds	r2, #1
 800f1ca:	4403      	add	r3, r0
 800f1cc:	f143 0300 	adc.w	r3, r3, #0
 800f1d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f1d4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f1d8:	bd10      	pop	{r4, pc}
 800f1da:	bf00      	nop
 800f1dc:	2000008c 	.word	0x2000008c
 800f1e0:	5851f42d 	.word	0x5851f42d
 800f1e4:	4c957f2d 	.word	0x4c957f2d

0800f1e8 <_sbrk_r>:
 800f1e8:	b538      	push	{r3, r4, r5, lr}
 800f1ea:	4c06      	ldr	r4, [pc, #24]	; (800f204 <_sbrk_r+0x1c>)
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	4608      	mov	r0, r1
 800f1f2:	6023      	str	r3, [r4, #0]
 800f1f4:	f7f2 fad6 	bl	80017a4 <_sbrk>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_sbrk_r+0x1a>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_sbrk_r+0x1a>
 800f200:	602b      	str	r3, [r5, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	2000300c 	.word	0x2000300c

0800f208 <sniprintf>:
 800f208:	b40c      	push	{r2, r3}
 800f20a:	b530      	push	{r4, r5, lr}
 800f20c:	4b17      	ldr	r3, [pc, #92]	; (800f26c <sniprintf+0x64>)
 800f20e:	1e0c      	subs	r4, r1, #0
 800f210:	b09d      	sub	sp, #116	; 0x74
 800f212:	681d      	ldr	r5, [r3, #0]
 800f214:	da08      	bge.n	800f228 <sniprintf+0x20>
 800f216:	238b      	movs	r3, #139	; 0x8b
 800f218:	602b      	str	r3, [r5, #0]
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295
 800f21e:	b01d      	add	sp, #116	; 0x74
 800f220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f224:	b002      	add	sp, #8
 800f226:	4770      	bx	lr
 800f228:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f22c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f230:	bf14      	ite	ne
 800f232:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f236:	4623      	moveq	r3, r4
 800f238:	9304      	str	r3, [sp, #16]
 800f23a:	9307      	str	r3, [sp, #28]
 800f23c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f240:	9002      	str	r0, [sp, #8]
 800f242:	9006      	str	r0, [sp, #24]
 800f244:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f248:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f24a:	ab21      	add	r3, sp, #132	; 0x84
 800f24c:	a902      	add	r1, sp, #8
 800f24e:	4628      	mov	r0, r5
 800f250:	9301      	str	r3, [sp, #4]
 800f252:	f000 fbd7 	bl	800fa04 <_svfiprintf_r>
 800f256:	1c43      	adds	r3, r0, #1
 800f258:	bfbc      	itt	lt
 800f25a:	238b      	movlt	r3, #139	; 0x8b
 800f25c:	602b      	strlt	r3, [r5, #0]
 800f25e:	2c00      	cmp	r4, #0
 800f260:	d0dd      	beq.n	800f21e <sniprintf+0x16>
 800f262:	9b02      	ldr	r3, [sp, #8]
 800f264:	2200      	movs	r2, #0
 800f266:	701a      	strb	r2, [r3, #0]
 800f268:	e7d9      	b.n	800f21e <sniprintf+0x16>
 800f26a:	bf00      	nop
 800f26c:	2000008c 	.word	0x2000008c

0800f270 <__sread>:
 800f270:	b510      	push	{r4, lr}
 800f272:	460c      	mov	r4, r1
 800f274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f278:	f000 ff8e 	bl	8010198 <_read_r>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	bfab      	itete	ge
 800f280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f282:	89a3      	ldrhlt	r3, [r4, #12]
 800f284:	181b      	addge	r3, r3, r0
 800f286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f28a:	bfac      	ite	ge
 800f28c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f28e:	81a3      	strhlt	r3, [r4, #12]
 800f290:	bd10      	pop	{r4, pc}

0800f292 <__swrite>:
 800f292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f296:	461f      	mov	r7, r3
 800f298:	898b      	ldrh	r3, [r1, #12]
 800f29a:	05db      	lsls	r3, r3, #23
 800f29c:	4605      	mov	r5, r0
 800f29e:	460c      	mov	r4, r1
 800f2a0:	4616      	mov	r6, r2
 800f2a2:	d505      	bpl.n	800f2b0 <__swrite+0x1e>
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ac:	f000 fad6 	bl	800f85c <_lseek_r>
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2ba:	81a3      	strh	r3, [r4, #12]
 800f2bc:	4632      	mov	r2, r6
 800f2be:	463b      	mov	r3, r7
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c6:	f000 b8bd 	b.w	800f444 <_write_r>

0800f2ca <__sseek>:
 800f2ca:	b510      	push	{r4, lr}
 800f2cc:	460c      	mov	r4, r1
 800f2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d2:	f000 fac3 	bl	800f85c <_lseek_r>
 800f2d6:	1c43      	adds	r3, r0, #1
 800f2d8:	89a3      	ldrh	r3, [r4, #12]
 800f2da:	bf15      	itete	ne
 800f2dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2e6:	81a3      	strheq	r3, [r4, #12]
 800f2e8:	bf18      	it	ne
 800f2ea:	81a3      	strhne	r3, [r4, #12]
 800f2ec:	bd10      	pop	{r4, pc}

0800f2ee <__sclose>:
 800f2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f2:	f000 b927 	b.w	800f544 <_close_r>

0800f2f6 <strstr>:
 800f2f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f8:	7803      	ldrb	r3, [r0, #0]
 800f2fa:	b133      	cbz	r3, 800f30a <strstr+0x14>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	4618      	mov	r0, r3
 800f300:	1c5e      	adds	r6, r3, #1
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	b933      	cbnz	r3, 800f314 <strstr+0x1e>
 800f306:	4618      	mov	r0, r3
 800f308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f30a:	780b      	ldrb	r3, [r1, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	bf18      	it	ne
 800f310:	2000      	movne	r0, #0
 800f312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f314:	1e4d      	subs	r5, r1, #1
 800f316:	1e44      	subs	r4, r0, #1
 800f318:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f31c:	2a00      	cmp	r2, #0
 800f31e:	d0f3      	beq.n	800f308 <strstr+0x12>
 800f320:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800f324:	4297      	cmp	r7, r2
 800f326:	4633      	mov	r3, r6
 800f328:	d0f6      	beq.n	800f318 <strstr+0x22>
 800f32a:	e7e8      	b.n	800f2fe <strstr+0x8>

0800f32c <_vsniprintf_r>:
 800f32c:	b530      	push	{r4, r5, lr}
 800f32e:	1e14      	subs	r4, r2, #0
 800f330:	4605      	mov	r5, r0
 800f332:	b09b      	sub	sp, #108	; 0x6c
 800f334:	4618      	mov	r0, r3
 800f336:	da05      	bge.n	800f344 <_vsniprintf_r+0x18>
 800f338:	238b      	movs	r3, #139	; 0x8b
 800f33a:	602b      	str	r3, [r5, #0]
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295
 800f340:	b01b      	add	sp, #108	; 0x6c
 800f342:	bd30      	pop	{r4, r5, pc}
 800f344:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f348:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f34c:	bf14      	ite	ne
 800f34e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f352:	4623      	moveq	r3, r4
 800f354:	9302      	str	r3, [sp, #8]
 800f356:	9305      	str	r3, [sp, #20]
 800f358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f35c:	9100      	str	r1, [sp, #0]
 800f35e:	9104      	str	r1, [sp, #16]
 800f360:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f364:	4602      	mov	r2, r0
 800f366:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f368:	4669      	mov	r1, sp
 800f36a:	4628      	mov	r0, r5
 800f36c:	f000 fb4a 	bl	800fa04 <_svfiprintf_r>
 800f370:	1c43      	adds	r3, r0, #1
 800f372:	bfbc      	itt	lt
 800f374:	238b      	movlt	r3, #139	; 0x8b
 800f376:	602b      	strlt	r3, [r5, #0]
 800f378:	2c00      	cmp	r4, #0
 800f37a:	d0e1      	beq.n	800f340 <_vsniprintf_r+0x14>
 800f37c:	9b00      	ldr	r3, [sp, #0]
 800f37e:	2200      	movs	r2, #0
 800f380:	701a      	strb	r2, [r3, #0]
 800f382:	e7dd      	b.n	800f340 <_vsniprintf_r+0x14>

0800f384 <vsniprintf>:
 800f384:	b507      	push	{r0, r1, r2, lr}
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	4613      	mov	r3, r2
 800f38a:	460a      	mov	r2, r1
 800f38c:	4601      	mov	r1, r0
 800f38e:	4803      	ldr	r0, [pc, #12]	; (800f39c <vsniprintf+0x18>)
 800f390:	6800      	ldr	r0, [r0, #0]
 800f392:	f7ff ffcb 	bl	800f32c <_vsniprintf_r>
 800f396:	b003      	add	sp, #12
 800f398:	f85d fb04 	ldr.w	pc, [sp], #4
 800f39c:	2000008c 	.word	0x2000008c

0800f3a0 <__swbuf_r>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	460e      	mov	r6, r1
 800f3a4:	4614      	mov	r4, r2
 800f3a6:	4605      	mov	r5, r0
 800f3a8:	b118      	cbz	r0, 800f3b2 <__swbuf_r+0x12>
 800f3aa:	6983      	ldr	r3, [r0, #24]
 800f3ac:	b90b      	cbnz	r3, 800f3b2 <__swbuf_r+0x12>
 800f3ae:	f000 f9cb 	bl	800f748 <__sinit>
 800f3b2:	4b21      	ldr	r3, [pc, #132]	; (800f438 <__swbuf_r+0x98>)
 800f3b4:	429c      	cmp	r4, r3
 800f3b6:	d12a      	bne.n	800f40e <__swbuf_r+0x6e>
 800f3b8:	686c      	ldr	r4, [r5, #4]
 800f3ba:	69a3      	ldr	r3, [r4, #24]
 800f3bc:	60a3      	str	r3, [r4, #8]
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	071a      	lsls	r2, r3, #28
 800f3c2:	d52e      	bpl.n	800f422 <__swbuf_r+0x82>
 800f3c4:	6923      	ldr	r3, [r4, #16]
 800f3c6:	b363      	cbz	r3, 800f422 <__swbuf_r+0x82>
 800f3c8:	6923      	ldr	r3, [r4, #16]
 800f3ca:	6820      	ldr	r0, [r4, #0]
 800f3cc:	1ac0      	subs	r0, r0, r3
 800f3ce:	6963      	ldr	r3, [r4, #20]
 800f3d0:	b2f6      	uxtb	r6, r6
 800f3d2:	4298      	cmp	r0, r3
 800f3d4:	4637      	mov	r7, r6
 800f3d6:	db04      	blt.n	800f3e2 <__swbuf_r+0x42>
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f000 f94a 	bl	800f674 <_fflush_r>
 800f3e0:	bb28      	cbnz	r0, 800f42e <__swbuf_r+0x8e>
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	60a3      	str	r3, [r4, #8]
 800f3e8:	6823      	ldr	r3, [r4, #0]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	6022      	str	r2, [r4, #0]
 800f3ee:	701e      	strb	r6, [r3, #0]
 800f3f0:	6963      	ldr	r3, [r4, #20]
 800f3f2:	3001      	adds	r0, #1
 800f3f4:	4298      	cmp	r0, r3
 800f3f6:	d004      	beq.n	800f402 <__swbuf_r+0x62>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	07db      	lsls	r3, r3, #31
 800f3fc:	d519      	bpl.n	800f432 <__swbuf_r+0x92>
 800f3fe:	2e0a      	cmp	r6, #10
 800f400:	d117      	bne.n	800f432 <__swbuf_r+0x92>
 800f402:	4621      	mov	r1, r4
 800f404:	4628      	mov	r0, r5
 800f406:	f000 f935 	bl	800f674 <_fflush_r>
 800f40a:	b190      	cbz	r0, 800f432 <__swbuf_r+0x92>
 800f40c:	e00f      	b.n	800f42e <__swbuf_r+0x8e>
 800f40e:	4b0b      	ldr	r3, [pc, #44]	; (800f43c <__swbuf_r+0x9c>)
 800f410:	429c      	cmp	r4, r3
 800f412:	d101      	bne.n	800f418 <__swbuf_r+0x78>
 800f414:	68ac      	ldr	r4, [r5, #8]
 800f416:	e7d0      	b.n	800f3ba <__swbuf_r+0x1a>
 800f418:	4b09      	ldr	r3, [pc, #36]	; (800f440 <__swbuf_r+0xa0>)
 800f41a:	429c      	cmp	r4, r3
 800f41c:	bf08      	it	eq
 800f41e:	68ec      	ldreq	r4, [r5, #12]
 800f420:	e7cb      	b.n	800f3ba <__swbuf_r+0x1a>
 800f422:	4621      	mov	r1, r4
 800f424:	4628      	mov	r0, r5
 800f426:	f000 f81f 	bl	800f468 <__swsetup_r>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d0cc      	beq.n	800f3c8 <__swbuf_r+0x28>
 800f42e:	f04f 37ff 	mov.w	r7, #4294967295
 800f432:	4638      	mov	r0, r7
 800f434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f436:	bf00      	nop
 800f438:	0801534c 	.word	0x0801534c
 800f43c:	0801536c 	.word	0x0801536c
 800f440:	0801532c 	.word	0x0801532c

0800f444 <_write_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4c07      	ldr	r4, [pc, #28]	; (800f464 <_write_r+0x20>)
 800f448:	4605      	mov	r5, r0
 800f44a:	4608      	mov	r0, r1
 800f44c:	4611      	mov	r1, r2
 800f44e:	2200      	movs	r2, #0
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	f7f1 ffbe 	bl	80013d4 <_write>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_write_r+0x1e>
 800f45c:	6823      	ldr	r3, [r4, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_write_r+0x1e>
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	2000300c 	.word	0x2000300c

0800f468 <__swsetup_r>:
 800f468:	4b32      	ldr	r3, [pc, #200]	; (800f534 <__swsetup_r+0xcc>)
 800f46a:	b570      	push	{r4, r5, r6, lr}
 800f46c:	681d      	ldr	r5, [r3, #0]
 800f46e:	4606      	mov	r6, r0
 800f470:	460c      	mov	r4, r1
 800f472:	b125      	cbz	r5, 800f47e <__swsetup_r+0x16>
 800f474:	69ab      	ldr	r3, [r5, #24]
 800f476:	b913      	cbnz	r3, 800f47e <__swsetup_r+0x16>
 800f478:	4628      	mov	r0, r5
 800f47a:	f000 f965 	bl	800f748 <__sinit>
 800f47e:	4b2e      	ldr	r3, [pc, #184]	; (800f538 <__swsetup_r+0xd0>)
 800f480:	429c      	cmp	r4, r3
 800f482:	d10f      	bne.n	800f4a4 <__swsetup_r+0x3c>
 800f484:	686c      	ldr	r4, [r5, #4]
 800f486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	0715      	lsls	r5, r2, #28
 800f48e:	d42c      	bmi.n	800f4ea <__swsetup_r+0x82>
 800f490:	06d0      	lsls	r0, r2, #27
 800f492:	d411      	bmi.n	800f4b8 <__swsetup_r+0x50>
 800f494:	2209      	movs	r2, #9
 800f496:	6032      	str	r2, [r6, #0]
 800f498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f49c:	81a3      	strh	r3, [r4, #12]
 800f49e:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a2:	bd70      	pop	{r4, r5, r6, pc}
 800f4a4:	4b25      	ldr	r3, [pc, #148]	; (800f53c <__swsetup_r+0xd4>)
 800f4a6:	429c      	cmp	r4, r3
 800f4a8:	d101      	bne.n	800f4ae <__swsetup_r+0x46>
 800f4aa:	68ac      	ldr	r4, [r5, #8]
 800f4ac:	e7eb      	b.n	800f486 <__swsetup_r+0x1e>
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <__swsetup_r+0xd8>)
 800f4b0:	429c      	cmp	r4, r3
 800f4b2:	bf08      	it	eq
 800f4b4:	68ec      	ldreq	r4, [r5, #12]
 800f4b6:	e7e6      	b.n	800f486 <__swsetup_r+0x1e>
 800f4b8:	0751      	lsls	r1, r2, #29
 800f4ba:	d512      	bpl.n	800f4e2 <__swsetup_r+0x7a>
 800f4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4be:	b141      	cbz	r1, 800f4d2 <__swsetup_r+0x6a>
 800f4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4c4:	4299      	cmp	r1, r3
 800f4c6:	d002      	beq.n	800f4ce <__swsetup_r+0x66>
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f7ff fd03 	bl	800eed4 <_free_r>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	6363      	str	r3, [r4, #52]	; 0x34
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4d8:	81a3      	strh	r3, [r4, #12]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	6063      	str	r3, [r4, #4]
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	6023      	str	r3, [r4, #0]
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f043 0308 	orr.w	r3, r3, #8
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	b94b      	cbnz	r3, 800f502 <__swsetup_r+0x9a>
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4f8:	d003      	beq.n	800f502 <__swsetup_r+0x9a>
 800f4fa:	4621      	mov	r1, r4
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f000 f9e3 	bl	800f8c8 <__smakebuf_r>
 800f502:	89a2      	ldrh	r2, [r4, #12]
 800f504:	f012 0301 	ands.w	r3, r2, #1
 800f508:	d00c      	beq.n	800f524 <__swsetup_r+0xbc>
 800f50a:	2300      	movs	r3, #0
 800f50c:	60a3      	str	r3, [r4, #8]
 800f50e:	6963      	ldr	r3, [r4, #20]
 800f510:	425b      	negs	r3, r3
 800f512:	61a3      	str	r3, [r4, #24]
 800f514:	6923      	ldr	r3, [r4, #16]
 800f516:	b953      	cbnz	r3, 800f52e <__swsetup_r+0xc6>
 800f518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f51c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f520:	d1ba      	bne.n	800f498 <__swsetup_r+0x30>
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	0792      	lsls	r2, r2, #30
 800f526:	bf58      	it	pl
 800f528:	6963      	ldrpl	r3, [r4, #20]
 800f52a:	60a3      	str	r3, [r4, #8]
 800f52c:	e7f2      	b.n	800f514 <__swsetup_r+0xac>
 800f52e:	2000      	movs	r0, #0
 800f530:	e7f7      	b.n	800f522 <__swsetup_r+0xba>
 800f532:	bf00      	nop
 800f534:	2000008c 	.word	0x2000008c
 800f538:	0801534c 	.word	0x0801534c
 800f53c:	0801536c 	.word	0x0801536c
 800f540:	0801532c 	.word	0x0801532c

0800f544 <_close_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4c06      	ldr	r4, [pc, #24]	; (800f560 <_close_r+0x1c>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4605      	mov	r5, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	6023      	str	r3, [r4, #0]
 800f550:	f7f2 f942 	bl	80017d8 <_close>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	d102      	bne.n	800f55e <_close_r+0x1a>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	b103      	cbz	r3, 800f55e <_close_r+0x1a>
 800f55c:	602b      	str	r3, [r5, #0]
 800f55e:	bd38      	pop	{r3, r4, r5, pc}
 800f560:	2000300c 	.word	0x2000300c

0800f564 <__sflush_r>:
 800f564:	898a      	ldrh	r2, [r1, #12]
 800f566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f56a:	4605      	mov	r5, r0
 800f56c:	0710      	lsls	r0, r2, #28
 800f56e:	460c      	mov	r4, r1
 800f570:	d45a      	bmi.n	800f628 <__sflush_r+0xc4>
 800f572:	684b      	ldr	r3, [r1, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	dc05      	bgt.n	800f584 <__sflush_r+0x20>
 800f578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	dc02      	bgt.n	800f584 <__sflush_r+0x20>
 800f57e:	2000      	movs	r0, #0
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f586:	2e00      	cmp	r6, #0
 800f588:	d0f9      	beq.n	800f57e <__sflush_r+0x1a>
 800f58a:	2300      	movs	r3, #0
 800f58c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f590:	682f      	ldr	r7, [r5, #0]
 800f592:	602b      	str	r3, [r5, #0]
 800f594:	d033      	beq.n	800f5fe <__sflush_r+0x9a>
 800f596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	075a      	lsls	r2, r3, #29
 800f59c:	d505      	bpl.n	800f5aa <__sflush_r+0x46>
 800f59e:	6863      	ldr	r3, [r4, #4]
 800f5a0:	1ac0      	subs	r0, r0, r3
 800f5a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5a4:	b10b      	cbz	r3, 800f5aa <__sflush_r+0x46>
 800f5a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5a8:	1ac0      	subs	r0, r0, r3
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5b0:	6a21      	ldr	r1, [r4, #32]
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	47b0      	blx	r6
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	d106      	bne.n	800f5ca <__sflush_r+0x66>
 800f5bc:	6829      	ldr	r1, [r5, #0]
 800f5be:	291d      	cmp	r1, #29
 800f5c0:	d84b      	bhi.n	800f65a <__sflush_r+0xf6>
 800f5c2:	4a2b      	ldr	r2, [pc, #172]	; (800f670 <__sflush_r+0x10c>)
 800f5c4:	40ca      	lsrs	r2, r1
 800f5c6:	07d6      	lsls	r6, r2, #31
 800f5c8:	d547      	bpl.n	800f65a <__sflush_r+0xf6>
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	6062      	str	r2, [r4, #4]
 800f5ce:	04d9      	lsls	r1, r3, #19
 800f5d0:	6922      	ldr	r2, [r4, #16]
 800f5d2:	6022      	str	r2, [r4, #0]
 800f5d4:	d504      	bpl.n	800f5e0 <__sflush_r+0x7c>
 800f5d6:	1c42      	adds	r2, r0, #1
 800f5d8:	d101      	bne.n	800f5de <__sflush_r+0x7a>
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	b903      	cbnz	r3, 800f5e0 <__sflush_r+0x7c>
 800f5de:	6560      	str	r0, [r4, #84]	; 0x54
 800f5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5e2:	602f      	str	r7, [r5, #0]
 800f5e4:	2900      	cmp	r1, #0
 800f5e6:	d0ca      	beq.n	800f57e <__sflush_r+0x1a>
 800f5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ec:	4299      	cmp	r1, r3
 800f5ee:	d002      	beq.n	800f5f6 <__sflush_r+0x92>
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	f7ff fc6f 	bl	800eed4 <_free_r>
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	6360      	str	r0, [r4, #52]	; 0x34
 800f5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5fe:	6a21      	ldr	r1, [r4, #32]
 800f600:	2301      	movs	r3, #1
 800f602:	4628      	mov	r0, r5
 800f604:	47b0      	blx	r6
 800f606:	1c41      	adds	r1, r0, #1
 800f608:	d1c6      	bne.n	800f598 <__sflush_r+0x34>
 800f60a:	682b      	ldr	r3, [r5, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d0c3      	beq.n	800f598 <__sflush_r+0x34>
 800f610:	2b1d      	cmp	r3, #29
 800f612:	d001      	beq.n	800f618 <__sflush_r+0xb4>
 800f614:	2b16      	cmp	r3, #22
 800f616:	d101      	bne.n	800f61c <__sflush_r+0xb8>
 800f618:	602f      	str	r7, [r5, #0]
 800f61a:	e7b0      	b.n	800f57e <__sflush_r+0x1a>
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f622:	81a3      	strh	r3, [r4, #12]
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	690f      	ldr	r7, [r1, #16]
 800f62a:	2f00      	cmp	r7, #0
 800f62c:	d0a7      	beq.n	800f57e <__sflush_r+0x1a>
 800f62e:	0793      	lsls	r3, r2, #30
 800f630:	680e      	ldr	r6, [r1, #0]
 800f632:	bf08      	it	eq
 800f634:	694b      	ldreq	r3, [r1, #20]
 800f636:	600f      	str	r7, [r1, #0]
 800f638:	bf18      	it	ne
 800f63a:	2300      	movne	r3, #0
 800f63c:	eba6 0807 	sub.w	r8, r6, r7
 800f640:	608b      	str	r3, [r1, #8]
 800f642:	f1b8 0f00 	cmp.w	r8, #0
 800f646:	dd9a      	ble.n	800f57e <__sflush_r+0x1a>
 800f648:	4643      	mov	r3, r8
 800f64a:	463a      	mov	r2, r7
 800f64c:	6a21      	ldr	r1, [r4, #32]
 800f64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f650:	4628      	mov	r0, r5
 800f652:	47b0      	blx	r6
 800f654:	2800      	cmp	r0, #0
 800f656:	dc07      	bgt.n	800f668 <__sflush_r+0x104>
 800f658:	89a3      	ldrh	r3, [r4, #12]
 800f65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f65e:	81a3      	strh	r3, [r4, #12]
 800f660:	f04f 30ff 	mov.w	r0, #4294967295
 800f664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f668:	4407      	add	r7, r0
 800f66a:	eba8 0800 	sub.w	r8, r8, r0
 800f66e:	e7e8      	b.n	800f642 <__sflush_r+0xde>
 800f670:	20400001 	.word	0x20400001

0800f674 <_fflush_r>:
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	690b      	ldr	r3, [r1, #16]
 800f678:	4605      	mov	r5, r0
 800f67a:	460c      	mov	r4, r1
 800f67c:	b1db      	cbz	r3, 800f6b6 <_fflush_r+0x42>
 800f67e:	b118      	cbz	r0, 800f688 <_fflush_r+0x14>
 800f680:	6983      	ldr	r3, [r0, #24]
 800f682:	b90b      	cbnz	r3, 800f688 <_fflush_r+0x14>
 800f684:	f000 f860 	bl	800f748 <__sinit>
 800f688:	4b0c      	ldr	r3, [pc, #48]	; (800f6bc <_fflush_r+0x48>)
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d109      	bne.n	800f6a2 <_fflush_r+0x2e>
 800f68e:	686c      	ldr	r4, [r5, #4]
 800f690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f694:	b17b      	cbz	r3, 800f6b6 <_fflush_r+0x42>
 800f696:	4621      	mov	r1, r4
 800f698:	4628      	mov	r0, r5
 800f69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f69e:	f7ff bf61 	b.w	800f564 <__sflush_r>
 800f6a2:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <_fflush_r+0x4c>)
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	d101      	bne.n	800f6ac <_fflush_r+0x38>
 800f6a8:	68ac      	ldr	r4, [r5, #8]
 800f6aa:	e7f1      	b.n	800f690 <_fflush_r+0x1c>
 800f6ac:	4b05      	ldr	r3, [pc, #20]	; (800f6c4 <_fflush_r+0x50>)
 800f6ae:	429c      	cmp	r4, r3
 800f6b0:	bf08      	it	eq
 800f6b2:	68ec      	ldreq	r4, [r5, #12]
 800f6b4:	e7ec      	b.n	800f690 <_fflush_r+0x1c>
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ba:	bf00      	nop
 800f6bc:	0801534c 	.word	0x0801534c
 800f6c0:	0801536c 	.word	0x0801536c
 800f6c4:	0801532c 	.word	0x0801532c

0800f6c8 <_cleanup_r>:
 800f6c8:	4901      	ldr	r1, [pc, #4]	; (800f6d0 <_cleanup_r+0x8>)
 800f6ca:	f000 b8a9 	b.w	800f820 <_fwalk_reent>
 800f6ce:	bf00      	nop
 800f6d0:	0800f675 	.word	0x0800f675

0800f6d4 <std.isra.0>:
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	b510      	push	{r4, lr}
 800f6d8:	4604      	mov	r4, r0
 800f6da:	6003      	str	r3, [r0, #0]
 800f6dc:	6043      	str	r3, [r0, #4]
 800f6de:	6083      	str	r3, [r0, #8]
 800f6e0:	8181      	strh	r1, [r0, #12]
 800f6e2:	6643      	str	r3, [r0, #100]	; 0x64
 800f6e4:	81c2      	strh	r2, [r0, #14]
 800f6e6:	6103      	str	r3, [r0, #16]
 800f6e8:	6143      	str	r3, [r0, #20]
 800f6ea:	6183      	str	r3, [r0, #24]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	2208      	movs	r2, #8
 800f6f0:	305c      	adds	r0, #92	; 0x5c
 800f6f2:	f7ff fbd9 	bl	800eea8 <memset>
 800f6f6:	4b05      	ldr	r3, [pc, #20]	; (800f70c <std.isra.0+0x38>)
 800f6f8:	6263      	str	r3, [r4, #36]	; 0x24
 800f6fa:	4b05      	ldr	r3, [pc, #20]	; (800f710 <std.isra.0+0x3c>)
 800f6fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6fe:	4b05      	ldr	r3, [pc, #20]	; (800f714 <std.isra.0+0x40>)
 800f700:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f702:	4b05      	ldr	r3, [pc, #20]	; (800f718 <std.isra.0+0x44>)
 800f704:	6224      	str	r4, [r4, #32]
 800f706:	6323      	str	r3, [r4, #48]	; 0x30
 800f708:	bd10      	pop	{r4, pc}
 800f70a:	bf00      	nop
 800f70c:	0800f271 	.word	0x0800f271
 800f710:	0800f293 	.word	0x0800f293
 800f714:	0800f2cb 	.word	0x0800f2cb
 800f718:	0800f2ef 	.word	0x0800f2ef

0800f71c <__sfmoreglue>:
 800f71c:	b570      	push	{r4, r5, r6, lr}
 800f71e:	1e4a      	subs	r2, r1, #1
 800f720:	2568      	movs	r5, #104	; 0x68
 800f722:	4355      	muls	r5, r2
 800f724:	460e      	mov	r6, r1
 800f726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f72a:	f7ff fc21 	bl	800ef70 <_malloc_r>
 800f72e:	4604      	mov	r4, r0
 800f730:	b140      	cbz	r0, 800f744 <__sfmoreglue+0x28>
 800f732:	2100      	movs	r1, #0
 800f734:	e880 0042 	stmia.w	r0, {r1, r6}
 800f738:	300c      	adds	r0, #12
 800f73a:	60a0      	str	r0, [r4, #8]
 800f73c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f740:	f7ff fbb2 	bl	800eea8 <memset>
 800f744:	4620      	mov	r0, r4
 800f746:	bd70      	pop	{r4, r5, r6, pc}

0800f748 <__sinit>:
 800f748:	6983      	ldr	r3, [r0, #24]
 800f74a:	b510      	push	{r4, lr}
 800f74c:	4604      	mov	r4, r0
 800f74e:	bb33      	cbnz	r3, 800f79e <__sinit+0x56>
 800f750:	6483      	str	r3, [r0, #72]	; 0x48
 800f752:	64c3      	str	r3, [r0, #76]	; 0x4c
 800f754:	6503      	str	r3, [r0, #80]	; 0x50
 800f756:	4b12      	ldr	r3, [pc, #72]	; (800f7a0 <__sinit+0x58>)
 800f758:	4a12      	ldr	r2, [pc, #72]	; (800f7a4 <__sinit+0x5c>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6282      	str	r2, [r0, #40]	; 0x28
 800f75e:	4298      	cmp	r0, r3
 800f760:	bf04      	itt	eq
 800f762:	2301      	moveq	r3, #1
 800f764:	6183      	streq	r3, [r0, #24]
 800f766:	f000 f81f 	bl	800f7a8 <__sfp>
 800f76a:	6060      	str	r0, [r4, #4]
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 f81b 	bl	800f7a8 <__sfp>
 800f772:	60a0      	str	r0, [r4, #8]
 800f774:	4620      	mov	r0, r4
 800f776:	f000 f817 	bl	800f7a8 <__sfp>
 800f77a:	2200      	movs	r2, #0
 800f77c:	60e0      	str	r0, [r4, #12]
 800f77e:	2104      	movs	r1, #4
 800f780:	6860      	ldr	r0, [r4, #4]
 800f782:	f7ff ffa7 	bl	800f6d4 <std.isra.0>
 800f786:	2201      	movs	r2, #1
 800f788:	2109      	movs	r1, #9
 800f78a:	68a0      	ldr	r0, [r4, #8]
 800f78c:	f7ff ffa2 	bl	800f6d4 <std.isra.0>
 800f790:	2202      	movs	r2, #2
 800f792:	2112      	movs	r1, #18
 800f794:	68e0      	ldr	r0, [r4, #12]
 800f796:	f7ff ff9d 	bl	800f6d4 <std.isra.0>
 800f79a:	2301      	movs	r3, #1
 800f79c:	61a3      	str	r3, [r4, #24]
 800f79e:	bd10      	pop	{r4, pc}
 800f7a0:	08015328 	.word	0x08015328
 800f7a4:	0800f6c9 	.word	0x0800f6c9

0800f7a8 <__sfp>:
 800f7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7aa:	4b1c      	ldr	r3, [pc, #112]	; (800f81c <__sfp+0x74>)
 800f7ac:	681e      	ldr	r6, [r3, #0]
 800f7ae:	69b3      	ldr	r3, [r6, #24]
 800f7b0:	4607      	mov	r7, r0
 800f7b2:	b913      	cbnz	r3, 800f7ba <__sfp+0x12>
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f7ff ffc7 	bl	800f748 <__sinit>
 800f7ba:	3648      	adds	r6, #72	; 0x48
 800f7bc:	68b4      	ldr	r4, [r6, #8]
 800f7be:	6873      	ldr	r3, [r6, #4]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	d503      	bpl.n	800f7cc <__sfp+0x24>
 800f7c4:	6833      	ldr	r3, [r6, #0]
 800f7c6:	b133      	cbz	r3, 800f7d6 <__sfp+0x2e>
 800f7c8:	6836      	ldr	r6, [r6, #0]
 800f7ca:	e7f7      	b.n	800f7bc <__sfp+0x14>
 800f7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f7d0:	b16d      	cbz	r5, 800f7ee <__sfp+0x46>
 800f7d2:	3468      	adds	r4, #104	; 0x68
 800f7d4:	e7f4      	b.n	800f7c0 <__sfp+0x18>
 800f7d6:	2104      	movs	r1, #4
 800f7d8:	4638      	mov	r0, r7
 800f7da:	f7ff ff9f 	bl	800f71c <__sfmoreglue>
 800f7de:	6030      	str	r0, [r6, #0]
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d1f1      	bne.n	800f7c8 <__sfp+0x20>
 800f7e4:	230c      	movs	r3, #12
 800f7e6:	603b      	str	r3, [r7, #0]
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7f2:	81e3      	strh	r3, [r4, #14]
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	81a3      	strh	r3, [r4, #12]
 800f7f8:	6665      	str	r5, [r4, #100]	; 0x64
 800f7fa:	6025      	str	r5, [r4, #0]
 800f7fc:	60a5      	str	r5, [r4, #8]
 800f7fe:	6065      	str	r5, [r4, #4]
 800f800:	6125      	str	r5, [r4, #16]
 800f802:	6165      	str	r5, [r4, #20]
 800f804:	61a5      	str	r5, [r4, #24]
 800f806:	2208      	movs	r2, #8
 800f808:	4629      	mov	r1, r5
 800f80a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f80e:	f7ff fb4b 	bl	800eea8 <memset>
 800f812:	6365      	str	r5, [r4, #52]	; 0x34
 800f814:	63a5      	str	r5, [r4, #56]	; 0x38
 800f816:	64a5      	str	r5, [r4, #72]	; 0x48
 800f818:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f81a:	e7e6      	b.n	800f7ea <__sfp+0x42>
 800f81c:	08015328 	.word	0x08015328

0800f820 <_fwalk_reent>:
 800f820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f824:	4680      	mov	r8, r0
 800f826:	4689      	mov	r9, r1
 800f828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f82c:	2600      	movs	r6, #0
 800f82e:	b914      	cbnz	r4, 800f836 <_fwalk_reent+0x16>
 800f830:	4630      	mov	r0, r6
 800f832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f836:	68a5      	ldr	r5, [r4, #8]
 800f838:	6867      	ldr	r7, [r4, #4]
 800f83a:	3f01      	subs	r7, #1
 800f83c:	d501      	bpl.n	800f842 <_fwalk_reent+0x22>
 800f83e:	6824      	ldr	r4, [r4, #0]
 800f840:	e7f5      	b.n	800f82e <_fwalk_reent+0xe>
 800f842:	89ab      	ldrh	r3, [r5, #12]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d907      	bls.n	800f858 <_fwalk_reent+0x38>
 800f848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f84c:	3301      	adds	r3, #1
 800f84e:	d003      	beq.n	800f858 <_fwalk_reent+0x38>
 800f850:	4629      	mov	r1, r5
 800f852:	4640      	mov	r0, r8
 800f854:	47c8      	blx	r9
 800f856:	4306      	orrs	r6, r0
 800f858:	3568      	adds	r5, #104	; 0x68
 800f85a:	e7ee      	b.n	800f83a <_fwalk_reent+0x1a>

0800f85c <_lseek_r>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	4c07      	ldr	r4, [pc, #28]	; (800f87c <_lseek_r+0x20>)
 800f860:	4605      	mov	r5, r0
 800f862:	4608      	mov	r0, r1
 800f864:	4611      	mov	r1, r2
 800f866:	2200      	movs	r2, #0
 800f868:	6022      	str	r2, [r4, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	f7f1 ffbe 	bl	80017ec <_lseek>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d102      	bne.n	800f87a <_lseek_r+0x1e>
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	b103      	cbz	r3, 800f87a <_lseek_r+0x1e>
 800f878:	602b      	str	r3, [r5, #0]
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	2000300c 	.word	0x2000300c

0800f880 <__swhatbuf_r>:
 800f880:	b570      	push	{r4, r5, r6, lr}
 800f882:	460e      	mov	r6, r1
 800f884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f888:	2900      	cmp	r1, #0
 800f88a:	b090      	sub	sp, #64	; 0x40
 800f88c:	4614      	mov	r4, r2
 800f88e:	461d      	mov	r5, r3
 800f890:	da07      	bge.n	800f8a2 <__swhatbuf_r+0x22>
 800f892:	2300      	movs	r3, #0
 800f894:	602b      	str	r3, [r5, #0]
 800f896:	89b3      	ldrh	r3, [r6, #12]
 800f898:	061a      	lsls	r2, r3, #24
 800f89a:	d410      	bmi.n	800f8be <__swhatbuf_r+0x3e>
 800f89c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8a0:	e00e      	b.n	800f8c0 <__swhatbuf_r+0x40>
 800f8a2:	aa01      	add	r2, sp, #4
 800f8a4:	f000 fc8a 	bl	80101bc <_fstat_r>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	dbf2      	blt.n	800f892 <__swhatbuf_r+0x12>
 800f8ac:	9a02      	ldr	r2, [sp, #8]
 800f8ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f8b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f8b6:	425a      	negs	r2, r3
 800f8b8:	415a      	adcs	r2, r3
 800f8ba:	602a      	str	r2, [r5, #0]
 800f8bc:	e7ee      	b.n	800f89c <__swhatbuf_r+0x1c>
 800f8be:	2340      	movs	r3, #64	; 0x40
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	6023      	str	r3, [r4, #0]
 800f8c4:	b010      	add	sp, #64	; 0x40
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}

0800f8c8 <__smakebuf_r>:
 800f8c8:	898b      	ldrh	r3, [r1, #12]
 800f8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f8cc:	079d      	lsls	r5, r3, #30
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460c      	mov	r4, r1
 800f8d2:	d507      	bpl.n	800f8e4 <__smakebuf_r+0x1c>
 800f8d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	6123      	str	r3, [r4, #16]
 800f8dc:	2301      	movs	r3, #1
 800f8de:	6163      	str	r3, [r4, #20]
 800f8e0:	b002      	add	sp, #8
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}
 800f8e4:	ab01      	add	r3, sp, #4
 800f8e6:	466a      	mov	r2, sp
 800f8e8:	f7ff ffca 	bl	800f880 <__swhatbuf_r>
 800f8ec:	9900      	ldr	r1, [sp, #0]
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f7ff fb3d 	bl	800ef70 <_malloc_r>
 800f8f6:	b948      	cbnz	r0, 800f90c <__smakebuf_r+0x44>
 800f8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8fc:	059a      	lsls	r2, r3, #22
 800f8fe:	d4ef      	bmi.n	800f8e0 <__smakebuf_r+0x18>
 800f900:	f023 0303 	bic.w	r3, r3, #3
 800f904:	f043 0302 	orr.w	r3, r3, #2
 800f908:	81a3      	strh	r3, [r4, #12]
 800f90a:	e7e3      	b.n	800f8d4 <__smakebuf_r+0xc>
 800f90c:	4b0d      	ldr	r3, [pc, #52]	; (800f944 <__smakebuf_r+0x7c>)
 800f90e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f910:	89a3      	ldrh	r3, [r4, #12]
 800f912:	6020      	str	r0, [r4, #0]
 800f914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f918:	81a3      	strh	r3, [r4, #12]
 800f91a:	9b00      	ldr	r3, [sp, #0]
 800f91c:	6163      	str	r3, [r4, #20]
 800f91e:	9b01      	ldr	r3, [sp, #4]
 800f920:	6120      	str	r0, [r4, #16]
 800f922:	b15b      	cbz	r3, 800f93c <__smakebuf_r+0x74>
 800f924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f928:	4630      	mov	r0, r6
 800f92a:	f000 fc59 	bl	80101e0 <_isatty_r>
 800f92e:	b128      	cbz	r0, 800f93c <__smakebuf_r+0x74>
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	f023 0303 	bic.w	r3, r3, #3
 800f936:	f043 0301 	orr.w	r3, r3, #1
 800f93a:	81a3      	strh	r3, [r4, #12]
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	431d      	orrs	r5, r3
 800f940:	81a5      	strh	r5, [r4, #12]
 800f942:	e7cd      	b.n	800f8e0 <__smakebuf_r+0x18>
 800f944:	0800f6c9 	.word	0x0800f6c9

0800f948 <__malloc_lock>:
 800f948:	4770      	bx	lr

0800f94a <__malloc_unlock>:
 800f94a:	4770      	bx	lr

0800f94c <__ssputs_r>:
 800f94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f950:	688e      	ldr	r6, [r1, #8]
 800f952:	429e      	cmp	r6, r3
 800f954:	4682      	mov	sl, r0
 800f956:	460c      	mov	r4, r1
 800f958:	4691      	mov	r9, r2
 800f95a:	4698      	mov	r8, r3
 800f95c:	d835      	bhi.n	800f9ca <__ssputs_r+0x7e>
 800f95e:	898a      	ldrh	r2, [r1, #12]
 800f960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f964:	d031      	beq.n	800f9ca <__ssputs_r+0x7e>
 800f966:	6825      	ldr	r5, [r4, #0]
 800f968:	6909      	ldr	r1, [r1, #16]
 800f96a:	1a6f      	subs	r7, r5, r1
 800f96c:	6965      	ldr	r5, [r4, #20]
 800f96e:	2302      	movs	r3, #2
 800f970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f974:	fb95 f5f3 	sdiv	r5, r5, r3
 800f978:	f108 0301 	add.w	r3, r8, #1
 800f97c:	443b      	add	r3, r7
 800f97e:	429d      	cmp	r5, r3
 800f980:	bf38      	it	cc
 800f982:	461d      	movcc	r5, r3
 800f984:	0553      	lsls	r3, r2, #21
 800f986:	d531      	bpl.n	800f9ec <__ssputs_r+0xa0>
 800f988:	4629      	mov	r1, r5
 800f98a:	f7ff faf1 	bl	800ef70 <_malloc_r>
 800f98e:	4606      	mov	r6, r0
 800f990:	b950      	cbnz	r0, 800f9a8 <__ssputs_r+0x5c>
 800f992:	230c      	movs	r3, #12
 800f994:	f8ca 3000 	str.w	r3, [sl]
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9a8:	463a      	mov	r2, r7
 800f9aa:	6921      	ldr	r1, [r4, #16]
 800f9ac:	f7ff fa57 	bl	800ee5e <memcpy>
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9ba:	81a3      	strh	r3, [r4, #12]
 800f9bc:	6126      	str	r6, [r4, #16]
 800f9be:	6165      	str	r5, [r4, #20]
 800f9c0:	443e      	add	r6, r7
 800f9c2:	1bed      	subs	r5, r5, r7
 800f9c4:	6026      	str	r6, [r4, #0]
 800f9c6:	60a5      	str	r5, [r4, #8]
 800f9c8:	4646      	mov	r6, r8
 800f9ca:	4546      	cmp	r6, r8
 800f9cc:	bf28      	it	cs
 800f9ce:	4646      	movcs	r6, r8
 800f9d0:	4632      	mov	r2, r6
 800f9d2:	4649      	mov	r1, r9
 800f9d4:	6820      	ldr	r0, [r4, #0]
 800f9d6:	f7ff fa4d 	bl	800ee74 <memmove>
 800f9da:	68a3      	ldr	r3, [r4, #8]
 800f9dc:	1b9b      	subs	r3, r3, r6
 800f9de:	60a3      	str	r3, [r4, #8]
 800f9e0:	6823      	ldr	r3, [r4, #0]
 800f9e2:	441e      	add	r6, r3
 800f9e4:	6026      	str	r6, [r4, #0]
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ec:	462a      	mov	r2, r5
 800f9ee:	f000 fc07 	bl	8010200 <_realloc_r>
 800f9f2:	4606      	mov	r6, r0
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d1e1      	bne.n	800f9bc <__ssputs_r+0x70>
 800f9f8:	6921      	ldr	r1, [r4, #16]
 800f9fa:	4650      	mov	r0, sl
 800f9fc:	f7ff fa6a 	bl	800eed4 <_free_r>
 800fa00:	e7c7      	b.n	800f992 <__ssputs_r+0x46>
	...

0800fa04 <_svfiprintf_r>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	b09d      	sub	sp, #116	; 0x74
 800fa0a:	4680      	mov	r8, r0
 800fa0c:	9303      	str	r3, [sp, #12]
 800fa0e:	898b      	ldrh	r3, [r1, #12]
 800fa10:	061c      	lsls	r4, r3, #24
 800fa12:	460d      	mov	r5, r1
 800fa14:	4616      	mov	r6, r2
 800fa16:	d50f      	bpl.n	800fa38 <_svfiprintf_r+0x34>
 800fa18:	690b      	ldr	r3, [r1, #16]
 800fa1a:	b96b      	cbnz	r3, 800fa38 <_svfiprintf_r+0x34>
 800fa1c:	2140      	movs	r1, #64	; 0x40
 800fa1e:	f7ff faa7 	bl	800ef70 <_malloc_r>
 800fa22:	6028      	str	r0, [r5, #0]
 800fa24:	6128      	str	r0, [r5, #16]
 800fa26:	b928      	cbnz	r0, 800fa34 <_svfiprintf_r+0x30>
 800fa28:	230c      	movs	r3, #12
 800fa2a:	f8c8 3000 	str.w	r3, [r8]
 800fa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa32:	e0c5      	b.n	800fbc0 <_svfiprintf_r+0x1bc>
 800fa34:	2340      	movs	r3, #64	; 0x40
 800fa36:	616b      	str	r3, [r5, #20]
 800fa38:	2300      	movs	r3, #0
 800fa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa3c:	2320      	movs	r3, #32
 800fa3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa42:	2330      	movs	r3, #48	; 0x30
 800fa44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa48:	f04f 0b01 	mov.w	fp, #1
 800fa4c:	4637      	mov	r7, r6
 800fa4e:	463c      	mov	r4, r7
 800fa50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d13c      	bne.n	800fad2 <_svfiprintf_r+0xce>
 800fa58:	ebb7 0a06 	subs.w	sl, r7, r6
 800fa5c:	d00b      	beq.n	800fa76 <_svfiprintf_r+0x72>
 800fa5e:	4653      	mov	r3, sl
 800fa60:	4632      	mov	r2, r6
 800fa62:	4629      	mov	r1, r5
 800fa64:	4640      	mov	r0, r8
 800fa66:	f7ff ff71 	bl	800f94c <__ssputs_r>
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	f000 80a3 	beq.w	800fbb6 <_svfiprintf_r+0x1b2>
 800fa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa72:	4453      	add	r3, sl
 800fa74:	9309      	str	r3, [sp, #36]	; 0x24
 800fa76:	783b      	ldrb	r3, [r7, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f000 809c 	beq.w	800fbb6 <_svfiprintf_r+0x1b2>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f04f 32ff 	mov.w	r2, #4294967295
 800fa84:	9304      	str	r3, [sp, #16]
 800fa86:	9307      	str	r3, [sp, #28]
 800fa88:	9205      	str	r2, [sp, #20]
 800fa8a:	9306      	str	r3, [sp, #24]
 800fa8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa90:	931a      	str	r3, [sp, #104]	; 0x68
 800fa92:	2205      	movs	r2, #5
 800fa94:	7821      	ldrb	r1, [r4, #0]
 800fa96:	4850      	ldr	r0, [pc, #320]	; (800fbd8 <_svfiprintf_r+0x1d4>)
 800fa98:	f7f0 fbaa 	bl	80001f0 <memchr>
 800fa9c:	1c67      	adds	r7, r4, #1
 800fa9e:	9b04      	ldr	r3, [sp, #16]
 800faa0:	b9d8      	cbnz	r0, 800fada <_svfiprintf_r+0xd6>
 800faa2:	06d9      	lsls	r1, r3, #27
 800faa4:	bf44      	itt	mi
 800faa6:	2220      	movmi	r2, #32
 800faa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800faac:	071a      	lsls	r2, r3, #28
 800faae:	bf44      	itt	mi
 800fab0:	222b      	movmi	r2, #43	; 0x2b
 800fab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fab6:	7822      	ldrb	r2, [r4, #0]
 800fab8:	2a2a      	cmp	r2, #42	; 0x2a
 800faba:	d016      	beq.n	800faea <_svfiprintf_r+0xe6>
 800fabc:	9a07      	ldr	r2, [sp, #28]
 800fabe:	2100      	movs	r1, #0
 800fac0:	200a      	movs	r0, #10
 800fac2:	4627      	mov	r7, r4
 800fac4:	3401      	adds	r4, #1
 800fac6:	783b      	ldrb	r3, [r7, #0]
 800fac8:	3b30      	subs	r3, #48	; 0x30
 800faca:	2b09      	cmp	r3, #9
 800facc:	d951      	bls.n	800fb72 <_svfiprintf_r+0x16e>
 800face:	b1c9      	cbz	r1, 800fb04 <_svfiprintf_r+0x100>
 800fad0:	e011      	b.n	800faf6 <_svfiprintf_r+0xf2>
 800fad2:	2b25      	cmp	r3, #37	; 0x25
 800fad4:	d0c0      	beq.n	800fa58 <_svfiprintf_r+0x54>
 800fad6:	4627      	mov	r7, r4
 800fad8:	e7b9      	b.n	800fa4e <_svfiprintf_r+0x4a>
 800fada:	4a3f      	ldr	r2, [pc, #252]	; (800fbd8 <_svfiprintf_r+0x1d4>)
 800fadc:	1a80      	subs	r0, r0, r2
 800fade:	fa0b f000 	lsl.w	r0, fp, r0
 800fae2:	4318      	orrs	r0, r3
 800fae4:	9004      	str	r0, [sp, #16]
 800fae6:	463c      	mov	r4, r7
 800fae8:	e7d3      	b.n	800fa92 <_svfiprintf_r+0x8e>
 800faea:	9a03      	ldr	r2, [sp, #12]
 800faec:	1d11      	adds	r1, r2, #4
 800faee:	6812      	ldr	r2, [r2, #0]
 800faf0:	9103      	str	r1, [sp, #12]
 800faf2:	2a00      	cmp	r2, #0
 800faf4:	db01      	blt.n	800fafa <_svfiprintf_r+0xf6>
 800faf6:	9207      	str	r2, [sp, #28]
 800faf8:	e004      	b.n	800fb04 <_svfiprintf_r+0x100>
 800fafa:	4252      	negs	r2, r2
 800fafc:	f043 0302 	orr.w	r3, r3, #2
 800fb00:	9207      	str	r2, [sp, #28]
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	783b      	ldrb	r3, [r7, #0]
 800fb06:	2b2e      	cmp	r3, #46	; 0x2e
 800fb08:	d10e      	bne.n	800fb28 <_svfiprintf_r+0x124>
 800fb0a:	787b      	ldrb	r3, [r7, #1]
 800fb0c:	2b2a      	cmp	r3, #42	; 0x2a
 800fb0e:	f107 0101 	add.w	r1, r7, #1
 800fb12:	d132      	bne.n	800fb7a <_svfiprintf_r+0x176>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	1d1a      	adds	r2, r3, #4
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	9203      	str	r2, [sp, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bfb8      	it	lt
 800fb20:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb24:	3702      	adds	r7, #2
 800fb26:	9305      	str	r3, [sp, #20]
 800fb28:	4c2c      	ldr	r4, [pc, #176]	; (800fbdc <_svfiprintf_r+0x1d8>)
 800fb2a:	7839      	ldrb	r1, [r7, #0]
 800fb2c:	2203      	movs	r2, #3
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f7f0 fb5e 	bl	80001f0 <memchr>
 800fb34:	b138      	cbz	r0, 800fb46 <_svfiprintf_r+0x142>
 800fb36:	2340      	movs	r3, #64	; 0x40
 800fb38:	1b00      	subs	r0, r0, r4
 800fb3a:	fa03 f000 	lsl.w	r0, r3, r0
 800fb3e:	9b04      	ldr	r3, [sp, #16]
 800fb40:	4303      	orrs	r3, r0
 800fb42:	9304      	str	r3, [sp, #16]
 800fb44:	3701      	adds	r7, #1
 800fb46:	7839      	ldrb	r1, [r7, #0]
 800fb48:	4825      	ldr	r0, [pc, #148]	; (800fbe0 <_svfiprintf_r+0x1dc>)
 800fb4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb4e:	2206      	movs	r2, #6
 800fb50:	1c7e      	adds	r6, r7, #1
 800fb52:	f7f0 fb4d 	bl	80001f0 <memchr>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d035      	beq.n	800fbc6 <_svfiprintf_r+0x1c2>
 800fb5a:	4b22      	ldr	r3, [pc, #136]	; (800fbe4 <_svfiprintf_r+0x1e0>)
 800fb5c:	b9fb      	cbnz	r3, 800fb9e <_svfiprintf_r+0x19a>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	3307      	adds	r3, #7
 800fb62:	f023 0307 	bic.w	r3, r3, #7
 800fb66:	3308      	adds	r3, #8
 800fb68:	9303      	str	r3, [sp, #12]
 800fb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb6c:	444b      	add	r3, r9
 800fb6e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb70:	e76c      	b.n	800fa4c <_svfiprintf_r+0x48>
 800fb72:	fb00 3202 	mla	r2, r0, r2, r3
 800fb76:	2101      	movs	r1, #1
 800fb78:	e7a3      	b.n	800fac2 <_svfiprintf_r+0xbe>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	9305      	str	r3, [sp, #20]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	240a      	movs	r4, #10
 800fb82:	460f      	mov	r7, r1
 800fb84:	3101      	adds	r1, #1
 800fb86:	783a      	ldrb	r2, [r7, #0]
 800fb88:	3a30      	subs	r2, #48	; 0x30
 800fb8a:	2a09      	cmp	r2, #9
 800fb8c:	d903      	bls.n	800fb96 <_svfiprintf_r+0x192>
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0ca      	beq.n	800fb28 <_svfiprintf_r+0x124>
 800fb92:	9005      	str	r0, [sp, #20]
 800fb94:	e7c8      	b.n	800fb28 <_svfiprintf_r+0x124>
 800fb96:	fb04 2000 	mla	r0, r4, r0, r2
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e7f1      	b.n	800fb82 <_svfiprintf_r+0x17e>
 800fb9e:	ab03      	add	r3, sp, #12
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	462a      	mov	r2, r5
 800fba4:	4b10      	ldr	r3, [pc, #64]	; (800fbe8 <_svfiprintf_r+0x1e4>)
 800fba6:	a904      	add	r1, sp, #16
 800fba8:	4640      	mov	r0, r8
 800fbaa:	f3af 8000 	nop.w
 800fbae:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fbb2:	4681      	mov	r9, r0
 800fbb4:	d1d9      	bne.n	800fb6a <_svfiprintf_r+0x166>
 800fbb6:	89ab      	ldrh	r3, [r5, #12]
 800fbb8:	065b      	lsls	r3, r3, #25
 800fbba:	f53f af38 	bmi.w	800fa2e <_svfiprintf_r+0x2a>
 800fbbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbc0:	b01d      	add	sp, #116	; 0x74
 800fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc6:	ab03      	add	r3, sp, #12
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	462a      	mov	r2, r5
 800fbcc:	4b06      	ldr	r3, [pc, #24]	; (800fbe8 <_svfiprintf_r+0x1e4>)
 800fbce:	a904      	add	r1, sp, #16
 800fbd0:	4640      	mov	r0, r8
 800fbd2:	f000 f9c1 	bl	800ff58 <_printf_i>
 800fbd6:	e7ea      	b.n	800fbae <_svfiprintf_r+0x1aa>
 800fbd8:	0801538c 	.word	0x0801538c
 800fbdc:	08015392 	.word	0x08015392
 800fbe0:	08015396 	.word	0x08015396
 800fbe4:	00000000 	.word	0x00000000
 800fbe8:	0800f94d 	.word	0x0800f94d

0800fbec <__sfputc_r>:
 800fbec:	6893      	ldr	r3, [r2, #8]
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	b410      	push	{r4}
 800fbf4:	6093      	str	r3, [r2, #8]
 800fbf6:	da09      	bge.n	800fc0c <__sfputc_r+0x20>
 800fbf8:	6994      	ldr	r4, [r2, #24]
 800fbfa:	42a3      	cmp	r3, r4
 800fbfc:	db02      	blt.n	800fc04 <__sfputc_r+0x18>
 800fbfe:	b2cb      	uxtb	r3, r1
 800fc00:	2b0a      	cmp	r3, #10
 800fc02:	d103      	bne.n	800fc0c <__sfputc_r+0x20>
 800fc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc08:	f7ff bbca 	b.w	800f3a0 <__swbuf_r>
 800fc0c:	6813      	ldr	r3, [r2, #0]
 800fc0e:	1c58      	adds	r0, r3, #1
 800fc10:	6010      	str	r0, [r2, #0]
 800fc12:	7019      	strb	r1, [r3, #0]
 800fc14:	b2c8      	uxtb	r0, r1
 800fc16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <__sfputs_r>:
 800fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1e:	4606      	mov	r6, r0
 800fc20:	460f      	mov	r7, r1
 800fc22:	4614      	mov	r4, r2
 800fc24:	18d5      	adds	r5, r2, r3
 800fc26:	42ac      	cmp	r4, r5
 800fc28:	d101      	bne.n	800fc2e <__sfputs_r+0x12>
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	e007      	b.n	800fc3e <__sfputs_r+0x22>
 800fc2e:	463a      	mov	r2, r7
 800fc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc34:	4630      	mov	r0, r6
 800fc36:	f7ff ffd9 	bl	800fbec <__sfputc_r>
 800fc3a:	1c43      	adds	r3, r0, #1
 800fc3c:	d1f3      	bne.n	800fc26 <__sfputs_r+0xa>
 800fc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc40 <_vfiprintf_r>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	b09d      	sub	sp, #116	; 0x74
 800fc46:	460c      	mov	r4, r1
 800fc48:	4617      	mov	r7, r2
 800fc4a:	9303      	str	r3, [sp, #12]
 800fc4c:	4606      	mov	r6, r0
 800fc4e:	b118      	cbz	r0, 800fc58 <_vfiprintf_r+0x18>
 800fc50:	6983      	ldr	r3, [r0, #24]
 800fc52:	b90b      	cbnz	r3, 800fc58 <_vfiprintf_r+0x18>
 800fc54:	f7ff fd78 	bl	800f748 <__sinit>
 800fc58:	4b7c      	ldr	r3, [pc, #496]	; (800fe4c <_vfiprintf_r+0x20c>)
 800fc5a:	429c      	cmp	r4, r3
 800fc5c:	d157      	bne.n	800fd0e <_vfiprintf_r+0xce>
 800fc5e:	6874      	ldr	r4, [r6, #4]
 800fc60:	89a3      	ldrh	r3, [r4, #12]
 800fc62:	0718      	lsls	r0, r3, #28
 800fc64:	d55d      	bpl.n	800fd22 <_vfiprintf_r+0xe2>
 800fc66:	6923      	ldr	r3, [r4, #16]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d05a      	beq.n	800fd22 <_vfiprintf_r+0xe2>
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc70:	2320      	movs	r3, #32
 800fc72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc76:	2330      	movs	r3, #48	; 0x30
 800fc78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc7c:	f04f 0b01 	mov.w	fp, #1
 800fc80:	46b8      	mov	r8, r7
 800fc82:	4645      	mov	r5, r8
 800fc84:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d155      	bne.n	800fd38 <_vfiprintf_r+0xf8>
 800fc8c:	ebb8 0a07 	subs.w	sl, r8, r7
 800fc90:	d00b      	beq.n	800fcaa <_vfiprintf_r+0x6a>
 800fc92:	4653      	mov	r3, sl
 800fc94:	463a      	mov	r2, r7
 800fc96:	4621      	mov	r1, r4
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f7ff ffbf 	bl	800fc1c <__sfputs_r>
 800fc9e:	3001      	adds	r0, #1
 800fca0:	f000 80c4 	beq.w	800fe2c <_vfiprintf_r+0x1ec>
 800fca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fca6:	4453      	add	r3, sl
 800fca8:	9309      	str	r3, [sp, #36]	; 0x24
 800fcaa:	f898 3000 	ldrb.w	r3, [r8]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f000 80bc 	beq.w	800fe2c <_vfiprintf_r+0x1ec>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcba:	9304      	str	r3, [sp, #16]
 800fcbc:	9307      	str	r3, [sp, #28]
 800fcbe:	9205      	str	r2, [sp, #20]
 800fcc0:	9306      	str	r3, [sp, #24]
 800fcc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcc6:	931a      	str	r3, [sp, #104]	; 0x68
 800fcc8:	2205      	movs	r2, #5
 800fcca:	7829      	ldrb	r1, [r5, #0]
 800fccc:	4860      	ldr	r0, [pc, #384]	; (800fe50 <_vfiprintf_r+0x210>)
 800fcce:	f7f0 fa8f 	bl	80001f0 <memchr>
 800fcd2:	f105 0801 	add.w	r8, r5, #1
 800fcd6:	9b04      	ldr	r3, [sp, #16]
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d131      	bne.n	800fd40 <_vfiprintf_r+0x100>
 800fcdc:	06d9      	lsls	r1, r3, #27
 800fcde:	bf44      	itt	mi
 800fce0:	2220      	movmi	r2, #32
 800fce2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fce6:	071a      	lsls	r2, r3, #28
 800fce8:	bf44      	itt	mi
 800fcea:	222b      	movmi	r2, #43	; 0x2b
 800fcec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fcf0:	782a      	ldrb	r2, [r5, #0]
 800fcf2:	2a2a      	cmp	r2, #42	; 0x2a
 800fcf4:	d02c      	beq.n	800fd50 <_vfiprintf_r+0x110>
 800fcf6:	9a07      	ldr	r2, [sp, #28]
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	200a      	movs	r0, #10
 800fcfc:	46a8      	mov	r8, r5
 800fcfe:	3501      	adds	r5, #1
 800fd00:	f898 3000 	ldrb.w	r3, [r8]
 800fd04:	3b30      	subs	r3, #48	; 0x30
 800fd06:	2b09      	cmp	r3, #9
 800fd08:	d96d      	bls.n	800fde6 <_vfiprintf_r+0x1a6>
 800fd0a:	b371      	cbz	r1, 800fd6a <_vfiprintf_r+0x12a>
 800fd0c:	e026      	b.n	800fd5c <_vfiprintf_r+0x11c>
 800fd0e:	4b51      	ldr	r3, [pc, #324]	; (800fe54 <_vfiprintf_r+0x214>)
 800fd10:	429c      	cmp	r4, r3
 800fd12:	d101      	bne.n	800fd18 <_vfiprintf_r+0xd8>
 800fd14:	68b4      	ldr	r4, [r6, #8]
 800fd16:	e7a3      	b.n	800fc60 <_vfiprintf_r+0x20>
 800fd18:	4b4f      	ldr	r3, [pc, #316]	; (800fe58 <_vfiprintf_r+0x218>)
 800fd1a:	429c      	cmp	r4, r3
 800fd1c:	bf08      	it	eq
 800fd1e:	68f4      	ldreq	r4, [r6, #12]
 800fd20:	e79e      	b.n	800fc60 <_vfiprintf_r+0x20>
 800fd22:	4621      	mov	r1, r4
 800fd24:	4630      	mov	r0, r6
 800fd26:	f7ff fb9f 	bl	800f468 <__swsetup_r>
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	d09e      	beq.n	800fc6c <_vfiprintf_r+0x2c>
 800fd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd32:	b01d      	add	sp, #116	; 0x74
 800fd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd38:	2b25      	cmp	r3, #37	; 0x25
 800fd3a:	d0a7      	beq.n	800fc8c <_vfiprintf_r+0x4c>
 800fd3c:	46a8      	mov	r8, r5
 800fd3e:	e7a0      	b.n	800fc82 <_vfiprintf_r+0x42>
 800fd40:	4a43      	ldr	r2, [pc, #268]	; (800fe50 <_vfiprintf_r+0x210>)
 800fd42:	1a80      	subs	r0, r0, r2
 800fd44:	fa0b f000 	lsl.w	r0, fp, r0
 800fd48:	4318      	orrs	r0, r3
 800fd4a:	9004      	str	r0, [sp, #16]
 800fd4c:	4645      	mov	r5, r8
 800fd4e:	e7bb      	b.n	800fcc8 <_vfiprintf_r+0x88>
 800fd50:	9a03      	ldr	r2, [sp, #12]
 800fd52:	1d11      	adds	r1, r2, #4
 800fd54:	6812      	ldr	r2, [r2, #0]
 800fd56:	9103      	str	r1, [sp, #12]
 800fd58:	2a00      	cmp	r2, #0
 800fd5a:	db01      	blt.n	800fd60 <_vfiprintf_r+0x120>
 800fd5c:	9207      	str	r2, [sp, #28]
 800fd5e:	e004      	b.n	800fd6a <_vfiprintf_r+0x12a>
 800fd60:	4252      	negs	r2, r2
 800fd62:	f043 0302 	orr.w	r3, r3, #2
 800fd66:	9207      	str	r2, [sp, #28]
 800fd68:	9304      	str	r3, [sp, #16]
 800fd6a:	f898 3000 	ldrb.w	r3, [r8]
 800fd6e:	2b2e      	cmp	r3, #46	; 0x2e
 800fd70:	d110      	bne.n	800fd94 <_vfiprintf_r+0x154>
 800fd72:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fd76:	2b2a      	cmp	r3, #42	; 0x2a
 800fd78:	f108 0101 	add.w	r1, r8, #1
 800fd7c:	d137      	bne.n	800fdee <_vfiprintf_r+0x1ae>
 800fd7e:	9b03      	ldr	r3, [sp, #12]
 800fd80:	1d1a      	adds	r2, r3, #4
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	9203      	str	r2, [sp, #12]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	bfb8      	it	lt
 800fd8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd8e:	f108 0802 	add.w	r8, r8, #2
 800fd92:	9305      	str	r3, [sp, #20]
 800fd94:	4d31      	ldr	r5, [pc, #196]	; (800fe5c <_vfiprintf_r+0x21c>)
 800fd96:	f898 1000 	ldrb.w	r1, [r8]
 800fd9a:	2203      	movs	r2, #3
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f7f0 fa27 	bl	80001f0 <memchr>
 800fda2:	b140      	cbz	r0, 800fdb6 <_vfiprintf_r+0x176>
 800fda4:	2340      	movs	r3, #64	; 0x40
 800fda6:	1b40      	subs	r0, r0, r5
 800fda8:	fa03 f000 	lsl.w	r0, r3, r0
 800fdac:	9b04      	ldr	r3, [sp, #16]
 800fdae:	4303      	orrs	r3, r0
 800fdb0:	9304      	str	r3, [sp, #16]
 800fdb2:	f108 0801 	add.w	r8, r8, #1
 800fdb6:	f898 1000 	ldrb.w	r1, [r8]
 800fdba:	4829      	ldr	r0, [pc, #164]	; (800fe60 <_vfiprintf_r+0x220>)
 800fdbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdc0:	2206      	movs	r2, #6
 800fdc2:	f108 0701 	add.w	r7, r8, #1
 800fdc6:	f7f0 fa13 	bl	80001f0 <memchr>
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d034      	beq.n	800fe38 <_vfiprintf_r+0x1f8>
 800fdce:	4b25      	ldr	r3, [pc, #148]	; (800fe64 <_vfiprintf_r+0x224>)
 800fdd0:	bb03      	cbnz	r3, 800fe14 <_vfiprintf_r+0x1d4>
 800fdd2:	9b03      	ldr	r3, [sp, #12]
 800fdd4:	3307      	adds	r3, #7
 800fdd6:	f023 0307 	bic.w	r3, r3, #7
 800fdda:	3308      	adds	r3, #8
 800fddc:	9303      	str	r3, [sp, #12]
 800fdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde0:	444b      	add	r3, r9
 800fde2:	9309      	str	r3, [sp, #36]	; 0x24
 800fde4:	e74c      	b.n	800fc80 <_vfiprintf_r+0x40>
 800fde6:	fb00 3202 	mla	r2, r0, r2, r3
 800fdea:	2101      	movs	r1, #1
 800fdec:	e786      	b.n	800fcfc <_vfiprintf_r+0xbc>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	9305      	str	r3, [sp, #20]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	250a      	movs	r5, #10
 800fdf6:	4688      	mov	r8, r1
 800fdf8:	3101      	adds	r1, #1
 800fdfa:	f898 2000 	ldrb.w	r2, [r8]
 800fdfe:	3a30      	subs	r2, #48	; 0x30
 800fe00:	2a09      	cmp	r2, #9
 800fe02:	d903      	bls.n	800fe0c <_vfiprintf_r+0x1cc>
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d0c5      	beq.n	800fd94 <_vfiprintf_r+0x154>
 800fe08:	9005      	str	r0, [sp, #20]
 800fe0a:	e7c3      	b.n	800fd94 <_vfiprintf_r+0x154>
 800fe0c:	fb05 2000 	mla	r0, r5, r0, r2
 800fe10:	2301      	movs	r3, #1
 800fe12:	e7f0      	b.n	800fdf6 <_vfiprintf_r+0x1b6>
 800fe14:	ab03      	add	r3, sp, #12
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	4622      	mov	r2, r4
 800fe1a:	4b13      	ldr	r3, [pc, #76]	; (800fe68 <_vfiprintf_r+0x228>)
 800fe1c:	a904      	add	r1, sp, #16
 800fe1e:	4630      	mov	r0, r6
 800fe20:	f3af 8000 	nop.w
 800fe24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fe28:	4681      	mov	r9, r0
 800fe2a:	d1d8      	bne.n	800fdde <_vfiprintf_r+0x19e>
 800fe2c:	89a3      	ldrh	r3, [r4, #12]
 800fe2e:	065b      	lsls	r3, r3, #25
 800fe30:	f53f af7d 	bmi.w	800fd2e <_vfiprintf_r+0xee>
 800fe34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe36:	e77c      	b.n	800fd32 <_vfiprintf_r+0xf2>
 800fe38:	ab03      	add	r3, sp, #12
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <_vfiprintf_r+0x228>)
 800fe40:	a904      	add	r1, sp, #16
 800fe42:	4630      	mov	r0, r6
 800fe44:	f000 f888 	bl	800ff58 <_printf_i>
 800fe48:	e7ec      	b.n	800fe24 <_vfiprintf_r+0x1e4>
 800fe4a:	bf00      	nop
 800fe4c:	0801534c 	.word	0x0801534c
 800fe50:	0801538c 	.word	0x0801538c
 800fe54:	0801536c 	.word	0x0801536c
 800fe58:	0801532c 	.word	0x0801532c
 800fe5c:	08015392 	.word	0x08015392
 800fe60:	08015396 	.word	0x08015396
 800fe64:	00000000 	.word	0x00000000
 800fe68:	0800fc1d 	.word	0x0800fc1d

0800fe6c <_printf_common>:
 800fe6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe70:	4691      	mov	r9, r2
 800fe72:	461f      	mov	r7, r3
 800fe74:	688a      	ldr	r2, [r1, #8]
 800fe76:	690b      	ldr	r3, [r1, #16]
 800fe78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	bfb8      	it	lt
 800fe80:	4613      	movlt	r3, r2
 800fe82:	f8c9 3000 	str.w	r3, [r9]
 800fe86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	b112      	cbz	r2, 800fe96 <_printf_common+0x2a>
 800fe90:	3301      	adds	r3, #1
 800fe92:	f8c9 3000 	str.w	r3, [r9]
 800fe96:	6823      	ldr	r3, [r4, #0]
 800fe98:	0699      	lsls	r1, r3, #26
 800fe9a:	bf42      	ittt	mi
 800fe9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fea0:	3302      	addmi	r3, #2
 800fea2:	f8c9 3000 	strmi.w	r3, [r9]
 800fea6:	6825      	ldr	r5, [r4, #0]
 800fea8:	f015 0506 	ands.w	r5, r5, #6
 800feac:	d107      	bne.n	800febe <_printf_common+0x52>
 800feae:	f104 0a19 	add.w	sl, r4, #25
 800feb2:	68e3      	ldr	r3, [r4, #12]
 800feb4:	f8d9 2000 	ldr.w	r2, [r9]
 800feb8:	1a9b      	subs	r3, r3, r2
 800feba:	429d      	cmp	r5, r3
 800febc:	db29      	blt.n	800ff12 <_printf_common+0xa6>
 800febe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fec2:	6822      	ldr	r2, [r4, #0]
 800fec4:	3300      	adds	r3, #0
 800fec6:	bf18      	it	ne
 800fec8:	2301      	movne	r3, #1
 800feca:	0692      	lsls	r2, r2, #26
 800fecc:	d42e      	bmi.n	800ff2c <_printf_common+0xc0>
 800fece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fed2:	4639      	mov	r1, r7
 800fed4:	4630      	mov	r0, r6
 800fed6:	47c0      	blx	r8
 800fed8:	3001      	adds	r0, #1
 800feda:	d021      	beq.n	800ff20 <_printf_common+0xb4>
 800fedc:	6823      	ldr	r3, [r4, #0]
 800fede:	68e5      	ldr	r5, [r4, #12]
 800fee0:	f8d9 2000 	ldr.w	r2, [r9]
 800fee4:	f003 0306 	and.w	r3, r3, #6
 800fee8:	2b04      	cmp	r3, #4
 800feea:	bf08      	it	eq
 800feec:	1aad      	subeq	r5, r5, r2
 800feee:	68a3      	ldr	r3, [r4, #8]
 800fef0:	6922      	ldr	r2, [r4, #16]
 800fef2:	bf0c      	ite	eq
 800fef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fef8:	2500      	movne	r5, #0
 800fefa:	4293      	cmp	r3, r2
 800fefc:	bfc4      	itt	gt
 800fefe:	1a9b      	subgt	r3, r3, r2
 800ff00:	18ed      	addgt	r5, r5, r3
 800ff02:	f04f 0900 	mov.w	r9, #0
 800ff06:	341a      	adds	r4, #26
 800ff08:	454d      	cmp	r5, r9
 800ff0a:	d11b      	bne.n	800ff44 <_printf_common+0xd8>
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff12:	2301      	movs	r3, #1
 800ff14:	4652      	mov	r2, sl
 800ff16:	4639      	mov	r1, r7
 800ff18:	4630      	mov	r0, r6
 800ff1a:	47c0      	blx	r8
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	d103      	bne.n	800ff28 <_printf_common+0xbc>
 800ff20:	f04f 30ff 	mov.w	r0, #4294967295
 800ff24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff28:	3501      	adds	r5, #1
 800ff2a:	e7c2      	b.n	800feb2 <_printf_common+0x46>
 800ff2c:	18e1      	adds	r1, r4, r3
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	2030      	movs	r0, #48	; 0x30
 800ff32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff36:	4422      	add	r2, r4
 800ff38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff40:	3302      	adds	r3, #2
 800ff42:	e7c4      	b.n	800fece <_printf_common+0x62>
 800ff44:	2301      	movs	r3, #1
 800ff46:	4622      	mov	r2, r4
 800ff48:	4639      	mov	r1, r7
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	47c0      	blx	r8
 800ff4e:	3001      	adds	r0, #1
 800ff50:	d0e6      	beq.n	800ff20 <_printf_common+0xb4>
 800ff52:	f109 0901 	add.w	r9, r9, #1
 800ff56:	e7d7      	b.n	800ff08 <_printf_common+0x9c>

0800ff58 <_printf_i>:
 800ff58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff5c:	4617      	mov	r7, r2
 800ff5e:	7e0a      	ldrb	r2, [r1, #24]
 800ff60:	b085      	sub	sp, #20
 800ff62:	2a6e      	cmp	r2, #110	; 0x6e
 800ff64:	4698      	mov	r8, r3
 800ff66:	4606      	mov	r6, r0
 800ff68:	460c      	mov	r4, r1
 800ff6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff6c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800ff70:	f000 80bc 	beq.w	80100ec <_printf_i+0x194>
 800ff74:	d81a      	bhi.n	800ffac <_printf_i+0x54>
 800ff76:	2a63      	cmp	r2, #99	; 0x63
 800ff78:	d02e      	beq.n	800ffd8 <_printf_i+0x80>
 800ff7a:	d80a      	bhi.n	800ff92 <_printf_i+0x3a>
 800ff7c:	2a00      	cmp	r2, #0
 800ff7e:	f000 80c8 	beq.w	8010112 <_printf_i+0x1ba>
 800ff82:	2a58      	cmp	r2, #88	; 0x58
 800ff84:	f000 808a 	beq.w	801009c <_printf_i+0x144>
 800ff88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ff90:	e02a      	b.n	800ffe8 <_printf_i+0x90>
 800ff92:	2a64      	cmp	r2, #100	; 0x64
 800ff94:	d001      	beq.n	800ff9a <_printf_i+0x42>
 800ff96:	2a69      	cmp	r2, #105	; 0x69
 800ff98:	d1f6      	bne.n	800ff88 <_printf_i+0x30>
 800ff9a:	6821      	ldr	r1, [r4, #0]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ffa2:	d023      	beq.n	800ffec <_printf_i+0x94>
 800ffa4:	1d11      	adds	r1, r2, #4
 800ffa6:	6019      	str	r1, [r3, #0]
 800ffa8:	6813      	ldr	r3, [r2, #0]
 800ffaa:	e027      	b.n	800fffc <_printf_i+0xa4>
 800ffac:	2a73      	cmp	r2, #115	; 0x73
 800ffae:	f000 80b4 	beq.w	801011a <_printf_i+0x1c2>
 800ffb2:	d808      	bhi.n	800ffc6 <_printf_i+0x6e>
 800ffb4:	2a6f      	cmp	r2, #111	; 0x6f
 800ffb6:	d02a      	beq.n	801000e <_printf_i+0xb6>
 800ffb8:	2a70      	cmp	r2, #112	; 0x70
 800ffba:	d1e5      	bne.n	800ff88 <_printf_i+0x30>
 800ffbc:	680a      	ldr	r2, [r1, #0]
 800ffbe:	f042 0220 	orr.w	r2, r2, #32
 800ffc2:	600a      	str	r2, [r1, #0]
 800ffc4:	e003      	b.n	800ffce <_printf_i+0x76>
 800ffc6:	2a75      	cmp	r2, #117	; 0x75
 800ffc8:	d021      	beq.n	801000e <_printf_i+0xb6>
 800ffca:	2a78      	cmp	r2, #120	; 0x78
 800ffcc:	d1dc      	bne.n	800ff88 <_printf_i+0x30>
 800ffce:	2278      	movs	r2, #120	; 0x78
 800ffd0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ffd4:	496e      	ldr	r1, [pc, #440]	; (8010190 <_printf_i+0x238>)
 800ffd6:	e064      	b.n	80100a2 <_printf_i+0x14a>
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800ffde:	1d11      	adds	r1, r2, #4
 800ffe0:	6019      	str	r1, [r3, #0]
 800ffe2:	6813      	ldr	r3, [r2, #0]
 800ffe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e0a3      	b.n	8010134 <_printf_i+0x1dc>
 800ffec:	f011 0f40 	tst.w	r1, #64	; 0x40
 800fff0:	f102 0104 	add.w	r1, r2, #4
 800fff4:	6019      	str	r1, [r3, #0]
 800fff6:	d0d7      	beq.n	800ffa8 <_printf_i+0x50>
 800fff8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	da03      	bge.n	8010008 <_printf_i+0xb0>
 8010000:	222d      	movs	r2, #45	; 0x2d
 8010002:	425b      	negs	r3, r3
 8010004:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010008:	4962      	ldr	r1, [pc, #392]	; (8010194 <_printf_i+0x23c>)
 801000a:	220a      	movs	r2, #10
 801000c:	e017      	b.n	801003e <_printf_i+0xe6>
 801000e:	6820      	ldr	r0, [r4, #0]
 8010010:	6819      	ldr	r1, [r3, #0]
 8010012:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010016:	d003      	beq.n	8010020 <_printf_i+0xc8>
 8010018:	1d08      	adds	r0, r1, #4
 801001a:	6018      	str	r0, [r3, #0]
 801001c:	680b      	ldr	r3, [r1, #0]
 801001e:	e006      	b.n	801002e <_printf_i+0xd6>
 8010020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010024:	f101 0004 	add.w	r0, r1, #4
 8010028:	6018      	str	r0, [r3, #0]
 801002a:	d0f7      	beq.n	801001c <_printf_i+0xc4>
 801002c:	880b      	ldrh	r3, [r1, #0]
 801002e:	4959      	ldr	r1, [pc, #356]	; (8010194 <_printf_i+0x23c>)
 8010030:	2a6f      	cmp	r2, #111	; 0x6f
 8010032:	bf14      	ite	ne
 8010034:	220a      	movne	r2, #10
 8010036:	2208      	moveq	r2, #8
 8010038:	2000      	movs	r0, #0
 801003a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801003e:	6865      	ldr	r5, [r4, #4]
 8010040:	60a5      	str	r5, [r4, #8]
 8010042:	2d00      	cmp	r5, #0
 8010044:	f2c0 809c 	blt.w	8010180 <_printf_i+0x228>
 8010048:	6820      	ldr	r0, [r4, #0]
 801004a:	f020 0004 	bic.w	r0, r0, #4
 801004e:	6020      	str	r0, [r4, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d13f      	bne.n	80100d4 <_printf_i+0x17c>
 8010054:	2d00      	cmp	r5, #0
 8010056:	f040 8095 	bne.w	8010184 <_printf_i+0x22c>
 801005a:	4675      	mov	r5, lr
 801005c:	2a08      	cmp	r2, #8
 801005e:	d10b      	bne.n	8010078 <_printf_i+0x120>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	07da      	lsls	r2, r3, #31
 8010064:	d508      	bpl.n	8010078 <_printf_i+0x120>
 8010066:	6923      	ldr	r3, [r4, #16]
 8010068:	6862      	ldr	r2, [r4, #4]
 801006a:	429a      	cmp	r2, r3
 801006c:	bfde      	ittt	le
 801006e:	2330      	movle	r3, #48	; 0x30
 8010070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010078:	ebae 0305 	sub.w	r3, lr, r5
 801007c:	6123      	str	r3, [r4, #16]
 801007e:	f8cd 8000 	str.w	r8, [sp]
 8010082:	463b      	mov	r3, r7
 8010084:	aa03      	add	r2, sp, #12
 8010086:	4621      	mov	r1, r4
 8010088:	4630      	mov	r0, r6
 801008a:	f7ff feef 	bl	800fe6c <_printf_common>
 801008e:	3001      	adds	r0, #1
 8010090:	d155      	bne.n	801013e <_printf_i+0x1e6>
 8010092:	f04f 30ff 	mov.w	r0, #4294967295
 8010096:	b005      	add	sp, #20
 8010098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801009c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80100a0:	493c      	ldr	r1, [pc, #240]	; (8010194 <_printf_i+0x23c>)
 80100a2:	6822      	ldr	r2, [r4, #0]
 80100a4:	6818      	ldr	r0, [r3, #0]
 80100a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80100aa:	f100 0504 	add.w	r5, r0, #4
 80100ae:	601d      	str	r5, [r3, #0]
 80100b0:	d001      	beq.n	80100b6 <_printf_i+0x15e>
 80100b2:	6803      	ldr	r3, [r0, #0]
 80100b4:	e002      	b.n	80100bc <_printf_i+0x164>
 80100b6:	0655      	lsls	r5, r2, #25
 80100b8:	d5fb      	bpl.n	80100b2 <_printf_i+0x15a>
 80100ba:	8803      	ldrh	r3, [r0, #0]
 80100bc:	07d0      	lsls	r0, r2, #31
 80100be:	bf44      	itt	mi
 80100c0:	f042 0220 	orrmi.w	r2, r2, #32
 80100c4:	6022      	strmi	r2, [r4, #0]
 80100c6:	b91b      	cbnz	r3, 80100d0 <_printf_i+0x178>
 80100c8:	6822      	ldr	r2, [r4, #0]
 80100ca:	f022 0220 	bic.w	r2, r2, #32
 80100ce:	6022      	str	r2, [r4, #0]
 80100d0:	2210      	movs	r2, #16
 80100d2:	e7b1      	b.n	8010038 <_printf_i+0xe0>
 80100d4:	4675      	mov	r5, lr
 80100d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80100da:	fb02 3310 	mls	r3, r2, r0, r3
 80100de:	5ccb      	ldrb	r3, [r1, r3]
 80100e0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80100e4:	4603      	mov	r3, r0
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d1f5      	bne.n	80100d6 <_printf_i+0x17e>
 80100ea:	e7b7      	b.n	801005c <_printf_i+0x104>
 80100ec:	6808      	ldr	r0, [r1, #0]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	6949      	ldr	r1, [r1, #20]
 80100f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80100f6:	d004      	beq.n	8010102 <_printf_i+0x1aa>
 80100f8:	1d10      	adds	r0, r2, #4
 80100fa:	6018      	str	r0, [r3, #0]
 80100fc:	6813      	ldr	r3, [r2, #0]
 80100fe:	6019      	str	r1, [r3, #0]
 8010100:	e007      	b.n	8010112 <_printf_i+0x1ba>
 8010102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010106:	f102 0004 	add.w	r0, r2, #4
 801010a:	6018      	str	r0, [r3, #0]
 801010c:	6813      	ldr	r3, [r2, #0]
 801010e:	d0f6      	beq.n	80100fe <_printf_i+0x1a6>
 8010110:	8019      	strh	r1, [r3, #0]
 8010112:	2300      	movs	r3, #0
 8010114:	6123      	str	r3, [r4, #16]
 8010116:	4675      	mov	r5, lr
 8010118:	e7b1      	b.n	801007e <_printf_i+0x126>
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	1d11      	adds	r1, r2, #4
 801011e:	6019      	str	r1, [r3, #0]
 8010120:	6815      	ldr	r5, [r2, #0]
 8010122:	6862      	ldr	r2, [r4, #4]
 8010124:	2100      	movs	r1, #0
 8010126:	4628      	mov	r0, r5
 8010128:	f7f0 f862 	bl	80001f0 <memchr>
 801012c:	b108      	cbz	r0, 8010132 <_printf_i+0x1da>
 801012e:	1b40      	subs	r0, r0, r5
 8010130:	6060      	str	r0, [r4, #4]
 8010132:	6863      	ldr	r3, [r4, #4]
 8010134:	6123      	str	r3, [r4, #16]
 8010136:	2300      	movs	r3, #0
 8010138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801013c:	e79f      	b.n	801007e <_printf_i+0x126>
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	462a      	mov	r2, r5
 8010142:	4639      	mov	r1, r7
 8010144:	4630      	mov	r0, r6
 8010146:	47c0      	blx	r8
 8010148:	3001      	adds	r0, #1
 801014a:	d0a2      	beq.n	8010092 <_printf_i+0x13a>
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	079b      	lsls	r3, r3, #30
 8010150:	d507      	bpl.n	8010162 <_printf_i+0x20a>
 8010152:	2500      	movs	r5, #0
 8010154:	f104 0919 	add.w	r9, r4, #25
 8010158:	68e3      	ldr	r3, [r4, #12]
 801015a:	9a03      	ldr	r2, [sp, #12]
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	429d      	cmp	r5, r3
 8010160:	db05      	blt.n	801016e <_printf_i+0x216>
 8010162:	68e0      	ldr	r0, [r4, #12]
 8010164:	9b03      	ldr	r3, [sp, #12]
 8010166:	4298      	cmp	r0, r3
 8010168:	bfb8      	it	lt
 801016a:	4618      	movlt	r0, r3
 801016c:	e793      	b.n	8010096 <_printf_i+0x13e>
 801016e:	2301      	movs	r3, #1
 8010170:	464a      	mov	r2, r9
 8010172:	4639      	mov	r1, r7
 8010174:	4630      	mov	r0, r6
 8010176:	47c0      	blx	r8
 8010178:	3001      	adds	r0, #1
 801017a:	d08a      	beq.n	8010092 <_printf_i+0x13a>
 801017c:	3501      	adds	r5, #1
 801017e:	e7eb      	b.n	8010158 <_printf_i+0x200>
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1a7      	bne.n	80100d4 <_printf_i+0x17c>
 8010184:	780b      	ldrb	r3, [r1, #0]
 8010186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801018a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801018e:	e765      	b.n	801005c <_printf_i+0x104>
 8010190:	080153ae 	.word	0x080153ae
 8010194:	0801539d 	.word	0x0801539d

08010198 <_read_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4c07      	ldr	r4, [pc, #28]	; (80101b8 <_read_r+0x20>)
 801019c:	4605      	mov	r5, r0
 801019e:	4608      	mov	r0, r1
 80101a0:	4611      	mov	r1, r2
 80101a2:	2200      	movs	r2, #0
 80101a4:	6022      	str	r2, [r4, #0]
 80101a6:	461a      	mov	r2, r3
 80101a8:	f7f1 faee 	bl	8001788 <_read>
 80101ac:	1c43      	adds	r3, r0, #1
 80101ae:	d102      	bne.n	80101b6 <_read_r+0x1e>
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	b103      	cbz	r3, 80101b6 <_read_r+0x1e>
 80101b4:	602b      	str	r3, [r5, #0]
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	2000300c 	.word	0x2000300c

080101bc <_fstat_r>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	4c07      	ldr	r4, [pc, #28]	; (80101dc <_fstat_r+0x20>)
 80101c0:	2300      	movs	r3, #0
 80101c2:	4605      	mov	r5, r0
 80101c4:	4608      	mov	r0, r1
 80101c6:	4611      	mov	r1, r2
 80101c8:	6023      	str	r3, [r4, #0]
 80101ca:	f7f1 fb08 	bl	80017de <_fstat>
 80101ce:	1c43      	adds	r3, r0, #1
 80101d0:	d102      	bne.n	80101d8 <_fstat_r+0x1c>
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	b103      	cbz	r3, 80101d8 <_fstat_r+0x1c>
 80101d6:	602b      	str	r3, [r5, #0]
 80101d8:	bd38      	pop	{r3, r4, r5, pc}
 80101da:	bf00      	nop
 80101dc:	2000300c 	.word	0x2000300c

080101e0 <_isatty_r>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	4c06      	ldr	r4, [pc, #24]	; (80101fc <_isatty_r+0x1c>)
 80101e4:	2300      	movs	r3, #0
 80101e6:	4605      	mov	r5, r0
 80101e8:	4608      	mov	r0, r1
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	f7f1 fafc 	bl	80017e8 <_isatty>
 80101f0:	1c43      	adds	r3, r0, #1
 80101f2:	d102      	bne.n	80101fa <_isatty_r+0x1a>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	b103      	cbz	r3, 80101fa <_isatty_r+0x1a>
 80101f8:	602b      	str	r3, [r5, #0]
 80101fa:	bd38      	pop	{r3, r4, r5, pc}
 80101fc:	2000300c 	.word	0x2000300c

08010200 <_realloc_r>:
 8010200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010202:	4607      	mov	r7, r0
 8010204:	4614      	mov	r4, r2
 8010206:	460e      	mov	r6, r1
 8010208:	b921      	cbnz	r1, 8010214 <_realloc_r+0x14>
 801020a:	4611      	mov	r1, r2
 801020c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010210:	f7fe beae 	b.w	800ef70 <_malloc_r>
 8010214:	b922      	cbnz	r2, 8010220 <_realloc_r+0x20>
 8010216:	f7fe fe5d 	bl	800eed4 <_free_r>
 801021a:	4625      	mov	r5, r4
 801021c:	4628      	mov	r0, r5
 801021e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010220:	f000 f814 	bl	801024c <_malloc_usable_size_r>
 8010224:	4284      	cmp	r4, r0
 8010226:	d90f      	bls.n	8010248 <_realloc_r+0x48>
 8010228:	4621      	mov	r1, r4
 801022a:	4638      	mov	r0, r7
 801022c:	f7fe fea0 	bl	800ef70 <_malloc_r>
 8010230:	4605      	mov	r5, r0
 8010232:	2800      	cmp	r0, #0
 8010234:	d0f2      	beq.n	801021c <_realloc_r+0x1c>
 8010236:	4631      	mov	r1, r6
 8010238:	4622      	mov	r2, r4
 801023a:	f7fe fe10 	bl	800ee5e <memcpy>
 801023e:	4631      	mov	r1, r6
 8010240:	4638      	mov	r0, r7
 8010242:	f7fe fe47 	bl	800eed4 <_free_r>
 8010246:	e7e9      	b.n	801021c <_realloc_r+0x1c>
 8010248:	4635      	mov	r5, r6
 801024a:	e7e7      	b.n	801021c <_realloc_r+0x1c>

0801024c <_malloc_usable_size_r>:
 801024c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8010250:	2800      	cmp	r0, #0
 8010252:	f1a0 0004 	sub.w	r0, r0, #4
 8010256:	bfbc      	itt	lt
 8010258:	580b      	ldrlt	r3, [r1, r0]
 801025a:	18c0      	addlt	r0, r0, r3
 801025c:	4770      	bx	lr
	...

08010260 <_init>:
 8010260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010262:	bf00      	nop
 8010264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010266:	bc08      	pop	{r3}
 8010268:	469e      	mov	lr, r3
 801026a:	4770      	bx	lr

0801026c <_fini>:
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	bf00      	nop
 8010270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010272:	bc08      	pop	{r3}
 8010274:	469e      	mov	lr, r3
 8010276:	4770      	bx	lr
